
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f84  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000fc  20000000  00003f84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000458  200000fc  00004080  000200fc  2**2
                  ALLOC
  3 .stack        00002004  20000554  000044d8  000200fc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
  6 .debug_info   00039a1a  00000000  00000000  0002017d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005034  00000000  00000000  00059b97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00008a7d  00000000  00000000  0005ebcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000858  00000000  00000000  00067648  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b78  00000000  00000000  00067ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001d6db  00000000  00000000  00068a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00011213  00000000  00000000  000860f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008d333  00000000  00000000  00097306  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000150c  00000000  00000000  0012463c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	58 25 00 20 45 37 00 00 41 37 00 00 41 37 00 00     X%. E7..A7..A7..
	...
      2c:	41 37 00 00 00 00 00 00 00 00 00 00 41 37 00 00     A7..........A7..
      3c:	41 37 00 00 41 37 00 00 41 37 00 00 41 37 00 00     A7..A7..A7..A7..
      4c:	41 37 00 00 09 0d 00 00 41 37 00 00 41 37 00 00     A7......A7..A7..
      5c:	51 2e 00 00 41 37 00 00 25 10 00 00 35 10 00 00     Q...A7..%...5...
      6c:	45 10 00 00 55 10 00 00 00 00 00 00 00 00 00 00     E...U...........
      7c:	41 37 00 00 41 37 00 00 41 37 00 00 41 37 00 00     A7..A7..A7..A7..
      8c:	41 37 00 00 41 37 00 00 00 00 00 00 00 00 00 00     A7..A7..........
      9c:	41 37 00 00 41 37 00 00 41 37 00 00 41 37 00 00     A7..A7..A7..A7..
      ac:	41 37 00 00 00 00 00 00                             A7......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000fc 	.word	0x200000fc
      d4:	00000000 	.word	0x00000000
      d8:	00003f84 	.word	0x00003f84

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000100 	.word	0x20000100
     108:	00003f84 	.word	0x00003f84
     10c:	00003f84 	.word	0x00003f84
     110:	00000000 	.word	0x00000000

00000114 <ui_init>:

#include <asf.h>
#include "ui.h"

void ui_init(void)
{
     114:	b530      	push	{r4, r5, lr}
     116:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     118:	ac01      	add	r4, sp, #4
     11a:	2300      	movs	r3, #0
     11c:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     11e:	2201      	movs	r2, #1
     120:	7062      	strb	r2, [r4, #1]
	config->powersave  = false;
     122:	70a3      	strb	r3, [r4, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(BUTTON_0_PIN, &config_port_pin);
     124:	0021      	movs	r1, r4
     126:	200e      	movs	r0, #14
     128:	4d04      	ldr	r5, [pc, #16]	; (13c <ui_init+0x28>)
     12a:	47a8      	blx	r5
	port_pin_set_config(BUTTON_1_PIN, &config_port_pin); 
     12c:	0021      	movs	r1, r4
     12e:	200f      	movs	r0, #15
     130:	47a8      	blx	r5
	port_pin_set_config(PIN_PA00, &config_port_pin); 
     132:	0021      	movs	r1, r4
     134:	2000      	movs	r0, #0
     136:	47a8      	blx	r5
}
     138:	b003      	add	sp, #12
     13a:	bd30      	pop	{r4, r5, pc}
     13c:	00000de1 	.word	0x00000de1

00000140 <ui_powerdown>:

void ui_powerdown(void)
{
	//LED_Off(LED_0_PIN);
}
     140:	4770      	bx	lr

00000142 <ui_wakeup_enable>:

void ui_wakeup_enable(void)
{
	//extint_chan_enable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
	//extint_chan_enable_callback(BUTTON_1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
}
     142:	4770      	bx	lr

00000144 <ui_wakeup_disable>:

void ui_wakeup_disable(void)
{
	//extint_chan_disable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
	//extint_chan_disable_callback(BUTTON_1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
}
     144:	4770      	bx	lr

00000146 <ui_wakeup>:

void ui_wakeup(void)
{
	//LED_On(LED_0_PIN);
}
     146:	4770      	bx	lr

00000148 <ui_process>:

void setLED(uint8_t index, uint8_t brightness, uint8_t r, uint8_t g, uint8_t b);

void ui_process(uint16_t framenumber)
{
     148:	b510      	push	{r4, lr}
     14a:	b082      	sub	sp, #8
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     14c:	4b26      	ldr	r3, [pc, #152]	; (1e8 <ui_process+0xa0>)
     14e:	6a1b      	ldr	r3, [r3, #32]
     150:	2280      	movs	r2, #128	; 0x80
     152:	01d2      	lsls	r2, r2, #7
     154:	4013      	ands	r3, r2
	bool b_btn_state;
	static bool btn_last_state = false;

	b_btn_state = !port_pin_get_input_level(BUTTON_0_PIN);
     156:	425a      	negs	r2, r3
     158:	415a      	adcs	r2, r3
     15a:	b2d2      	uxtb	r2, r2
	if (b_btn_state != btn_last_state) {
     15c:	4923      	ldr	r1, [pc, #140]	; (1ec <ui_process+0xa4>)
     15e:	7809      	ldrb	r1, [r1, #0]
     160:	4291      	cmp	r1, r2
     162:	d00e      	beq.n	182 <ui_process+0x3a>
		btn_last_state = b_btn_state;
     164:	4921      	ldr	r1, [pc, #132]	; (1ec <ui_process+0xa4>)
     166:	700a      	strb	r2, [r1, #0]
		
		if(b_btn_state) {
     168:	2b00      	cmp	r3, #0
     16a:	d126      	bne.n	1ba <ui_process+0x72>
			udi_hid_kbd_down(HID_E);
     16c:	2008      	movs	r0, #8
     16e:	4b20      	ldr	r3, [pc, #128]	; (1f0 <ui_process+0xa8>)
     170:	4798      	blx	r3
			setLED(0, 8, 1, 135, 255);
     172:	23ff      	movs	r3, #255	; 0xff
     174:	9300      	str	r3, [sp, #0]
     176:	3b78      	subs	r3, #120	; 0x78
     178:	2201      	movs	r2, #1
     17a:	2108      	movs	r1, #8
     17c:	2000      	movs	r0, #0
     17e:	4c1d      	ldr	r4, [pc, #116]	; (1f4 <ui_process+0xac>)
     180:	47a0      	blx	r4
     182:	4b19      	ldr	r3, [pc, #100]	; (1e8 <ui_process+0xa0>)
     184:	6a1b      	ldr	r3, [r3, #32]
     186:	2280      	movs	r2, #128	; 0x80
     188:	0212      	lsls	r2, r2, #8
     18a:	4013      	ands	r3, r2
	}
	
	bool b_btn_state2;
	static bool btn_last_state2 = false;

	b_btn_state2 = !port_pin_get_input_level(BUTTON_1_PIN);
     18c:	425a      	negs	r2, r3
     18e:	415a      	adcs	r2, r3
     190:	b2d2      	uxtb	r2, r2
	if (b_btn_state2 != btn_last_state2) {
     192:	4919      	ldr	r1, [pc, #100]	; (1f8 <ui_process+0xb0>)
     194:	7809      	ldrb	r1, [r1, #0]
     196:	4291      	cmp	r1, r2
     198:	d00d      	beq.n	1b6 <ui_process+0x6e>
		btn_last_state2 = b_btn_state2;
     19a:	4917      	ldr	r1, [pc, #92]	; (1f8 <ui_process+0xb0>)
     19c:	700a      	strb	r2, [r1, #0]
		
		if(b_btn_state2) {
     19e:	2b00      	cmp	r3, #0
     1a0:	d016      	beq.n	1d0 <ui_process+0x88>
			udi_hid_kbd_down(HID_R);
			setLED(1, 8, 1, 135, 255);			
		} else {
			udi_hid_kbd_up(HID_R);
     1a2:	2015      	movs	r0, #21
     1a4:	4b15      	ldr	r3, [pc, #84]	; (1fc <ui_process+0xb4>)
     1a6:	4798      	blx	r3
			setLED(1, 0, 0, 0, 0);			
     1a8:	2300      	movs	r3, #0
     1aa:	9300      	str	r3, [sp, #0]
     1ac:	2200      	movs	r2, #0
     1ae:	2100      	movs	r1, #0
     1b0:	2001      	movs	r0, #1
     1b2:	4c10      	ldr	r4, [pc, #64]	; (1f4 <ui_process+0xac>)
     1b4:	47a0      	blx	r4
		}
	}
}
     1b6:	b002      	add	sp, #8
     1b8:	bd10      	pop	{r4, pc}
			udi_hid_kbd_up(HID_E);
     1ba:	2008      	movs	r0, #8
     1bc:	4b0f      	ldr	r3, [pc, #60]	; (1fc <ui_process+0xb4>)
     1be:	4798      	blx	r3
			setLED(0, 0, 0, 0, 0);
     1c0:	2300      	movs	r3, #0
     1c2:	9300      	str	r3, [sp, #0]
     1c4:	2200      	movs	r2, #0
     1c6:	2100      	movs	r1, #0
     1c8:	2000      	movs	r0, #0
     1ca:	4c0a      	ldr	r4, [pc, #40]	; (1f4 <ui_process+0xac>)
     1cc:	47a0      	blx	r4
     1ce:	e7d8      	b.n	182 <ui_process+0x3a>
			udi_hid_kbd_down(HID_R);
     1d0:	2015      	movs	r0, #21
     1d2:	4b07      	ldr	r3, [pc, #28]	; (1f0 <ui_process+0xa8>)
     1d4:	4798      	blx	r3
			setLED(1, 8, 1, 135, 255);			
     1d6:	23ff      	movs	r3, #255	; 0xff
     1d8:	9300      	str	r3, [sp, #0]
     1da:	3b78      	subs	r3, #120	; 0x78
     1dc:	2201      	movs	r2, #1
     1de:	2108      	movs	r1, #8
     1e0:	2001      	movs	r0, #1
     1e2:	4c04      	ldr	r4, [pc, #16]	; (1f4 <ui_process+0xac>)
     1e4:	47a0      	blx	r4
     1e6:	e7e6      	b.n	1b6 <ui_process+0x6e>
     1e8:	41004400 	.word	0x41004400
     1ec:	20000118 	.word	0x20000118
     1f0:	000003f9 	.word	0x000003f9
     1f4:	00003941 	.word	0x00003941
     1f8:	20000119 	.word	0x20000119
     1fc:	00000339 	.word	0x00000339

00000200 <ui_kbd_led>:

void ui_kbd_led(uint8_t value)
{
	//UNUSED(value);
}
     200:	4770      	bx	lr

00000202 <udi_hid_kbd_getsetting>:


uint8_t udi_hid_kbd_getsetting(void)
{
	return 0;
}
     202:	2000      	movs	r0, #0
     204:	4770      	bx	lr
	...

00000208 <udi_hid_kbd_setreport>:


static bool udi_hid_kbd_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8))
     208:	4b0b      	ldr	r3, [pc, #44]	; (238 <udi_hid_kbd_setreport+0x30>)
     20a:	885b      	ldrh	r3, [r3, #2]
     20c:	0a1a      	lsrs	r2, r3, #8
		udd_g_ctrlreq.payload = &udi_hid_kbd_report_set;
		udd_g_ctrlreq.callback = udi_hid_kbd_setreport_valid;
		udd_g_ctrlreq.payload_size = 1;
		return true;
	}
	return false;
     20e:	2000      	movs	r0, #0
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8))
     210:	2a02      	cmp	r2, #2
     212:	d000      	beq.n	216 <udi_hid_kbd_setreport+0xe>
}
     214:	4770      	bx	lr
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
     216:	32fd      	adds	r2, #253	; 0xfd
     218:	421a      	tst	r2, r3
     21a:	d1fb      	bne.n	214 <udi_hid_kbd_setreport+0xc>
			&& (1 == udd_g_ctrlreq.req.wLength)) {
     21c:	4b06      	ldr	r3, [pc, #24]	; (238 <udi_hid_kbd_setreport+0x30>)
     21e:	88db      	ldrh	r3, [r3, #6]
     220:	2b01      	cmp	r3, #1
     222:	d1f7      	bne.n	214 <udi_hid_kbd_setreport+0xc>
		udd_g_ctrlreq.payload = &udi_hid_kbd_report_set;
     224:	4b04      	ldr	r3, [pc, #16]	; (238 <udi_hid_kbd_setreport+0x30>)
     226:	4a05      	ldr	r2, [pc, #20]	; (23c <udi_hid_kbd_setreport+0x34>)
     228:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.callback = udi_hid_kbd_setreport_valid;
     22a:	4a05      	ldr	r2, [pc, #20]	; (240 <udi_hid_kbd_setreport+0x38>)
     22c:	611a      	str	r2, [r3, #16]
		udd_g_ctrlreq.payload_size = 1;
     22e:	2201      	movs	r2, #1
     230:	819a      	strh	r2, [r3, #12]
		return true;
     232:	3001      	adds	r0, #1
     234:	e7ee      	b.n	214 <udi_hid_kbd_setreport+0xc>
     236:	46c0      	nop			; (mov r8, r8)
     238:	200003f4 	.word	0x200003f4
     23c:	2000012c 	.word	0x2000012c
     240:	000002b5 	.word	0x000002b5

00000244 <udi_hid_kbd_enable>:
{
     244:	b510      	push	{r4, lr}
	udi_hid_kbd_rate = 0;
     246:	2400      	movs	r4, #0
     248:	4b07      	ldr	r3, [pc, #28]	; (268 <udi_hid_kbd_enable+0x24>)
     24a:	701c      	strb	r4, [r3, #0]
	udi_hid_kbd_protocol = 0;
     24c:	4b07      	ldr	r3, [pc, #28]	; (26c <udi_hid_kbd_enable+0x28>)
     24e:	701c      	strb	r4, [r3, #0]
	udi_hid_kbd_b_report_trans_ongoing = false;
     250:	4b07      	ldr	r3, [pc, #28]	; (270 <udi_hid_kbd_enable+0x2c>)
     252:	701c      	strb	r4, [r3, #0]
	memset(udi_hid_kbd_report, 0, UDI_HID_KBD_REPORT_SIZE);
     254:	2208      	movs	r2, #8
     256:	2100      	movs	r1, #0
     258:	4806      	ldr	r0, [pc, #24]	; (274 <udi_hid_kbd_enable+0x30>)
     25a:	4b07      	ldr	r3, [pc, #28]	; (278 <udi_hid_kbd_enable+0x34>)
     25c:	4798      	blx	r3
	udi_hid_kbd_b_report_valid = false;
     25e:	4b07      	ldr	r3, [pc, #28]	; (27c <udi_hid_kbd_enable+0x38>)
     260:	701c      	strb	r4, [r3, #0]
	return UDI_HID_KBD_ENABLE_EXT();
     262:	4b07      	ldr	r3, [pc, #28]	; (280 <udi_hid_kbd_enable+0x3c>)
     264:	4798      	blx	r3
}
     266:	bd10      	pop	{r4, pc}
     268:	20000120 	.word	0x20000120
     26c:	2000011c 	.word	0x2000011c
     270:	2000011a 	.word	0x2000011a
     274:	20000124 	.word	0x20000124
     278:	00003ed3 	.word	0x00003ed3
     27c:	2000011b 	.word	0x2000011b
     280:	00003b31 	.word	0x00003b31

00000284 <udi_hid_kbd_disable>:
{
     284:	b510      	push	{r4, lr}
	UDI_HID_KBD_DISABLE_EXT();
     286:	4b01      	ldr	r3, [pc, #4]	; (28c <udi_hid_kbd_disable+0x8>)
     288:	4798      	blx	r3
}
     28a:	bd10      	pop	{r4, pc}
     28c:	00003b41 	.word	0x00003b41

00000290 <udi_hid_kbd_setup>:
{
     290:	b510      	push	{r4, lr}
	return udi_hid_setup(&udi_hid_kbd_rate,
     292:	4b03      	ldr	r3, [pc, #12]	; (2a0 <udi_hid_kbd_setup+0x10>)
     294:	4a03      	ldr	r2, [pc, #12]	; (2a4 <udi_hid_kbd_setup+0x14>)
     296:	4904      	ldr	r1, [pc, #16]	; (2a8 <udi_hid_kbd_setup+0x18>)
     298:	4804      	ldr	r0, [pc, #16]	; (2ac <udi_hid_kbd_setup+0x1c>)
     29a:	4c05      	ldr	r4, [pc, #20]	; (2b0 <udi_hid_kbd_setup+0x20>)
     29c:	47a0      	blx	r4
}
     29e:	bd10      	pop	{r4, pc}
     2a0:	00000209 	.word	0x00000209
     2a4:	20000014 	.word	0x20000014
     2a8:	2000011c 	.word	0x2000011c
     2ac:	20000120 	.word	0x20000120
     2b0:	0000049d 	.word	0x0000049d

000002b4 <udi_hid_kbd_setreport_valid>:
		udi_hid_kbd_send_report();
	}
}

static void udi_hid_kbd_setreport_valid(void)
{
     2b4:	b510      	push	{r4, lr}
	UDI_HID_KBD_CHANGE_LED(udi_hid_kbd_report_set);
     2b6:	4b02      	ldr	r3, [pc, #8]	; (2c0 <udi_hid_kbd_setreport_valid+0xc>)
     2b8:	7818      	ldrb	r0, [r3, #0]
     2ba:	4b02      	ldr	r3, [pc, #8]	; (2c4 <udi_hid_kbd_setreport_valid+0x10>)
     2bc:	4798      	blx	r3
}
     2be:	bd10      	pop	{r4, pc}
     2c0:	2000012c 	.word	0x2000012c
     2c4:	00000201 	.word	0x00000201

000002c8 <udi_hid_kbd_send_report>:
{
     2c8:	b510      	push	{r4, lr}
     2ca:	b082      	sub	sp, #8
	if (udi_hid_kbd_b_report_trans_ongoing)
     2cc:	4b0b      	ldr	r3, [pc, #44]	; (2fc <udi_hid_kbd_send_report+0x34>)
     2ce:	781b      	ldrb	r3, [r3, #0]
		return false;
     2d0:	2000      	movs	r0, #0
	if (udi_hid_kbd_b_report_trans_ongoing)
     2d2:	2b00      	cmp	r3, #0
     2d4:	d001      	beq.n	2da <udi_hid_kbd_send_report+0x12>
}
     2d6:	b002      	add	sp, #8
     2d8:	bd10      	pop	{r4, pc}
	memcpy(udi_hid_kbd_report_trans, udi_hid_kbd_report,
     2da:	4a09      	ldr	r2, [pc, #36]	; (300 <udi_hid_kbd_send_report+0x38>)
     2dc:	4b09      	ldr	r3, [pc, #36]	; (304 <udi_hid_kbd_send_report+0x3c>)
     2de:	0011      	movs	r1, r2
     2e0:	cb11      	ldmia	r3!, {r0, r4}
     2e2:	c111      	stmia	r1!, {r0, r4}
	udi_hid_kbd_b_report_valid = false;
     2e4:	2100      	movs	r1, #0
     2e6:	4b08      	ldr	r3, [pc, #32]	; (308 <udi_hid_kbd_send_report+0x40>)
     2e8:	7019      	strb	r1, [r3, #0]
			udd_ep_run(	UDI_HID_KBD_EP_IN,
     2ea:	4b08      	ldr	r3, [pc, #32]	; (30c <udi_hid_kbd_send_report+0x44>)
     2ec:	9300      	str	r3, [sp, #0]
     2ee:	2308      	movs	r3, #8
     2f0:	2081      	movs	r0, #129	; 0x81
     2f2:	4c07      	ldr	r4, [pc, #28]	; (310 <udi_hid_kbd_send_report+0x48>)
     2f4:	47a0      	blx	r4
	udi_hid_kbd_b_report_trans_ongoing =
     2f6:	4a01      	ldr	r2, [pc, #4]	; (2fc <udi_hid_kbd_send_report+0x34>)
     2f8:	7010      	strb	r0, [r2, #0]
	return udi_hid_kbd_b_report_trans_ongoing;
     2fa:	e7ec      	b.n	2d6 <udi_hid_kbd_send_report+0xe>
     2fc:	2000011a 	.word	0x2000011a
     300:	20000130 	.word	0x20000130
     304:	20000124 	.word	0x20000124
     308:	2000011b 	.word	0x2000011b
     30c:	00000315 	.word	0x00000315
     310:	00002495 	.word	0x00002495

00000314 <udi_hid_kbd_report_sent>:
{
     314:	b510      	push	{r4, lr}
	udi_hid_kbd_b_report_trans_ongoing = false;
     316:	2200      	movs	r2, #0
     318:	4b04      	ldr	r3, [pc, #16]	; (32c <udi_hid_kbd_report_sent+0x18>)
     31a:	701a      	strb	r2, [r3, #0]
	if (udi_hid_kbd_b_report_valid) {
     31c:	4b04      	ldr	r3, [pc, #16]	; (330 <udi_hid_kbd_report_sent+0x1c>)
     31e:	781b      	ldrb	r3, [r3, #0]
     320:	2b00      	cmp	r3, #0
     322:	d100      	bne.n	326 <udi_hid_kbd_report_sent+0x12>
}
     324:	bd10      	pop	{r4, pc}
		udi_hid_kbd_send_report();
     326:	4b03      	ldr	r3, [pc, #12]	; (334 <udi_hid_kbd_report_sent+0x20>)
     328:	4798      	blx	r3
}
     32a:	e7fb      	b.n	324 <udi_hid_kbd_report_sent+0x10>
     32c:	2000011a 	.word	0x2000011a
     330:	2000011b 	.word	0x2000011b
     334:	000002c9 	.word	0x000002c9

00000338 <udi_hid_kbd_up>:
{
     338:	b530      	push	{r4, r5, lr}
     33a:	b083      	sub	sp, #12
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     33c:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     340:	425a      	negs	r2, r3
     342:	4153      	adcs	r3, r2
     344:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     346:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     348:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     34c:	2200      	movs	r2, #0
     34e:	4b26      	ldr	r3, [pc, #152]	; (3e8 <udi_hid_kbd_up+0xb0>)
     350:	701a      	strb	r2, [r3, #0]
	return flags;
     352:	9c01      	ldr	r4, [sp, #4]
		if (0 == udi_hid_kbd_report[i]) {
     354:	4b25      	ldr	r3, [pc, #148]	; (3ec <udi_hid_kbd_up+0xb4>)
     356:	789b      	ldrb	r3, [r3, #2]
     358:	2b00      	cmp	r3, #0
     35a:	d016      	beq.n	38a <udi_hid_kbd_up+0x52>
		if (key_id == udi_hid_kbd_report[i])
     35c:	4298      	cmp	r0, r3
     35e:	d041      	beq.n	3e4 <udi_hid_kbd_up+0xac>
     360:	4b22      	ldr	r3, [pc, #136]	; (3ec <udi_hid_kbd_up+0xb4>)
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     362:	3203      	adds	r2, #3
		if (0 == udi_hid_kbd_report[i]) {
     364:	78d9      	ldrb	r1, [r3, #3]
     366:	2900      	cmp	r1, #0
     368:	d00f      	beq.n	38a <udi_hid_kbd_up+0x52>
		if (key_id == udi_hid_kbd_report[i])
     36a:	4281      	cmp	r1, r0
     36c:	d016      	beq.n	39c <udi_hid_kbd_up+0x64>
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     36e:	3201      	adds	r2, #1
     370:	b2d2      	uxtb	r2, r2
     372:	3301      	adds	r3, #1
     374:	2a08      	cmp	r2, #8
     376:	d1f5      	bne.n	364 <udi_hid_kbd_up+0x2c>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     378:	2c00      	cmp	r4, #0
     37a:	d030      	beq.n	3de <udi_hid_kbd_up+0xa6>
		cpu_irq_enable();
     37c:	2201      	movs	r2, #1
     37e:	4b1a      	ldr	r3, [pc, #104]	; (3e8 <udi_hid_kbd_up+0xb0>)
     380:	701a      	strb	r2, [r3, #0]
     382:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     386:	b662      	cpsie	i
     388:	e029      	b.n	3de <udi_hid_kbd_up+0xa6>
	if (cpu_irq_is_enabled_flags(flags))
     38a:	2c00      	cmp	r4, #0
     38c:	d027      	beq.n	3de <udi_hid_kbd_up+0xa6>
		cpu_irq_enable();
     38e:	2201      	movs	r2, #1
     390:	4b15      	ldr	r3, [pc, #84]	; (3e8 <udi_hid_kbd_up+0xb0>)
     392:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
     394:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     398:	b662      	cpsie	i
     39a:	e020      	b.n	3de <udi_hid_kbd_up+0xa6>
	if (UDI_HID_KBD_REPORT_SIZE == i) {
     39c:	2a08      	cmp	r2, #8
     39e:	d0eb      	beq.n	378 <udi_hid_kbd_up+0x40>
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
     3a0:	2a06      	cmp	r2, #6
     3a2:	d80c      	bhi.n	3be <udi_hid_kbd_up+0x86>
     3a4:	4911      	ldr	r1, [pc, #68]	; (3ec <udi_hid_kbd_up+0xb4>)
     3a6:	188b      	adds	r3, r1, r2
     3a8:	1c55      	adds	r5, r2, #1
     3aa:	2006      	movs	r0, #6
     3ac:	1a82      	subs	r2, r0, r2
     3ae:	b2d2      	uxtb	r2, r2
     3b0:	18aa      	adds	r2, r5, r2
     3b2:	188a      	adds	r2, r1, r2
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
     3b4:	7859      	ldrb	r1, [r3, #1]
     3b6:	7019      	strb	r1, [r3, #0]
     3b8:	3301      	adds	r3, #1
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
     3ba:	4293      	cmp	r3, r2
     3bc:	d1fa      	bne.n	3b4 <udi_hid_kbd_up+0x7c>
	udi_hid_kbd_report[UDI_HID_KBD_REPORT_SIZE - 1] = 0x00;
     3be:	2200      	movs	r2, #0
     3c0:	4b0a      	ldr	r3, [pc, #40]	; (3ec <udi_hid_kbd_up+0xb4>)
     3c2:	71da      	strb	r2, [r3, #7]
	udi_hid_kbd_b_report_valid = true;
     3c4:	3201      	adds	r2, #1
     3c6:	4b0a      	ldr	r3, [pc, #40]	; (3f0 <udi_hid_kbd_up+0xb8>)
     3c8:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_send_report();
     3ca:	4b0a      	ldr	r3, [pc, #40]	; (3f4 <udi_hid_kbd_up+0xbc>)
     3cc:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
     3ce:	2c00      	cmp	r4, #0
     3d0:	d005      	beq.n	3de <udi_hid_kbd_up+0xa6>
		cpu_irq_enable();
     3d2:	2201      	movs	r2, #1
     3d4:	4b04      	ldr	r3, [pc, #16]	; (3e8 <udi_hid_kbd_up+0xb0>)
     3d6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
     3d8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     3dc:	b662      	cpsie	i
}
     3de:	2001      	movs	r0, #1
     3e0:	b003      	add	sp, #12
     3e2:	bd30      	pop	{r4, r5, pc}
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     3e4:	2202      	movs	r2, #2
     3e6:	e7dd      	b.n	3a4 <udi_hid_kbd_up+0x6c>
     3e8:	200000da 	.word	0x200000da
     3ec:	20000124 	.word	0x20000124
     3f0:	2000011b 	.word	0x2000011b
     3f4:	000002c9 	.word	0x000002c9

000003f8 <udi_hid_kbd_down>:
{
     3f8:	b510      	push	{r4, lr}
     3fa:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     3fc:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     400:	425a      	negs	r2, r3
     402:	4153      	adcs	r3, r2
     404:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     406:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     408:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     40c:	2200      	movs	r2, #0
     40e:	4b1f      	ldr	r3, [pc, #124]	; (48c <udi_hid_kbd_down+0x94>)
     410:	701a      	strb	r2, [r3, #0]
	return flags;
     412:	9c01      	ldr	r4, [sp, #4]
		if (0 == udi_hid_kbd_report[i])
     414:	4b1e      	ldr	r3, [pc, #120]	; (490 <udi_hid_kbd_down+0x98>)
     416:	789b      	ldrb	r3, [r3, #2]
     418:	2b00      	cmp	r3, #0
     41a:	d035      	beq.n	488 <udi_hid_kbd_down+0x90>
		if (key_id == udi_hid_kbd_report[i]) {
     41c:	4298      	cmp	r0, r3
     41e:	d015      	beq.n	44c <udi_hid_kbd_down+0x54>
     420:	4a1b      	ldr	r2, [pc, #108]	; (490 <udi_hid_kbd_down+0x98>)
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     422:	2303      	movs	r3, #3
		if (0 == udi_hid_kbd_report[i])
     424:	78d1      	ldrb	r1, [r2, #3]
     426:	2900      	cmp	r1, #0
     428:	d01a      	beq.n	460 <udi_hid_kbd_down+0x68>
		if (key_id == udi_hid_kbd_report[i]) {
     42a:	4281      	cmp	r1, r0
     42c:	d00e      	beq.n	44c <udi_hid_kbd_down+0x54>
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     42e:	3301      	adds	r3, #1
     430:	b2db      	uxtb	r3, r3
     432:	3201      	adds	r2, #1
     434:	2b08      	cmp	r3, #8
     436:	d1f5      	bne.n	424 <udi_hid_kbd_down+0x2c>
		return false;
     438:	2000      	movs	r0, #0
	if (cpu_irq_is_enabled_flags(flags))
     43a:	2c00      	cmp	r4, #0
     43c:	d022      	beq.n	484 <udi_hid_kbd_down+0x8c>
		cpu_irq_enable();
     43e:	2201      	movs	r2, #1
     440:	4b12      	ldr	r3, [pc, #72]	; (48c <udi_hid_kbd_down+0x94>)
     442:	701a      	strb	r2, [r3, #0]
     444:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     448:	b662      	cpsie	i
     44a:	e01b      	b.n	484 <udi_hid_kbd_down+0x8c>
			return true;
     44c:	2001      	movs	r0, #1
	if (cpu_irq_is_enabled_flags(flags))
     44e:	2c00      	cmp	r4, #0
     450:	d018      	beq.n	484 <udi_hid_kbd_down+0x8c>
		cpu_irq_enable();
     452:	2201      	movs	r2, #1
     454:	4b0d      	ldr	r3, [pc, #52]	; (48c <udi_hid_kbd_down+0x94>)
     456:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
     458:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     45c:	b662      	cpsie	i
     45e:	e011      	b.n	484 <udi_hid_kbd_down+0x8c>
	if (UDI_HID_KBD_REPORT_SIZE == i) {
     460:	2b08      	cmp	r3, #8
     462:	d0e9      	beq.n	438 <udi_hid_kbd_down+0x40>
	udi_hid_kbd_report[i] = key_id;
     464:	4a0a      	ldr	r2, [pc, #40]	; (490 <udi_hid_kbd_down+0x98>)
     466:	54d0      	strb	r0, [r2, r3]
	udi_hid_kbd_b_report_valid = true;
     468:	2201      	movs	r2, #1
     46a:	4b0a      	ldr	r3, [pc, #40]	; (494 <udi_hid_kbd_down+0x9c>)
     46c:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_send_report();
     46e:	4b0a      	ldr	r3, [pc, #40]	; (498 <udi_hid_kbd_down+0xa0>)
     470:	4798      	blx	r3
	return true;
     472:	2001      	movs	r0, #1
	if (cpu_irq_is_enabled_flags(flags))
     474:	2c00      	cmp	r4, #0
     476:	d005      	beq.n	484 <udi_hid_kbd_down+0x8c>
		cpu_irq_enable();
     478:	2201      	movs	r2, #1
     47a:	4b04      	ldr	r3, [pc, #16]	; (48c <udi_hid_kbd_down+0x94>)
     47c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
     47e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     482:	b662      	cpsie	i
}
     484:	b002      	add	sp, #8
     486:	bd10      	pop	{r4, pc}
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     488:	2302      	movs	r3, #2
     48a:	e7eb      	b.n	464 <udi_hid_kbd_down+0x6c>
     48c:	200000da 	.word	0x200000da
     490:	20000124 	.word	0x20000124
     494:	2000011b 	.word	0x2000011b
     498:	000002c9 	.word	0x000002c9

0000049c <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
     49c:	b570      	push	{r4, r5, r6, lr}
     49e:	0005      	movs	r5, r0
     4a0:	0014      	movs	r4, r2
	if (Udd_setup_is_in()) {
     4a2:	4a3b      	ldr	r2, [pc, #236]	; (590 <udi_hid_setup+0xf4>)
     4a4:	7812      	ldrb	r2, [r2, #0]
     4a6:	b250      	sxtb	r0, r2
     4a8:	2800      	cmp	r0, #0
     4aa:	db05      	blt.n	4b8 <udi_hid_setup+0x1c>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     4ac:	2460      	movs	r4, #96	; 0x60
     4ae:	4022      	ands	r2, r4
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
     4b0:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     4b2:	2a20      	cmp	r2, #32
     4b4:	d04f      	beq.n	556 <udi_hid_setup+0xba>
}
     4b6:	bd70      	pop	{r4, r5, r6, pc}
     4b8:	2060      	movs	r0, #96	; 0x60
     4ba:	4002      	ands	r2, r0
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     4bc:	d103      	bne.n	4c6 <udi_hid_setup+0x2a>
			switch (udd_g_ctrlreq.req.bRequest) {
     4be:	4834      	ldr	r0, [pc, #208]	; (590 <udi_hid_setup+0xf4>)
     4c0:	7840      	ldrb	r0, [r0, #1]
     4c2:	2806      	cmp	r0, #6
     4c4:	d00d      	beq.n	4e2 <udi_hid_setup+0x46>
	return false;	// Request not supported
     4c6:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     4c8:	2a20      	cmp	r2, #32
     4ca:	d1f4      	bne.n	4b6 <udi_hid_setup+0x1a>
			switch (udd_g_ctrlreq.req.bRequest) {
     4cc:	4a30      	ldr	r2, [pc, #192]	; (590 <udi_hid_setup+0xf4>)
     4ce:	7852      	ldrb	r2, [r2, #1]
     4d0:	2a02      	cmp	r2, #2
     4d2:	d034      	beq.n	53e <udi_hid_setup+0xa2>
     4d4:	2a03      	cmp	r2, #3
     4d6:	d038      	beq.n	54a <udi_hid_setup+0xae>
	return false;	// Request not supported
     4d8:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
     4da:	2a01      	cmp	r2, #1
     4dc:	d1eb      	bne.n	4b6 <udi_hid_setup+0x1a>
				return setup_report();
     4de:	4798      	blx	r3
     4e0:	e7e9      	b.n	4b6 <udi_hid_setup+0x1a>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
     4e2:	4b2c      	ldr	r3, [pc, #176]	; (594 <udi_hid_setup+0xf8>)
     4e4:	4798      	blx	r3
     4e6:	0003      	movs	r3, r0
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
     4e8:	7a82      	ldrb	r2, [r0, #10]
		return false;
     4ea:	2000      	movs	r0, #0
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
     4ec:	2a21      	cmp	r2, #33	; 0x21
     4ee:	d1e2      	bne.n	4b6 <udi_hid_setup+0x1a>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     4f0:	4a27      	ldr	r2, [pc, #156]	; (590 <udi_hid_setup+0xf4>)
     4f2:	8852      	ldrh	r2, [r2, #2]
     4f4:	0a12      	lsrs	r2, r2, #8
     4f6:	2a21      	cmp	r2, #33	; 0x21
     4f8:	d013      	beq.n	522 <udi_hid_setup+0x86>
				ptr_hid_desc->bLength);
		return true;
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
     4fa:	7bd9      	ldrb	r1, [r3, #15]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
     4fc:	2000      	movs	r0, #0
	if (ptr_hid_desc->bRDescriptorType ==
     4fe:	4291      	cmp	r1, r2
     500:	d1d9      	bne.n	4b6 <udi_hid_setup+0x1a>
		udd_g_ctrlreq.payload = report_desc;
     502:	4a23      	ldr	r2, [pc, #140]	; (590 <udi_hid_setup+0xf4>)
     504:	6094      	str	r4, [r2, #8]
				min(udd_g_ctrlreq.req.wLength,
     506:	7c19      	ldrb	r1, [r3, #16]
     508:	3309      	adds	r3, #9
     50a:	7a1b      	ldrb	r3, [r3, #8]
     50c:	021b      	lsls	r3, r3, #8
     50e:	430b      	orrs	r3, r1
		udd_g_ctrlreq.payload_size =
     510:	88d0      	ldrh	r0, [r2, #6]
     512:	1c19      	adds	r1, r3, #0
     514:	b29b      	uxth	r3, r3
     516:	4283      	cmp	r3, r0
     518:	d900      	bls.n	51c <udi_hid_setup+0x80>
     51a:	1c01      	adds	r1, r0, #0
     51c:	8191      	strh	r1, [r2, #12]
		return true;
     51e:	2001      	movs	r0, #1
     520:	e7c9      	b.n	4b6 <udi_hid_setup+0x1a>
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
     522:	4a1b      	ldr	r2, [pc, #108]	; (590 <udi_hid_setup+0xf4>)
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
     524:	0019      	movs	r1, r3
     526:	3109      	adds	r1, #9
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
     528:	6091      	str	r1, [r2, #8]
				min(udd_g_ctrlreq.req.wLength,
     52a:	7a5b      	ldrb	r3, [r3, #9]
     52c:	88d0      	ldrh	r0, [r2, #6]
     52e:	1c19      	adds	r1, r3, #0
     530:	b29b      	uxth	r3, r3
     532:	4283      	cmp	r3, r0
     534:	d900      	bls.n	538 <udi_hid_setup+0x9c>
     536:	1c01      	adds	r1, r0, #0
		udd_g_ctrlreq.payload_size =
     538:	8191      	strh	r1, [r2, #12]
		return true;
     53a:	2001      	movs	r0, #1
     53c:	e7bb      	b.n	4b6 <udi_hid_setup+0x1a>
				udd_g_ctrlreq.payload = rate;
     53e:	4b14      	ldr	r3, [pc, #80]	; (590 <udi_hid_setup+0xf4>)
     540:	609d      	str	r5, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
     542:	2201      	movs	r2, #1
     544:	819a      	strh	r2, [r3, #12]
				return true;
     546:	2001      	movs	r0, #1
     548:	e7b5      	b.n	4b6 <udi_hid_setup+0x1a>
				udd_g_ctrlreq.payload = protocol;
     54a:	4b11      	ldr	r3, [pc, #68]	; (590 <udi_hid_setup+0xf4>)
     54c:	6099      	str	r1, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
     54e:	2201      	movs	r2, #1
     550:	819a      	strh	r2, [r3, #12]
				return true;
     552:	2001      	movs	r0, #1
     554:	e7af      	b.n	4b6 <udi_hid_setup+0x1a>
			switch (udd_g_ctrlreq.req.bRequest) {
     556:	4a0e      	ldr	r2, [pc, #56]	; (590 <udi_hid_setup+0xf4>)
     558:	7852      	ldrb	r2, [r2, #1]
     55a:	2a0a      	cmp	r2, #10
     55c:	d006      	beq.n	56c <udi_hid_setup+0xd0>
     55e:	2a0b      	cmp	r2, #11
     560:	d00a      	beq.n	578 <udi_hid_setup+0xdc>
	return false;	// Request not supported
     562:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
     564:	2a09      	cmp	r2, #9
     566:	d1a6      	bne.n	4b6 <udi_hid_setup+0x1a>
				return setup_report();
     568:	4798      	blx	r3
     56a:	e7a4      	b.n	4b6 <udi_hid_setup+0x1a>
				*rate = udd_g_ctrlreq.req.wValue >> 8;
     56c:	4b08      	ldr	r3, [pc, #32]	; (590 <udi_hid_setup+0xf4>)
     56e:	885b      	ldrh	r3, [r3, #2]
     570:	0a1b      	lsrs	r3, r3, #8
     572:	702b      	strb	r3, [r5, #0]
				return true;
     574:	2001      	movs	r0, #1
     576:	e79e      	b.n	4b6 <udi_hid_setup+0x1a>
				if (0 != udd_g_ctrlreq.req.wLength)
     578:	4b05      	ldr	r3, [pc, #20]	; (590 <udi_hid_setup+0xf4>)
     57a:	88db      	ldrh	r3, [r3, #6]
					return false;
     57c:	2000      	movs	r0, #0
				if (0 != udd_g_ctrlreq.req.wLength)
     57e:	2b00      	cmp	r3, #0
     580:	d000      	beq.n	584 <udi_hid_setup+0xe8>
     582:	e798      	b.n	4b6 <udi_hid_setup+0x1a>
				*protocol = udd_g_ctrlreq.req.wValue;
     584:	4b02      	ldr	r3, [pc, #8]	; (590 <udi_hid_setup+0xf4>)
     586:	885b      	ldrh	r3, [r3, #2]
     588:	700b      	strb	r3, [r1, #0]
				return true;
     58a:	3001      	adds	r0, #1
     58c:	e793      	b.n	4b6 <udi_hid_setup+0x1a>
     58e:	46c0      	nop			; (mov r8, r8)
     590:	200003f4 	.word	0x200003f4
     594:	00000735 	.word	0x00000735

00000598 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
     598:	b510      	push	{r4, lr}
			udc_ptr_conf->desc +
     59a:	4b11      	ldr	r3, [pc, #68]	; (5e0 <udc_next_desc_in_iface+0x48>)
     59c:	681b      	ldr	r3, [r3, #0]
     59e:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     5a0:	7894      	ldrb	r4, [r2, #2]
     5a2:	78d3      	ldrb	r3, [r2, #3]
     5a4:	021b      	lsls	r3, r3, #8
     5a6:	4323      	orrs	r3, r4
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     5a8:	18d2      	adds	r2, r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
     5aa:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     5ac:	18c0      	adds	r0, r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
     5ae:	4290      	cmp	r0, r2
     5b0:	d210      	bcs.n	5d4 <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     5b2:	7843      	ldrb	r3, [r0, #1]
     5b4:	2b04      	cmp	r3, #4
     5b6:	d00f      	beq.n	5d8 <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
     5b8:	428b      	cmp	r3, r1
     5ba:	d00a      	beq.n	5d2 <udc_next_desc_in_iface+0x3a>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
     5bc:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     5be:	18c0      	adds	r0, r0, r3
	while (ptr_eof_desc > desc) {
     5c0:	4290      	cmp	r0, r2
     5c2:	d205      	bcs.n	5d0 <udc_next_desc_in_iface+0x38>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     5c4:	7843      	ldrb	r3, [r0, #1]
     5c6:	2b04      	cmp	r3, #4
     5c8:	d008      	beq.n	5dc <udc_next_desc_in_iface+0x44>
		if (desc_id == desc->bDescriptorType) {
     5ca:	428b      	cmp	r3, r1
     5cc:	d1f6      	bne.n	5bc <udc_next_desc_in_iface+0x24>
     5ce:	e000      	b.n	5d2 <udc_next_desc_in_iface+0x3a>
	}
	return NULL; // No specific descriptor found
     5d0:	2000      	movs	r0, #0
}
     5d2:	bd10      	pop	{r4, pc}
	return NULL; // No specific descriptor found
     5d4:	2000      	movs	r0, #0
     5d6:	e7fc      	b.n	5d2 <udc_next_desc_in_iface+0x3a>
     5d8:	2000      	movs	r0, #0
     5da:	e7fa      	b.n	5d2 <udc_next_desc_in_iface+0x3a>
     5dc:	2000      	movs	r0, #0
     5de:	e7f8      	b.n	5d2 <udc_next_desc_in_iface+0x3a>
     5e0:	20000144 	.word	0x20000144

000005e4 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
     5e4:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
     5e6:	4b03      	ldr	r3, [pc, #12]	; (5f4 <udc_valid_address+0x10>)
     5e8:	885b      	ldrh	r3, [r3, #2]
     5ea:	207f      	movs	r0, #127	; 0x7f
     5ec:	4018      	ands	r0, r3
     5ee:	4b02      	ldr	r3, [pc, #8]	; (5f8 <udc_valid_address+0x14>)
     5f0:	4798      	blx	r3
}
     5f2:	bd10      	pop	{r4, pc}
     5f4:	200003f4 	.word	0x200003f4
     5f8:	0000266d 	.word	0x0000266d

000005fc <udc_update_iface_desc>:
{
     5fc:	b570      	push	{r4, r5, r6, lr}
	if (0 == udc_num_configuration) {
     5fe:	4b19      	ldr	r3, [pc, #100]	; (664 <udc_update_iface_desc+0x68>)
     600:	781b      	ldrb	r3, [r3, #0]
		return false;
     602:	2200      	movs	r2, #0
	if (0 == udc_num_configuration) {
     604:	2b00      	cmp	r3, #0
     606:	d029      	beq.n	65c <udc_update_iface_desc+0x60>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     608:	4b17      	ldr	r3, [pc, #92]	; (668 <udc_update_iface_desc+0x6c>)
     60a:	681b      	ldr	r3, [r3, #0]
     60c:	681b      	ldr	r3, [r3, #0]
     60e:	791c      	ldrb	r4, [r3, #4]
     610:	4284      	cmp	r4, r0
     612:	d923      	bls.n	65c <udc_update_iface_desc+0x60>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
     614:	4a15      	ldr	r2, [pc, #84]	; (66c <udc_update_iface_desc+0x70>)
     616:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     618:	789a      	ldrb	r2, [r3, #2]
     61a:	78dc      	ldrb	r4, [r3, #3]
     61c:	0224      	lsls	r4, r4, #8
     61e:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     620:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
     622:	42a3      	cmp	r3, r4
     624:	d21c      	bcs.n	660 <udc_update_iface_desc+0x64>
     626:	2500      	movs	r5, #0
     628:	2601      	movs	r6, #1
     62a:	e007      	b.n	63c <udc_update_iface_desc+0x40>
     62c:	4a0f      	ldr	r2, [pc, #60]	; (66c <udc_update_iface_desc+0x70>)
     62e:	6013      	str	r3, [r2, #0]
     630:	e00f      	b.n	652 <udc_update_iface_desc+0x56>
				udc_ptr_iface->bLength);
     632:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
     634:	189b      	adds	r3, r3, r2
     636:	0035      	movs	r5, r6
	while (ptr_end_desc >
     638:	42a3      	cmp	r3, r4
     63a:	d20c      	bcs.n	656 <udc_update_iface_desc+0x5a>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
     63c:	785a      	ldrb	r2, [r3, #1]
     63e:	2a04      	cmp	r2, #4
     640:	d1f7      	bne.n	632 <udc_update_iface_desc+0x36>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
     642:	789a      	ldrb	r2, [r3, #2]
     644:	4282      	cmp	r2, r0
     646:	d1f4      	bne.n	632 <udc_update_iface_desc+0x36>
     648:	78da      	ldrb	r2, [r3, #3]
     64a:	428a      	cmp	r2, r1
     64c:	d1f1      	bne.n	632 <udc_update_iface_desc+0x36>
     64e:	2d00      	cmp	r5, #0
     650:	d1ec      	bne.n	62c <udc_update_iface_desc+0x30>
				return true; // Interface found
     652:	2201      	movs	r2, #1
     654:	e002      	b.n	65c <udc_update_iface_desc+0x60>
     656:	4a05      	ldr	r2, [pc, #20]	; (66c <udc_update_iface_desc+0x70>)
     658:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
     65a:	2200      	movs	r2, #0
}
     65c:	0010      	movs	r0, r2
     65e:	bd70      	pop	{r4, r5, r6, pc}
	return false; // Interface not found
     660:	2200      	movs	r2, #0
     662:	e7fb      	b.n	65c <udc_update_iface_desc+0x60>
     664:	20000140 	.word	0x20000140
     668:	20000144 	.word	0x20000144
     66c:	20000148 	.word	0x20000148

00000670 <udc_iface_disable>:
{
     670:	b5f0      	push	{r4, r5, r6, r7, lr}
     672:	46c6      	mov	lr, r8
     674:	b500      	push	{lr}
     676:	0004      	movs	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
     678:	2100      	movs	r1, #0
     67a:	4b13      	ldr	r3, [pc, #76]	; (6c8 <udc_iface_disable+0x58>)
     67c:	4798      	blx	r3
     67e:	1e05      	subs	r5, r0, #0
     680:	d103      	bne.n	68a <udc_iface_disable+0x1a>
}
     682:	0028      	movs	r0, r5
     684:	bc04      	pop	{r2}
     686:	4690      	mov	r8, r2
     688:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     68a:	4b10      	ldr	r3, [pc, #64]	; (6cc <udc_iface_disable+0x5c>)
     68c:	681b      	ldr	r3, [r3, #0]
     68e:	685b      	ldr	r3, [r3, #4]
     690:	00a2      	lsls	r2, r4, #2
     692:	58d3      	ldr	r3, [r2, r3]
     694:	4698      	mov	r8, r3
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     696:	68db      	ldr	r3, [r3, #12]
     698:	4798      	blx	r3
     69a:	0001      	movs	r1, r0
     69c:	0020      	movs	r0, r4
     69e:	4b0a      	ldr	r3, [pc, #40]	; (6c8 <udc_iface_disable+0x58>)
     6a0:	4798      	blx	r3
     6a2:	1e05      	subs	r5, r0, #0
     6a4:	d0ed      	beq.n	682 <udc_iface_disable+0x12>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     6a6:	4b0a      	ldr	r3, [pc, #40]	; (6d0 <udc_iface_disable+0x60>)
     6a8:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     6aa:	4e0a      	ldr	r6, [pc, #40]	; (6d4 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
     6ac:	4f0a      	ldr	r7, [pc, #40]	; (6d8 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     6ae:	2105      	movs	r1, #5
     6b0:	0020      	movs	r0, r4
     6b2:	47b0      	blx	r6
     6b4:	1e04      	subs	r4, r0, #0
			if (NULL == ep_desc) {
     6b6:	d002      	beq.n	6be <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
     6b8:	7880      	ldrb	r0, [r0, #2]
     6ba:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     6bc:	e7f7      	b.n	6ae <udc_iface_disable+0x3e>
	udi_api->disable();
     6be:	4643      	mov	r3, r8
     6c0:	685b      	ldr	r3, [r3, #4]
     6c2:	4798      	blx	r3
	return true;
     6c4:	e7dd      	b.n	682 <udc_iface_disable+0x12>
     6c6:	46c0      	nop			; (mov r8, r8)
     6c8:	000005fd 	.word	0x000005fd
     6cc:	20000144 	.word	0x20000144
     6d0:	20000148 	.word	0x20000148
     6d4:	00000599 	.word	0x00000599
     6d8:	000021ad 	.word	0x000021ad

000006dc <udc_iface_enable>:
{
     6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     6de:	0005      	movs	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
     6e0:	4b0f      	ldr	r3, [pc, #60]	; (720 <udc_iface_enable+0x44>)
     6e2:	4798      	blx	r3
     6e4:	2800      	cmp	r0, #0
     6e6:	d019      	beq.n	71c <udc_iface_enable+0x40>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     6e8:	4b0e      	ldr	r3, [pc, #56]	; (724 <udc_iface_enable+0x48>)
     6ea:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     6ec:	4e0e      	ldr	r6, [pc, #56]	; (728 <udc_iface_enable+0x4c>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     6ee:	4f0f      	ldr	r7, [pc, #60]	; (72c <udc_iface_enable+0x50>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     6f0:	2105      	movs	r1, #5
     6f2:	0020      	movs	r0, r4
     6f4:	47b0      	blx	r6
     6f6:	1e04      	subs	r4, r0, #0
		if (NULL == ep_desc)
     6f8:	d009      	beq.n	70e <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     6fa:	7903      	ldrb	r3, [r0, #4]
     6fc:	7942      	ldrb	r2, [r0, #5]
     6fe:	0212      	lsls	r2, r2, #8
     700:	431a      	orrs	r2, r3
     702:	78c1      	ldrb	r1, [r0, #3]
     704:	7880      	ldrb	r0, [r0, #2]
     706:	47b8      	blx	r7
     708:	2800      	cmp	r0, #0
     70a:	d1f1      	bne.n	6f0 <udc_iface_enable+0x14>
     70c:	e006      	b.n	71c <udc_iface_enable+0x40>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
     70e:	4b08      	ldr	r3, [pc, #32]	; (730 <udc_iface_enable+0x54>)
     710:	681b      	ldr	r3, [r3, #0]
     712:	685b      	ldr	r3, [r3, #4]
     714:	00ad      	lsls	r5, r5, #2
     716:	58eb      	ldr	r3, [r5, r3]
     718:	681b      	ldr	r3, [r3, #0]
     71a:	4798      	blx	r3
}
     71c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     71e:	46c0      	nop			; (mov r8, r8)
     720:	000005fd 	.word	0x000005fd
     724:	20000148 	.word	0x20000148
     728:	00000599 	.word	0x00000599
     72c:	00002205 	.word	0x00002205
     730:	20000144 	.word	0x20000144

00000734 <udc_get_interface_desc>:
	return udc_ptr_iface;
     734:	4b01      	ldr	r3, [pc, #4]	; (73c <udc_get_interface_desc+0x8>)
     736:	6818      	ldr	r0, [r3, #0]
}
     738:	4770      	bx	lr
     73a:	46c0      	nop			; (mov r8, r8)
     73c:	20000148 	.word	0x20000148

00000740 <udc_start>:
{
     740:	b510      	push	{r4, lr}
	udd_enable();
     742:	4b01      	ldr	r3, [pc, #4]	; (748 <udc_start+0x8>)
     744:	4798      	blx	r3
}
     746:	bd10      	pop	{r4, pc}
     748:	0000271d 	.word	0x0000271d

0000074c <udc_reset>:
{
     74c:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
     74e:	4b12      	ldr	r3, [pc, #72]	; (798 <udc_reset+0x4c>)
     750:	781b      	ldrb	r3, [r3, #0]
     752:	2b00      	cmp	r3, #0
     754:	d011      	beq.n	77a <udc_reset+0x2e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     756:	4b11      	ldr	r3, [pc, #68]	; (79c <udc_reset+0x50>)
     758:	681b      	ldr	r3, [r3, #0]
     75a:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     75c:	791b      	ldrb	r3, [r3, #4]
     75e:	2b00      	cmp	r3, #0
     760:	d00b      	beq.n	77a <udc_reset+0x2e>
     762:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
     764:	4e0e      	ldr	r6, [pc, #56]	; (7a0 <udc_reset+0x54>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     766:	4d0d      	ldr	r5, [pc, #52]	; (79c <udc_reset+0x50>)
			udc_iface_disable(iface_num);
     768:	0020      	movs	r0, r4
     76a:	47b0      	blx	r6
				iface_num++) {
     76c:	3401      	adds	r4, #1
     76e:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     770:	682b      	ldr	r3, [r5, #0]
     772:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     774:	791b      	ldrb	r3, [r3, #4]
     776:	42a3      	cmp	r3, r4
     778:	d8f6      	bhi.n	768 <udc_reset+0x1c>
	udc_num_configuration = 0;
     77a:	2200      	movs	r2, #0
     77c:	4b06      	ldr	r3, [pc, #24]	; (798 <udc_reset+0x4c>)
     77e:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
     780:	4b08      	ldr	r3, [pc, #32]	; (7a4 <udc_reset+0x58>)
     782:	881b      	ldrh	r3, [r3, #0]
     784:	079b      	lsls	r3, r3, #30
     786:	d403      	bmi.n	790 <udc_reset+0x44>
	udc_device_status =
     788:	2201      	movs	r2, #1
     78a:	4b06      	ldr	r3, [pc, #24]	; (7a4 <udc_reset+0x58>)
     78c:	801a      	strh	r2, [r3, #0]
}
     78e:	bd70      	pop	{r4, r5, r6, pc}
		UDC_REMOTEWAKEUP_DISABLE();
     790:	4b05      	ldr	r3, [pc, #20]	; (7a8 <udc_reset+0x5c>)
     792:	4798      	blx	r3
     794:	e7f8      	b.n	788 <udc_reset+0x3c>
     796:	46c0      	nop			; (mov r8, r8)
     798:	20000140 	.word	0x20000140
     79c:	20000144 	.word	0x20000144
     7a0:	00000671 	.word	0x00000671
     7a4:	20000138 	.word	0x20000138
     7a8:	00003b25 	.word	0x00003b25

000007ac <udc_sof_notify>:
{
     7ac:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
     7ae:	4b0e      	ldr	r3, [pc, #56]	; (7e8 <udc_sof_notify+0x3c>)
     7b0:	781b      	ldrb	r3, [r3, #0]
     7b2:	2b00      	cmp	r3, #0
     7b4:	d017      	beq.n	7e6 <udc_sof_notify+0x3a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     7b6:	4b0d      	ldr	r3, [pc, #52]	; (7ec <udc_sof_notify+0x40>)
     7b8:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     7ba:	681a      	ldr	r2, [r3, #0]
     7bc:	7912      	ldrb	r2, [r2, #4]
     7be:	2a00      	cmp	r2, #0
     7c0:	d011      	beq.n	7e6 <udc_sof_notify+0x3a>
     7c2:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     7c4:	4d09      	ldr	r5, [pc, #36]	; (7ec <udc_sof_notify+0x40>)
     7c6:	e006      	b.n	7d6 <udc_sof_notify+0x2a>
				iface_num++) {
     7c8:	3401      	adds	r4, #1
     7ca:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     7cc:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
     7ce:	681a      	ldr	r2, [r3, #0]
     7d0:	7912      	ldrb	r2, [r2, #4]
     7d2:	42a2      	cmp	r2, r4
     7d4:	d907      	bls.n	7e6 <udc_sof_notify+0x3a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     7d6:	685b      	ldr	r3, [r3, #4]
     7d8:	00a2      	lsls	r2, r4, #2
     7da:	58d3      	ldr	r3, [r2, r3]
     7dc:	691b      	ldr	r3, [r3, #16]
     7de:	2b00      	cmp	r3, #0
     7e0:	d0f2      	beq.n	7c8 <udc_sof_notify+0x1c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     7e2:	4798      	blx	r3
     7e4:	e7f0      	b.n	7c8 <udc_sof_notify+0x1c>
}
     7e6:	bd70      	pop	{r4, r5, r6, pc}
     7e8:	20000140 	.word	0x20000140
     7ec:	20000144 	.word	0x20000144

000007f0 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     7f2:	4bb6      	ldr	r3, [pc, #728]	; (acc <udc_process_setup+0x2dc>)
     7f4:	2200      	movs	r2, #0
     7f6:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
     7f8:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
     7fa:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
     7fc:	781b      	ldrb	r3, [r3, #0]
     7fe:	b25a      	sxtb	r2, r3
     800:	2a00      	cmp	r2, #0
     802:	db13      	blt.n	82c <udc_process_setup+0x3c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     804:	2260      	movs	r2, #96	; 0x60
     806:	421a      	tst	r2, r3
     808:	d100      	bne.n	80c <udc_process_setup+0x1c>
     80a:	e0d7      	b.n	9bc <udc_process_setup+0x1cc>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     80c:	4baf      	ldr	r3, [pc, #700]	; (acc <udc_process_setup+0x2dc>)
     80e:	781a      	ldrb	r2, [r3, #0]
     810:	231f      	movs	r3, #31
     812:	4013      	ands	r3, r2
     814:	2b01      	cmp	r3, #1
     816:	d100      	bne.n	81a <udc_process_setup+0x2a>
     818:	e18e      	b.n	b38 <udc_process_setup+0x348>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     81a:	4bac      	ldr	r3, [pc, #688]	; (acc <udc_process_setup+0x2dc>)
     81c:	781a      	ldrb	r2, [r3, #0]
     81e:	231f      	movs	r3, #31
     820:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
     822:	2000      	movs	r0, #0
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     824:	2b02      	cmp	r3, #2
     826:	d100      	bne.n	82a <udc_process_setup+0x3a>
     828:	e1df      	b.n	bea <udc_process_setup+0x3fa>
#endif
}
     82a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
     82c:	4aa7      	ldr	r2, [pc, #668]	; (acc <udc_process_setup+0x2dc>)
     82e:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
     830:	2000      	movs	r0, #0
		if (udd_g_ctrlreq.req.wLength == 0) {
     832:	2a00      	cmp	r2, #0
     834:	d0f9      	beq.n	82a <udc_process_setup+0x3a>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     836:	2160      	movs	r1, #96	; 0x60
     838:	4219      	tst	r1, r3
     83a:	d1e7      	bne.n	80c <udc_process_setup+0x1c>
     83c:	211f      	movs	r1, #31
     83e:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     840:	d108      	bne.n	854 <udc_process_setup+0x64>
			switch (udd_g_ctrlreq.req.bRequest) {
     842:	49a2      	ldr	r1, [pc, #648]	; (acc <udc_process_setup+0x2dc>)
     844:	7849      	ldrb	r1, [r1, #1]
     846:	2906      	cmp	r1, #6
     848:	d023      	beq.n	892 <udc_process_setup+0xa2>
     84a:	2908      	cmp	r1, #8
     84c:	d100      	bne.n	850 <udc_process_setup+0x60>
     84e:	e084      	b.n	95a <udc_process_setup+0x16a>
     850:	2900      	cmp	r1, #0
     852:	d017      	beq.n	884 <udc_process_setup+0x94>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     854:	2b01      	cmp	r3, #1
     856:	d100      	bne.n	85a <udc_process_setup+0x6a>
     858:	e087      	b.n	96a <udc_process_setup+0x17a>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     85a:	2b02      	cmp	r3, #2
     85c:	d1d6      	bne.n	80c <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
     85e:	4b9b      	ldr	r3, [pc, #620]	; (acc <udc_process_setup+0x2dc>)
     860:	785b      	ldrb	r3, [r3, #1]
	return false;
     862:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
     864:	2b00      	cmp	r3, #0
     866:	d000      	beq.n	86a <udc_process_setup+0x7a>
     868:	e12b      	b.n	ac2 <udc_process_setup+0x2d2>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     86a:	2a02      	cmp	r2, #2
     86c:	d1d5      	bne.n	81a <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     86e:	4b97      	ldr	r3, [pc, #604]	; (acc <udc_process_setup+0x2dc>)
     870:	7918      	ldrb	r0, [r3, #4]
     872:	4b97      	ldr	r3, [pc, #604]	; (ad0 <udc_process_setup+0x2e0>)
     874:	4798      	blx	r3
     876:	4b97      	ldr	r3, [pc, #604]	; (ad4 <udc_process_setup+0x2e4>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
     878:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     87a:	2102      	movs	r1, #2
     87c:	0018      	movs	r0, r3
     87e:	4b96      	ldr	r3, [pc, #600]	; (ad8 <udc_process_setup+0x2e8>)
     880:	4798      	blx	r3
     882:	e0fd      	b.n	a80 <udc_process_setup+0x290>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     884:	2a02      	cmp	r2, #2
     886:	d1c8      	bne.n	81a <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     888:	3102      	adds	r1, #2
     88a:	4894      	ldr	r0, [pc, #592]	; (adc <udc_process_setup+0x2ec>)
     88c:	4b92      	ldr	r3, [pc, #584]	; (ad8 <udc_process_setup+0x2e8>)
     88e:	4798      	blx	r3
     890:	e0f6      	b.n	a80 <udc_process_setup+0x290>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     892:	4b8e      	ldr	r3, [pc, #568]	; (acc <udc_process_setup+0x2dc>)
     894:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     896:	0a13      	lsrs	r3, r2, #8
     898:	2b02      	cmp	r3, #2
     89a:	d023      	beq.n	8e4 <udc_process_setup+0xf4>
     89c:	b2d9      	uxtb	r1, r3
     89e:	2902      	cmp	r1, #2
     8a0:	d90f      	bls.n	8c2 <udc_process_setup+0xd2>
     8a2:	2b03      	cmp	r3, #3
     8a4:	d034      	beq.n	910 <udc_process_setup+0x120>
     8a6:	2b0f      	cmp	r3, #15
     8a8:	d000      	beq.n	8ac <udc_process_setup+0xbc>
     8aa:	e19c      	b.n	be6 <udc_process_setup+0x3f6>
		if (udc_config.conf_bos == NULL) {
     8ac:	4b8c      	ldr	r3, [pc, #560]	; (ae0 <udc_process_setup+0x2f0>)
     8ae:	6898      	ldr	r0, [r3, #8]
     8b0:	2800      	cmp	r0, #0
     8b2:	d0b2      	beq.n	81a <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     8b4:	7883      	ldrb	r3, [r0, #2]
     8b6:	78c1      	ldrb	r1, [r0, #3]
     8b8:	0209      	lsls	r1, r1, #8
     8ba:	4319      	orrs	r1, r3
     8bc:	4b86      	ldr	r3, [pc, #536]	; (ad8 <udc_process_setup+0x2e8>)
     8be:	4798      	blx	r3
     8c0:	e007      	b.n	8d2 <udc_process_setup+0xe2>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     8c2:	2b01      	cmp	r3, #1
     8c4:	d000      	beq.n	8c8 <udc_process_setup+0xd8>
     8c6:	e18e      	b.n	be6 <udc_process_setup+0x3f6>
				(uint8_t *) udc_config.confdev_lsfs,
     8c8:	4b85      	ldr	r3, [pc, #532]	; (ae0 <udc_process_setup+0x2f0>)
     8ca:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
     8cc:	7801      	ldrb	r1, [r0, #0]
     8ce:	4b82      	ldr	r3, [pc, #520]	; (ad8 <udc_process_setup+0x2e8>)
     8d0:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     8d2:	4b7e      	ldr	r3, [pc, #504]	; (acc <udc_process_setup+0x2dc>)
     8d4:	88da      	ldrh	r2, [r3, #6]
     8d6:	899b      	ldrh	r3, [r3, #12]
     8d8:	4293      	cmp	r3, r2
     8da:	d800      	bhi.n	8de <udc_process_setup+0xee>
     8dc:	e0d0      	b.n	a80 <udc_process_setup+0x290>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     8de:	4b7b      	ldr	r3, [pc, #492]	; (acc <udc_process_setup+0x2dc>)
     8e0:	819a      	strh	r2, [r3, #12]
     8e2:	e0cd      	b.n	a80 <udc_process_setup+0x290>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     8e4:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
     8e6:	4b7e      	ldr	r3, [pc, #504]	; (ae0 <udc_process_setup+0x2f0>)
     8e8:	681b      	ldr	r3, [r3, #0]
     8ea:	7c5b      	ldrb	r3, [r3, #17]
     8ec:	4293      	cmp	r3, r2
     8ee:	d800      	bhi.n	8f2 <udc_process_setup+0x102>
     8f0:	e793      	b.n	81a <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
     8f2:	4b7b      	ldr	r3, [pc, #492]	; (ae0 <udc_process_setup+0x2f0>)
     8f4:	685b      	ldr	r3, [r3, #4]
     8f6:	00d2      	lsls	r2, r2, #3
     8f8:	58d0      	ldr	r0, [r2, r3]
			udd_set_setup_payload(
     8fa:	7883      	ldrb	r3, [r0, #2]
     8fc:	78c1      	ldrb	r1, [r0, #3]
     8fe:	0209      	lsls	r1, r1, #8
     900:	4319      	orrs	r1, r3
     902:	4b75      	ldr	r3, [pc, #468]	; (ad8 <udc_process_setup+0x2e8>)
     904:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     906:	4b71      	ldr	r3, [pc, #452]	; (acc <udc_process_setup+0x2dc>)
     908:	689b      	ldr	r3, [r3, #8]
     90a:	2202      	movs	r2, #2
     90c:	705a      	strb	r2, [r3, #1]
     90e:	e7e0      	b.n	8d2 <udc_process_setup+0xe2>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     910:	23ff      	movs	r3, #255	; 0xff
     912:	401a      	ands	r2, r3
     914:	2a01      	cmp	r2, #1
     916:	d01d      	beq.n	954 <udc_process_setup+0x164>
     918:	2a00      	cmp	r2, #0
     91a:	d016      	beq.n	94a <udc_process_setup+0x15a>
     91c:	2a02      	cmp	r2, #2
     91e:	d000      	beq.n	922 <udc_process_setup+0x132>
     920:	e774      	b.n	80c <udc_process_setup+0x1c>
		str = udc_string_product_name;
     922:	4c70      	ldr	r4, [pc, #448]	; (ae4 <udc_process_setup+0x2f4>)
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
     924:	210d      	movs	r1, #13
     926:	4a70      	ldr	r2, [pc, #448]	; (ae8 <udc_process_setup+0x2f8>)
     928:	3202      	adds	r2, #2
     92a:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     92c:	5ce0      	ldrb	r0, [r4, r3]
     92e:	8010      	strh	r0, [r2, #0]
     930:	3301      	adds	r3, #1
     932:	3202      	adds	r2, #2
		for(i = 0; i < str_length; i++) {
     934:	b2d8      	uxtb	r0, r3
     936:	4288      	cmp	r0, r1
     938:	d3f8      	bcc.n	92c <udc_process_setup+0x13c>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     93a:	0049      	lsls	r1, r1, #1
     93c:	3102      	adds	r1, #2
     93e:	486a      	ldr	r0, [pc, #424]	; (ae8 <udc_process_setup+0x2f8>)
     940:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
     942:	b289      	uxth	r1, r1
     944:	4b64      	ldr	r3, [pc, #400]	; (ad8 <udc_process_setup+0x2e8>)
     946:	4798      	blx	r3
     948:	e7c3      	b.n	8d2 <udc_process_setup+0xe2>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     94a:	2104      	movs	r1, #4
     94c:	4867      	ldr	r0, [pc, #412]	; (aec <udc_process_setup+0x2fc>)
     94e:	4b62      	ldr	r3, [pc, #392]	; (ad8 <udc_process_setup+0x2e8>)
     950:	4798      	blx	r3
     952:	e7be      	b.n	8d2 <udc_process_setup+0xe2>
		str = udc_string_manufacturer_name;
     954:	4c66      	ldr	r4, [pc, #408]	; (af0 <udc_process_setup+0x300>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     956:	2108      	movs	r1, #8
     958:	e7e5      	b.n	926 <udc_process_setup+0x136>
	if (udd_g_ctrlreq.req.wLength != 1) {
     95a:	2a01      	cmp	r2, #1
     95c:	d000      	beq.n	960 <udc_process_setup+0x170>
     95e:	e75c      	b.n	81a <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
     960:	2101      	movs	r1, #1
     962:	4864      	ldr	r0, [pc, #400]	; (af4 <udc_process_setup+0x304>)
     964:	4b5c      	ldr	r3, [pc, #368]	; (ad8 <udc_process_setup+0x2e8>)
     966:	4798      	blx	r3
     968:	e08a      	b.n	a80 <udc_process_setup+0x290>
			switch (udd_g_ctrlreq.req.bRequest) {
     96a:	4958      	ldr	r1, [pc, #352]	; (acc <udc_process_setup+0x2dc>)
     96c:	7849      	ldrb	r1, [r1, #1]
     96e:	290a      	cmp	r1, #10
     970:	d000      	beq.n	974 <udc_process_setup+0x184>
     972:	e772      	b.n	85a <udc_process_setup+0x6a>
	if (udd_g_ctrlreq.req.wLength != 1) {
     974:	2a01      	cmp	r2, #1
     976:	d000      	beq.n	97a <udc_process_setup+0x18a>
     978:	e0de      	b.n	b38 <udc_process_setup+0x348>
	if (!udc_num_configuration) {
     97a:	4b5e      	ldr	r3, [pc, #376]	; (af4 <udc_process_setup+0x304>)
     97c:	781b      	ldrb	r3, [r3, #0]
     97e:	2b00      	cmp	r3, #0
     980:	d100      	bne.n	984 <udc_process_setup+0x194>
     982:	e0d9      	b.n	b38 <udc_process_setup+0x348>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     984:	4b51      	ldr	r3, [pc, #324]	; (acc <udc_process_setup+0x2dc>)
     986:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     988:	4b5b      	ldr	r3, [pc, #364]	; (af8 <udc_process_setup+0x308>)
     98a:	681d      	ldr	r5, [r3, #0]
     98c:	682b      	ldr	r3, [r5, #0]
     98e:	791b      	ldrb	r3, [r3, #4]
     990:	42a3      	cmp	r3, r4
     992:	d800      	bhi.n	996 <udc_process_setup+0x1a6>
     994:	e0d0      	b.n	b38 <udc_process_setup+0x348>
	if (!udc_update_iface_desc(iface_num, 0)) {
     996:	2100      	movs	r1, #0
     998:	0020      	movs	r0, r4
     99a:	4b58      	ldr	r3, [pc, #352]	; (afc <udc_process_setup+0x30c>)
     99c:	4798      	blx	r3
     99e:	2800      	cmp	r0, #0
     9a0:	d100      	bne.n	9a4 <udc_process_setup+0x1b4>
     9a2:	e733      	b.n	80c <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     9a4:	686b      	ldr	r3, [r5, #4]
     9a6:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
     9a8:	58e3      	ldr	r3, [r4, r3]
     9aa:	68db      	ldr	r3, [r3, #12]
     9ac:	4798      	blx	r3
     9ae:	4b54      	ldr	r3, [pc, #336]	; (b00 <udc_process_setup+0x310>)
     9b0:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
     9b2:	2101      	movs	r1, #1
     9b4:	0018      	movs	r0, r3
     9b6:	4b48      	ldr	r3, [pc, #288]	; (ad8 <udc_process_setup+0x2e8>)
     9b8:	4798      	blx	r3
     9ba:	e061      	b.n	a80 <udc_process_setup+0x290>
     9bc:	221f      	movs	r2, #31
     9be:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     9c0:	d172      	bne.n	aa8 <udc_process_setup+0x2b8>
			switch (udd_g_ctrlreq.req.bRequest) {
     9c2:	4a42      	ldr	r2, [pc, #264]	; (acc <udc_process_setup+0x2dc>)
     9c4:	7852      	ldrb	r2, [r2, #1]
     9c6:	2a03      	cmp	r2, #3
     9c8:	d05c      	beq.n	a84 <udc_process_setup+0x294>
     9ca:	b2d1      	uxtb	r1, r2
     9cc:	2903      	cmp	r1, #3
     9ce:	d93b      	bls.n	a48 <udc_process_setup+0x258>
     9d0:	2a05      	cmp	r2, #5
     9d2:	d04d      	beq.n	a70 <udc_process_setup+0x280>
     9d4:	2a09      	cmp	r2, #9
     9d6:	d167      	bne.n	aa8 <udc_process_setup+0x2b8>
	if (udd_g_ctrlreq.req.wLength) {
     9d8:	4b3c      	ldr	r3, [pc, #240]	; (acc <udc_process_setup+0x2dc>)
     9da:	88db      	ldrh	r3, [r3, #6]
     9dc:	2b00      	cmp	r3, #0
     9de:	d000      	beq.n	9e2 <udc_process_setup+0x1f2>
     9e0:	e71b      	b.n	81a <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
     9e2:	4b48      	ldr	r3, [pc, #288]	; (b04 <udc_process_setup+0x314>)
     9e4:	4798      	blx	r3
     9e6:	2800      	cmp	r0, #0
     9e8:	d100      	bne.n	9ec <udc_process_setup+0x1fc>
     9ea:	e70f      	b.n	80c <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     9ec:	4b37      	ldr	r3, [pc, #220]	; (acc <udc_process_setup+0x2dc>)
     9ee:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
     9f0:	4b3b      	ldr	r3, [pc, #236]	; (ae0 <udc_process_setup+0x2f0>)
     9f2:	681b      	ldr	r3, [r3, #0]
     9f4:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     9f6:	429a      	cmp	r2, r3
     9f8:	dd00      	ble.n	9fc <udc_process_setup+0x20c>
     9fa:	e707      	b.n	80c <udc_process_setup+0x1c>
	udc_reset();
     9fc:	4b42      	ldr	r3, [pc, #264]	; (b08 <udc_process_setup+0x318>)
     9fe:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     a00:	4b32      	ldr	r3, [pc, #200]	; (acc <udc_process_setup+0x2dc>)
     a02:	789b      	ldrb	r3, [r3, #2]
     a04:	4a3b      	ldr	r2, [pc, #236]	; (af4 <udc_process_setup+0x304>)
     a06:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
     a08:	2b00      	cmp	r3, #0
     a0a:	d039      	beq.n	a80 <udc_process_setup+0x290>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     a0c:	4a3f      	ldr	r2, [pc, #252]	; (b0c <udc_process_setup+0x31c>)
     a0e:	4694      	mov	ip, r2
     a10:	4463      	add	r3, ip
     a12:	00db      	lsls	r3, r3, #3
     a14:	4a32      	ldr	r2, [pc, #200]	; (ae0 <udc_process_setup+0x2f0>)
     a16:	6852      	ldr	r2, [r2, #4]
     a18:	18d3      	adds	r3, r2, r3
     a1a:	4a37      	ldr	r2, [pc, #220]	; (af8 <udc_process_setup+0x308>)
     a1c:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     a1e:	681b      	ldr	r3, [r3, #0]
     a20:	791b      	ldrb	r3, [r3, #4]
     a22:	2b00      	cmp	r3, #0
     a24:	d02c      	beq.n	a80 <udc_process_setup+0x290>
     a26:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
     a28:	4d39      	ldr	r5, [pc, #228]	; (b10 <udc_process_setup+0x320>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     a2a:	0016      	movs	r6, r2
		if (!udc_iface_enable(iface_num, 0)) {
     a2c:	2100      	movs	r1, #0
     a2e:	0020      	movs	r0, r4
     a30:	47a8      	blx	r5
     a32:	2800      	cmp	r0, #0
     a34:	d100      	bne.n	a38 <udc_process_setup+0x248>
     a36:	e6e9      	b.n	80c <udc_process_setup+0x1c>
			iface_num++) {
     a38:	3401      	adds	r4, #1
     a3a:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     a3c:	6833      	ldr	r3, [r6, #0]
     a3e:	681b      	ldr	r3, [r3, #0]
     a40:	791b      	ldrb	r3, [r3, #4]
     a42:	42a3      	cmp	r3, r4
     a44:	d8f2      	bhi.n	a2c <udc_process_setup+0x23c>
     a46:	e01b      	b.n	a80 <udc_process_setup+0x290>
			switch (udd_g_ctrlreq.req.bRequest) {
     a48:	2a01      	cmp	r2, #1
     a4a:	d12d      	bne.n	aa8 <udc_process_setup+0x2b8>
	if (udd_g_ctrlreq.req.wLength) {
     a4c:	4b1f      	ldr	r3, [pc, #124]	; (acc <udc_process_setup+0x2dc>)
     a4e:	88db      	ldrh	r3, [r3, #6]
     a50:	2b00      	cmp	r3, #0
     a52:	d000      	beq.n	a56 <udc_process_setup+0x266>
     a54:	e6e1      	b.n	81a <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     a56:	4b1d      	ldr	r3, [pc, #116]	; (acc <udc_process_setup+0x2dc>)
     a58:	885b      	ldrh	r3, [r3, #2]
     a5a:	2b01      	cmp	r3, #1
     a5c:	d000      	beq.n	a60 <udc_process_setup+0x270>
     a5e:	e6dc      	b.n	81a <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     a60:	4a1e      	ldr	r2, [pc, #120]	; (adc <udc_process_setup+0x2ec>)
     a62:	8813      	ldrh	r3, [r2, #0]
     a64:	2102      	movs	r1, #2
     a66:	438b      	bics	r3, r1
     a68:	8013      	strh	r3, [r2, #0]
		UDC_REMOTEWAKEUP_DISABLE();
     a6a:	4b2a      	ldr	r3, [pc, #168]	; (b14 <udc_process_setup+0x324>)
     a6c:	4798      	blx	r3
     a6e:	e007      	b.n	a80 <udc_process_setup+0x290>
	if (udd_g_ctrlreq.req.wLength) {
     a70:	4b16      	ldr	r3, [pc, #88]	; (acc <udc_process_setup+0x2dc>)
     a72:	88db      	ldrh	r3, [r3, #6]
     a74:	2b00      	cmp	r3, #0
     a76:	d000      	beq.n	a7a <udc_process_setup+0x28a>
     a78:	e6cf      	b.n	81a <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
     a7a:	4a27      	ldr	r2, [pc, #156]	; (b18 <udc_process_setup+0x328>)
     a7c:	4b13      	ldr	r3, [pc, #76]	; (acc <udc_process_setup+0x2dc>)
     a7e:	611a      	str	r2, [r3, #16]
			return true;
     a80:	2001      	movs	r0, #1
     a82:	e6d2      	b.n	82a <udc_process_setup+0x3a>
	if (udd_g_ctrlreq.req.wLength) {
     a84:	4b11      	ldr	r3, [pc, #68]	; (acc <udc_process_setup+0x2dc>)
     a86:	88db      	ldrh	r3, [r3, #6]
     a88:	2b00      	cmp	r3, #0
     a8a:	d000      	beq.n	a8e <udc_process_setup+0x29e>
     a8c:	e6c5      	b.n	81a <udc_process_setup+0x2a>
	switch (udd_g_ctrlreq.req.wValue) {
     a8e:	4b0f      	ldr	r3, [pc, #60]	; (acc <udc_process_setup+0x2dc>)
     a90:	885b      	ldrh	r3, [r3, #2]
	return false;
     a92:	2000      	movs	r0, #0
	switch (udd_g_ctrlreq.req.wValue) {
     a94:	2b01      	cmp	r3, #1
     a96:	d114      	bne.n	ac2 <udc_process_setup+0x2d2>
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
     a98:	4a10      	ldr	r2, [pc, #64]	; (adc <udc_process_setup+0x2ec>)
     a9a:	8813      	ldrh	r3, [r2, #0]
     a9c:	2102      	movs	r1, #2
     a9e:	430b      	orrs	r3, r1
     aa0:	8013      	strh	r3, [r2, #0]
		UDC_REMOTEWAKEUP_ENABLE();
     aa2:	4b1e      	ldr	r3, [pc, #120]	; (b1c <udc_process_setup+0x32c>)
     aa4:	4798      	blx	r3
     aa6:	e7eb      	b.n	a80 <udc_process_setup+0x290>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     aa8:	2b01      	cmp	r3, #1
     aaa:	d039      	beq.n	b20 <udc_process_setup+0x330>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     aac:	2b02      	cmp	r3, #2
     aae:	d000      	beq.n	ab2 <udc_process_setup+0x2c2>
     ab0:	e6ac      	b.n	80c <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
     ab2:	4b06      	ldr	r3, [pc, #24]	; (acc <udc_process_setup+0x2dc>)
     ab4:	785b      	ldrb	r3, [r3, #1]
     ab6:	2b01      	cmp	r3, #1
     ab8:	d074      	beq.n	ba4 <udc_process_setup+0x3b4>
     aba:	2b03      	cmp	r3, #3
     abc:	d100      	bne.n	ac0 <udc_process_setup+0x2d0>
     abe:	e080      	b.n	bc2 <udc_process_setup+0x3d2>
	return false;
     ac0:	2000      	movs	r0, #0
		if (udc_reqstd()) {
     ac2:	2800      	cmp	r0, #0
     ac4:	d000      	beq.n	ac8 <udc_process_setup+0x2d8>
     ac6:	e6b0      	b.n	82a <udc_process_setup+0x3a>
     ac8:	e6a0      	b.n	80c <udc_process_setup+0x1c>
     aca:	46c0      	nop			; (mov r8, r8)
     acc:	200003f4 	.word	0x200003f4
     ad0:	0000230d 	.word	0x0000230d
     ad4:	2000013a 	.word	0x2000013a
     ad8:	0000268d 	.word	0x0000268d
     adc:	20000138 	.word	0x20000138
     ae0:	20000050 	.word	0x20000050
     ae4:	200000cc 	.word	0x200000cc
     ae8:	200000a0 	.word	0x200000a0
     aec:	200000bc 	.word	0x200000bc
     af0:	200000c0 	.word	0x200000c0
     af4:	20000140 	.word	0x20000140
     af8:	20000144 	.word	0x20000144
     afc:	000005fd 	.word	0x000005fd
     b00:	2000013c 	.word	0x2000013c
     b04:	0000267d 	.word	0x0000267d
     b08:	0000074d 	.word	0x0000074d
     b0c:	1fffffff 	.word	0x1fffffff
     b10:	000006dd 	.word	0x000006dd
     b14:	00003b25 	.word	0x00003b25
     b18:	000005e5 	.word	0x000005e5
     b1c:	00003b19 	.word	0x00003b19
			switch (udd_g_ctrlreq.req.bRequest) {
     b20:	4a46      	ldr	r2, [pc, #280]	; (c3c <udc_process_setup+0x44c>)
     b22:	7852      	ldrb	r2, [r2, #1]
     b24:	2a0b      	cmp	r2, #11
     b26:	d1c1      	bne.n	aac <udc_process_setup+0x2bc>
	if (udd_g_ctrlreq.req.wLength) {
     b28:	4b44      	ldr	r3, [pc, #272]	; (c3c <udc_process_setup+0x44c>)
     b2a:	88db      	ldrh	r3, [r3, #6]
     b2c:	2b00      	cmp	r3, #0
     b2e:	d103      	bne.n	b38 <udc_process_setup+0x348>
	if (!udc_num_configuration) {
     b30:	4b43      	ldr	r3, [pc, #268]	; (c40 <udc_process_setup+0x450>)
     b32:	781b      	ldrb	r3, [r3, #0]
     b34:	2b00      	cmp	r3, #0
     b36:	d127      	bne.n	b88 <udc_process_setup+0x398>
	if (0 == udc_num_configuration) {
     b38:	4b41      	ldr	r3, [pc, #260]	; (c40 <udc_process_setup+0x450>)
     b3a:	781b      	ldrb	r3, [r3, #0]
	return false;
     b3c:	2000      	movs	r0, #0
	if (0 == udc_num_configuration) {
     b3e:	2b00      	cmp	r3, #0
     b40:	d100      	bne.n	b44 <udc_process_setup+0x354>
     b42:	e672      	b.n	82a <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     b44:	4b3d      	ldr	r3, [pc, #244]	; (c3c <udc_process_setup+0x44c>)
     b46:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     b48:	4b3e      	ldr	r3, [pc, #248]	; (c44 <udc_process_setup+0x454>)
     b4a:	681d      	ldr	r5, [r3, #0]
     b4c:	682b      	ldr	r3, [r5, #0]
     b4e:	791b      	ldrb	r3, [r3, #4]
     b50:	42a3      	cmp	r3, r4
     b52:	d800      	bhi.n	b56 <udc_process_setup+0x366>
     b54:	e669      	b.n	82a <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
     b56:	2100      	movs	r1, #0
     b58:	0020      	movs	r0, r4
     b5a:	4b3b      	ldr	r3, [pc, #236]	; (c48 <udc_process_setup+0x458>)
     b5c:	4798      	blx	r3
     b5e:	2800      	cmp	r0, #0
     b60:	d100      	bne.n	b64 <udc_process_setup+0x374>
     b62:	e65a      	b.n	81a <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     b64:	686b      	ldr	r3, [r5, #4]
     b66:	00a2      	lsls	r2, r4, #2
     b68:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     b6a:	68eb      	ldr	r3, [r5, #12]
     b6c:	4798      	blx	r3
     b6e:	0001      	movs	r1, r0
     b70:	0020      	movs	r0, r4
     b72:	4b35      	ldr	r3, [pc, #212]	; (c48 <udc_process_setup+0x458>)
     b74:	4798      	blx	r3
     b76:	2800      	cmp	r0, #0
     b78:	d100      	bne.n	b7c <udc_process_setup+0x38c>
     b7a:	e64e      	b.n	81a <udc_process_setup+0x2a>
	return udi_api->setup();
     b7c:	68ab      	ldr	r3, [r5, #8]
     b7e:	4798      	blx	r3
		if (udc_req_iface()) {
     b80:	2800      	cmp	r0, #0
     b82:	d000      	beq.n	b86 <udc_process_setup+0x396>
     b84:	e651      	b.n	82a <udc_process_setup+0x3a>
     b86:	e648      	b.n	81a <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     b88:	4b2c      	ldr	r3, [pc, #176]	; (c3c <udc_process_setup+0x44c>)
     b8a:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     b8c:	885c      	ldrh	r4, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
     b8e:	0028      	movs	r0, r5
     b90:	4b2e      	ldr	r3, [pc, #184]	; (c4c <udc_process_setup+0x45c>)
     b92:	4798      	blx	r3
     b94:	2800      	cmp	r0, #0
     b96:	d100      	bne.n	b9a <udc_process_setup+0x3aa>
     b98:	e638      	b.n	80c <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
     b9a:	b2e1      	uxtb	r1, r4
     b9c:	0028      	movs	r0, r5
     b9e:	4b2c      	ldr	r3, [pc, #176]	; (c50 <udc_process_setup+0x460>)
     ba0:	4798      	blx	r3
     ba2:	e78e      	b.n	ac2 <udc_process_setup+0x2d2>
	if (udd_g_ctrlreq.req.wLength) {
     ba4:	4b25      	ldr	r3, [pc, #148]	; (c3c <udc_process_setup+0x44c>)
     ba6:	88db      	ldrh	r3, [r3, #6]
     ba8:	2b00      	cmp	r3, #0
     baa:	d000      	beq.n	bae <udc_process_setup+0x3be>
     bac:	e635      	b.n	81a <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     bae:	4b23      	ldr	r3, [pc, #140]	; (c3c <udc_process_setup+0x44c>)
     bb0:	885b      	ldrh	r3, [r3, #2]
     bb2:	2b00      	cmp	r3, #0
     bb4:	d000      	beq.n	bb8 <udc_process_setup+0x3c8>
     bb6:	e630      	b.n	81a <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     bb8:	4b20      	ldr	r3, [pc, #128]	; (c3c <udc_process_setup+0x44c>)
     bba:	7918      	ldrb	r0, [r3, #4]
     bbc:	4b25      	ldr	r3, [pc, #148]	; (c54 <udc_process_setup+0x464>)
     bbe:	4798      	blx	r3
     bc0:	e77f      	b.n	ac2 <udc_process_setup+0x2d2>
	if (udd_g_ctrlreq.req.wLength) {
     bc2:	4b1e      	ldr	r3, [pc, #120]	; (c3c <udc_process_setup+0x44c>)
     bc4:	88db      	ldrh	r3, [r3, #6]
     bc6:	2b00      	cmp	r3, #0
     bc8:	d000      	beq.n	bcc <udc_process_setup+0x3dc>
     bca:	e626      	b.n	81a <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     bcc:	4b1b      	ldr	r3, [pc, #108]	; (c3c <udc_process_setup+0x44c>)
     bce:	885b      	ldrh	r3, [r3, #2]
     bd0:	2b00      	cmp	r3, #0
     bd2:	d000      	beq.n	bd6 <udc_process_setup+0x3e6>
     bd4:	e621      	b.n	81a <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
     bd6:	4c19      	ldr	r4, [pc, #100]	; (c3c <udc_process_setup+0x44c>)
     bd8:	7920      	ldrb	r0, [r4, #4]
     bda:	4b1f      	ldr	r3, [pc, #124]	; (c58 <udc_process_setup+0x468>)
     bdc:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     bde:	7920      	ldrb	r0, [r4, #4]
     be0:	4b1e      	ldr	r3, [pc, #120]	; (c5c <udc_process_setup+0x46c>)
     be2:	4798      	blx	r3
     be4:	e76d      	b.n	ac2 <udc_process_setup+0x2d2>
		return false;
     be6:	2000      	movs	r0, #0
     be8:	e76b      	b.n	ac2 <udc_process_setup+0x2d2>
	if (0 == udc_num_configuration) {
     bea:	4b15      	ldr	r3, [pc, #84]	; (c40 <udc_process_setup+0x450>)
     bec:	781b      	ldrb	r3, [r3, #0]
     bee:	2b00      	cmp	r3, #0
     bf0:	d100      	bne.n	bf4 <udc_process_setup+0x404>
     bf2:	e61a      	b.n	82a <udc_process_setup+0x3a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     bf4:	4b13      	ldr	r3, [pc, #76]	; (c44 <udc_process_setup+0x454>)
     bf6:	681b      	ldr	r3, [r3, #0]
     bf8:	681a      	ldr	r2, [r3, #0]
     bfa:	7912      	ldrb	r2, [r2, #4]
     bfc:	2a00      	cmp	r2, #0
     bfe:	d01a      	beq.n	c36 <udc_process_setup+0x446>
     c00:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     c02:	4e11      	ldr	r6, [pc, #68]	; (c48 <udc_process_setup+0x458>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     c04:	4f0f      	ldr	r7, [pc, #60]	; (c44 <udc_process_setup+0x454>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
     c06:	685b      	ldr	r3, [r3, #4]
     c08:	00aa      	lsls	r2, r5, #2
     c0a:	58d4      	ldr	r4, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     c0c:	68e3      	ldr	r3, [r4, #12]
     c0e:	4798      	blx	r3
     c10:	0001      	movs	r1, r0
     c12:	0028      	movs	r0, r5
     c14:	47b0      	blx	r6
     c16:	2800      	cmp	r0, #0
     c18:	d100      	bne.n	c1c <udc_process_setup+0x42c>
     c1a:	e606      	b.n	82a <udc_process_setup+0x3a>
		if (udi_api->setup()) {
     c1c:	68a3      	ldr	r3, [r4, #8]
     c1e:	4798      	blx	r3
     c20:	2800      	cmp	r0, #0
     c22:	d000      	beq.n	c26 <udc_process_setup+0x436>
     c24:	e601      	b.n	82a <udc_process_setup+0x3a>
			iface_num++) {
     c26:	3501      	adds	r5, #1
     c28:	b2ed      	uxtb	r5, r5
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     c2a:	683b      	ldr	r3, [r7, #0]
     c2c:	681a      	ldr	r2, [r3, #0]
     c2e:	7912      	ldrb	r2, [r2, #4]
     c30:	42aa      	cmp	r2, r5
     c32:	d8e8      	bhi.n	c06 <udc_process_setup+0x416>
     c34:	e5f9      	b.n	82a <udc_process_setup+0x3a>
	return false;
     c36:	2000      	movs	r0, #0
     c38:	e5f7      	b.n	82a <udc_process_setup+0x3a>
     c3a:	46c0      	nop			; (mov r8, r8)
     c3c:	200003f4 	.word	0x200003f4
     c40:	20000140 	.word	0x20000140
     c44:	20000144 	.word	0x20000144
     c48:	000005fd 	.word	0x000005fd
     c4c:	00000671 	.word	0x00000671
     c50:	000006dd 	.word	0x000006dd
     c54:	00002451 	.word	0x00002451
     c58:	00002161 	.word	0x00002161
     c5c:	00002321 	.word	0x00002321

00000c60 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     c60:	4b0c      	ldr	r3, [pc, #48]	; (c94 <cpu_irq_enter_critical+0x34>)
     c62:	681b      	ldr	r3, [r3, #0]
     c64:	2b00      	cmp	r3, #0
     c66:	d106      	bne.n	c76 <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     c68:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     c6c:	2b00      	cmp	r3, #0
     c6e:	d007      	beq.n	c80 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     c70:	2200      	movs	r2, #0
     c72:	4b09      	ldr	r3, [pc, #36]	; (c98 <cpu_irq_enter_critical+0x38>)
     c74:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     c76:	4a07      	ldr	r2, [pc, #28]	; (c94 <cpu_irq_enter_critical+0x34>)
     c78:	6813      	ldr	r3, [r2, #0]
     c7a:	3301      	adds	r3, #1
     c7c:	6013      	str	r3, [r2, #0]
}
     c7e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     c80:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     c82:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     c86:	2200      	movs	r2, #0
     c88:	4b04      	ldr	r3, [pc, #16]	; (c9c <cpu_irq_enter_critical+0x3c>)
     c8a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     c8c:	3201      	adds	r2, #1
     c8e:	4b02      	ldr	r3, [pc, #8]	; (c98 <cpu_irq_enter_critical+0x38>)
     c90:	701a      	strb	r2, [r3, #0]
     c92:	e7f0      	b.n	c76 <cpu_irq_enter_critical+0x16>
     c94:	2000014c 	.word	0x2000014c
     c98:	20000150 	.word	0x20000150
     c9c:	200000da 	.word	0x200000da

00000ca0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     ca0:	4b08      	ldr	r3, [pc, #32]	; (cc4 <cpu_irq_leave_critical+0x24>)
     ca2:	681a      	ldr	r2, [r3, #0]
     ca4:	3a01      	subs	r2, #1
     ca6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     ca8:	681b      	ldr	r3, [r3, #0]
     caa:	2b00      	cmp	r3, #0
     cac:	d109      	bne.n	cc2 <cpu_irq_leave_critical+0x22>
     cae:	4b06      	ldr	r3, [pc, #24]	; (cc8 <cpu_irq_leave_critical+0x28>)
     cb0:	781b      	ldrb	r3, [r3, #0]
     cb2:	2b00      	cmp	r3, #0
     cb4:	d005      	beq.n	cc2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     cb6:	2201      	movs	r2, #1
     cb8:	4b04      	ldr	r3, [pc, #16]	; (ccc <cpu_irq_leave_critical+0x2c>)
     cba:	701a      	strb	r2, [r3, #0]
     cbc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     cc0:	b662      	cpsie	i
	}
}
     cc2:	4770      	bx	lr
     cc4:	2000014c 	.word	0x2000014c
     cc8:	20000150 	.word	0x20000150
     ccc:	200000da 	.word	0x200000da

00000cd0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
     cd2:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
     cd4:	ac01      	add	r4, sp, #4
     cd6:	2501      	movs	r5, #1
     cd8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     cda:	2700      	movs	r7, #0
     cdc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     cde:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     ce0:	0021      	movs	r1, r4
     ce2:	200a      	movs	r0, #10
     ce4:	4e06      	ldr	r6, [pc, #24]	; (d00 <system_board_init+0x30>)
     ce6:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     ce8:	2280      	movs	r2, #128	; 0x80
     cea:	00d2      	lsls	r2, r2, #3
     cec:	4b05      	ldr	r3, [pc, #20]	; (d04 <system_board_init+0x34>)
     cee:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     cf0:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     cf2:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     cf4:	0021      	movs	r1, r4
     cf6:	200e      	movs	r0, #14
     cf8:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     cfa:	b003      	add	sp, #12
     cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     cfe:	46c0      	nop			; (mov r8, r8)
     d00:	00000de1 	.word	0x00000de1
     d04:	41004400 	.word	0x41004400

00000d08 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     d08:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     d0a:	2200      	movs	r2, #0
     d0c:	4b10      	ldr	r3, [pc, #64]	; (d50 <EIC_Handler+0x48>)
     d0e:	701a      	strb	r2, [r3, #0]
     d10:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     d12:	4910      	ldr	r1, [pc, #64]	; (d54 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     d14:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     d16:	4e10      	ldr	r6, [pc, #64]	; (d58 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     d18:	4c0d      	ldr	r4, [pc, #52]	; (d50 <EIC_Handler+0x48>)
     d1a:	e00a      	b.n	d32 <EIC_Handler+0x2a>
		return eics[eic_index];
     d1c:	490d      	ldr	r1, [pc, #52]	; (d54 <EIC_Handler+0x4c>)
     d1e:	e008      	b.n	d32 <EIC_Handler+0x2a>
     d20:	7823      	ldrb	r3, [r4, #0]
     d22:	3301      	adds	r3, #1
     d24:	b2db      	uxtb	r3, r3
     d26:	7023      	strb	r3, [r4, #0]
     d28:	2b0f      	cmp	r3, #15
     d2a:	d810      	bhi.n	d4e <EIC_Handler+0x46>
		return NULL;
     d2c:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     d2e:	2b1f      	cmp	r3, #31
     d30:	d9f4      	bls.n	d1c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     d32:	0028      	movs	r0, r5
     d34:	4018      	ands	r0, r3
     d36:	2201      	movs	r2, #1
     d38:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     d3a:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     d3c:	4210      	tst	r0, r2
     d3e:	d0ef      	beq.n	d20 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     d40:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     d42:	009b      	lsls	r3, r3, #2
     d44:	599b      	ldr	r3, [r3, r6]
     d46:	2b00      	cmp	r3, #0
     d48:	d0ea      	beq.n	d20 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     d4a:	4798      	blx	r3
     d4c:	e7e8      	b.n	d20 <EIC_Handler+0x18>
			}
		}
	}
}
     d4e:	bd70      	pop	{r4, r5, r6, pc}
     d50:	200001f5 	.word	0x200001f5
     d54:	40001800 	.word	0x40001800
     d58:	200001f8 	.word	0x200001f8

00000d5c <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     d5c:	4a04      	ldr	r2, [pc, #16]	; (d70 <_extint_enable+0x14>)
     d5e:	7813      	ldrb	r3, [r2, #0]
     d60:	2102      	movs	r1, #2
     d62:	430b      	orrs	r3, r1
     d64:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     d66:	7853      	ldrb	r3, [r2, #1]
     d68:	b25b      	sxtb	r3, r3
     d6a:	2b00      	cmp	r3, #0
     d6c:	dbfb      	blt.n	d66 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     d6e:	4770      	bx	lr
     d70:	40001800 	.word	0x40001800

00000d74 <_system_extint_init>:
{
     d74:	b500      	push	{lr}
     d76:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     d78:	4a12      	ldr	r2, [pc, #72]	; (dc4 <_system_extint_init+0x50>)
     d7a:	6993      	ldr	r3, [r2, #24]
     d7c:	2140      	movs	r1, #64	; 0x40
     d7e:	430b      	orrs	r3, r1
     d80:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     d82:	a901      	add	r1, sp, #4
     d84:	2300      	movs	r3, #0
     d86:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     d88:	2005      	movs	r0, #5
     d8a:	4b0f      	ldr	r3, [pc, #60]	; (dc8 <_system_extint_init+0x54>)
     d8c:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     d8e:	2005      	movs	r0, #5
     d90:	4b0e      	ldr	r3, [pc, #56]	; (dcc <_system_extint_init+0x58>)
     d92:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     d94:	4a0e      	ldr	r2, [pc, #56]	; (dd0 <_system_extint_init+0x5c>)
     d96:	7813      	ldrb	r3, [r2, #0]
     d98:	2101      	movs	r1, #1
     d9a:	430b      	orrs	r3, r1
     d9c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     d9e:	7853      	ldrb	r3, [r2, #1]
     da0:	b25b      	sxtb	r3, r3
     da2:	2b00      	cmp	r3, #0
     da4:	dbfb      	blt.n	d9e <_system_extint_init+0x2a>
     da6:	4b0b      	ldr	r3, [pc, #44]	; (dd4 <_system_extint_init+0x60>)
     da8:	0019      	movs	r1, r3
     daa:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     dac:	2200      	movs	r2, #0
     dae:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     db0:	4299      	cmp	r1, r3
     db2:	d1fc      	bne.n	dae <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     db4:	2210      	movs	r2, #16
     db6:	4b08      	ldr	r3, [pc, #32]	; (dd8 <_system_extint_init+0x64>)
     db8:	601a      	str	r2, [r3, #0]
	_extint_enable();
     dba:	4b08      	ldr	r3, [pc, #32]	; (ddc <_system_extint_init+0x68>)
     dbc:	4798      	blx	r3
}
     dbe:	b003      	add	sp, #12
     dc0:	bd00      	pop	{pc}
     dc2:	46c0      	nop			; (mov r8, r8)
     dc4:	40000400 	.word	0x40000400
     dc8:	0000198d 	.word	0x0000198d
     dcc:	00001901 	.word	0x00001901
     dd0:	40001800 	.word	0x40001800
     dd4:	200001f8 	.word	0x200001f8
     dd8:	e000e100 	.word	0xe000e100
     ddc:	00000d5d 	.word	0x00000d5d

00000de0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     de0:	b500      	push	{lr}
     de2:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     de4:	ab01      	add	r3, sp, #4
     de6:	2280      	movs	r2, #128	; 0x80
     de8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     dea:	780a      	ldrb	r2, [r1, #0]
     dec:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     dee:	784a      	ldrb	r2, [r1, #1]
     df0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     df2:	788a      	ldrb	r2, [r1, #2]
     df4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     df6:	0019      	movs	r1, r3
     df8:	4b01      	ldr	r3, [pc, #4]	; (e00 <port_pin_set_config+0x20>)
     dfa:	4798      	blx	r3
}
     dfc:	b003      	add	sp, #12
     dfe:	bd00      	pop	{pc}
     e00:	00001a85 	.word	0x00001a85

00000e04 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     e04:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     e06:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     e08:	2340      	movs	r3, #64	; 0x40
     e0a:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     e0c:	4281      	cmp	r1, r0
     e0e:	d202      	bcs.n	e16 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     e10:	0018      	movs	r0, r3
     e12:	bd10      	pop	{r4, pc}
		baud_calculated++;
     e14:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     e16:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     e18:	1c63      	adds	r3, r4, #1
     e1a:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     e1c:	4288      	cmp	r0, r1
     e1e:	d9f9      	bls.n	e14 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     e20:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     e22:	2cff      	cmp	r4, #255	; 0xff
     e24:	d8f4      	bhi.n	e10 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     e26:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     e28:	2300      	movs	r3, #0
     e2a:	e7f1      	b.n	e10 <_sercom_get_sync_baud_val+0xc>

00000e2c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     e2c:	b510      	push	{r4, lr}
     e2e:	b082      	sub	sp, #8
     e30:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     e32:	4b0e      	ldr	r3, [pc, #56]	; (e6c <sercom_set_gclk_generator+0x40>)
     e34:	781b      	ldrb	r3, [r3, #0]
     e36:	2b00      	cmp	r3, #0
     e38:	d007      	beq.n	e4a <sercom_set_gclk_generator+0x1e>
     e3a:	2900      	cmp	r1, #0
     e3c:	d105      	bne.n	e4a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     e3e:	4b0b      	ldr	r3, [pc, #44]	; (e6c <sercom_set_gclk_generator+0x40>)
     e40:	785b      	ldrb	r3, [r3, #1]
     e42:	4283      	cmp	r3, r0
     e44:	d010      	beq.n	e68 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     e46:	201d      	movs	r0, #29
     e48:	e00c      	b.n	e64 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     e4a:	a901      	add	r1, sp, #4
     e4c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     e4e:	2013      	movs	r0, #19
     e50:	4b07      	ldr	r3, [pc, #28]	; (e70 <sercom_set_gclk_generator+0x44>)
     e52:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     e54:	2013      	movs	r0, #19
     e56:	4b07      	ldr	r3, [pc, #28]	; (e74 <sercom_set_gclk_generator+0x48>)
     e58:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     e5a:	4b04      	ldr	r3, [pc, #16]	; (e6c <sercom_set_gclk_generator+0x40>)
     e5c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     e5e:	2201      	movs	r2, #1
     e60:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     e62:	2000      	movs	r0, #0
}
     e64:	b002      	add	sp, #8
     e66:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     e68:	2000      	movs	r0, #0
     e6a:	e7fb      	b.n	e64 <sercom_set_gclk_generator+0x38>
     e6c:	20000154 	.word	0x20000154
     e70:	0000198d 	.word	0x0000198d
     e74:	00001901 	.word	0x00001901

00000e78 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     e78:	4b2b      	ldr	r3, [pc, #172]	; (f28 <_sercom_get_default_pad+0xb0>)
     e7a:	4298      	cmp	r0, r3
     e7c:	d023      	beq.n	ec6 <_sercom_get_default_pad+0x4e>
     e7e:	d90f      	bls.n	ea0 <_sercom_get_default_pad+0x28>
     e80:	4b2a      	ldr	r3, [pc, #168]	; (f2c <_sercom_get_default_pad+0xb4>)
     e82:	4298      	cmp	r0, r3
     e84:	d02f      	beq.n	ee6 <_sercom_get_default_pad+0x6e>
     e86:	4b2a      	ldr	r3, [pc, #168]	; (f30 <_sercom_get_default_pad+0xb8>)
     e88:	4298      	cmp	r0, r3
     e8a:	d142      	bne.n	f12 <_sercom_get_default_pad+0x9a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e8c:	2901      	cmp	r1, #1
     e8e:	d03a      	beq.n	f06 <_sercom_get_default_pad+0x8e>
     e90:	2900      	cmp	r1, #0
     e92:	d046      	beq.n	f22 <_sercom_get_default_pad+0xaa>
     e94:	2902      	cmp	r1, #2
     e96:	d038      	beq.n	f0a <_sercom_get_default_pad+0x92>
     e98:	2903      	cmp	r1, #3
     e9a:	d038      	beq.n	f0e <_sercom_get_default_pad+0x96>
	}

	Assert(false);
	return 0;
     e9c:	2000      	movs	r0, #0
     e9e:	e039      	b.n	f14 <_sercom_get_default_pad+0x9c>
	switch ((uintptr_t)sercom_module) {
     ea0:	4b24      	ldr	r3, [pc, #144]	; (f34 <_sercom_get_default_pad+0xbc>)
     ea2:	4298      	cmp	r0, r3
     ea4:	d135      	bne.n	f12 <_sercom_get_default_pad+0x9a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ea6:	2901      	cmp	r1, #1
     ea8:	d007      	beq.n	eba <_sercom_get_default_pad+0x42>
     eaa:	2900      	cmp	r1, #0
     eac:	d033      	beq.n	f16 <_sercom_get_default_pad+0x9e>
     eae:	2902      	cmp	r1, #2
     eb0:	d005      	beq.n	ebe <_sercom_get_default_pad+0x46>
     eb2:	2903      	cmp	r1, #3
     eb4:	d005      	beq.n	ec2 <_sercom_get_default_pad+0x4a>
	return 0;
     eb6:	2000      	movs	r0, #0
     eb8:	e02c      	b.n	f14 <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     eba:	481f      	ldr	r0, [pc, #124]	; (f38 <_sercom_get_default_pad+0xc0>)
     ebc:	e02a      	b.n	f14 <_sercom_get_default_pad+0x9c>
     ebe:	481f      	ldr	r0, [pc, #124]	; (f3c <_sercom_get_default_pad+0xc4>)
     ec0:	e028      	b.n	f14 <_sercom_get_default_pad+0x9c>
     ec2:	481f      	ldr	r0, [pc, #124]	; (f40 <_sercom_get_default_pad+0xc8>)
     ec4:	e026      	b.n	f14 <_sercom_get_default_pad+0x9c>
     ec6:	2901      	cmp	r1, #1
     ec8:	d007      	beq.n	eda <_sercom_get_default_pad+0x62>
     eca:	2900      	cmp	r1, #0
     ecc:	d025      	beq.n	f1a <_sercom_get_default_pad+0xa2>
     ece:	2902      	cmp	r1, #2
     ed0:	d005      	beq.n	ede <_sercom_get_default_pad+0x66>
     ed2:	2903      	cmp	r1, #3
     ed4:	d005      	beq.n	ee2 <_sercom_get_default_pad+0x6a>
	return 0;
     ed6:	2000      	movs	r0, #0
     ed8:	e01c      	b.n	f14 <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     eda:	481a      	ldr	r0, [pc, #104]	; (f44 <_sercom_get_default_pad+0xcc>)
     edc:	e01a      	b.n	f14 <_sercom_get_default_pad+0x9c>
     ede:	481a      	ldr	r0, [pc, #104]	; (f48 <_sercom_get_default_pad+0xd0>)
     ee0:	e018      	b.n	f14 <_sercom_get_default_pad+0x9c>
     ee2:	481a      	ldr	r0, [pc, #104]	; (f4c <_sercom_get_default_pad+0xd4>)
     ee4:	e016      	b.n	f14 <_sercom_get_default_pad+0x9c>
     ee6:	2901      	cmp	r1, #1
     ee8:	d007      	beq.n	efa <_sercom_get_default_pad+0x82>
     eea:	2900      	cmp	r1, #0
     eec:	d017      	beq.n	f1e <_sercom_get_default_pad+0xa6>
     eee:	2902      	cmp	r1, #2
     ef0:	d005      	beq.n	efe <_sercom_get_default_pad+0x86>
     ef2:	2903      	cmp	r1, #3
     ef4:	d005      	beq.n	f02 <_sercom_get_default_pad+0x8a>
	return 0;
     ef6:	2000      	movs	r0, #0
     ef8:	e00c      	b.n	f14 <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     efa:	4815      	ldr	r0, [pc, #84]	; (f50 <_sercom_get_default_pad+0xd8>)
     efc:	e00a      	b.n	f14 <_sercom_get_default_pad+0x9c>
     efe:	4815      	ldr	r0, [pc, #84]	; (f54 <_sercom_get_default_pad+0xdc>)
     f00:	e008      	b.n	f14 <_sercom_get_default_pad+0x9c>
     f02:	4815      	ldr	r0, [pc, #84]	; (f58 <_sercom_get_default_pad+0xe0>)
     f04:	e006      	b.n	f14 <_sercom_get_default_pad+0x9c>
     f06:	4815      	ldr	r0, [pc, #84]	; (f5c <_sercom_get_default_pad+0xe4>)
     f08:	e004      	b.n	f14 <_sercom_get_default_pad+0x9c>
     f0a:	4815      	ldr	r0, [pc, #84]	; (f60 <_sercom_get_default_pad+0xe8>)
     f0c:	e002      	b.n	f14 <_sercom_get_default_pad+0x9c>
     f0e:	4815      	ldr	r0, [pc, #84]	; (f64 <_sercom_get_default_pad+0xec>)
     f10:	e000      	b.n	f14 <_sercom_get_default_pad+0x9c>
	return 0;
     f12:	2000      	movs	r0, #0
}
     f14:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     f16:	4814      	ldr	r0, [pc, #80]	; (f68 <_sercom_get_default_pad+0xf0>)
     f18:	e7fc      	b.n	f14 <_sercom_get_default_pad+0x9c>
     f1a:	2003      	movs	r0, #3
     f1c:	e7fa      	b.n	f14 <_sercom_get_default_pad+0x9c>
     f1e:	4813      	ldr	r0, [pc, #76]	; (f6c <_sercom_get_default_pad+0xf4>)
     f20:	e7f8      	b.n	f14 <_sercom_get_default_pad+0x9c>
     f22:	4813      	ldr	r0, [pc, #76]	; (f70 <_sercom_get_default_pad+0xf8>)
     f24:	e7f6      	b.n	f14 <_sercom_get_default_pad+0x9c>
     f26:	46c0      	nop			; (mov r8, r8)
     f28:	42000c00 	.word	0x42000c00
     f2c:	42001000 	.word	0x42001000
     f30:	42001400 	.word	0x42001400
     f34:	42000800 	.word	0x42000800
     f38:	00050003 	.word	0x00050003
     f3c:	00060003 	.word	0x00060003
     f40:	00070003 	.word	0x00070003
     f44:	00010003 	.word	0x00010003
     f48:	001e0003 	.word	0x001e0003
     f4c:	001f0003 	.word	0x001f0003
     f50:	00090003 	.word	0x00090003
     f54:	000a0003 	.word	0x000a0003
     f58:	000b0003 	.word	0x000b0003
     f5c:	00110003 	.word	0x00110003
     f60:	00120003 	.word	0x00120003
     f64:	00130003 	.word	0x00130003
     f68:	00040003 	.word	0x00040003
     f6c:	00080003 	.word	0x00080003
     f70:	00100003 	.word	0x00100003

00000f74 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     f74:	b530      	push	{r4, r5, lr}
     f76:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     f78:	466a      	mov	r2, sp
     f7a:	4b0f      	ldr	r3, [pc, #60]	; (fb8 <_sercom_get_sercom_inst_index+0x44>)
     f7c:	cb32      	ldmia	r3!, {r1, r4, r5}
     f7e:	c232      	stmia	r2!, {r1, r4, r5}
     f80:	681b      	ldr	r3, [r3, #0]
     f82:	6013      	str	r3, [r2, #0]

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     f84:	0003      	movs	r3, r0
     f86:	9a00      	ldr	r2, [sp, #0]
     f88:	4282      	cmp	r2, r0
     f8a:	d011      	beq.n	fb0 <_sercom_get_sercom_inst_index+0x3c>
     f8c:	9a01      	ldr	r2, [sp, #4]
     f8e:	4282      	cmp	r2, r0
     f90:	d00a      	beq.n	fa8 <_sercom_get_sercom_inst_index+0x34>
     f92:	9a02      	ldr	r2, [sp, #8]
     f94:	4282      	cmp	r2, r0
     f96:	d009      	beq.n	fac <_sercom_get_sercom_inst_index+0x38>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     f98:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     f9a:	9a03      	ldr	r2, [sp, #12]
     f9c:	429a      	cmp	r2, r3
     f9e:	d001      	beq.n	fa4 <_sercom_get_sercom_inst_index+0x30>
}
     fa0:	b005      	add	sp, #20
     fa2:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     fa4:	3003      	adds	r0, #3
     fa6:	e004      	b.n	fb2 <_sercom_get_sercom_inst_index+0x3e>
     fa8:	2001      	movs	r0, #1
     faa:	e002      	b.n	fb2 <_sercom_get_sercom_inst_index+0x3e>
     fac:	2002      	movs	r0, #2
     fae:	e000      	b.n	fb2 <_sercom_get_sercom_inst_index+0x3e>
     fb0:	2000      	movs	r0, #0
			return i;
     fb2:	b2c0      	uxtb	r0, r0
     fb4:	e7f4      	b.n	fa0 <_sercom_get_sercom_inst_index+0x2c>
     fb6:	46c0      	nop			; (mov r8, r8)
     fb8:	00003ee4 	.word	0x00003ee4

00000fbc <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     fbc:	4770      	bx	lr
	...

00000fc0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     fc0:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     fc2:	4b0b      	ldr	r3, [pc, #44]	; (ff0 <_sercom_set_handler+0x30>)
     fc4:	781b      	ldrb	r3, [r3, #0]
     fc6:	2b00      	cmp	r3, #0
     fc8:	d10e      	bne.n	fe8 <_sercom_set_handler+0x28>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     fca:	4c0a      	ldr	r4, [pc, #40]	; (ff4 <_sercom_set_handler+0x34>)
     fcc:	4d0a      	ldr	r5, [pc, #40]	; (ff8 <_sercom_set_handler+0x38>)
     fce:	6025      	str	r5, [r4, #0]
			_sercom_instances[i] = NULL;
     fd0:	4b0a      	ldr	r3, [pc, #40]	; (ffc <_sercom_set_handler+0x3c>)
     fd2:	2200      	movs	r2, #0
     fd4:	601a      	str	r2, [r3, #0]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     fd6:	6065      	str	r5, [r4, #4]
			_sercom_instances[i] = NULL;
     fd8:	605a      	str	r2, [r3, #4]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     fda:	60a5      	str	r5, [r4, #8]
			_sercom_instances[i] = NULL;
     fdc:	609a      	str	r2, [r3, #8]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     fde:	60e5      	str	r5, [r4, #12]
			_sercom_instances[i] = NULL;
     fe0:	60da      	str	r2, [r3, #12]
		}

		_handler_table_initialized = true;
     fe2:	3201      	adds	r2, #1
     fe4:	4b02      	ldr	r3, [pc, #8]	; (ff0 <_sercom_set_handler+0x30>)
     fe6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     fe8:	0080      	lsls	r0, r0, #2
     fea:	4b02      	ldr	r3, [pc, #8]	; (ff4 <_sercom_set_handler+0x34>)
     fec:	50c1      	str	r1, [r0, r3]
}
     fee:	bd30      	pop	{r4, r5, pc}
     ff0:	20000156 	.word	0x20000156
     ff4:	20000158 	.word	0x20000158
     ff8:	00000fbd 	.word	0x00000fbd
     ffc:	20000238 	.word	0x20000238

00001000 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1000:	b510      	push	{r4, lr}
    1002:	b082      	sub	sp, #8
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1004:	ac01      	add	r4, sp, #4
    1006:	2309      	movs	r3, #9
    1008:	7023      	strb	r3, [r4, #0]
    100a:	3301      	adds	r3, #1
    100c:	7063      	strb	r3, [r4, #1]
    100e:	3301      	adds	r3, #1
    1010:	70a3      	strb	r3, [r4, #2]
    1012:	3301      	adds	r3, #1
    1014:	70e3      	strb	r3, [r4, #3]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1016:	4b02      	ldr	r3, [pc, #8]	; (1020 <_sercom_get_interrupt_vector+0x20>)
    1018:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    101a:	5620      	ldrsb	r0, [r4, r0]
}
    101c:	b002      	add	sp, #8
    101e:	bd10      	pop	{r4, pc}
    1020:	00000f75 	.word	0x00000f75

00001024 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1024:	b510      	push	{r4, lr}
    1026:	4b02      	ldr	r3, [pc, #8]	; (1030 <SERCOM0_Handler+0xc>)
    1028:	681b      	ldr	r3, [r3, #0]
    102a:	2000      	movs	r0, #0
    102c:	4798      	blx	r3
    102e:	bd10      	pop	{r4, pc}
    1030:	20000158 	.word	0x20000158

00001034 <SERCOM1_Handler>:
    1034:	b510      	push	{r4, lr}
    1036:	4b02      	ldr	r3, [pc, #8]	; (1040 <SERCOM1_Handler+0xc>)
    1038:	685b      	ldr	r3, [r3, #4]
    103a:	2001      	movs	r0, #1
    103c:	4798      	blx	r3
    103e:	bd10      	pop	{r4, pc}
    1040:	20000158 	.word	0x20000158

00001044 <SERCOM2_Handler>:
    1044:	b510      	push	{r4, lr}
    1046:	4b02      	ldr	r3, [pc, #8]	; (1050 <SERCOM2_Handler+0xc>)
    1048:	689b      	ldr	r3, [r3, #8]
    104a:	2002      	movs	r0, #2
    104c:	4798      	blx	r3
    104e:	bd10      	pop	{r4, pc}
    1050:	20000158 	.word	0x20000158

00001054 <SERCOM3_Handler>:
    1054:	b510      	push	{r4, lr}
    1056:	4b02      	ldr	r3, [pc, #8]	; (1060 <SERCOM3_Handler+0xc>)
    1058:	68db      	ldr	r3, [r3, #12]
    105a:	2003      	movs	r0, #3
    105c:	4798      	blx	r3
    105e:	bd10      	pop	{r4, pc}
    1060:	20000158 	.word	0x20000158

00001064 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1064:	b5f0      	push	{r4, r5, r6, r7, lr}
    1066:	b08b      	sub	sp, #44	; 0x2c
    1068:	0005      	movs	r5, r0
    106a:	000c      	movs	r4, r1
    106c:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    106e:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1070:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    1072:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1074:	079b      	lsls	r3, r3, #30
    1076:	d501      	bpl.n	107c <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    1078:	b00b      	add	sp, #44	; 0x2c
    107a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    107c:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    107e:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1080:	07db      	lsls	r3, r3, #31
    1082:	d4f9      	bmi.n	1078 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1084:	0008      	movs	r0, r1
    1086:	4b60      	ldr	r3, [pc, #384]	; (1208 <spi_init+0x1a4>)
    1088:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    108a:	4a60      	ldr	r2, [pc, #384]	; (120c <spi_init+0x1a8>)
    108c:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    108e:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1090:	2301      	movs	r3, #1
    1092:	40bb      	lsls	r3, r7
    1094:	430b      	orrs	r3, r1
    1096:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1098:	a909      	add	r1, sp, #36	; 0x24
    109a:	2724      	movs	r7, #36	; 0x24
    109c:	5df3      	ldrb	r3, [r6, r7]
    109e:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    10a0:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    10a2:	b2c3      	uxtb	r3, r0
    10a4:	9301      	str	r3, [sp, #4]
    10a6:	0018      	movs	r0, r3
    10a8:	4b59      	ldr	r3, [pc, #356]	; (1210 <spi_init+0x1ac>)
    10aa:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    10ac:	9801      	ldr	r0, [sp, #4]
    10ae:	4b59      	ldr	r3, [pc, #356]	; (1214 <spi_init+0x1b0>)
    10b0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    10b2:	5df0      	ldrb	r0, [r6, r7]
    10b4:	2100      	movs	r1, #0
    10b6:	4b58      	ldr	r3, [pc, #352]	; (1218 <spi_init+0x1b4>)
    10b8:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    10ba:	7833      	ldrb	r3, [r6, #0]
    10bc:	2b01      	cmp	r3, #1
    10be:	d038      	beq.n	1132 <spi_init+0xce>
    10c0:	002b      	movs	r3, r5
    10c2:	330c      	adds	r3, #12
    10c4:	0029      	movs	r1, r5
    10c6:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    10c8:	2200      	movs	r2, #0
    10ca:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    10cc:	428b      	cmp	r3, r1
    10ce:	d1fc      	bne.n	10ca <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    10d0:	2300      	movs	r3, #0
    10d2:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    10d4:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    10d6:	2400      	movs	r4, #0
    10d8:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    10da:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    10dc:	3336      	adds	r3, #54	; 0x36
    10de:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    10e0:	3301      	adds	r3, #1
    10e2:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    10e4:	3301      	adds	r3, #1
    10e6:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    10e8:	3b35      	subs	r3, #53	; 0x35
    10ea:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    10ec:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    10ee:	6828      	ldr	r0, [r5, #0]
    10f0:	4b45      	ldr	r3, [pc, #276]	; (1208 <spi_init+0x1a4>)
    10f2:	4798      	blx	r3
    10f4:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    10f6:	4949      	ldr	r1, [pc, #292]	; (121c <spi_init+0x1b8>)
    10f8:	4b49      	ldr	r3, [pc, #292]	; (1220 <spi_init+0x1bc>)
    10fa:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    10fc:	00bf      	lsls	r7, r7, #2
    10fe:	4b49      	ldr	r3, [pc, #292]	; (1224 <spi_init+0x1c0>)
    1100:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1102:	682f      	ldr	r7, [r5, #0]
    1104:	ab04      	add	r3, sp, #16
    1106:	2280      	movs	r2, #128	; 0x80
    1108:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    110a:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    110c:	3a7f      	subs	r2, #127	; 0x7f
    110e:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1110:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    1112:	7833      	ldrb	r3, [r6, #0]
    1114:	2b00      	cmp	r3, #0
    1116:	d102      	bne.n	111e <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1118:	2200      	movs	r2, #0
    111a:	ab04      	add	r3, sp, #16
    111c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    111e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1120:	9305      	str	r3, [sp, #20]
    1122:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1124:	9306      	str	r3, [sp, #24]
    1126:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1128:	9307      	str	r3, [sp, #28]
    112a:	6b73      	ldr	r3, [r6, #52]	; 0x34
    112c:	9308      	str	r3, [sp, #32]
    112e:	2400      	movs	r4, #0
    1130:	e00b      	b.n	114a <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1132:	6823      	ldr	r3, [r4, #0]
    1134:	220c      	movs	r2, #12
    1136:	4313      	orrs	r3, r2
    1138:	6023      	str	r3, [r4, #0]
    113a:	e7c1      	b.n	10c0 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    113c:	0038      	movs	r0, r7
    113e:	4b3a      	ldr	r3, [pc, #232]	; (1228 <spi_init+0x1c4>)
    1140:	4798      	blx	r3
    1142:	e00a      	b.n	115a <spi_init+0xf6>
    1144:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1146:	2c04      	cmp	r4, #4
    1148:	d010      	beq.n	116c <spi_init+0x108>
    114a:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    114c:	00a3      	lsls	r3, r4, #2
    114e:	aa02      	add	r2, sp, #8
    1150:	200c      	movs	r0, #12
    1152:	1812      	adds	r2, r2, r0
    1154:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    1156:	2800      	cmp	r0, #0
    1158:	d0f0      	beq.n	113c <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    115a:	1c43      	adds	r3, r0, #1
    115c:	d0f2      	beq.n	1144 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    115e:	a904      	add	r1, sp, #16
    1160:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1162:	0c00      	lsrs	r0, r0, #16
    1164:	b2c0      	uxtb	r0, r0
    1166:	4b31      	ldr	r3, [pc, #196]	; (122c <spi_init+0x1c8>)
    1168:	4798      	blx	r3
    116a:	e7eb      	b.n	1144 <spi_init+0xe0>
	module->mode             = config->mode;
    116c:	7833      	ldrb	r3, [r6, #0]
    116e:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    1170:	7c33      	ldrb	r3, [r6, #16]
    1172:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    1174:	7cb3      	ldrb	r3, [r6, #18]
    1176:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    1178:	7d33      	ldrb	r3, [r6, #20]
    117a:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    117c:	2200      	movs	r2, #0
    117e:	ab02      	add	r3, sp, #8
    1180:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    1182:	7833      	ldrb	r3, [r6, #0]
    1184:	2b01      	cmp	r3, #1
    1186:	d028      	beq.n	11da <spi_init+0x176>
	ctrla |= config->transfer_mode;
    1188:	6873      	ldr	r3, [r6, #4]
    118a:	68b2      	ldr	r2, [r6, #8]
    118c:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    118e:	68f2      	ldr	r2, [r6, #12]
    1190:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    1192:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    1194:	7c72      	ldrb	r2, [r6, #17]
    1196:	2a00      	cmp	r2, #0
    1198:	d103      	bne.n	11a2 <spi_init+0x13e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    119a:	4a25      	ldr	r2, [pc, #148]	; (1230 <spi_init+0x1cc>)
    119c:	7892      	ldrb	r2, [r2, #2]
    119e:	0792      	lsls	r2, r2, #30
    11a0:	d501      	bpl.n	11a6 <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    11a2:	2280      	movs	r2, #128	; 0x80
    11a4:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    11a6:	7cb2      	ldrb	r2, [r6, #18]
    11a8:	2a00      	cmp	r2, #0
    11aa:	d002      	beq.n	11b2 <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    11ac:	2280      	movs	r2, #128	; 0x80
    11ae:	0292      	lsls	r2, r2, #10
    11b0:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    11b2:	7cf2      	ldrb	r2, [r6, #19]
    11b4:	2a00      	cmp	r2, #0
    11b6:	d002      	beq.n	11be <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    11b8:	2280      	movs	r2, #128	; 0x80
    11ba:	0092      	lsls	r2, r2, #2
    11bc:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    11be:	7d32      	ldrb	r2, [r6, #20]
    11c0:	2a00      	cmp	r2, #0
    11c2:	d002      	beq.n	11ca <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    11c4:	2280      	movs	r2, #128	; 0x80
    11c6:	0192      	lsls	r2, r2, #6
    11c8:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    11ca:	683a      	ldr	r2, [r7, #0]
    11cc:	4313      	orrs	r3, r2
    11ce:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    11d0:	687b      	ldr	r3, [r7, #4]
    11d2:	430b      	orrs	r3, r1
    11d4:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    11d6:	2000      	movs	r0, #0
    11d8:	e74e      	b.n	1078 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    11da:	6828      	ldr	r0, [r5, #0]
    11dc:	4b0a      	ldr	r3, [pc, #40]	; (1208 <spi_init+0x1a4>)
    11de:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    11e0:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    11e2:	b2c0      	uxtb	r0, r0
    11e4:	4b13      	ldr	r3, [pc, #76]	; (1234 <spi_init+0x1d0>)
    11e6:	4798      	blx	r3
    11e8:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    11ea:	ab02      	add	r3, sp, #8
    11ec:	1d9a      	adds	r2, r3, #6
    11ee:	69b0      	ldr	r0, [r6, #24]
    11f0:	4b11      	ldr	r3, [pc, #68]	; (1238 <spi_init+0x1d4>)
    11f2:	4798      	blx	r3
    11f4:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    11f6:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    11f8:	2b00      	cmp	r3, #0
    11fa:	d000      	beq.n	11fe <spi_init+0x19a>
    11fc:	e73c      	b.n	1078 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    11fe:	ab02      	add	r3, sp, #8
    1200:	3306      	adds	r3, #6
    1202:	781b      	ldrb	r3, [r3, #0]
    1204:	733b      	strb	r3, [r7, #12]
    1206:	e7bf      	b.n	1188 <spi_init+0x124>
    1208:	00000f75 	.word	0x00000f75
    120c:	40000400 	.word	0x40000400
    1210:	0000198d 	.word	0x0000198d
    1214:	00001901 	.word	0x00001901
    1218:	00000e2d 	.word	0x00000e2d
    121c:	0000128d 	.word	0x0000128d
    1220:	00000fc1 	.word	0x00000fc1
    1224:	20000238 	.word	0x20000238
    1228:	00000e79 	.word	0x00000e79
    122c:	00001a85 	.word	0x00001a85
    1230:	41002000 	.word	0x41002000
    1234:	000019a9 	.word	0x000019a9
    1238:	00000e05 	.word	0x00000e05

0000123c <spi_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    123c:	1c93      	adds	r3, r2, #2
    123e:	009b      	lsls	r3, r3, #2
    1240:	18c3      	adds	r3, r0, r3
    1242:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback |= (1 << callback_type);
    1244:	2136      	movs	r1, #54	; 0x36
    1246:	2301      	movs	r3, #1
    1248:	4093      	lsls	r3, r2
    124a:	001a      	movs	r2, r3
    124c:	5c43      	ldrb	r3, [r0, r1]
    124e:	4313      	orrs	r3, r2
    1250:	5443      	strb	r3, [r0, r1]
}
    1252:	4770      	bx	lr

00001254 <spi_transceive_buffer_job>:
enum status_code spi_transceive_buffer_job(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
    1254:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1256:	2417      	movs	r4, #23
	if (length == 0) {
    1258:	2b00      	cmp	r3, #0
    125a:	d101      	bne.n	1260 <spi_transceive_buffer_job+0xc>

	/* Issue internal transceive */
	_spi_transceive_buffer(module, tx_data, rx_data, length);

	return STATUS_OK;
}
    125c:	0020      	movs	r0, r4
    125e:	bd30      	pop	{r4, r5, pc}
	if (!(module->receiver_enabled)) {
    1260:	79c5      	ldrb	r5, [r0, #7]
		return STATUS_ERR_DENIED;
    1262:	3405      	adds	r4, #5
	if (!(module->receiver_enabled)) {
    1264:	2d00      	cmp	r5, #0
    1266:	d0f9      	beq.n	125c <spi_transceive_buffer_job+0x8>
	if (module->status == STATUS_BUSY) {
    1268:	341c      	adds	r4, #28
    126a:	5d05      	ldrb	r5, [r0, r4]
		return STATUS_BUSY;
    126c:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    126e:	2d05      	cmp	r5, #5
    1270:	d0f4      	beq.n	125c <spi_transceive_buffer_job+0x8>
	module->remaining_tx_buffer_length = length;
    1272:	8683      	strh	r3, [r0, #52]	; 0x34
	module->remaining_rx_buffer_length = length;
    1274:	8603      	strh	r3, [r0, #48]	; 0x30
	module->rx_buffer_ptr = rx_data;
    1276:	6282      	str	r2, [r0, #40]	; 0x28
	module->tx_buffer_ptr = tx_data;
    1278:	62c1      	str	r1, [r0, #44]	; 0x2c
	module->status = STATUS_BUSY;
    127a:	2305      	movs	r3, #5
    127c:	2238      	movs	r2, #56	; 0x38
    127e:	5483      	strb	r3, [r0, r2]
	module->dir = SPI_DIRECTION_BOTH;
    1280:	3a36      	subs	r2, #54	; 0x36
    1282:	7242      	strb	r2, [r0, #9]
	SercomSpi *const hw = &(module->hw->SPI);
    1284:	6802      	ldr	r2, [r0, #0]
	hw->INTENSET.reg = (SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY |
    1286:	7593      	strb	r3, [r2, #22]
	return STATUS_OK;
    1288:	2400      	movs	r4, #0
    128a:	e7e7      	b.n	125c <spi_transceive_buffer_job+0x8>

0000128c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    128c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    128e:	0080      	lsls	r0, r0, #2
    1290:	4b70      	ldr	r3, [pc, #448]	; (1454 <_spi_interrupt_handler+0x1c8>)
    1292:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1294:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    1296:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    1298:	5ce7      	ldrb	r7, [r4, r3]
    129a:	2236      	movs	r2, #54	; 0x36
    129c:	5ca2      	ldrb	r2, [r4, r2]
    129e:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    12a0:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    12a2:	7db5      	ldrb	r5, [r6, #22]
    12a4:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    12a6:	07eb      	lsls	r3, r5, #31
    12a8:	d502      	bpl.n	12b0 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    12aa:	7963      	ldrb	r3, [r4, #5]
    12ac:	2b01      	cmp	r3, #1
    12ae:	d01e      	beq.n	12ee <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    12b0:	076b      	lsls	r3, r5, #29
    12b2:	d511      	bpl.n	12d8 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    12b4:	8b73      	ldrh	r3, [r6, #26]
    12b6:	075b      	lsls	r3, r3, #29
    12b8:	d55a      	bpl.n	1370 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    12ba:	7a63      	ldrb	r3, [r4, #9]
    12bc:	2b01      	cmp	r3, #1
    12be:	d008      	beq.n	12d2 <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    12c0:	221e      	movs	r2, #30
    12c2:	2338      	movs	r3, #56	; 0x38
    12c4:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    12c6:	3b35      	subs	r3, #53	; 0x35
    12c8:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    12ca:	3302      	adds	r3, #2
    12cc:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    12ce:	073b      	lsls	r3, r7, #28
    12d0:	d44a      	bmi.n	1368 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    12d2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    12d4:	2304      	movs	r3, #4
    12d6:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    12d8:	07ab      	lsls	r3, r5, #30
    12da:	d503      	bpl.n	12e4 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    12dc:	7963      	ldrb	r3, [r4, #5]
    12de:	2b01      	cmp	r3, #1
    12e0:	d100      	bne.n	12e4 <_spi_interrupt_handler+0x58>
    12e2:	e097      	b.n	1414 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    12e4:	b26d      	sxtb	r5, r5
    12e6:	2d00      	cmp	r5, #0
    12e8:	da00      	bge.n	12ec <_spi_interrupt_handler+0x60>
    12ea:	e0a9      	b.n	1440 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    12ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    12ee:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    12f0:	2b00      	cmp	r3, #0
    12f2:	d022      	beq.n	133a <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    12f4:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    12f6:	2b00      	cmp	r3, #0
    12f8:	d0da      	beq.n	12b0 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    12fa:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    12fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    12fe:	7813      	ldrb	r3, [r2, #0]
    1300:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    1302:	1c50      	adds	r0, r2, #1
    1304:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1306:	79a0      	ldrb	r0, [r4, #6]
    1308:	2801      	cmp	r0, #1
    130a:	d027      	beq.n	135c <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    130c:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    130e:	05db      	lsls	r3, r3, #23
    1310:	0ddb      	lsrs	r3, r3, #23
    1312:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    1314:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    1316:	3b01      	subs	r3, #1
    1318:	b29b      	uxth	r3, r3
    131a:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    131c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    131e:	b29b      	uxth	r3, r3
    1320:	2b00      	cmp	r3, #0
    1322:	d1c5      	bne.n	12b0 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1324:	3301      	adds	r3, #1
    1326:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    1328:	7a63      	ldrb	r3, [r4, #9]
    132a:	2b01      	cmp	r3, #1
    132c:	d1c0      	bne.n	12b0 <_spi_interrupt_handler+0x24>
    132e:	79e3      	ldrb	r3, [r4, #7]
    1330:	2b00      	cmp	r3, #0
    1332:	d1bd      	bne.n	12b0 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1334:	3302      	adds	r3, #2
    1336:	75b3      	strb	r3, [r6, #22]
    1338:	e7ba      	b.n	12b0 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    133a:	4b47      	ldr	r3, [pc, #284]	; (1458 <_spi_interrupt_handler+0x1cc>)
    133c:	881b      	ldrh	r3, [r3, #0]
    133e:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    1340:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1342:	3b01      	subs	r3, #1
    1344:	b29b      	uxth	r3, r3
    1346:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    1348:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    134a:	b29b      	uxth	r3, r3
    134c:	2b00      	cmp	r3, #0
    134e:	d101      	bne.n	1354 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1350:	3301      	adds	r3, #1
    1352:	7533      	strb	r3, [r6, #20]
		if (0
    1354:	7963      	ldrb	r3, [r4, #5]
    1356:	2b01      	cmp	r3, #1
    1358:	d0cc      	beq.n	12f4 <_spi_interrupt_handler+0x68>
    135a:	e7a9      	b.n	12b0 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    135c:	7850      	ldrb	r0, [r2, #1]
    135e:	0200      	lsls	r0, r0, #8
    1360:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    1362:	3202      	adds	r2, #2
    1364:	62e2      	str	r2, [r4, #44]	; 0x2c
    1366:	e7d2      	b.n	130e <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    1368:	0020      	movs	r0, r4
    136a:	69a3      	ldr	r3, [r4, #24]
    136c:	4798      	blx	r3
    136e:	e7b0      	b.n	12d2 <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    1370:	7a63      	ldrb	r3, [r4, #9]
    1372:	2b01      	cmp	r3, #1
    1374:	d028      	beq.n	13c8 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1376:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    1378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    137a:	05db      	lsls	r3, r3, #23
    137c:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    137e:	b2da      	uxtb	r2, r3
    1380:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    1382:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    1384:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1386:	1c51      	adds	r1, r2, #1
    1388:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    138a:	79a1      	ldrb	r1, [r4, #6]
    138c:	2901      	cmp	r1, #1
    138e:	d034      	beq.n	13fa <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    1390:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1392:	3b01      	subs	r3, #1
    1394:	b29b      	uxth	r3, r3
    1396:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    1398:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    139a:	b29b      	uxth	r3, r3
    139c:	2b00      	cmp	r3, #0
    139e:	d000      	beq.n	13a2 <_spi_interrupt_handler+0x116>
    13a0:	e79a      	b.n	12d8 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    13a2:	2200      	movs	r2, #0
    13a4:	3338      	adds	r3, #56	; 0x38
    13a6:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    13a8:	3b34      	subs	r3, #52	; 0x34
    13aa:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    13ac:	7a63      	ldrb	r3, [r4, #9]
    13ae:	2b02      	cmp	r3, #2
    13b0:	d029      	beq.n	1406 <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    13b2:	7a63      	ldrb	r3, [r4, #9]
    13b4:	2b00      	cmp	r3, #0
    13b6:	d000      	beq.n	13ba <_spi_interrupt_handler+0x12e>
    13b8:	e78e      	b.n	12d8 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    13ba:	07bb      	lsls	r3, r7, #30
    13bc:	d400      	bmi.n	13c0 <_spi_interrupt_handler+0x134>
    13be:	e78b      	b.n	12d8 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    13c0:	0020      	movs	r0, r4
    13c2:	6923      	ldr	r3, [r4, #16]
    13c4:	4798      	blx	r3
    13c6:	e787      	b.n	12d8 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    13c8:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    13ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    13cc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    13ce:	3b01      	subs	r3, #1
    13d0:	b29b      	uxth	r3, r3
    13d2:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    13d4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    13d6:	b29b      	uxth	r3, r3
    13d8:	2b00      	cmp	r3, #0
    13da:	d000      	beq.n	13de <_spi_interrupt_handler+0x152>
    13dc:	e77c      	b.n	12d8 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    13de:	3304      	adds	r3, #4
    13e0:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    13e2:	2200      	movs	r2, #0
    13e4:	3334      	adds	r3, #52	; 0x34
    13e6:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    13e8:	3b35      	subs	r3, #53	; 0x35
    13ea:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    13ec:	07fb      	lsls	r3, r7, #31
    13ee:	d400      	bmi.n	13f2 <_spi_interrupt_handler+0x166>
    13f0:	e772      	b.n	12d8 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    13f2:	0020      	movs	r0, r4
    13f4:	68e3      	ldr	r3, [r4, #12]
    13f6:	4798      	blx	r3
    13f8:	e76e      	b.n	12d8 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    13fa:	0a1b      	lsrs	r3, r3, #8
    13fc:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    13fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1400:	3301      	adds	r3, #1
    1402:	62a3      	str	r3, [r4, #40]	; 0x28
    1404:	e7c4      	b.n	1390 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    1406:	077b      	lsls	r3, r7, #29
    1408:	d400      	bmi.n	140c <_spi_interrupt_handler+0x180>
    140a:	e765      	b.n	12d8 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    140c:	0020      	movs	r0, r4
    140e:	6963      	ldr	r3, [r4, #20]
    1410:	4798      	blx	r3
    1412:	e761      	b.n	12d8 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1414:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    1416:	2b01      	cmp	r3, #1
    1418:	d000      	beq.n	141c <_spi_interrupt_handler+0x190>
    141a:	e763      	b.n	12e4 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    141c:	79e3      	ldrb	r3, [r4, #7]
    141e:	2b00      	cmp	r3, #0
    1420:	d000      	beq.n	1424 <_spi_interrupt_handler+0x198>
    1422:	e75f      	b.n	12e4 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1424:	3302      	adds	r3, #2
    1426:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    1428:	3301      	adds	r3, #1
    142a:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    142c:	2200      	movs	r2, #0
    142e:	3335      	adds	r3, #53	; 0x35
    1430:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    1432:	07fb      	lsls	r3, r7, #31
    1434:	d400      	bmi.n	1438 <_spi_interrupt_handler+0x1ac>
    1436:	e755      	b.n	12e4 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    1438:	0020      	movs	r0, r4
    143a:	68e3      	ldr	r3, [r4, #12]
    143c:	4798      	blx	r3
    143e:	e751      	b.n	12e4 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1440:	2380      	movs	r3, #128	; 0x80
    1442:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1444:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    1446:	067b      	lsls	r3, r7, #25
    1448:	d400      	bmi.n	144c <_spi_interrupt_handler+0x1c0>
    144a:	e74f      	b.n	12ec <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    144c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    144e:	0020      	movs	r0, r4
    1450:	4798      	blx	r3
}
    1452:	e74b      	b.n	12ec <_spi_interrupt_handler+0x60>
    1454:	20000238 	.word	0x20000238
    1458:	20000248 	.word	0x20000248

0000145c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    145c:	b510      	push	{r4, lr}
	switch (clock_source) {
    145e:	2808      	cmp	r0, #8
    1460:	d803      	bhi.n	146a <system_clock_source_get_hz+0xe>
    1462:	0080      	lsls	r0, r0, #2
    1464:	4b1c      	ldr	r3, [pc, #112]	; (14d8 <system_clock_source_get_hz+0x7c>)
    1466:	581b      	ldr	r3, [r3, r0]
    1468:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    146a:	2000      	movs	r0, #0
    146c:	e032      	b.n	14d4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    146e:	4b1b      	ldr	r3, [pc, #108]	; (14dc <system_clock_source_get_hz+0x80>)
    1470:	6918      	ldr	r0, [r3, #16]
    1472:	e02f      	b.n	14d4 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1474:	4b1a      	ldr	r3, [pc, #104]	; (14e0 <system_clock_source_get_hz+0x84>)
    1476:	6a1b      	ldr	r3, [r3, #32]
    1478:	059b      	lsls	r3, r3, #22
    147a:	0f9b      	lsrs	r3, r3, #30
    147c:	4819      	ldr	r0, [pc, #100]	; (14e4 <system_clock_source_get_hz+0x88>)
    147e:	40d8      	lsrs	r0, r3
    1480:	e028      	b.n	14d4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    1482:	4b16      	ldr	r3, [pc, #88]	; (14dc <system_clock_source_get_hz+0x80>)
    1484:	6958      	ldr	r0, [r3, #20]
    1486:	e025      	b.n	14d4 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1488:	4b14      	ldr	r3, [pc, #80]	; (14dc <system_clock_source_get_hz+0x80>)
    148a:	681b      	ldr	r3, [r3, #0]
			return 0;
    148c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    148e:	079b      	lsls	r3, r3, #30
    1490:	d520      	bpl.n	14d4 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1492:	4913      	ldr	r1, [pc, #76]	; (14e0 <system_clock_source_get_hz+0x84>)
    1494:	2210      	movs	r2, #16
    1496:	68cb      	ldr	r3, [r1, #12]
    1498:	421a      	tst	r2, r3
    149a:	d0fc      	beq.n	1496 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    149c:	4b0f      	ldr	r3, [pc, #60]	; (14dc <system_clock_source_get_hz+0x80>)
    149e:	681a      	ldr	r2, [r3, #0]
    14a0:	2324      	movs	r3, #36	; 0x24
    14a2:	4013      	ands	r3, r2
    14a4:	2b04      	cmp	r3, #4
    14a6:	d001      	beq.n	14ac <system_clock_source_get_hz+0x50>
			return 48000000UL;
    14a8:	480f      	ldr	r0, [pc, #60]	; (14e8 <system_clock_source_get_hz+0x8c>)
    14aa:	e013      	b.n	14d4 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    14ac:	2000      	movs	r0, #0
    14ae:	4b0f      	ldr	r3, [pc, #60]	; (14ec <system_clock_source_get_hz+0x90>)
    14b0:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    14b2:	4b0a      	ldr	r3, [pc, #40]	; (14dc <system_clock_source_get_hz+0x80>)
    14b4:	689b      	ldr	r3, [r3, #8]
    14b6:	041b      	lsls	r3, r3, #16
    14b8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    14ba:	4358      	muls	r0, r3
    14bc:	e00a      	b.n	14d4 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    14be:	2350      	movs	r3, #80	; 0x50
    14c0:	4a07      	ldr	r2, [pc, #28]	; (14e0 <system_clock_source_get_hz+0x84>)
    14c2:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    14c4:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    14c6:	075b      	lsls	r3, r3, #29
    14c8:	d504      	bpl.n	14d4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    14ca:	4b04      	ldr	r3, [pc, #16]	; (14dc <system_clock_source_get_hz+0x80>)
    14cc:	68d8      	ldr	r0, [r3, #12]
    14ce:	e001      	b.n	14d4 <system_clock_source_get_hz+0x78>
		return 32768UL;
    14d0:	2080      	movs	r0, #128	; 0x80
    14d2:	0200      	lsls	r0, r0, #8
	}
}
    14d4:	bd10      	pop	{r4, pc}
    14d6:	46c0      	nop			; (mov r8, r8)
    14d8:	00003ef4 	.word	0x00003ef4
    14dc:	20000168 	.word	0x20000168
    14e0:	40000800 	.word	0x40000800
    14e4:	007a1200 	.word	0x007a1200
    14e8:	02dc6c00 	.word	0x02dc6c00
    14ec:	000019a9 	.word	0x000019a9

000014f0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    14f0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    14f2:	490c      	ldr	r1, [pc, #48]	; (1524 <system_clock_source_osc8m_set_config+0x34>)
    14f4:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    14f6:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    14f8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    14fa:	7840      	ldrb	r0, [r0, #1]
    14fc:	2201      	movs	r2, #1
    14fe:	4010      	ands	r0, r2
    1500:	0180      	lsls	r0, r0, #6
    1502:	2640      	movs	r6, #64	; 0x40
    1504:	43b3      	bics	r3, r6
    1506:	4303      	orrs	r3, r0
    1508:	402a      	ands	r2, r5
    150a:	01d2      	lsls	r2, r2, #7
    150c:	2080      	movs	r0, #128	; 0x80
    150e:	4383      	bics	r3, r0
    1510:	4313      	orrs	r3, r2
    1512:	2203      	movs	r2, #3
    1514:	4022      	ands	r2, r4
    1516:	0212      	lsls	r2, r2, #8
    1518:	4803      	ldr	r0, [pc, #12]	; (1528 <system_clock_source_osc8m_set_config+0x38>)
    151a:	4003      	ands	r3, r0
    151c:	4313      	orrs	r3, r2
    151e:	620b      	str	r3, [r1, #32]
}
    1520:	bd70      	pop	{r4, r5, r6, pc}
    1522:	46c0      	nop			; (mov r8, r8)
    1524:	40000800 	.word	0x40000800
    1528:	fffffcff 	.word	0xfffffcff

0000152c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    152c:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    152e:	7a03      	ldrb	r3, [r0, #8]
    1530:	069b      	lsls	r3, r3, #26
    1532:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1534:	8942      	ldrh	r2, [r0, #10]
    1536:	0592      	lsls	r2, r2, #22
    1538:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    153a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    153c:	4918      	ldr	r1, [pc, #96]	; (15a0 <system_clock_source_dfll_set_config+0x74>)
    153e:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1540:	7983      	ldrb	r3, [r0, #6]
    1542:	79c2      	ldrb	r2, [r0, #7]
    1544:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    1546:	8842      	ldrh	r2, [r0, #2]
    1548:	8884      	ldrh	r4, [r0, #4]
    154a:	4322      	orrs	r2, r4
    154c:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    154e:	7842      	ldrb	r2, [r0, #1]
    1550:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    1552:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    1554:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1556:	7803      	ldrb	r3, [r0, #0]
    1558:	2b04      	cmp	r3, #4
    155a:	d011      	beq.n	1580 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    155c:	2b20      	cmp	r3, #32
    155e:	d10e      	bne.n	157e <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1560:	7b03      	ldrb	r3, [r0, #12]
    1562:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1564:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1566:	4313      	orrs	r3, r2
    1568:	89c2      	ldrh	r2, [r0, #14]
    156a:	0412      	lsls	r2, r2, #16
    156c:	490d      	ldr	r1, [pc, #52]	; (15a4 <system_clock_source_dfll_set_config+0x78>)
    156e:	400a      	ands	r2, r1
    1570:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1572:	4a0b      	ldr	r2, [pc, #44]	; (15a0 <system_clock_source_dfll_set_config+0x74>)
    1574:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1576:	6811      	ldr	r1, [r2, #0]
    1578:	4b0b      	ldr	r3, [pc, #44]	; (15a8 <system_clock_source_dfll_set_config+0x7c>)
    157a:	430b      	orrs	r3, r1
    157c:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    157e:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1580:	7b03      	ldrb	r3, [r0, #12]
    1582:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1584:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1586:	4313      	orrs	r3, r2
    1588:	89c2      	ldrh	r2, [r0, #14]
    158a:	0412      	lsls	r2, r2, #16
    158c:	4905      	ldr	r1, [pc, #20]	; (15a4 <system_clock_source_dfll_set_config+0x78>)
    158e:	400a      	ands	r2, r1
    1590:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1592:	4a03      	ldr	r2, [pc, #12]	; (15a0 <system_clock_source_dfll_set_config+0x74>)
    1594:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1596:	6813      	ldr	r3, [r2, #0]
    1598:	2104      	movs	r1, #4
    159a:	430b      	orrs	r3, r1
    159c:	6013      	str	r3, [r2, #0]
    159e:	e7ee      	b.n	157e <system_clock_source_dfll_set_config+0x52>
    15a0:	20000168 	.word	0x20000168
    15a4:	03ff0000 	.word	0x03ff0000
    15a8:	00000424 	.word	0x00000424

000015ac <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    15ac:	2808      	cmp	r0, #8
    15ae:	d803      	bhi.n	15b8 <system_clock_source_enable+0xc>
    15b0:	0080      	lsls	r0, r0, #2
    15b2:	4b25      	ldr	r3, [pc, #148]	; (1648 <system_clock_source_enable+0x9c>)
    15b4:	581b      	ldr	r3, [r3, r0]
    15b6:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    15b8:	2017      	movs	r0, #23
    15ba:	e044      	b.n	1646 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    15bc:	4a23      	ldr	r2, [pc, #140]	; (164c <system_clock_source_enable+0xa0>)
    15be:	6a13      	ldr	r3, [r2, #32]
    15c0:	2102      	movs	r1, #2
    15c2:	430b      	orrs	r3, r1
    15c4:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    15c6:	2000      	movs	r0, #0
    15c8:	e03d      	b.n	1646 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    15ca:	4a20      	ldr	r2, [pc, #128]	; (164c <system_clock_source_enable+0xa0>)
    15cc:	6993      	ldr	r3, [r2, #24]
    15ce:	2102      	movs	r1, #2
    15d0:	430b      	orrs	r3, r1
    15d2:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    15d4:	2000      	movs	r0, #0
		break;
    15d6:	e036      	b.n	1646 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    15d8:	4a1c      	ldr	r2, [pc, #112]	; (164c <system_clock_source_enable+0xa0>)
    15da:	8a13      	ldrh	r3, [r2, #16]
    15dc:	2102      	movs	r1, #2
    15de:	430b      	orrs	r3, r1
    15e0:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    15e2:	2000      	movs	r0, #0
		break;
    15e4:	e02f      	b.n	1646 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    15e6:	4a19      	ldr	r2, [pc, #100]	; (164c <system_clock_source_enable+0xa0>)
    15e8:	8a93      	ldrh	r3, [r2, #20]
    15ea:	2102      	movs	r1, #2
    15ec:	430b      	orrs	r3, r1
    15ee:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    15f0:	2000      	movs	r0, #0
		break;
    15f2:	e028      	b.n	1646 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    15f4:	4916      	ldr	r1, [pc, #88]	; (1650 <system_clock_source_enable+0xa4>)
    15f6:	680b      	ldr	r3, [r1, #0]
    15f8:	2202      	movs	r2, #2
    15fa:	4313      	orrs	r3, r2
    15fc:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    15fe:	4b13      	ldr	r3, [pc, #76]	; (164c <system_clock_source_enable+0xa0>)
    1600:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1602:	0019      	movs	r1, r3
    1604:	320e      	adds	r2, #14
    1606:	68cb      	ldr	r3, [r1, #12]
    1608:	421a      	tst	r2, r3
    160a:	d0fc      	beq.n	1606 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    160c:	4a10      	ldr	r2, [pc, #64]	; (1650 <system_clock_source_enable+0xa4>)
    160e:	6891      	ldr	r1, [r2, #8]
    1610:	4b0e      	ldr	r3, [pc, #56]	; (164c <system_clock_source_enable+0xa0>)
    1612:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1614:	6852      	ldr	r2, [r2, #4]
    1616:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1618:	2200      	movs	r2, #0
    161a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    161c:	0019      	movs	r1, r3
    161e:	3210      	adds	r2, #16
    1620:	68cb      	ldr	r3, [r1, #12]
    1622:	421a      	tst	r2, r3
    1624:	d0fc      	beq.n	1620 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1626:	4b0a      	ldr	r3, [pc, #40]	; (1650 <system_clock_source_enable+0xa4>)
    1628:	681b      	ldr	r3, [r3, #0]
    162a:	b29b      	uxth	r3, r3
    162c:	4a07      	ldr	r2, [pc, #28]	; (164c <system_clock_source_enable+0xa0>)
    162e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1630:	2000      	movs	r0, #0
    1632:	e008      	b.n	1646 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1634:	4905      	ldr	r1, [pc, #20]	; (164c <system_clock_source_enable+0xa0>)
    1636:	2244      	movs	r2, #68	; 0x44
    1638:	5c8b      	ldrb	r3, [r1, r2]
    163a:	2002      	movs	r0, #2
    163c:	4303      	orrs	r3, r0
    163e:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1640:	2000      	movs	r0, #0
		break;
    1642:	e000      	b.n	1646 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1644:	2000      	movs	r0, #0
}
    1646:	4770      	bx	lr
    1648:	00003f18 	.word	0x00003f18
    164c:	40000800 	.word	0x40000800
    1650:	20000168 	.word	0x20000168

00001654 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1654:	b530      	push	{r4, r5, lr}
    1656:	b08b      	sub	sp, #44	; 0x2c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1658:	22c2      	movs	r2, #194	; 0xc2
    165a:	00d2      	lsls	r2, r2, #3
    165c:	4b30      	ldr	r3, [pc, #192]	; (1720 <system_clock_init+0xcc>)
    165e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1660:	4a30      	ldr	r2, [pc, #192]	; (1724 <system_clock_init+0xd0>)
    1662:	6853      	ldr	r3, [r2, #4]
    1664:	211e      	movs	r1, #30
    1666:	438b      	bics	r3, r1
    1668:	391a      	subs	r1, #26
    166a:	430b      	orrs	r3, r1
    166c:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    166e:	2201      	movs	r2, #1
    1670:	ab01      	add	r3, sp, #4
    1672:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1674:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1676:	4d2c      	ldr	r5, [pc, #176]	; (1728 <system_clock_init+0xd4>)
    1678:	b2e0      	uxtb	r0, r4
    167a:	a901      	add	r1, sp, #4
    167c:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    167e:	3401      	adds	r4, #1
    1680:	2c25      	cmp	r4, #37	; 0x25
    1682:	d1f9      	bne.n	1678 <system_clock_init+0x24>
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1684:	ab05      	add	r3, sp, #20
    1686:	2200      	movs	r2, #0
    1688:	2100      	movs	r1, #0
    168a:	8059      	strh	r1, [r3, #2]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    168c:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    168e:	71da      	strb	r2, [r3, #7]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1690:	3120      	adds	r1, #32
    1692:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1694:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1696:	4b25      	ldr	r3, [pc, #148]	; (172c <system_clock_init+0xd8>)
    1698:	681b      	ldr	r3, [r3, #0]
    169a:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    169c:	2b3f      	cmp	r3, #63	; 0x3f
    169e:	d03c      	beq.n	171a <system_clock_init+0xc6>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    16a0:	a805      	add	r0, sp, #20
    16a2:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    16a4:	2307      	movs	r3, #7
    16a6:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10;
    16a8:	3303      	adds	r3, #3
    16aa:	81c3      	strh	r3, [r0, #14]
		dfll_conf.fine_value   = 0x1ff;
    16ac:	4b20      	ldr	r3, [pc, #128]	; (1730 <system_clock_init+0xdc>)
    16ae:	8143      	strh	r3, [r0, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    16b0:	3bff      	subs	r3, #255	; 0xff
    16b2:	8083      	strh	r3, [r0, #4]

		dfll_conf.multiply_factor = 48000;
    16b4:	4b1f      	ldr	r3, [pc, #124]	; (1734 <system_clock_init+0xe0>)
    16b6:	8203      	strh	r3, [r0, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    16b8:	4b1f      	ldr	r3, [pc, #124]	; (1738 <system_clock_init+0xe4>)
    16ba:	4798      	blx	r3
	config->run_in_standby  = false;
    16bc:	a804      	add	r0, sp, #16
    16be:	2300      	movs	r3, #0
    16c0:	7043      	strb	r3, [r0, #1]
	config->on_demand       = true;
    16c2:	2201      	movs	r2, #1
    16c4:	7082      	strb	r2, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    16c6:	7003      	strb	r3, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    16c8:	4b1c      	ldr	r3, [pc, #112]	; (173c <system_clock_init+0xe8>)
    16ca:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    16cc:	2006      	movs	r0, #6
    16ce:	4c1c      	ldr	r4, [pc, #112]	; (1740 <system_clock_init+0xec>)
    16d0:	47a0      	blx	r4


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    16d2:	4b1c      	ldr	r3, [pc, #112]	; (1744 <system_clock_init+0xf0>)
    16d4:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    16d6:	2007      	movs	r0, #7
    16d8:	47a0      	blx	r4
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    16da:	4911      	ldr	r1, [pc, #68]	; (1720 <system_clock_init+0xcc>)
    16dc:	2210      	movs	r2, #16
    16de:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    16e0:	421a      	tst	r2, r3
    16e2:	d0fc      	beq.n	16de <system_clock_init+0x8a>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    16e4:	4a0e      	ldr	r2, [pc, #56]	; (1720 <system_clock_init+0xcc>)
    16e6:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    16e8:	2180      	movs	r1, #128	; 0x80
    16ea:	430b      	orrs	r3, r1
    16ec:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    16ee:	4a16      	ldr	r2, [pc, #88]	; (1748 <system_clock_init+0xf4>)
    16f0:	2300      	movs	r3, #0
    16f2:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    16f4:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    16f6:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    16f8:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    16fa:	a901      	add	r1, sp, #4
    16fc:	2201      	movs	r2, #1
    16fe:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1700:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    1702:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1704:	3307      	adds	r3, #7
    1706:	700b      	strb	r3, [r1, #0]
    1708:	720a      	strb	r2, [r1, #8]
    170a:	2000      	movs	r0, #0
    170c:	4b0f      	ldr	r3, [pc, #60]	; (174c <system_clock_init+0xf8>)
    170e:	4798      	blx	r3
    1710:	2000      	movs	r0, #0
    1712:	4b0f      	ldr	r3, [pc, #60]	; (1750 <system_clock_init+0xfc>)
    1714:	4798      	blx	r3
#endif
}
    1716:	b00b      	add	sp, #44	; 0x2c
    1718:	bd30      	pop	{r4, r5, pc}
		coarse = 0x1f;
    171a:	3b20      	subs	r3, #32
    171c:	e7c0      	b.n	16a0 <system_clock_init+0x4c>
    171e:	46c0      	nop			; (mov r8, r8)
    1720:	40000800 	.word	0x40000800
    1724:	41004000 	.word	0x41004000
    1728:	0000198d 	.word	0x0000198d
    172c:	00806024 	.word	0x00806024
    1730:	000001ff 	.word	0x000001ff
    1734:	ffffbb80 	.word	0xffffbb80
    1738:	0000152d 	.word	0x0000152d
    173c:	000014f1 	.word	0x000014f1
    1740:	000015ad 	.word	0x000015ad
    1744:	00001755 	.word	0x00001755
    1748:	40000400 	.word	0x40000400
    174c:	00001779 	.word	0x00001779
    1750:	00001831 	.word	0x00001831

00001754 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1754:	4a06      	ldr	r2, [pc, #24]	; (1770 <system_gclk_init+0x1c>)
    1756:	6993      	ldr	r3, [r2, #24]
    1758:	2108      	movs	r1, #8
    175a:	430b      	orrs	r3, r1
    175c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    175e:	2201      	movs	r2, #1
    1760:	4b04      	ldr	r3, [pc, #16]	; (1774 <system_gclk_init+0x20>)
    1762:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1764:	0019      	movs	r1, r3
    1766:	780b      	ldrb	r3, [r1, #0]
    1768:	4213      	tst	r3, r2
    176a:	d1fc      	bne.n	1766 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    176c:	4770      	bx	lr
    176e:	46c0      	nop			; (mov r8, r8)
    1770:	40000400 	.word	0x40000400
    1774:	40000c00 	.word	0x40000c00

00001778 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1778:	b570      	push	{r4, r5, r6, lr}
    177a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    177c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    177e:	780d      	ldrb	r5, [r1, #0]
    1780:	022d      	lsls	r5, r5, #8
    1782:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1784:	784b      	ldrb	r3, [r1, #1]
    1786:	2b00      	cmp	r3, #0
    1788:	d002      	beq.n	1790 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    178a:	2380      	movs	r3, #128	; 0x80
    178c:	02db      	lsls	r3, r3, #11
    178e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1790:	7a4b      	ldrb	r3, [r1, #9]
    1792:	2b00      	cmp	r3, #0
    1794:	d002      	beq.n	179c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1796:	2380      	movs	r3, #128	; 0x80
    1798:	031b      	lsls	r3, r3, #12
    179a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    179c:	6848      	ldr	r0, [r1, #4]
    179e:	2801      	cmp	r0, #1
    17a0:	d910      	bls.n	17c4 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    17a2:	1e43      	subs	r3, r0, #1
    17a4:	4218      	tst	r0, r3
    17a6:	d134      	bne.n	1812 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    17a8:	2802      	cmp	r0, #2
    17aa:	d930      	bls.n	180e <system_gclk_gen_set_config+0x96>
    17ac:	2302      	movs	r3, #2
    17ae:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    17b0:	3201      	adds	r2, #1
						mask <<= 1) {
    17b2:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    17b4:	4298      	cmp	r0, r3
    17b6:	d8fb      	bhi.n	17b0 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    17b8:	0212      	lsls	r2, r2, #8
    17ba:	4332      	orrs	r2, r6
    17bc:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    17be:	2380      	movs	r3, #128	; 0x80
    17c0:	035b      	lsls	r3, r3, #13
    17c2:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    17c4:	7a0b      	ldrb	r3, [r1, #8]
    17c6:	2b00      	cmp	r3, #0
    17c8:	d002      	beq.n	17d0 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    17ca:	2380      	movs	r3, #128	; 0x80
    17cc:	039b      	lsls	r3, r3, #14
    17ce:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    17d0:	4a13      	ldr	r2, [pc, #76]	; (1820 <system_gclk_gen_set_config+0xa8>)
    17d2:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    17d4:	b25b      	sxtb	r3, r3
    17d6:	2b00      	cmp	r3, #0
    17d8:	dbfb      	blt.n	17d2 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    17da:	4b12      	ldr	r3, [pc, #72]	; (1824 <system_gclk_gen_set_config+0xac>)
    17dc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    17de:	4b12      	ldr	r3, [pc, #72]	; (1828 <system_gclk_gen_set_config+0xb0>)
    17e0:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    17e2:	4a0f      	ldr	r2, [pc, #60]	; (1820 <system_gclk_gen_set_config+0xa8>)
    17e4:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    17e6:	b25b      	sxtb	r3, r3
    17e8:	2b00      	cmp	r3, #0
    17ea:	dbfb      	blt.n	17e4 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    17ec:	4b0c      	ldr	r3, [pc, #48]	; (1820 <system_gclk_gen_set_config+0xa8>)
    17ee:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    17f0:	001a      	movs	r2, r3
    17f2:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    17f4:	b25b      	sxtb	r3, r3
    17f6:	2b00      	cmp	r3, #0
    17f8:	dbfb      	blt.n	17f2 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    17fa:	4a09      	ldr	r2, [pc, #36]	; (1820 <system_gclk_gen_set_config+0xa8>)
    17fc:	6853      	ldr	r3, [r2, #4]
    17fe:	2180      	movs	r1, #128	; 0x80
    1800:	0249      	lsls	r1, r1, #9
    1802:	400b      	ands	r3, r1
    1804:	431d      	orrs	r5, r3
    1806:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1808:	4b08      	ldr	r3, [pc, #32]	; (182c <system_gclk_gen_set_config+0xb4>)
    180a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    180c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    180e:	2200      	movs	r2, #0
    1810:	e7d2      	b.n	17b8 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1812:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1814:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1816:	2380      	movs	r3, #128	; 0x80
    1818:	029b      	lsls	r3, r3, #10
    181a:	431d      	orrs	r5, r3
    181c:	e7d2      	b.n	17c4 <system_gclk_gen_set_config+0x4c>
    181e:	46c0      	nop			; (mov r8, r8)
    1820:	40000c00 	.word	0x40000c00
    1824:	00000c61 	.word	0x00000c61
    1828:	40000c08 	.word	0x40000c08
    182c:	00000ca1 	.word	0x00000ca1

00001830 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1830:	b510      	push	{r4, lr}
    1832:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1834:	4a0b      	ldr	r2, [pc, #44]	; (1864 <system_gclk_gen_enable+0x34>)
    1836:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1838:	b25b      	sxtb	r3, r3
    183a:	2b00      	cmp	r3, #0
    183c:	dbfb      	blt.n	1836 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    183e:	4b0a      	ldr	r3, [pc, #40]	; (1868 <system_gclk_gen_enable+0x38>)
    1840:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1842:	4b0a      	ldr	r3, [pc, #40]	; (186c <system_gclk_gen_enable+0x3c>)
    1844:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1846:	4a07      	ldr	r2, [pc, #28]	; (1864 <system_gclk_gen_enable+0x34>)
    1848:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    184a:	b25b      	sxtb	r3, r3
    184c:	2b00      	cmp	r3, #0
    184e:	dbfb      	blt.n	1848 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1850:	4a04      	ldr	r2, [pc, #16]	; (1864 <system_gclk_gen_enable+0x34>)
    1852:	6851      	ldr	r1, [r2, #4]
    1854:	2380      	movs	r3, #128	; 0x80
    1856:	025b      	lsls	r3, r3, #9
    1858:	430b      	orrs	r3, r1
    185a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    185c:	4b04      	ldr	r3, [pc, #16]	; (1870 <system_gclk_gen_enable+0x40>)
    185e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1860:	bd10      	pop	{r4, pc}
    1862:	46c0      	nop			; (mov r8, r8)
    1864:	40000c00 	.word	0x40000c00
    1868:	00000c61 	.word	0x00000c61
    186c:	40000c04 	.word	0x40000c04
    1870:	00000ca1 	.word	0x00000ca1

00001874 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1874:	b570      	push	{r4, r5, r6, lr}
    1876:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1878:	4a1a      	ldr	r2, [pc, #104]	; (18e4 <system_gclk_gen_get_hz+0x70>)
    187a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    187c:	b25b      	sxtb	r3, r3
    187e:	2b00      	cmp	r3, #0
    1880:	dbfb      	blt.n	187a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1882:	4b19      	ldr	r3, [pc, #100]	; (18e8 <system_gclk_gen_get_hz+0x74>)
    1884:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1886:	4b19      	ldr	r3, [pc, #100]	; (18ec <system_gclk_gen_get_hz+0x78>)
    1888:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    188a:	4a16      	ldr	r2, [pc, #88]	; (18e4 <system_gclk_gen_get_hz+0x70>)
    188c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    188e:	b25b      	sxtb	r3, r3
    1890:	2b00      	cmp	r3, #0
    1892:	dbfb      	blt.n	188c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1894:	4e13      	ldr	r6, [pc, #76]	; (18e4 <system_gclk_gen_get_hz+0x70>)
    1896:	6870      	ldr	r0, [r6, #4]
    1898:	04c0      	lsls	r0, r0, #19
    189a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    189c:	4b14      	ldr	r3, [pc, #80]	; (18f0 <system_gclk_gen_get_hz+0x7c>)
    189e:	4798      	blx	r3
    18a0:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    18a2:	4b12      	ldr	r3, [pc, #72]	; (18ec <system_gclk_gen_get_hz+0x78>)
    18a4:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    18a6:	6876      	ldr	r6, [r6, #4]
    18a8:	02f6      	lsls	r6, r6, #11
    18aa:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    18ac:	4b11      	ldr	r3, [pc, #68]	; (18f4 <system_gclk_gen_get_hz+0x80>)
    18ae:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18b0:	4a0c      	ldr	r2, [pc, #48]	; (18e4 <system_gclk_gen_get_hz+0x70>)
    18b2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    18b4:	b25b      	sxtb	r3, r3
    18b6:	2b00      	cmp	r3, #0
    18b8:	dbfb      	blt.n	18b2 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    18ba:	4b0a      	ldr	r3, [pc, #40]	; (18e4 <system_gclk_gen_get_hz+0x70>)
    18bc:	689c      	ldr	r4, [r3, #8]
    18be:	0224      	lsls	r4, r4, #8
    18c0:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    18c2:	4b0d      	ldr	r3, [pc, #52]	; (18f8 <system_gclk_gen_get_hz+0x84>)
    18c4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    18c6:	2e00      	cmp	r6, #0
    18c8:	d107      	bne.n	18da <system_gclk_gen_get_hz+0x66>
    18ca:	2c01      	cmp	r4, #1
    18cc:	d907      	bls.n	18de <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    18ce:	0021      	movs	r1, r4
    18d0:	0028      	movs	r0, r5
    18d2:	4b0a      	ldr	r3, [pc, #40]	; (18fc <system_gclk_gen_get_hz+0x88>)
    18d4:	4798      	blx	r3
    18d6:	0005      	movs	r5, r0
    18d8:	e001      	b.n	18de <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    18da:	3401      	adds	r4, #1
    18dc:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    18de:	0028      	movs	r0, r5
    18e0:	bd70      	pop	{r4, r5, r6, pc}
    18e2:	46c0      	nop			; (mov r8, r8)
    18e4:	40000c00 	.word	0x40000c00
    18e8:	00000c61 	.word	0x00000c61
    18ec:	40000c04 	.word	0x40000c04
    18f0:	0000145d 	.word	0x0000145d
    18f4:	40000c08 	.word	0x40000c08
    18f8:	00000ca1 	.word	0x00000ca1
    18fc:	00003b4d 	.word	0x00003b4d

00001900 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1900:	b510      	push	{r4, lr}
    1902:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1904:	4b06      	ldr	r3, [pc, #24]	; (1920 <system_gclk_chan_enable+0x20>)
    1906:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1908:	4b06      	ldr	r3, [pc, #24]	; (1924 <system_gclk_chan_enable+0x24>)
    190a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    190c:	4a06      	ldr	r2, [pc, #24]	; (1928 <system_gclk_chan_enable+0x28>)
    190e:	8853      	ldrh	r3, [r2, #2]
    1910:	2180      	movs	r1, #128	; 0x80
    1912:	01c9      	lsls	r1, r1, #7
    1914:	430b      	orrs	r3, r1
    1916:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1918:	4b04      	ldr	r3, [pc, #16]	; (192c <system_gclk_chan_enable+0x2c>)
    191a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    191c:	bd10      	pop	{r4, pc}
    191e:	46c0      	nop			; (mov r8, r8)
    1920:	00000c61 	.word	0x00000c61
    1924:	40000c02 	.word	0x40000c02
    1928:	40000c00 	.word	0x40000c00
    192c:	00000ca1 	.word	0x00000ca1

00001930 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1930:	b510      	push	{r4, lr}
    1932:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1934:	4b0f      	ldr	r3, [pc, #60]	; (1974 <system_gclk_chan_disable+0x44>)
    1936:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1938:	4b0f      	ldr	r3, [pc, #60]	; (1978 <system_gclk_chan_disable+0x48>)
    193a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    193c:	4a0f      	ldr	r2, [pc, #60]	; (197c <system_gclk_chan_disable+0x4c>)
    193e:	8853      	ldrh	r3, [r2, #2]
    1940:	051b      	lsls	r3, r3, #20
    1942:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1944:	8853      	ldrh	r3, [r2, #2]
    1946:	490e      	ldr	r1, [pc, #56]	; (1980 <system_gclk_chan_disable+0x50>)
    1948:	400b      	ands	r3, r1
    194a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    194c:	8853      	ldrh	r3, [r2, #2]
    194e:	490d      	ldr	r1, [pc, #52]	; (1984 <system_gclk_chan_disable+0x54>)
    1950:	400b      	ands	r3, r1
    1952:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1954:	0011      	movs	r1, r2
    1956:	2280      	movs	r2, #128	; 0x80
    1958:	01d2      	lsls	r2, r2, #7
    195a:	884b      	ldrh	r3, [r1, #2]
    195c:	4213      	tst	r3, r2
    195e:	d1fc      	bne.n	195a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1960:	4906      	ldr	r1, [pc, #24]	; (197c <system_gclk_chan_disable+0x4c>)
    1962:	884a      	ldrh	r2, [r1, #2]
    1964:	0203      	lsls	r3, r0, #8
    1966:	4806      	ldr	r0, [pc, #24]	; (1980 <system_gclk_chan_disable+0x50>)
    1968:	4002      	ands	r2, r0
    196a:	4313      	orrs	r3, r2
    196c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    196e:	4b06      	ldr	r3, [pc, #24]	; (1988 <system_gclk_chan_disable+0x58>)
    1970:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1972:	bd10      	pop	{r4, pc}
    1974:	00000c61 	.word	0x00000c61
    1978:	40000c02 	.word	0x40000c02
    197c:	40000c00 	.word	0x40000c00
    1980:	fffff0ff 	.word	0xfffff0ff
    1984:	ffffbfff 	.word	0xffffbfff
    1988:	00000ca1 	.word	0x00000ca1

0000198c <system_gclk_chan_set_config>:
{
    198c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    198e:	780c      	ldrb	r4, [r1, #0]
    1990:	0224      	lsls	r4, r4, #8
    1992:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1994:	4b02      	ldr	r3, [pc, #8]	; (19a0 <system_gclk_chan_set_config+0x14>)
    1996:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1998:	b2a4      	uxth	r4, r4
    199a:	4b02      	ldr	r3, [pc, #8]	; (19a4 <system_gclk_chan_set_config+0x18>)
    199c:	805c      	strh	r4, [r3, #2]
}
    199e:	bd10      	pop	{r4, pc}
    19a0:	00001931 	.word	0x00001931
    19a4:	40000c00 	.word	0x40000c00

000019a8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    19a8:	b510      	push	{r4, lr}
    19aa:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    19ac:	4b06      	ldr	r3, [pc, #24]	; (19c8 <system_gclk_chan_get_hz+0x20>)
    19ae:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    19b0:	4b06      	ldr	r3, [pc, #24]	; (19cc <system_gclk_chan_get_hz+0x24>)
    19b2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    19b4:	4b06      	ldr	r3, [pc, #24]	; (19d0 <system_gclk_chan_get_hz+0x28>)
    19b6:	885c      	ldrh	r4, [r3, #2]
    19b8:	0524      	lsls	r4, r4, #20
    19ba:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    19bc:	4b05      	ldr	r3, [pc, #20]	; (19d4 <system_gclk_chan_get_hz+0x2c>)
    19be:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    19c0:	0020      	movs	r0, r4
    19c2:	4b05      	ldr	r3, [pc, #20]	; (19d8 <system_gclk_chan_get_hz+0x30>)
    19c4:	4798      	blx	r3
}
    19c6:	bd10      	pop	{r4, pc}
    19c8:	00000c61 	.word	0x00000c61
    19cc:	40000c02 	.word	0x40000c02
    19d0:	40000c00 	.word	0x40000c00
    19d4:	00000ca1 	.word	0x00000ca1
    19d8:	00001875 	.word	0x00001875

000019dc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    19dc:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    19de:	78d3      	ldrb	r3, [r2, #3]
    19e0:	2b00      	cmp	r3, #0
    19e2:	d135      	bne.n	1a50 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    19e4:	7813      	ldrb	r3, [r2, #0]
    19e6:	2b80      	cmp	r3, #128	; 0x80
    19e8:	d029      	beq.n	1a3e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    19ea:	061b      	lsls	r3, r3, #24
    19ec:	2480      	movs	r4, #128	; 0x80
    19ee:	0264      	lsls	r4, r4, #9
    19f0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    19f2:	7854      	ldrb	r4, [r2, #1]
    19f4:	2502      	movs	r5, #2
    19f6:	43ac      	bics	r4, r5
    19f8:	d106      	bne.n	1a08 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    19fa:	7894      	ldrb	r4, [r2, #2]
    19fc:	2c00      	cmp	r4, #0
    19fe:	d120      	bne.n	1a42 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1a00:	2480      	movs	r4, #128	; 0x80
    1a02:	02a4      	lsls	r4, r4, #10
    1a04:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1a06:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1a08:	7854      	ldrb	r4, [r2, #1]
    1a0a:	3c01      	subs	r4, #1
    1a0c:	2c01      	cmp	r4, #1
    1a0e:	d91c      	bls.n	1a4a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1a10:	040d      	lsls	r5, r1, #16
    1a12:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1a14:	24a0      	movs	r4, #160	; 0xa0
    1a16:	05e4      	lsls	r4, r4, #23
    1a18:	432c      	orrs	r4, r5
    1a1a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1a1c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1a1e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1a20:	24d0      	movs	r4, #208	; 0xd0
    1a22:	0624      	lsls	r4, r4, #24
    1a24:	432c      	orrs	r4, r5
    1a26:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1a28:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1a2a:	78d4      	ldrb	r4, [r2, #3]
    1a2c:	2c00      	cmp	r4, #0
    1a2e:	d122      	bne.n	1a76 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1a30:	035b      	lsls	r3, r3, #13
    1a32:	d51c      	bpl.n	1a6e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1a34:	7893      	ldrb	r3, [r2, #2]
    1a36:	2b01      	cmp	r3, #1
    1a38:	d01e      	beq.n	1a78 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1a3a:	6141      	str	r1, [r0, #20]
    1a3c:	e017      	b.n	1a6e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1a3e:	2300      	movs	r3, #0
    1a40:	e7d7      	b.n	19f2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1a42:	24c0      	movs	r4, #192	; 0xc0
    1a44:	02e4      	lsls	r4, r4, #11
    1a46:	4323      	orrs	r3, r4
    1a48:	e7dd      	b.n	1a06 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1a4a:	4c0d      	ldr	r4, [pc, #52]	; (1a80 <_system_pinmux_config+0xa4>)
    1a4c:	4023      	ands	r3, r4
    1a4e:	e7df      	b.n	1a10 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1a50:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1a52:	040c      	lsls	r4, r1, #16
    1a54:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1a56:	23a0      	movs	r3, #160	; 0xa0
    1a58:	05db      	lsls	r3, r3, #23
    1a5a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1a5c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1a5e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1a60:	23d0      	movs	r3, #208	; 0xd0
    1a62:	061b      	lsls	r3, r3, #24
    1a64:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1a66:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1a68:	78d3      	ldrb	r3, [r2, #3]
    1a6a:	2b00      	cmp	r3, #0
    1a6c:	d103      	bne.n	1a76 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1a6e:	7853      	ldrb	r3, [r2, #1]
    1a70:	3b01      	subs	r3, #1
    1a72:	2b01      	cmp	r3, #1
    1a74:	d902      	bls.n	1a7c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1a76:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1a78:	6181      	str	r1, [r0, #24]
    1a7a:	e7f8      	b.n	1a6e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1a7c:	6081      	str	r1, [r0, #8]
}
    1a7e:	e7fa      	b.n	1a76 <_system_pinmux_config+0x9a>
    1a80:	fffbffff 	.word	0xfffbffff

00001a84 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1a84:	b510      	push	{r4, lr}
    1a86:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1a88:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1a8a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1a8c:	2900      	cmp	r1, #0
    1a8e:	d104      	bne.n	1a9a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1a90:	0943      	lsrs	r3, r0, #5
    1a92:	01db      	lsls	r3, r3, #7
    1a94:	4905      	ldr	r1, [pc, #20]	; (1aac <system_pinmux_pin_set_config+0x28>)
    1a96:	468c      	mov	ip, r1
    1a98:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1a9a:	241f      	movs	r4, #31
    1a9c:	4020      	ands	r0, r4
    1a9e:	2101      	movs	r1, #1
    1aa0:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1aa2:	0018      	movs	r0, r3
    1aa4:	4b02      	ldr	r3, [pc, #8]	; (1ab0 <system_pinmux_pin_set_config+0x2c>)
    1aa6:	4798      	blx	r3
}
    1aa8:	bd10      	pop	{r4, pc}
    1aaa:	46c0      	nop			; (mov r8, r8)
    1aac:	41004400 	.word	0x41004400
    1ab0:	000019dd 	.word	0x000019dd

00001ab4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1ab4:	4770      	bx	lr
	...

00001ab8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1ab8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1aba:	4b05      	ldr	r3, [pc, #20]	; (1ad0 <system_init+0x18>)
    1abc:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1abe:	4b05      	ldr	r3, [pc, #20]	; (1ad4 <system_init+0x1c>)
    1ac0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1ac2:	4b05      	ldr	r3, [pc, #20]	; (1ad8 <system_init+0x20>)
    1ac4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1ac6:	4b05      	ldr	r3, [pc, #20]	; (1adc <system_init+0x24>)
    1ac8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1aca:	4b05      	ldr	r3, [pc, #20]	; (1ae0 <system_init+0x28>)
    1acc:	4798      	blx	r3
}
    1ace:	bd10      	pop	{r4, pc}
    1ad0:	00001655 	.word	0x00001655
    1ad4:	00000cd1 	.word	0x00000cd1
    1ad8:	00001ab5 	.word	0x00001ab5
    1adc:	00000d75 	.word	0x00000d75
    1ae0:	00001ab5 	.word	0x00001ab5

00001ae4 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    1ae4:	b510      	push	{r4, lr}
    1ae6:	b084      	sub	sp, #16
	enum sleepmgr_mode sleep_mode[] = {
    1ae8:	ab03      	add	r3, sp, #12
    1aea:	2200      	movs	r2, #0
    1aec:	701a      	strb	r2, [r3, #0]
    1aee:	3203      	adds	r2, #3
    1af0:	705a      	strb	r2, [r3, #1]
    1af2:	3a01      	subs	r2, #1
    1af4:	709a      	strb	r2, [r3, #2]
    1af6:	3a01      	subs	r2, #1
    1af8:	70da      	strb	r2, [r3, #3]
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    1afa:	4b27      	ldr	r3, [pc, #156]	; (1b98 <udd_sleep_mode+0xb4>)
    1afc:	781b      	ldrb	r3, [r3, #0]
    1afe:	4283      	cmp	r3, r0
    1b00:	d007      	beq.n	1b12 <udd_sleep_mode+0x2e>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    1b02:	2800      	cmp	r0, #0
    1b04:	d107      	bne.n	1b16 <udd_sleep_mode+0x32>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
	}
	if (udd_state != UDD_STATE_OFF) {
    1b06:	4b24      	ldr	r3, [pc, #144]	; (1b98 <udd_sleep_mode+0xb4>)
    1b08:	781b      	ldrb	r3, [r3, #0]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d123      	bne.n	1b56 <udd_sleep_mode+0x72>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
	}
	udd_state = new_state;
    1b0e:	4b22      	ldr	r3, [pc, #136]	; (1b98 <udd_sleep_mode+0xb4>)
    1b10:	7018      	strb	r0, [r3, #0]
}
    1b12:	b004      	add	sp, #16
    1b14:	bd10      	pop	{r4, pc}
		sleepmgr_lock_mode(sleep_mode[new_state]);
    1b16:	ab03      	add	r3, sp, #12
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    1b18:	5c1b      	ldrb	r3, [r3, r0]
    1b1a:	4a20      	ldr	r2, [pc, #128]	; (1b9c <udd_sleep_mode+0xb8>)
    1b1c:	5cd2      	ldrb	r2, [r2, r3]
    1b1e:	2aff      	cmp	r2, #255	; 0xff
    1b20:	d100      	bne.n	1b24 <udd_sleep_mode+0x40>
    1b22:	e7fe      	b.n	1b22 <udd_sleep_mode+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1b24:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1b28:	4251      	negs	r1, r2
    1b2a:	414a      	adcs	r2, r1
    1b2c:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1b2e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1b30:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1b34:	2100      	movs	r1, #0
    1b36:	4a1a      	ldr	r2, [pc, #104]	; (1ba0 <udd_sleep_mode+0xbc>)
    1b38:	7011      	strb	r1, [r2, #0]
	return flags;
    1b3a:	9c01      	ldr	r4, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    1b3c:	4917      	ldr	r1, [pc, #92]	; (1b9c <udd_sleep_mode+0xb8>)
    1b3e:	5cca      	ldrb	r2, [r1, r3]
    1b40:	3201      	adds	r2, #1
    1b42:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    1b44:	2c00      	cmp	r4, #0
    1b46:	d0de      	beq.n	1b06 <udd_sleep_mode+0x22>
		cpu_irq_enable();
    1b48:	2201      	movs	r2, #1
    1b4a:	4b15      	ldr	r3, [pc, #84]	; (1ba0 <udd_sleep_mode+0xbc>)
    1b4c:	701a      	strb	r2, [r3, #0]
    1b4e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1b52:	b662      	cpsie	i
    1b54:	e7d7      	b.n	1b06 <udd_sleep_mode+0x22>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    1b56:	aa03      	add	r2, sp, #12
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    1b58:	5cd3      	ldrb	r3, [r2, r3]
    1b5a:	4a10      	ldr	r2, [pc, #64]	; (1b9c <udd_sleep_mode+0xb8>)
    1b5c:	5cd2      	ldrb	r2, [r2, r3]
    1b5e:	2a00      	cmp	r2, #0
    1b60:	d100      	bne.n	1b64 <udd_sleep_mode+0x80>
    1b62:	e7fe      	b.n	1b62 <udd_sleep_mode+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1b64:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1b68:	4251      	negs	r1, r2
    1b6a:	414a      	adcs	r2, r1
    1b6c:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    1b6e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1b70:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1b74:	2100      	movs	r1, #0
    1b76:	4a0a      	ldr	r2, [pc, #40]	; (1ba0 <udd_sleep_mode+0xbc>)
    1b78:	7011      	strb	r1, [r2, #0]
	return flags;
    1b7a:	9c02      	ldr	r4, [sp, #8]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    1b7c:	4907      	ldr	r1, [pc, #28]	; (1b9c <udd_sleep_mode+0xb8>)
    1b7e:	5cca      	ldrb	r2, [r1, r3]
    1b80:	3a01      	subs	r2, #1
    1b82:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    1b84:	2c00      	cmp	r4, #0
    1b86:	d0c2      	beq.n	1b0e <udd_sleep_mode+0x2a>
		cpu_irq_enable();
    1b88:	2201      	movs	r2, #1
    1b8a:	4b05      	ldr	r3, [pc, #20]	; (1ba0 <udd_sleep_mode+0xbc>)
    1b8c:	701a      	strb	r2, [r3, #0]
    1b8e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1b92:	b662      	cpsie	i
    1b94:	e7bb      	b.n	1b0e <udd_sleep_mode+0x2a>
    1b96:	46c0      	nop			; (mov r8, r8)
    1b98:	200001b0 	.word	0x200001b0
    1b9c:	200001f0 	.word	0x200001f0
    1ba0:	200000da 	.word	0x200000da

00001ba4 <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	if ((ep == 0) || (ep == 0x80)) {
    1ba4:	0643      	lsls	r3, r0, #25
    1ba6:	d00b      	beq.n	1bc0 <udd_ep_get_job+0x1c>
		return NULL;
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    1ba8:	230f      	movs	r3, #15
    1baa:	4003      	ands	r3, r0
    1bac:	005b      	lsls	r3, r3, #1
    1bae:	09c0      	lsrs	r0, r0, #7
    1bb0:	1818      	adds	r0, r3, r0
    1bb2:	3802      	subs	r0, #2
    1bb4:	0083      	lsls	r3, r0, #2
    1bb6:	1818      	adds	r0, r3, r0
    1bb8:	0080      	lsls	r0, r0, #2
    1bba:	4b02      	ldr	r3, [pc, #8]	; (1bc4 <udd_ep_get_job+0x20>)
    1bbc:	1818      	adds	r0, r3, r0
	}
}
    1bbe:	4770      	bx	lr
		return NULL;
    1bc0:	2000      	movs	r0, #0
    1bc2:	e7fc      	b.n	1bbe <udd_ep_get_job+0x1a>
    1bc4:	20000188 	.word	0x20000188

00001bc8 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    1bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bca:	46d6      	mov	lr, sl
    1bcc:	464f      	mov	r7, r9
    1bce:	4646      	mov	r6, r8
    1bd0:	b5c0      	push	{r6, r7, lr}
    1bd2:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    1bd4:	798d      	ldrb	r5, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
    1bd6:	b26b      	sxtb	r3, r5
    1bd8:	2b00      	cmp	r3, #0
    1bda:	db26      	blt.n	1c2a <udd_ep_transfer_process+0x62>
	ptr_job = udd_ep_get_job(ep);
    1bdc:	0028      	movs	r0, r5
    1bde:	4b5e      	ldr	r3, [pc, #376]	; (1d58 <udd_ep_transfer_process+0x190>)
    1be0:	4798      	blx	r3
    1be2:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    1be4:	270f      	movs	r7, #15
    1be6:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    1be8:	8a03      	ldrh	r3, [r0, #16]
    1bea:	4698      	mov	r8, r3
	nb_trans = ep_callback_para->received_bytes;
    1bec:	464b      	mov	r3, r9
    1bee:	881b      	ldrh	r3, [r3, #0]
    1bf0:	469a      	mov	sl, r3
	if (ptr_job->b_use_out_cache_buffer) {
    1bf2:	7c83      	ldrb	r3, [r0, #18]
    1bf4:	075b      	lsls	r3, r3, #29
    1bf6:	d46a      	bmi.n	1cce <udd_ep_transfer_process+0x106>
	ptr_job->nb_trans += nb_trans;
    1bf8:	68e3      	ldr	r3, [r4, #12]
    1bfa:	4453      	add	r3, sl
    1bfc:	001e      	movs	r6, r3
    1bfe:	60e3      	str	r3, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    1c00:	68a3      	ldr	r3, [r4, #8]
    1c02:	429e      	cmp	r6, r3
    1c04:	d800      	bhi.n	1c08 <udd_ep_transfer_process+0x40>
    1c06:	e074      	b.n	1cf2 <udd_ep_transfer_process+0x12a>
		ptr_job->nb_trans = ptr_job->buf_size;
    1c08:	60e3      	str	r3, [r4, #12]
	ptr_job->busy = false;
    1c0a:	7ca3      	ldrb	r3, [r4, #18]
    1c0c:	2201      	movs	r2, #1
    1c0e:	4393      	bics	r3, r2
    1c10:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    1c12:	6823      	ldr	r3, [r4, #0]
    1c14:	2b00      	cmp	r3, #0
    1c16:	d003      	beq.n	1c20 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    1c18:	68e1      	ldr	r1, [r4, #12]
    1c1a:	002a      	movs	r2, r5
    1c1c:	2000      	movs	r0, #0
    1c1e:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    1c20:	bc1c      	pop	{r2, r3, r4}
    1c22:	4690      	mov	r8, r2
    1c24:	4699      	mov	r9, r3
    1c26:	46a2      	mov	sl, r4
    1c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job = udd_ep_get_job(ep);
    1c2a:	0028      	movs	r0, r5
    1c2c:	4b4a      	ldr	r3, [pc, #296]	; (1d58 <udd_ep_transfer_process+0x190>)
    1c2e:	4798      	blx	r3
    1c30:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    1c32:	270f      	movs	r7, #15
    1c34:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    1c36:	8a03      	ldrh	r3, [r0, #16]
    1c38:	4698      	mov	r8, r3
	ptr_job->nb_trans += nb_trans;
    1c3a:	464b      	mov	r3, r9
    1c3c:	885e      	ldrh	r6, [r3, #2]
    1c3e:	68c3      	ldr	r3, [r0, #12]
    1c40:	469c      	mov	ip, r3
    1c42:	4466      	add	r6, ip
    1c44:	60c6      	str	r6, [r0, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    1c46:	6881      	ldr	r1, [r0, #8]
    1c48:	428e      	cmp	r6, r1
    1c4a:	d025      	beq.n	1c98 <udd_ep_transfer_process+0xd0>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    1c4c:	1b8d      	subs	r5, r1, r6
    1c4e:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1c50:	4b42      	ldr	r3, [pc, #264]	; (1d5c <udd_ep_transfer_process+0x194>)
    1c52:	429d      	cmp	r5, r3
    1c54:	d906      	bls.n	1c64 <udd_ep_transfer_process+0x9c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    1c56:	001d      	movs	r5, r3
    1c58:	4641      	mov	r1, r8
    1c5a:	0018      	movs	r0, r3
    1c5c:	4b40      	ldr	r3, [pc, #256]	; (1d60 <udd_ep_transfer_process+0x198>)
    1c5e:	4798      	blx	r3
    1c60:	1a6d      	subs	r5, r5, r1
    1c62:	b2ad      	uxth	r5, r5
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    1c64:	7ca2      	ldrb	r2, [r4, #18]
    1c66:	2300      	movs	r3, #0
    1c68:	0792      	lsls	r2, r2, #30
    1c6a:	d507      	bpl.n	1c7c <udd_ep_transfer_process+0xb4>
    1c6c:	4641      	mov	r1, r8
    1c6e:	0028      	movs	r0, r5
    1c70:	4b3c      	ldr	r3, [pc, #240]	; (1d64 <udd_ep_transfer_process+0x19c>)
    1c72:	4798      	blx	r3
    1c74:	b289      	uxth	r1, r1
    1c76:	424b      	negs	r3, r1
    1c78:	414b      	adcs	r3, r1
    1c7a:	b2db      	uxtb	r3, r3
    1c7c:	005b      	lsls	r3, r3, #1
    1c7e:	7ca2      	ldrb	r2, [r4, #18]
    1c80:	2102      	movs	r1, #2
    1c82:	438a      	bics	r2, r1
    1c84:	4313      	orrs	r3, r2
    1c86:	74a3      	strb	r3, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    1c88:	6862      	ldr	r2, [r4, #4]
    1c8a:	1992      	adds	r2, r2, r6
    1c8c:	002b      	movs	r3, r5
    1c8e:	0039      	movs	r1, r7
    1c90:	4835      	ldr	r0, [pc, #212]	; (1d68 <udd_ep_transfer_process+0x1a0>)
    1c92:	4c36      	ldr	r4, [pc, #216]	; (1d6c <udd_ep_transfer_process+0x1a4>)
    1c94:	47a0      	blx	r4
    1c96:	e7c3      	b.n	1c20 <udd_ep_transfer_process+0x58>
	if (ptr_job->b_shortpacket) {
    1c98:	7c83      	ldrb	r3, [r0, #18]
    1c9a:	079b      	lsls	r3, r3, #30
    1c9c:	d40b      	bmi.n	1cb6 <udd_ep_transfer_process+0xee>
	ptr_job->busy = false;
    1c9e:	7c83      	ldrb	r3, [r0, #18]
    1ca0:	2201      	movs	r2, #1
    1ca2:	4393      	bics	r3, r2
    1ca4:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    1ca6:	6803      	ldr	r3, [r0, #0]
    1ca8:	2b00      	cmp	r3, #0
    1caa:	d0b9      	beq.n	1c20 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    1cac:	002a      	movs	r2, r5
    1cae:	0031      	movs	r1, r6
    1cb0:	2000      	movs	r0, #0
    1cb2:	4798      	blx	r3
    1cb4:	e7b4      	b.n	1c20 <udd_ep_transfer_process+0x58>
		ptr_job->b_shortpacket = false;
    1cb6:	7c83      	ldrb	r3, [r0, #18]
    1cb8:	2202      	movs	r2, #2
    1cba:	4393      	bics	r3, r2
    1cbc:	7483      	strb	r3, [r0, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    1cbe:	6842      	ldr	r2, [r0, #4]
    1cc0:	1992      	adds	r2, r2, r6
    1cc2:	2300      	movs	r3, #0
    1cc4:	0039      	movs	r1, r7
    1cc6:	4828      	ldr	r0, [pc, #160]	; (1d68 <udd_ep_transfer_process+0x1a0>)
    1cc8:	4c28      	ldr	r4, [pc, #160]	; (1d6c <udd_ep_transfer_process+0x1a4>)
    1cca:	47a0      	blx	r4
    1ccc:	e7a8      	b.n	1c20 <udd_ep_transfer_process+0x58>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    1cce:	6843      	ldr	r3, [r0, #4]
    1cd0:	68c2      	ldr	r2, [r0, #12]
    1cd2:	4694      	mov	ip, r2
    1cd4:	4463      	add	r3, ip
    1cd6:	001e      	movs	r6, r3
    1cd8:	4641      	mov	r1, r8
    1cda:	6880      	ldr	r0, [r0, #8]
    1cdc:	4b21      	ldr	r3, [pc, #132]	; (1d64 <udd_ep_transfer_process+0x19c>)
    1cde:	4798      	blx	r3
    1ce0:	000a      	movs	r2, r1
    1ce2:	1e7b      	subs	r3, r7, #1
    1ce4:	019b      	lsls	r3, r3, #6
    1ce6:	4922      	ldr	r1, [pc, #136]	; (1d70 <udd_ep_transfer_process+0x1a8>)
    1ce8:	1859      	adds	r1, r3, r1
    1cea:	0030      	movs	r0, r6
    1cec:	4b21      	ldr	r3, [pc, #132]	; (1d74 <udd_ep_transfer_process+0x1ac>)
    1cee:	4798      	blx	r3
    1cf0:	e782      	b.n	1bf8 <udd_ep_transfer_process+0x30>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    1cf2:	464a      	mov	r2, r9
    1cf4:	8892      	ldrh	r2, [r2, #4]
    1cf6:	4552      	cmp	r2, sl
    1cf8:	d000      	beq.n	1cfc <udd_ep_transfer_process+0x134>
    1cfa:	e786      	b.n	1c0a <udd_ep_transfer_process+0x42>
    1cfc:	429e      	cmp	r6, r3
    1cfe:	d100      	bne.n	1d02 <udd_ep_transfer_process+0x13a>
    1d00:	e783      	b.n	1c0a <udd_ep_transfer_process+0x42>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    1d02:	1b9b      	subs	r3, r3, r6
    1d04:	b29d      	uxth	r5, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1d06:	4b15      	ldr	r3, [pc, #84]	; (1d5c <udd_ep_transfer_process+0x194>)
    1d08:	429d      	cmp	r5, r3
    1d0a:	d916      	bls.n	1d3a <udd_ep_transfer_process+0x172>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    1d0c:	001d      	movs	r5, r3
    1d0e:	4641      	mov	r1, r8
    1d10:	0018      	movs	r0, r3
    1d12:	4b13      	ldr	r3, [pc, #76]	; (1d60 <udd_ep_transfer_process+0x198>)
    1d14:	4798      	blx	r3
    1d16:	1a6b      	subs	r3, r5, r1
    1d18:	b29b      	uxth	r3, r3
		if (next_trans < ep_size) {
    1d1a:	4598      	cmp	r8, r3
    1d1c:	d914      	bls.n	1d48 <udd_ep_transfer_process+0x180>
			ptr_job->b_use_out_cache_buffer = true;
    1d1e:	7ca3      	ldrb	r3, [r4, #18]
    1d20:	2204      	movs	r2, #4
    1d22:	4313      	orrs	r3, r2
    1d24:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    1d26:	1e7a      	subs	r2, r7, #1
    1d28:	0192      	lsls	r2, r2, #6
    1d2a:	4b11      	ldr	r3, [pc, #68]	; (1d70 <udd_ep_transfer_process+0x1a8>)
    1d2c:	18d2      	adds	r2, r2, r3
    1d2e:	4643      	mov	r3, r8
    1d30:	0039      	movs	r1, r7
    1d32:	480d      	ldr	r0, [pc, #52]	; (1d68 <udd_ep_transfer_process+0x1a0>)
    1d34:	4c10      	ldr	r4, [pc, #64]	; (1d78 <udd_ep_transfer_process+0x1b0>)
    1d36:	47a0      	blx	r4
    1d38:	e772      	b.n	1c20 <udd_ep_transfer_process+0x58>
			next_trans -= next_trans % ep_size;
    1d3a:	4641      	mov	r1, r8
    1d3c:	0028      	movs	r0, r5
    1d3e:	4b09      	ldr	r3, [pc, #36]	; (1d64 <udd_ep_transfer_process+0x19c>)
    1d40:	4798      	blx	r3
    1d42:	1a6b      	subs	r3, r5, r1
    1d44:	b29b      	uxth	r3, r3
    1d46:	e7e8      	b.n	1d1a <udd_ep_transfer_process+0x152>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    1d48:	6862      	ldr	r2, [r4, #4]
    1d4a:	1992      	adds	r2, r2, r6
    1d4c:	0039      	movs	r1, r7
    1d4e:	4806      	ldr	r0, [pc, #24]	; (1d68 <udd_ep_transfer_process+0x1a0>)
    1d50:	4c09      	ldr	r4, [pc, #36]	; (1d78 <udd_ep_transfer_process+0x1b0>)
    1d52:	47a0      	blx	r4
    1d54:	e764      	b.n	1c20 <udd_ep_transfer_process+0x58>
    1d56:	46c0      	nop			; (mov r8, r8)
    1d58:	00001ba5 	.word	0x00001ba5
    1d5c:	00001fff 	.word	0x00001fff
    1d60:	00003e2d 	.word	0x00003e2d
    1d64:	00003c59 	.word	0x00003c59
    1d68:	2000028c 	.word	0x2000028c
    1d6c:	00002d69 	.word	0x00002d69
    1d70:	2000024c 	.word	0x2000024c
    1d74:	00003ec1 	.word	0x00003ec1
    1d78:	00002dbd 	.word	0x00002dbd

00001d7c <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    1d7c:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    1d7e:	2205      	movs	r2, #5
    1d80:	4b05      	ldr	r3, [pc, #20]	; (1d98 <udd_ctrl_stall_data+0x1c>)
    1d82:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    1d84:	4c05      	ldr	r4, [pc, #20]	; (1d9c <udd_ctrl_stall_data+0x20>)
    1d86:	2180      	movs	r1, #128	; 0x80
    1d88:	0020      	movs	r0, r4
    1d8a:	4b05      	ldr	r3, [pc, #20]	; (1da0 <udd_ctrl_stall_data+0x24>)
    1d8c:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    1d8e:	2100      	movs	r1, #0
    1d90:	0020      	movs	r0, r4
    1d92:	4b04      	ldr	r3, [pc, #16]	; (1da4 <udd_ctrl_stall_data+0x28>)
    1d94:	4798      	blx	r3
}
    1d96:	bd10      	pop	{r4, pc}
    1d98:	20000186 	.word	0x20000186
    1d9c:	2000028c 	.word	0x2000028c
    1da0:	00002cbd 	.word	0x00002cbd
    1da4:	00002ce3 	.word	0x00002ce3

00001da8 <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    1da8:	b570      	push	{r4, r5, r6, lr}
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    1daa:	4c08      	ldr	r4, [pc, #32]	; (1dcc <_usb_device_lpm_suspend+0x24>)
    1dac:	2106      	movs	r1, #6
    1dae:	0020      	movs	r0, r4
    1db0:	4d07      	ldr	r5, [pc, #28]	; (1dd0 <_usb_device_lpm_suspend+0x28>)
    1db2:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    1db4:	2104      	movs	r1, #4
    1db6:	0020      	movs	r0, r4
    1db8:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    1dba:	2102      	movs	r1, #2
    1dbc:	0020      	movs	r0, r4
    1dbe:	4b05      	ldr	r3, [pc, #20]	; (1dd4 <_usb_device_lpm_suspend+0x2c>)
    1dc0:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    1dc2:	2002      	movs	r0, #2
    1dc4:	4b04      	ldr	r3, [pc, #16]	; (1dd8 <_usb_device_lpm_suspend+0x30>)
    1dc6:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    1dc8:	bd70      	pop	{r4, r5, r6, pc}
    1dca:	46c0      	nop			; (mov r8, r8)
    1dcc:	2000028c 	.word	0x2000028c
    1dd0:	000027fd 	.word	0x000027fd
    1dd4:	000027dd 	.word	0x000027dd
    1dd8:	00001ae5 	.word	0x00001ae5

00001ddc <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    1ddc:	b570      	push	{r4, r5, r6, lr}
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    1dde:	4b13      	ldr	r3, [pc, #76]	; (1e2c <_usb_on_wakeup+0x50>)
    1de0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    1de2:	069b      	lsls	r3, r3, #26
    1de4:	d41c      	bmi.n	1e20 <_usb_on_wakeup+0x44>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    1de6:	4911      	ldr	r1, [pc, #68]	; (1e2c <_usb_on_wakeup+0x50>)
    1de8:	22d0      	movs	r2, #208	; 0xd0
    1dea:	68cb      	ldr	r3, [r1, #12]
    1dec:	4013      	ands	r3, r2
    1dee:	2bd0      	cmp	r3, #208	; 0xd0
    1df0:	d1fb      	bne.n	1dea <_usb_on_wakeup+0xe>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    1df2:	4c0f      	ldr	r4, [pc, #60]	; (1e30 <_usb_on_wakeup+0x54>)
    1df4:	2102      	movs	r1, #2
    1df6:	0020      	movs	r0, r4
    1df8:	4b0e      	ldr	r3, [pc, #56]	; (1e34 <_usb_on_wakeup+0x58>)
    1dfa:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    1dfc:	2104      	movs	r1, #4
    1dfe:	0020      	movs	r0, r4
    1e00:	4d0d      	ldr	r5, [pc, #52]	; (1e38 <_usb_on_wakeup+0x5c>)
    1e02:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    1e04:	4a0d      	ldr	r2, [pc, #52]	; (1e3c <_usb_on_wakeup+0x60>)
    1e06:	2106      	movs	r1, #6
    1e08:	0020      	movs	r0, r4
    1e0a:	4b0d      	ldr	r3, [pc, #52]	; (1e40 <_usb_on_wakeup+0x64>)
    1e0c:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    1e0e:	2106      	movs	r1, #6
    1e10:	0020      	movs	r0, r4
    1e12:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    1e14:	2003      	movs	r0, #3
    1e16:	4b0b      	ldr	r3, [pc, #44]	; (1e44 <_usb_on_wakeup+0x68>)
    1e18:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    1e1a:	4b0b      	ldr	r3, [pc, #44]	; (1e48 <_usb_on_wakeup+0x6c>)
    1e1c:	4798      	blx	r3
#endif
}
    1e1e:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    1e20:	4902      	ldr	r1, [pc, #8]	; (1e2c <_usb_on_wakeup+0x50>)
    1e22:	2210      	movs	r2, #16
    1e24:	68cb      	ldr	r3, [r1, #12]
    1e26:	421a      	tst	r2, r3
    1e28:	d0fc      	beq.n	1e24 <_usb_on_wakeup+0x48>
    1e2a:	e7e2      	b.n	1df2 <_usb_on_wakeup+0x16>
    1e2c:	40000800 	.word	0x40000800
    1e30:	2000028c 	.word	0x2000028c
    1e34:	000027fd 	.word	0x000027fd
    1e38:	000027dd 	.word	0x000027dd
    1e3c:	00001da9 	.word	0x00001da9
    1e40:	000027b9 	.word	0x000027b9
    1e44:	00001ae5 	.word	0x00001ae5
    1e48:	00003ae9 	.word	0x00003ae9

00001e4c <_usb_on_bus_reset>:
{
    1e4c:	b570      	push	{r4, r5, r6, lr}
    1e4e:	b082      	sub	sp, #8
    1e50:	0004      	movs	r4, r0
	udc_reset();
    1e52:	4b1e      	ldr	r3, [pc, #120]	; (1ecc <_usb_on_bus_reset+0x80>)
    1e54:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    1e56:	2380      	movs	r3, #128	; 0x80
    1e58:	6822      	ldr	r2, [r4, #0]
    1e5a:	7293      	strb	r3, [r2, #10]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    1e5c:	ad01      	add	r5, sp, #4
    1e5e:	0028      	movs	r0, r5
    1e60:	4b1b      	ldr	r3, [pc, #108]	; (1ed0 <_usb_on_bus_reset+0x84>)
    1e62:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    1e64:	2600      	movs	r6, #0
    1e66:	706e      	strb	r6, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    1e68:	0029      	movs	r1, r5
    1e6a:	0020      	movs	r0, r4
    1e6c:	4b19      	ldr	r3, [pc, #100]	; (1ed4 <_usb_on_bus_reset+0x88>)
    1e6e:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    1e70:	4919      	ldr	r1, [pc, #100]	; (1ed8 <_usb_on_bus_reset+0x8c>)
    1e72:	0020      	movs	r0, r4
    1e74:	4b19      	ldr	r3, [pc, #100]	; (1edc <_usb_on_bus_reset+0x90>)
    1e76:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    1e78:	4b19      	ldr	r3, [pc, #100]	; (1ee0 <_usb_on_bus_reset+0x94>)
    1e7a:	2202      	movs	r2, #2
    1e7c:	2100      	movs	r1, #0
    1e7e:	0020      	movs	r0, r4
    1e80:	4d18      	ldr	r5, [pc, #96]	; (1ee4 <_usb_on_bus_reset+0x98>)
    1e82:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    1e84:	4b18      	ldr	r3, [pc, #96]	; (1ee8 <_usb_on_bus_reset+0x9c>)
    1e86:	2200      	movs	r2, #0
    1e88:	2100      	movs	r1, #0
    1e8a:	0020      	movs	r0, r4
    1e8c:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    1e8e:	4b17      	ldr	r3, [pc, #92]	; (1eec <_usb_on_bus_reset+0xa0>)
    1e90:	2201      	movs	r2, #1
    1e92:	2100      	movs	r1, #0
    1e94:	0020      	movs	r0, r4
    1e96:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    1e98:	2202      	movs	r2, #2
    1e9a:	2100      	movs	r1, #0
    1e9c:	0020      	movs	r0, r4
    1e9e:	4d14      	ldr	r5, [pc, #80]	; (1ef0 <_usb_on_bus_reset+0xa4>)
    1ea0:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    1ea2:	2200      	movs	r2, #0
    1ea4:	2100      	movs	r1, #0
    1ea6:	0020      	movs	r0, r4
    1ea8:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    1eaa:	2201      	movs	r2, #1
    1eac:	2100      	movs	r1, #0
    1eae:	0020      	movs	r0, r4
    1eb0:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    1eb2:	6821      	ldr	r1, [r4, #0]
    1eb4:	890b      	ldrh	r3, [r1, #8]
    1eb6:	4a0f      	ldr	r2, [pc, #60]	; (1ef4 <_usb_on_bus_reset+0xa8>)
    1eb8:	401a      	ands	r2, r3
    1eba:	2380      	movs	r3, #128	; 0x80
    1ebc:	00db      	lsls	r3, r3, #3
    1ebe:	4313      	orrs	r3, r2
    1ec0:	810b      	strh	r3, [r1, #8]
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    1ec2:	4b0d      	ldr	r3, [pc, #52]	; (1ef8 <_usb_on_bus_reset+0xac>)
    1ec4:	701e      	strb	r6, [r3, #0]
}
    1ec6:	b002      	add	sp, #8
    1ec8:	bd70      	pop	{r4, r5, r6, pc}
    1eca:	46c0      	nop			; (mov r8, r8)
    1ecc:	0000074d 	.word	0x0000074d
    1ed0:	00002a09 	.word	0x00002a09
    1ed4:	00002a19 	.word	0x00002a19
    1ed8:	2000040c 	.word	0x2000040c
    1edc:	00002e0d 	.word	0x00002e0d
    1ee0:	00002035 	.word	0x00002035
    1ee4:	00002819 	.word	0x00002819
    1ee8:	00002351 	.word	0x00002351
    1eec:	00001f39 	.word	0x00001f39
    1ef0:	00002869 	.word	0x00002869
    1ef4:	fffff3ff 	.word	0xfffff3ff
    1ef8:	20000186 	.word	0x20000186

00001efc <udd_ctrl_send_zlp_in>:
{
    1efc:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    1efe:	2203      	movs	r2, #3
    1f00:	4b07      	ldr	r3, [pc, #28]	; (1f20 <udd_ctrl_send_zlp_in+0x24>)
    1f02:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    1f04:	4c07      	ldr	r4, [pc, #28]	; (1f24 <udd_ctrl_send_zlp_in+0x28>)
    1f06:	4908      	ldr	r1, [pc, #32]	; (1f28 <udd_ctrl_send_zlp_in+0x2c>)
    1f08:	0020      	movs	r0, r4
    1f0a:	4b08      	ldr	r3, [pc, #32]	; (1f2c <udd_ctrl_send_zlp_in+0x30>)
    1f0c:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    1f0e:	4b08      	ldr	r3, [pc, #32]	; (1f30 <udd_ctrl_send_zlp_in+0x34>)
    1f10:	689a      	ldr	r2, [r3, #8]
    1f12:	2300      	movs	r3, #0
    1f14:	2100      	movs	r1, #0
    1f16:	0020      	movs	r0, r4
    1f18:	4c06      	ldr	r4, [pc, #24]	; (1f34 <udd_ctrl_send_zlp_in+0x38>)
    1f1a:	47a0      	blx	r4
}
    1f1c:	bd10      	pop	{r4, pc}
    1f1e:	46c0      	nop			; (mov r8, r8)
    1f20:	20000186 	.word	0x20000186
    1f24:	2000028c 	.word	0x2000028c
    1f28:	2000040c 	.word	0x2000040c
    1f2c:	00002e0d 	.word	0x00002e0d
    1f30:	200003f4 	.word	0x200003f4
    1f34:	00002d69 	.word	0x00002d69

00001f38 <_usb_ep0_on_tansfer_fail>:
{
    1f38:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    1f3a:	7989      	ldrb	r1, [r1, #6]
    1f3c:	b24b      	sxtb	r3, r1
    1f3e:	2b00      	cmp	r3, #0
    1f40:	db06      	blt.n	1f50 <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    1f42:	4b0e      	ldr	r3, [pc, #56]	; (1f7c <_usb_ep0_on_tansfer_fail+0x44>)
    1f44:	781b      	ldrb	r3, [r3, #0]
    1f46:	2b02      	cmp	r3, #2
    1f48:	d00f      	beq.n	1f6a <_usb_ep0_on_tansfer_fail+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    1f4a:	2b03      	cmp	r3, #3
    1f4c:	d011      	beq.n	1f72 <_usb_ep0_on_tansfer_fail+0x3a>
}
    1f4e:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    1f50:	4b0a      	ldr	r3, [pc, #40]	; (1f7c <_usb_ep0_on_tansfer_fail+0x44>)
    1f52:	781b      	ldrb	r3, [r3, #0]
    1f54:	2b01      	cmp	r3, #1
    1f56:	d005      	beq.n	1f64 <_usb_ep0_on_tansfer_fail+0x2c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1f58:	2b04      	cmp	r3, #4
    1f5a:	d1f8      	bne.n	1f4e <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    1f5c:	4808      	ldr	r0, [pc, #32]	; (1f80 <_usb_ep0_on_tansfer_fail+0x48>)
    1f5e:	4b09      	ldr	r3, [pc, #36]	; (1f84 <_usb_ep0_on_tansfer_fail+0x4c>)
    1f60:	4798      	blx	r3
    1f62:	e7f4      	b.n	1f4e <_usb_ep0_on_tansfer_fail+0x16>
		udd_ctrl_send_zlp_in();
    1f64:	4b08      	ldr	r3, [pc, #32]	; (1f88 <_usb_ep0_on_tansfer_fail+0x50>)
    1f66:	4798      	blx	r3
    1f68:	e7f1      	b.n	1f4e <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1f6a:	2204      	movs	r2, #4
    1f6c:	4b03      	ldr	r3, [pc, #12]	; (1f7c <_usb_ep0_on_tansfer_fail+0x44>)
    1f6e:	701a      	strb	r2, [r3, #0]
    1f70:	e7ed      	b.n	1f4e <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    1f72:	4803      	ldr	r0, [pc, #12]	; (1f80 <_usb_ep0_on_tansfer_fail+0x48>)
    1f74:	4b03      	ldr	r3, [pc, #12]	; (1f84 <_usb_ep0_on_tansfer_fail+0x4c>)
    1f76:	4798      	blx	r3
}
    1f78:	e7e9      	b.n	1f4e <_usb_ep0_on_tansfer_fail+0x16>
    1f7a:	46c0      	nop			; (mov r8, r8)
    1f7c:	20000186 	.word	0x20000186
    1f80:	2000028c 	.word	0x2000028c
    1f84:	00002cbd 	.word	0x00002cbd
    1f88:	00001efd 	.word	0x00001efd

00001f8c <udd_ctrl_in_sent>:
{
    1f8c:	b570      	push	{r4, r5, r6, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    1f8e:	4b20      	ldr	r3, [pc, #128]	; (2010 <STACK_SIZE+0x10>)
    1f90:	881b      	ldrh	r3, [r3, #0]
    1f92:	4a20      	ldr	r2, [pc, #128]	; (2014 <STACK_SIZE+0x14>)
    1f94:	8994      	ldrh	r4, [r2, #12]
    1f96:	1ae4      	subs	r4, r4, r3
    1f98:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    1f9a:	2c00      	cmp	r4, #0
    1f9c:	d118      	bne.n	1fd0 <udd_ctrl_in_sent+0x44>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    1f9e:	4a1e      	ldr	r2, [pc, #120]	; (2018 <STACK_SIZE+0x18>)
    1fa0:	8811      	ldrh	r1, [r2, #0]
    1fa2:	185b      	adds	r3, r3, r1
    1fa4:	b29b      	uxth	r3, r3
    1fa6:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    1fa8:	4a1a      	ldr	r2, [pc, #104]	; (2014 <STACK_SIZE+0x14>)
    1faa:	88d2      	ldrh	r2, [r2, #6]
    1fac:	429a      	cmp	r2, r3
    1fae:	d023      	beq.n	1ff8 <udd_ctrl_in_sent+0x6c>
    1fb0:	4b1a      	ldr	r3, [pc, #104]	; (201c <STACK_SIZE+0x1c>)
    1fb2:	781b      	ldrb	r3, [r3, #0]
    1fb4:	2b00      	cmp	r3, #0
    1fb6:	d11f      	bne.n	1ff8 <udd_ctrl_in_sent+0x6c>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    1fb8:	4b16      	ldr	r3, [pc, #88]	; (2014 <STACK_SIZE+0x14>)
    1fba:	695b      	ldr	r3, [r3, #20]
    1fbc:	2b00      	cmp	r3, #0
    1fbe:	d023      	beq.n	2008 <STACK_SIZE+0x8>
    1fc0:	4798      	blx	r3
    1fc2:	2800      	cmp	r0, #0
    1fc4:	d020      	beq.n	2008 <STACK_SIZE+0x8>
			udd_ctrl_payload_nb_trans = 0;
    1fc6:	2200      	movs	r2, #0
    1fc8:	4b11      	ldr	r3, [pc, #68]	; (2010 <STACK_SIZE+0x10>)
    1fca:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    1fcc:	4b11      	ldr	r3, [pc, #68]	; (2014 <STACK_SIZE+0x14>)
    1fce:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    1fd0:	2c07      	cmp	r4, #7
    1fd2:	d919      	bls.n	2008 <STACK_SIZE+0x8>
		b_shortpacket = false;
    1fd4:	2200      	movs	r2, #0
    1fd6:	4b11      	ldr	r3, [pc, #68]	; (201c <STACK_SIZE+0x1c>)
    1fd8:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    1fda:	2408      	movs	r4, #8
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    1fdc:	4d0c      	ldr	r5, [pc, #48]	; (2010 <STACK_SIZE+0x10>)
    1fde:	882b      	ldrh	r3, [r5, #0]
    1fe0:	4a0c      	ldr	r2, [pc, #48]	; (2014 <STACK_SIZE+0x14>)
    1fe2:	6892      	ldr	r2, [r2, #8]
    1fe4:	18d2      	adds	r2, r2, r3
    1fe6:	0023      	movs	r3, r4
    1fe8:	2100      	movs	r1, #0
    1fea:	480d      	ldr	r0, [pc, #52]	; (2020 <STACK_SIZE+0x20>)
    1fec:	4e0d      	ldr	r6, [pc, #52]	; (2024 <STACK_SIZE+0x24>)
    1fee:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
    1ff0:	882b      	ldrh	r3, [r5, #0]
    1ff2:	18e4      	adds	r4, r4, r3
    1ff4:	802c      	strh	r4, [r5, #0]
}
    1ff6:	bd70      	pop	{r4, r5, r6, pc}
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1ff8:	2204      	movs	r2, #4
    1ffa:	4b0b      	ldr	r3, [pc, #44]	; (2028 <STACK_SIZE+0x28>)
    1ffc:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    1ffe:	490b      	ldr	r1, [pc, #44]	; (202c <STACK_SIZE+0x2c>)
    2000:	4807      	ldr	r0, [pc, #28]	; (2020 <STACK_SIZE+0x20>)
    2002:	4b0b      	ldr	r3, [pc, #44]	; (2030 <STACK_SIZE+0x30>)
    2004:	4798      	blx	r3
			return;
    2006:	e7f6      	b.n	1ff6 <udd_ctrl_in_sent+0x6a>
		b_shortpacket = true;
    2008:	2201      	movs	r2, #1
    200a:	4b04      	ldr	r3, [pc, #16]	; (201c <STACK_SIZE+0x1c>)
    200c:	701a      	strb	r2, [r3, #0]
    200e:	e7e5      	b.n	1fdc <udd_ctrl_in_sent+0x50>
    2010:	20000182 	.word	0x20000182
    2014:	200003f4 	.word	0x200003f4
    2018:	20000184 	.word	0x20000184
    201c:	20000180 	.word	0x20000180
    2020:	2000028c 	.word	0x2000028c
    2024:	00002d69 	.word	0x00002d69
    2028:	20000186 	.word	0x20000186
    202c:	2000040c 	.word	0x2000040c
    2030:	00002e0d 	.word	0x00002e0d

00002034 <_usb_ep0_on_setup>:
{
    2034:	b510      	push	{r4, lr}
    2036:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    2038:	4b2c      	ldr	r3, [pc, #176]	; (20ec <_usb_ep0_on_setup+0xb8>)
    203a:	781b      	ldrb	r3, [r3, #0]
    203c:	2b00      	cmp	r3, #0
    203e:	d007      	beq.n	2050 <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    2040:	4b2b      	ldr	r3, [pc, #172]	; (20f0 <_usb_ep0_on_setup+0xbc>)
    2042:	691b      	ldr	r3, [r3, #16]
    2044:	2b00      	cmp	r3, #0
    2046:	d000      	beq.n	204a <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    2048:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    204a:	2200      	movs	r2, #0
    204c:	4b27      	ldr	r3, [pc, #156]	; (20ec <_usb_ep0_on_setup+0xb8>)
    204e:	701a      	strb	r2, [r3, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    2050:	8823      	ldrh	r3, [r4, #0]
    2052:	2b08      	cmp	r3, #8
    2054:	d002      	beq.n	205c <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    2056:	4b27      	ldr	r3, [pc, #156]	; (20f4 <_usb_ep0_on_setup+0xc0>)
    2058:	4798      	blx	r3
}
    205a:	bd10      	pop	{r4, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    205c:	4a24      	ldr	r2, [pc, #144]	; (20f0 <_usb_ep0_on_setup+0xbc>)
    205e:	4b26      	ldr	r3, [pc, #152]	; (20f8 <_usb_ep0_on_setup+0xc4>)
    2060:	7819      	ldrb	r1, [r3, #0]
    2062:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    2064:	7859      	ldrb	r1, [r3, #1]
    2066:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    2068:	78d8      	ldrb	r0, [r3, #3]
    206a:	0200      	lsls	r0, r0, #8
    206c:	7899      	ldrb	r1, [r3, #2]
    206e:	1809      	adds	r1, r1, r0
    2070:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    2072:	7958      	ldrb	r0, [r3, #5]
    2074:	0200      	lsls	r0, r0, #8
    2076:	7919      	ldrb	r1, [r3, #4]
    2078:	1809      	adds	r1, r1, r0
    207a:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    207c:	79d9      	ldrb	r1, [r3, #7]
    207e:	0209      	lsls	r1, r1, #8
    2080:	799b      	ldrb	r3, [r3, #6]
    2082:	185b      	adds	r3, r3, r1
    2084:	80d3      	strh	r3, [r2, #6]
		if (false == udc_process_setup()) {
    2086:	4b1d      	ldr	r3, [pc, #116]	; (20fc <_usb_ep0_on_setup+0xc8>)
    2088:	4798      	blx	r3
    208a:	2800      	cmp	r0, #0
    208c:	d016      	beq.n	20bc <_usb_ep0_on_setup+0x88>
		} else if (Udd_setup_is_in()) {
    208e:	4b18      	ldr	r3, [pc, #96]	; (20f0 <_usb_ep0_on_setup+0xbc>)
    2090:	781b      	ldrb	r3, [r3, #0]
    2092:	2b7f      	cmp	r3, #127	; 0x7f
    2094:	d815      	bhi.n	20c2 <_usb_ep0_on_setup+0x8e>
			if(0 == udd_g_ctrlreq.req.wLength) {
    2096:	4b16      	ldr	r3, [pc, #88]	; (20f0 <_usb_ep0_on_setup+0xbc>)
    2098:	88db      	ldrh	r3, [r3, #6]
    209a:	2b00      	cmp	r3, #0
    209c:	d022      	beq.n	20e4 <_usb_ep0_on_setup+0xb0>
				udd_ctrl_prev_payload_nb_trans = 0;
    209e:	2300      	movs	r3, #0
    20a0:	4a17      	ldr	r2, [pc, #92]	; (2100 <_usb_ep0_on_setup+0xcc>)
    20a2:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    20a4:	4a17      	ldr	r2, [pc, #92]	; (2104 <_usb_ep0_on_setup+0xd0>)
    20a6:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    20a8:	2201      	movs	r2, #1
    20aa:	4b10      	ldr	r3, [pc, #64]	; (20ec <_usb_ep0_on_setup+0xb8>)
    20ac:	701a      	strb	r2, [r3, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    20ae:	2308      	movs	r3, #8
    20b0:	4a11      	ldr	r2, [pc, #68]	; (20f8 <_usb_ep0_on_setup+0xc4>)
    20b2:	2100      	movs	r1, #0
    20b4:	4814      	ldr	r0, [pc, #80]	; (2108 <_usb_ep0_on_setup+0xd4>)
    20b6:	4c15      	ldr	r4, [pc, #84]	; (210c <_usb_ep0_on_setup+0xd8>)
    20b8:	47a0      	blx	r4
    20ba:	e7ce      	b.n	205a <_usb_ep0_on_setup+0x26>
			udd_ctrl_stall_data();
    20bc:	4b0d      	ldr	r3, [pc, #52]	; (20f4 <_usb_ep0_on_setup+0xc0>)
    20be:	4798      	blx	r3
			return;
    20c0:	e7cb      	b.n	205a <_usb_ep0_on_setup+0x26>
			udd_ctrl_prev_payload_nb_trans = 0;
    20c2:	2300      	movs	r3, #0
    20c4:	4a0e      	ldr	r2, [pc, #56]	; (2100 <_usb_ep0_on_setup+0xcc>)
    20c6:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    20c8:	4a0e      	ldr	r2, [pc, #56]	; (2104 <_usb_ep0_on_setup+0xd0>)
    20ca:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    20cc:	2202      	movs	r2, #2
    20ce:	4b07      	ldr	r3, [pc, #28]	; (20ec <_usb_ep0_on_setup+0xb8>)
    20d0:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    20d2:	2308      	movs	r3, #8
    20d4:	4a08      	ldr	r2, [pc, #32]	; (20f8 <_usb_ep0_on_setup+0xc4>)
    20d6:	2100      	movs	r1, #0
    20d8:	480b      	ldr	r0, [pc, #44]	; (2108 <_usb_ep0_on_setup+0xd4>)
    20da:	4c0c      	ldr	r4, [pc, #48]	; (210c <_usb_ep0_on_setup+0xd8>)
    20dc:	47a0      	blx	r4
			udd_ctrl_in_sent();
    20de:	4b0c      	ldr	r3, [pc, #48]	; (2110 <_usb_ep0_on_setup+0xdc>)
    20e0:	4798      	blx	r3
    20e2:	e7ba      	b.n	205a <_usb_ep0_on_setup+0x26>
				udd_ctrl_send_zlp_in();
    20e4:	4b0b      	ldr	r3, [pc, #44]	; (2114 <_usb_ep0_on_setup+0xe0>)
    20e6:	4798      	blx	r3
				return;
    20e8:	e7b7      	b.n	205a <_usb_ep0_on_setup+0x26>
    20ea:	46c0      	nop			; (mov r8, r8)
    20ec:	20000186 	.word	0x20000186
    20f0:	200003f4 	.word	0x200003f4
    20f4:	00001d7d 	.word	0x00001d7d
    20f8:	2000040c 	.word	0x2000040c
    20fc:	000007f1 	.word	0x000007f1
    2100:	20000184 	.word	0x20000184
    2104:	20000182 	.word	0x20000182
    2108:	2000028c 	.word	0x2000028c
    210c:	00002dbd 	.word	0x00002dbd
    2110:	00001f8d 	.word	0x00001f8d
    2114:	00001efd 	.word	0x00001efd

00002118 <_usb_on_sof_notify>:
{
    2118:	b510      	push	{r4, lr}
	udc_sof_notify();
    211a:	4b02      	ldr	r3, [pc, #8]	; (2124 <_usb_on_sof_notify+0xc>)
    211c:	4798      	blx	r3
	UDC_SOF_EVENT();
    211e:	4b02      	ldr	r3, [pc, #8]	; (2128 <_usb_on_sof_notify+0x10>)
    2120:	4798      	blx	r3
}
    2122:	bd10      	pop	{r4, pc}
    2124:	000007ad 	.word	0x000007ad
    2128:	00003af5 	.word	0x00003af5

0000212c <_usb_on_suspend>:
{
    212c:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    212e:	4c07      	ldr	r4, [pc, #28]	; (214c <_usb_on_suspend+0x20>)
    2130:	2104      	movs	r1, #4
    2132:	0020      	movs	r0, r4
    2134:	4b06      	ldr	r3, [pc, #24]	; (2150 <_usb_on_suspend+0x24>)
    2136:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    2138:	2102      	movs	r1, #2
    213a:	0020      	movs	r0, r4
    213c:	4b05      	ldr	r3, [pc, #20]	; (2154 <_usb_on_suspend+0x28>)
    213e:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    2140:	2001      	movs	r0, #1
    2142:	4b05      	ldr	r3, [pc, #20]	; (2158 <_usb_on_suspend+0x2c>)
    2144:	4798      	blx	r3
	UDC_SUSPEND_EVENT();
    2146:	4b05      	ldr	r3, [pc, #20]	; (215c <_usb_on_suspend+0x30>)
    2148:	4798      	blx	r3
}
    214a:	bd10      	pop	{r4, pc}
    214c:	2000028c 	.word	0x2000028c
    2150:	000027fd 	.word	0x000027fd
    2154:	000027dd 	.word	0x000027dd
    2158:	00001ae5 	.word	0x00001ae5
    215c:	00003add 	.word	0x00003add

00002160 <udd_ep_abort>:
{
    2160:	b510      	push	{r4, lr}
    2162:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    2164:	0001      	movs	r1, r0
    2166:	480a      	ldr	r0, [pc, #40]	; (2190 <udd_ep_abort+0x30>)
    2168:	4b0a      	ldr	r3, [pc, #40]	; (2194 <udd_ep_abort+0x34>)
    216a:	4798      	blx	r3
	ptr_job = udd_ep_get_job(ep);
    216c:	0020      	movs	r0, r4
    216e:	4b0a      	ldr	r3, [pc, #40]	; (2198 <udd_ep_abort+0x38>)
    2170:	4798      	blx	r3
	if (!ptr_job->busy) {
    2172:	7c83      	ldrb	r3, [r0, #18]
    2174:	07db      	lsls	r3, r3, #31
    2176:	d50a      	bpl.n	218e <udd_ep_abort+0x2e>
	ptr_job->busy = false;
    2178:	7c83      	ldrb	r3, [r0, #18]
    217a:	2201      	movs	r2, #1
    217c:	4393      	bics	r3, r2
    217e:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    2180:	6803      	ldr	r3, [r0, #0]
    2182:	2b00      	cmp	r3, #0
    2184:	d003      	beq.n	218e <udd_ep_abort+0x2e>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    2186:	68c1      	ldr	r1, [r0, #12]
    2188:	0022      	movs	r2, r4
    218a:	2001      	movs	r0, #1
    218c:	4798      	blx	r3
}
    218e:	bd10      	pop	{r4, pc}
    2190:	2000028c 	.word	0x2000028c
    2194:	00002c5d 	.word	0x00002c5d
    2198:	00001ba5 	.word	0x00001ba5

0000219c <udd_get_frame_number>:
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    219c:	4b02      	ldr	r3, [pc, #8]	; (21a8 <udd_get_frame_number+0xc>)
    219e:	681b      	ldr	r3, [r3, #0]
    21a0:	8a18      	ldrh	r0, [r3, #16]
    21a2:	0480      	lsls	r0, r0, #18
    21a4:	0d40      	lsrs	r0, r0, #21
}
    21a6:	4770      	bx	lr
    21a8:	2000028c 	.word	0x2000028c

000021ac <udd_ep_free>:
{
    21ac:	b570      	push	{r4, r5, r6, lr}
    21ae:	b082      	sub	sp, #8
    21b0:	0004      	movs	r4, r0
	usb_device_endpoint_get_config_defaults(&config_ep);
    21b2:	ad01      	add	r5, sp, #4
    21b4:	0028      	movs	r0, r5
    21b6:	4b0d      	ldr	r3, [pc, #52]	; (21ec <udd_ep_free+0x40>)
    21b8:	4798      	blx	r3
	udd_ep_abort(ep);
    21ba:	0020      	movs	r0, r4
    21bc:	4b0c      	ldr	r3, [pc, #48]	; (21f0 <udd_ep_free+0x44>)
    21be:	4798      	blx	r3
	config_ep.ep_address = ep;
    21c0:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    21c2:	2300      	movs	r3, #0
    21c4:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    21c6:	4e0b      	ldr	r6, [pc, #44]	; (21f4 <udd_ep_free+0x48>)
    21c8:	0029      	movs	r1, r5
    21ca:	0030      	movs	r0, r6
    21cc:	4b0a      	ldr	r3, [pc, #40]	; (21f8 <udd_ep_free+0x4c>)
    21ce:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    21d0:	210f      	movs	r1, #15
    21d2:	4021      	ands	r1, r4
    21d4:	2200      	movs	r2, #0
    21d6:	0030      	movs	r0, r6
    21d8:	4b08      	ldr	r3, [pc, #32]	; (21fc <udd_ep_free+0x50>)
    21da:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    21dc:	2200      	movs	r2, #0
    21de:	0021      	movs	r1, r4
    21e0:	0030      	movs	r0, r6
    21e2:	4b07      	ldr	r3, [pc, #28]	; (2200 <udd_ep_free+0x54>)
    21e4:	4798      	blx	r3
}
    21e6:	b002      	add	sp, #8
    21e8:	bd70      	pop	{r4, r5, r6, pc}
    21ea:	46c0      	nop			; (mov r8, r8)
    21ec:	00002a09 	.word	0x00002a09
    21f0:	00002161 	.word	0x00002161
    21f4:	2000028c 	.word	0x2000028c
    21f8:	00002a19 	.word	0x00002a19
    21fc:	00002841 	.word	0x00002841
    2200:	00002939 	.word	0x00002939

00002204 <udd_ep_alloc>:
{
    2204:	b5f0      	push	{r4, r5, r6, r7, lr}
    2206:	b083      	sub	sp, #12
    2208:	0005      	movs	r5, r0
    220a:	000f      	movs	r7, r1
    220c:	0014      	movs	r4, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    220e:	ae01      	add	r6, sp, #4
    2210:	0030      	movs	r0, r6
    2212:	4b36      	ldr	r3, [pc, #216]	; (22ec <udd_ep_alloc+0xe8>)
    2214:	4798      	blx	r3
	config_ep.ep_address = ep;
    2216:	7035      	strb	r5, [r6, #0]
	if(MaxEndpointSize <= 8) {
    2218:	2c08      	cmp	r4, #8
    221a:	d813      	bhi.n	2244 <udd_ep_alloc+0x40>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    221c:	2200      	movs	r2, #0
    221e:	ab01      	add	r3, sp, #4
    2220:	705a      	strb	r2, [r3, #1]
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    2222:	0028      	movs	r0, r5
    2224:	4b32      	ldr	r3, [pc, #200]	; (22f0 <udd_ep_alloc+0xec>)
    2226:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    2228:	8204      	strh	r4, [r0, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    222a:	2103      	movs	r1, #3
    222c:	4039      	ands	r1, r7
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    222e:	2901      	cmp	r1, #1
    2230:	d038      	beq.n	22a4 <udd_ep_alloc+0xa0>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    2232:	2902      	cmp	r1, #2
    2234:	d043      	beq.n	22be <udd_ep_alloc+0xba>
		return false;
    2236:	2300      	movs	r3, #0
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    2238:	2903      	cmp	r1, #3
    223a:	d13d      	bne.n	22b8 <udd_ep_alloc+0xb4>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    223c:	2204      	movs	r2, #4
    223e:	ab01      	add	r3, sp, #4
    2240:	70da      	strb	r2, [r3, #3]
    2242:	e032      	b.n	22aa <udd_ep_alloc+0xa6>
	} else if(MaxEndpointSize <= 16) {
    2244:	2c10      	cmp	r4, #16
    2246:	d803      	bhi.n	2250 <udd_ep_alloc+0x4c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    2248:	2201      	movs	r2, #1
    224a:	ab01      	add	r3, sp, #4
    224c:	705a      	strb	r2, [r3, #1]
    224e:	e7e8      	b.n	2222 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 32) {
    2250:	2c20      	cmp	r4, #32
    2252:	d803      	bhi.n	225c <udd_ep_alloc+0x58>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    2254:	2202      	movs	r2, #2
    2256:	ab01      	add	r3, sp, #4
    2258:	705a      	strb	r2, [r3, #1]
    225a:	e7e2      	b.n	2222 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 64) {
    225c:	2c40      	cmp	r4, #64	; 0x40
    225e:	d803      	bhi.n	2268 <udd_ep_alloc+0x64>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    2260:	2203      	movs	r2, #3
    2262:	ab01      	add	r3, sp, #4
    2264:	705a      	strb	r2, [r3, #1]
    2266:	e7dc      	b.n	2222 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 128) {
    2268:	2c80      	cmp	r4, #128	; 0x80
    226a:	d803      	bhi.n	2274 <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    226c:	2204      	movs	r2, #4
    226e:	ab01      	add	r3, sp, #4
    2270:	705a      	strb	r2, [r3, #1]
    2272:	e7d6      	b.n	2222 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 256) {
    2274:	2380      	movs	r3, #128	; 0x80
    2276:	005b      	lsls	r3, r3, #1
    2278:	429c      	cmp	r4, r3
    227a:	d803      	bhi.n	2284 <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    227c:	2205      	movs	r2, #5
    227e:	ab01      	add	r3, sp, #4
    2280:	705a      	strb	r2, [r3, #1]
    2282:	e7ce      	b.n	2222 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 512) {
    2284:	2380      	movs	r3, #128	; 0x80
    2286:	009b      	lsls	r3, r3, #2
    2288:	429c      	cmp	r4, r3
    228a:	d803      	bhi.n	2294 <udd_ep_alloc+0x90>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    228c:	2206      	movs	r2, #6
    228e:	ab01      	add	r3, sp, #4
    2290:	705a      	strb	r2, [r3, #1]
    2292:	e7c6      	b.n	2222 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 1023) {
    2294:	4a17      	ldr	r2, [pc, #92]	; (22f4 <udd_ep_alloc+0xf0>)
		return false;
    2296:	2300      	movs	r3, #0
	} else if(MaxEndpointSize <= 1023) {
    2298:	4294      	cmp	r4, r2
    229a:	d80d      	bhi.n	22b8 <udd_ep_alloc+0xb4>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    229c:	2207      	movs	r2, #7
    229e:	ab01      	add	r3, sp, #4
    22a0:	705a      	strb	r2, [r3, #1]
    22a2:	e7be      	b.n	2222 <udd_ep_alloc+0x1e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    22a4:	2202      	movs	r2, #2
    22a6:	ab01      	add	r3, sp, #4
    22a8:	70da      	strb	r2, [r3, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    22aa:	a901      	add	r1, sp, #4
    22ac:	4812      	ldr	r0, [pc, #72]	; (22f8 <udd_ep_alloc+0xf4>)
    22ae:	4b13      	ldr	r3, [pc, #76]	; (22fc <udd_ep_alloc+0xf8>)
    22b0:	4798      	blx	r3
		return false;
    22b2:	2300      	movs	r3, #0
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    22b4:	2800      	cmp	r0, #0
    22b6:	d006      	beq.n	22c6 <udd_ep_alloc+0xc2>
}
    22b8:	0018      	movs	r0, r3
    22ba:	b003      	add	sp, #12
    22bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    22be:	2203      	movs	r2, #3
    22c0:	ab01      	add	r3, sp, #4
    22c2:	70da      	strb	r2, [r3, #3]
    22c4:	e7f1      	b.n	22aa <udd_ep_alloc+0xa6>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    22c6:	210f      	movs	r1, #15
    22c8:	4029      	ands	r1, r5
    22ca:	4c0b      	ldr	r4, [pc, #44]	; (22f8 <udd_ep_alloc+0xf4>)
    22cc:	4b0c      	ldr	r3, [pc, #48]	; (2300 <udd_ep_alloc+0xfc>)
    22ce:	2200      	movs	r2, #0
    22d0:	0020      	movs	r0, r4
    22d2:	4e0c      	ldr	r6, [pc, #48]	; (2304 <udd_ep_alloc+0x100>)
    22d4:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    22d6:	2200      	movs	r2, #0
    22d8:	0029      	movs	r1, r5
    22da:	0020      	movs	r0, r4
    22dc:	4e0a      	ldr	r6, [pc, #40]	; (2308 <udd_ep_alloc+0x104>)
    22de:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    22e0:	2201      	movs	r2, #1
    22e2:	0029      	movs	r1, r5
    22e4:	0020      	movs	r0, r4
    22e6:	47b0      	blx	r6
	return true;
    22e8:	2301      	movs	r3, #1
    22ea:	e7e5      	b.n	22b8 <udd_ep_alloc+0xb4>
    22ec:	00002a09 	.word	0x00002a09
    22f0:	00001ba5 	.word	0x00001ba5
    22f4:	000003ff 	.word	0x000003ff
    22f8:	2000028c 	.word	0x2000028c
    22fc:	00002a19 	.word	0x00002a19
    2300:	00001bc9 	.word	0x00001bc9
    2304:	00002819 	.word	0x00002819
    2308:	00002869 	.word	0x00002869

0000230c <udd_ep_is_halted>:
{
    230c:	b510      	push	{r4, lr}
    230e:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    2310:	4801      	ldr	r0, [pc, #4]	; (2318 <udd_ep_is_halted+0xc>)
    2312:	4b02      	ldr	r3, [pc, #8]	; (231c <udd_ep_is_halted+0x10>)
    2314:	4798      	blx	r3
}
    2316:	bd10      	pop	{r4, pc}
    2318:	2000028c 	.word	0x2000028c
    231c:	00002c93 	.word	0x00002c93

00002320 <udd_ep_set_halt>:
{
    2320:	b510      	push	{r4, lr}
    2322:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    2324:	230f      	movs	r3, #15
    2326:	4003      	ands	r3, r0
		return false;
    2328:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    232a:	2b01      	cmp	r3, #1
    232c:	d900      	bls.n	2330 <udd_ep_set_halt+0x10>
}
    232e:	bd10      	pop	{r4, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    2330:	0021      	movs	r1, r4
    2332:	4804      	ldr	r0, [pc, #16]	; (2344 <udd_ep_set_halt+0x24>)
    2334:	4b04      	ldr	r3, [pc, #16]	; (2348 <udd_ep_set_halt+0x28>)
    2336:	4798      	blx	r3
	udd_ep_abort(ep);
    2338:	0020      	movs	r0, r4
    233a:	4b04      	ldr	r3, [pc, #16]	; (234c <udd_ep_set_halt+0x2c>)
    233c:	4798      	blx	r3
	return true;
    233e:	2001      	movs	r0, #1
    2340:	e7f5      	b.n	232e <udd_ep_set_halt+0xe>
    2342:	46c0      	nop			; (mov r8, r8)
    2344:	2000028c 	.word	0x2000028c
    2348:	00002cbd 	.word	0x00002cbd
    234c:	00002161 	.word	0x00002161

00002350 <_usb_ep0_on_tansfer_ok>:
{
    2350:	b570      	push	{r4, r5, r6, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    2352:	4b34      	ldr	r3, [pc, #208]	; (2424 <_usb_ep0_on_tansfer_ok+0xd4>)
    2354:	781b      	ldrb	r3, [r3, #0]
    2356:	2b01      	cmp	r3, #1
    2358:	d00a      	beq.n	2370 <_usb_ep0_on_tansfer_ok+0x20>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    235a:	2b02      	cmp	r3, #2
    235c:	d05f      	beq.n	241e <_usb_ep0_on_tansfer_ok+0xce>
			if (NULL != udd_g_ctrlreq.callback) {
    235e:	4b32      	ldr	r3, [pc, #200]	; (2428 <_usb_ep0_on_tansfer_ok+0xd8>)
    2360:	691b      	ldr	r3, [r3, #16]
    2362:	2b00      	cmp	r3, #0
    2364:	d000      	beq.n	2368 <_usb_ep0_on_tansfer_ok+0x18>
				udd_g_ctrlreq.callback();
    2366:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    2368:	2200      	movs	r2, #0
    236a:	4b2e      	ldr	r3, [pc, #184]	; (2424 <_usb_ep0_on_tansfer_ok+0xd4>)
    236c:	701a      	strb	r2, [r3, #0]
}
    236e:	bd70      	pop	{r4, r5, r6, pc}
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    2370:	880d      	ldrh	r5, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2372:	4b2d      	ldr	r3, [pc, #180]	; (2428 <_usb_ep0_on_tansfer_ok+0xd8>)
    2374:	899b      	ldrh	r3, [r3, #12]
    2376:	4a2d      	ldr	r2, [pc, #180]	; (242c <_usb_ep0_on_tansfer_ok+0xdc>)
    2378:	8814      	ldrh	r4, [r2, #0]
    237a:	1962      	adds	r2, r4, r5
    237c:	4293      	cmp	r3, r2
    237e:	da01      	bge.n	2384 <_usb_ep0_on_tansfer_ok+0x34>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2380:	1b1d      	subs	r5, r3, r4
    2382:	b2ad      	uxth	r5, r5
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    2384:	4b28      	ldr	r3, [pc, #160]	; (2428 <_usb_ep0_on_tansfer_ok+0xd8>)
    2386:	6898      	ldr	r0, [r3, #8]
    2388:	1900      	adds	r0, r0, r4
    238a:	002a      	movs	r2, r5
    238c:	4928      	ldr	r1, [pc, #160]	; (2430 <_usb_ep0_on_tansfer_ok+0xe0>)
    238e:	4b29      	ldr	r3, [pc, #164]	; (2434 <_usb_ep0_on_tansfer_ok+0xe4>)
    2390:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    2392:	1964      	adds	r4, r4, r5
    2394:	b2a4      	uxth	r4, r4
    2396:	4b25      	ldr	r3, [pc, #148]	; (242c <_usb_ep0_on_tansfer_ok+0xdc>)
    2398:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    239a:	2d08      	cmp	r5, #8
    239c:	d00a      	beq.n	23b4 <_usb_ep0_on_tansfer_ok+0x64>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    239e:	4b22      	ldr	r3, [pc, #136]	; (2428 <_usb_ep0_on_tansfer_ok+0xd8>)
    23a0:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    23a2:	695b      	ldr	r3, [r3, #20]
    23a4:	2b00      	cmp	r3, #0
    23a6:	d002      	beq.n	23ae <_usb_ep0_on_tansfer_ok+0x5e>
			if (!udd_g_ctrlreq.over_under_run()) {
    23a8:	4798      	blx	r3
    23aa:	2800      	cmp	r0, #0
    23ac:	d014      	beq.n	23d8 <_usb_ep0_on_tansfer_ok+0x88>
		udd_ctrl_send_zlp_in();
    23ae:	4b22      	ldr	r3, [pc, #136]	; (2438 <_usb_ep0_on_tansfer_ok+0xe8>)
    23b0:	4798      	blx	r3
    23b2:	e7dc      	b.n	236e <_usb_ep0_on_tansfer_ok+0x1e>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    23b4:	4b1c      	ldr	r3, [pc, #112]	; (2428 <_usb_ep0_on_tansfer_ok+0xd8>)
    23b6:	88da      	ldrh	r2, [r3, #6]
    23b8:	4b20      	ldr	r3, [pc, #128]	; (243c <_usb_ep0_on_tansfer_ok+0xec>)
    23ba:	881b      	ldrh	r3, [r3, #0]
    23bc:	191b      	adds	r3, r3, r4
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    23be:	429a      	cmp	r2, r3
    23c0:	dded      	ble.n	239e <_usb_ep0_on_tansfer_ok+0x4e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    23c2:	4b19      	ldr	r3, [pc, #100]	; (2428 <_usb_ep0_on_tansfer_ok+0xd8>)
    23c4:	899b      	ldrh	r3, [r3, #12]
    23c6:	42a3      	cmp	r3, r4
    23c8:	d00c      	beq.n	23e4 <_usb_ep0_on_tansfer_ok+0x94>
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    23ca:	2308      	movs	r3, #8
    23cc:	4a18      	ldr	r2, [pc, #96]	; (2430 <_usb_ep0_on_tansfer_ok+0xe0>)
    23ce:	2100      	movs	r1, #0
    23d0:	481b      	ldr	r0, [pc, #108]	; (2440 <_usb_ep0_on_tansfer_ok+0xf0>)
    23d2:	4c1c      	ldr	r4, [pc, #112]	; (2444 <_usb_ep0_on_tansfer_ok+0xf4>)
    23d4:	47a0      	blx	r4
    23d6:	e7ca      	b.n	236e <_usb_ep0_on_tansfer_ok+0x1e>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    23d8:	2205      	movs	r2, #5
    23da:	4b12      	ldr	r3, [pc, #72]	; (2424 <_usb_ep0_on_tansfer_ok+0xd4>)
    23dc:	701a      	strb	r2, [r3, #0]
				udd_ep_set_halt(0);
    23de:	4b1a      	ldr	r3, [pc, #104]	; (2448 <_usb_ep0_on_tansfer_ok+0xf8>)
    23e0:	4798      	blx	r3
    23e2:	e7c4      	b.n	236e <_usb_ep0_on_tansfer_ok+0x1e>
		if (!udd_g_ctrlreq.over_under_run) {
    23e4:	4b10      	ldr	r3, [pc, #64]	; (2428 <_usb_ep0_on_tansfer_ok+0xd8>)
    23e6:	695b      	ldr	r3, [r3, #20]
    23e8:	2b00      	cmp	r3, #0
    23ea:	d00b      	beq.n	2404 <_usb_ep0_on_tansfer_ok+0xb4>
		if (!udd_g_ctrlreq.over_under_run()) {
    23ec:	4798      	blx	r3
    23ee:	2800      	cmp	r0, #0
    23f0:	d00f      	beq.n	2412 <_usb_ep0_on_tansfer_ok+0xc2>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    23f2:	4912      	ldr	r1, [pc, #72]	; (243c <_usb_ep0_on_tansfer_ok+0xec>)
    23f4:	4a0d      	ldr	r2, [pc, #52]	; (242c <_usb_ep0_on_tansfer_ok+0xdc>)
    23f6:	880b      	ldrh	r3, [r1, #0]
    23f8:	8810      	ldrh	r0, [r2, #0]
    23fa:	181b      	adds	r3, r3, r0
    23fc:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
    23fe:	2300      	movs	r3, #0
    2400:	8013      	strh	r3, [r2, #0]
    2402:	e7e2      	b.n	23ca <_usb_ep0_on_tansfer_ok+0x7a>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2404:	2205      	movs	r2, #5
    2406:	4b07      	ldr	r3, [pc, #28]	; (2424 <_usb_ep0_on_tansfer_ok+0xd4>)
    2408:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    240a:	2000      	movs	r0, #0
    240c:	4b0e      	ldr	r3, [pc, #56]	; (2448 <_usb_ep0_on_tansfer_ok+0xf8>)
    240e:	4798      	blx	r3
    2410:	e7ad      	b.n	236e <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2412:	2205      	movs	r2, #5
    2414:	4b03      	ldr	r3, [pc, #12]	; (2424 <_usb_ep0_on_tansfer_ok+0xd4>)
    2416:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    2418:	4b0b      	ldr	r3, [pc, #44]	; (2448 <_usb_ep0_on_tansfer_ok+0xf8>)
    241a:	4798      	blx	r3
    241c:	e7a7      	b.n	236e <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ctrl_in_sent();
    241e:	4b0b      	ldr	r3, [pc, #44]	; (244c <_usb_ep0_on_tansfer_ok+0xfc>)
    2420:	4798      	blx	r3
    2422:	e7a4      	b.n	236e <_usb_ep0_on_tansfer_ok+0x1e>
    2424:	20000186 	.word	0x20000186
    2428:	200003f4 	.word	0x200003f4
    242c:	20000182 	.word	0x20000182
    2430:	2000040c 	.word	0x2000040c
    2434:	00003ec1 	.word	0x00003ec1
    2438:	00001efd 	.word	0x00001efd
    243c:	20000184 	.word	0x20000184
    2440:	2000028c 	.word	0x2000028c
    2444:	00002dbd 	.word	0x00002dbd
    2448:	00002321 	.word	0x00002321
    244c:	00001f8d 	.word	0x00001f8d

00002450 <udd_ep_clear_halt>:
{
    2450:	b570      	push	{r4, r5, r6, lr}
    2452:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    2454:	230f      	movs	r3, #15
    2456:	4003      	ands	r3, r0
		return false;
    2458:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    245a:	2b01      	cmp	r3, #1
    245c:	d900      	bls.n	2460 <udd_ep_clear_halt+0x10>
}
    245e:	bd70      	pop	{r4, r5, r6, pc}
	ptr_job = udd_ep_get_job(ep);
    2460:	0020      	movs	r0, r4
    2462:	4b09      	ldr	r3, [pc, #36]	; (2488 <udd_ep_clear_halt+0x38>)
    2464:	4798      	blx	r3
    2466:	0005      	movs	r5, r0
	usb_device_endpoint_clear_halt(&usb_device, ep);
    2468:	0021      	movs	r1, r4
    246a:	4808      	ldr	r0, [pc, #32]	; (248c <udd_ep_clear_halt+0x3c>)
    246c:	4b08      	ldr	r3, [pc, #32]	; (2490 <udd_ep_clear_halt+0x40>)
    246e:	4798      	blx	r3
	if (ptr_job->busy == true) {
    2470:	7cab      	ldrb	r3, [r5, #18]
	return true;
    2472:	2001      	movs	r0, #1
	if (ptr_job->busy == true) {
    2474:	07db      	lsls	r3, r3, #31
    2476:	d5f2      	bpl.n	245e <udd_ep_clear_halt+0xe>
		ptr_job->busy = false;
    2478:	7cab      	ldrb	r3, [r5, #18]
    247a:	2201      	movs	r2, #1
    247c:	4393      	bics	r3, r2
    247e:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    2480:	682b      	ldr	r3, [r5, #0]
    2482:	4798      	blx	r3
	return true;
    2484:	2001      	movs	r0, #1
    2486:	e7ea      	b.n	245e <udd_ep_clear_halt+0xe>
    2488:	00001ba5 	.word	0x00001ba5
    248c:	2000028c 	.word	0x2000028c
    2490:	00002ce3 	.word	0x00002ce3

00002494 <udd_ep_run>:
{
    2494:	b5f0      	push	{r4, r5, r6, r7, lr}
    2496:	b087      	sub	sp, #28
    2498:	0005      	movs	r5, r0
    249a:	9103      	str	r1, [sp, #12]
    249c:	9202      	str	r2, [sp, #8]
    249e:	9301      	str	r3, [sp, #4]
	ep_num = ep & USB_EP_ADDR_MASK;
    24a0:	260f      	movs	r6, #15
    24a2:	4006      	ands	r6, r0
		return false;
    24a4:	2400      	movs	r4, #0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    24a6:	2e01      	cmp	r6, #1
    24a8:	d902      	bls.n	24b0 <udd_ep_run+0x1c>
}
    24aa:	0020      	movs	r0, r4
    24ac:	b007      	add	sp, #28
    24ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    24b0:	4b64      	ldr	r3, [pc, #400]	; (2644 <udd_ep_run+0x1b0>)
    24b2:	4798      	blx	r3
    24b4:	1e04      	subs	r4, r0, #0
    24b6:	d000      	beq.n	24ba <udd_ep_run+0x26>
    24b8:	e0bd      	b.n	2636 <udd_ep_run+0x1a2>
	ptr_job = udd_ep_get_job(ep);
    24ba:	0028      	movs	r0, r5
    24bc:	4b62      	ldr	r3, [pc, #392]	; (2648 <udd_ep_run+0x1b4>)
    24be:	4798      	blx	r3
    24c0:	0007      	movs	r7, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    24c2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    24c6:	425a      	negs	r2, r3
    24c8:	4153      	adcs	r3, r2
    24ca:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    24cc:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    24ce:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    24d2:	2200      	movs	r2, #0
    24d4:	4b5d      	ldr	r3, [pc, #372]	; (264c <udd_ep_run+0x1b8>)
    24d6:	701a      	strb	r2, [r3, #0]
	return flags;
    24d8:	9b05      	ldr	r3, [sp, #20]
	if (ptr_job->busy == true) {
    24da:	7c82      	ldrb	r2, [r0, #18]
    24dc:	07d2      	lsls	r2, r2, #31
    24de:	d508      	bpl.n	24f2 <udd_ep_run+0x5e>
	if (cpu_irq_is_enabled_flags(flags))
    24e0:	2b00      	cmp	r3, #0
    24e2:	d0e2      	beq.n	24aa <udd_ep_run+0x16>
		cpu_irq_enable();
    24e4:	2201      	movs	r2, #1
    24e6:	4b59      	ldr	r3, [pc, #356]	; (264c <udd_ep_run+0x1b8>)
    24e8:	701a      	strb	r2, [r3, #0]
    24ea:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    24ee:	b662      	cpsie	i
    24f0:	e7db      	b.n	24aa <udd_ep_run+0x16>
	ptr_job->busy = true;
    24f2:	7c82      	ldrb	r2, [r0, #18]
    24f4:	2101      	movs	r1, #1
    24f6:	430a      	orrs	r2, r1
    24f8:	7482      	strb	r2, [r0, #18]
	if (cpu_irq_is_enabled_flags(flags))
    24fa:	2b00      	cmp	r3, #0
    24fc:	d005      	beq.n	250a <udd_ep_run+0x76>
		cpu_irq_enable();
    24fe:	2201      	movs	r2, #1
    2500:	4b52      	ldr	r3, [pc, #328]	; (264c <udd_ep_run+0x1b8>)
    2502:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    2504:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2508:	b662      	cpsie	i
	ptr_job->buf = buf;
    250a:	9b02      	ldr	r3, [sp, #8]
    250c:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    250e:	9b01      	ldr	r3, [sp, #4]
    2510:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    2512:	2300      	movs	r3, #0
    2514:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    2516:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2518:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    251a:	2301      	movs	r3, #1
    251c:	9a03      	ldr	r2, [sp, #12]
    251e:	4013      	ands	r3, r2
    2520:	005a      	lsls	r2, r3, #1
    2522:	7cbb      	ldrb	r3, [r7, #18]
    2524:	2102      	movs	r1, #2
    2526:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    2528:	4313      	orrs	r3, r2
    252a:	2204      	movs	r2, #4
    252c:	4393      	bics	r3, r2
    252e:	74bb      	strb	r3, [r7, #18]
	if (ep & USB_EP_DIR_IN) {
    2530:	b26b      	sxtb	r3, r5
    2532:	2b00      	cmp	r3, #0
    2534:	db20      	blt.n	2578 <udd_ep_run+0xe4>
		if (0 != ptr_job->buf_size) {
    2536:	9b01      	ldr	r3, [sp, #4]
    2538:	2b00      	cmp	r3, #0
    253a:	d06f      	beq.n	261c <udd_ep_run+0x188>
			next_trans = ptr_job->buf_size;
    253c:	b29c      	uxth	r4, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    253e:	4b44      	ldr	r3, [pc, #272]	; (2650 <udd_ep_run+0x1bc>)
    2540:	429c      	cmp	r4, r3
    2542:	d95a      	bls.n	25fa <udd_ep_run+0x166>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    2544:	8a39      	ldrh	r1, [r7, #16]
    2546:	001c      	movs	r4, r3
    2548:	0018      	movs	r0, r3
    254a:	4b42      	ldr	r3, [pc, #264]	; (2654 <udd_ep_run+0x1c0>)
    254c:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    254e:	1a63      	subs	r3, r4, r1
    2550:	b29a      	uxth	r2, r3
			if (next_trans < ptr_job->ep_size) {
    2552:	8a3b      	ldrh	r3, [r7, #16]
    2554:	429a      	cmp	r2, r3
    2556:	d257      	bcs.n	2608 <udd_ep_run+0x174>
				ptr_job->b_use_out_cache_buffer = true;
    2558:	7cba      	ldrb	r2, [r7, #18]
    255a:	2104      	movs	r1, #4
    255c:	430a      	orrs	r2, r1
    255e:	74ba      	strb	r2, [r7, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    2560:	1e72      	subs	r2, r6, #1
    2562:	0192      	lsls	r2, r2, #6
    2564:	493c      	ldr	r1, [pc, #240]	; (2658 <udd_ep_run+0x1c4>)
    2566:	1852      	adds	r2, r2, r1
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    2568:	0031      	movs	r1, r6
    256a:	483c      	ldr	r0, [pc, #240]	; (265c <udd_ep_run+0x1c8>)
    256c:	4c3c      	ldr	r4, [pc, #240]	; (2660 <udd_ep_run+0x1cc>)
    256e:	47a0      	blx	r4
				return (STATUS_OK ==
    2570:	4244      	negs	r4, r0
    2572:	4144      	adcs	r4, r0
    2574:	b2e4      	uxtb	r4, r4
    2576:	e798      	b.n	24aa <udd_ep_run+0x16>
		if (0 != ptr_job->buf_size) {
    2578:	9b01      	ldr	r3, [sp, #4]
    257a:	2b00      	cmp	r3, #0
    257c:	d027      	beq.n	25ce <udd_ep_run+0x13a>
			next_trans = ptr_job->buf_size;
    257e:	b29d      	uxth	r5, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2580:	4b33      	ldr	r3, [pc, #204]	; (2650 <udd_ep_run+0x1bc>)
    2582:	429d      	cmp	r5, r3
    2584:	d906      	bls.n	2594 <udd_ep_run+0x100>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    2586:	8a39      	ldrh	r1, [r7, #16]
    2588:	001d      	movs	r5, r3
    258a:	0018      	movs	r0, r3
    258c:	4b31      	ldr	r3, [pc, #196]	; (2654 <udd_ep_run+0x1c0>)
    258e:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    2590:	1a6b      	subs	r3, r5, r1
    2592:	b29d      	uxth	r5, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    2594:	7cbb      	ldrb	r3, [r7, #18]
    2596:	079b      	lsls	r3, r3, #30
    2598:	d507      	bpl.n	25aa <udd_ep_run+0x116>
					(0 == (next_trans % ptr_job->ep_size));
    259a:	8a39      	ldrh	r1, [r7, #16]
    259c:	0028      	movs	r0, r5
    259e:	4b31      	ldr	r3, [pc, #196]	; (2664 <udd_ep_run+0x1d0>)
    25a0:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    25a2:	b289      	uxth	r1, r1
    25a4:	424c      	negs	r4, r1
    25a6:	414c      	adcs	r4, r1
    25a8:	b2e4      	uxtb	r4, r4
    25aa:	2001      	movs	r0, #1
    25ac:	4020      	ands	r0, r4
    25ae:	0040      	lsls	r0, r0, #1
    25b0:	7cbc      	ldrb	r4, [r7, #18]
    25b2:	2302      	movs	r3, #2
    25b4:	439c      	bics	r4, r3
    25b6:	4304      	orrs	r4, r0
    25b8:	74bc      	strb	r4, [r7, #18]
				usb_device_endpoint_write_buffer_job(&usb_device,
    25ba:	002b      	movs	r3, r5
    25bc:	9a02      	ldr	r2, [sp, #8]
    25be:	0031      	movs	r1, r6
    25c0:	4826      	ldr	r0, [pc, #152]	; (265c <udd_ep_run+0x1c8>)
    25c2:	4c29      	ldr	r4, [pc, #164]	; (2668 <udd_ep_run+0x1d4>)
    25c4:	47a0      	blx	r4
		return (STATUS_OK ==
    25c6:	4244      	negs	r4, r0
    25c8:	4144      	adcs	r4, r0
    25ca:	b2e4      	uxtb	r4, r4
    25cc:	e76d      	b.n	24aa <udd_ep_run+0x16>
		} else if (true == ptr_job->b_shortpacket) {
    25ce:	7cbb      	ldrb	r3, [r7, #18]
    25d0:	079b      	lsls	r3, r3, #30
    25d2:	d505      	bpl.n	25e0 <udd_ep_run+0x14c>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    25d4:	7cbb      	ldrb	r3, [r7, #18]
    25d6:	2202      	movs	r2, #2
    25d8:	4393      	bics	r3, r2
    25da:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    25dc:	2500      	movs	r5, #0
    25de:	e7ec      	b.n	25ba <udd_ep_run+0x126>
			ptr_job->busy = false;
    25e0:	7cbb      	ldrb	r3, [r7, #18]
    25e2:	2201      	movs	r2, #1
    25e4:	4393      	bics	r3, r2
    25e6:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    25e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    25ea:	2b00      	cmp	r3, #0
    25ec:	d025      	beq.n	263a <udd_ep_run+0x1a6>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    25ee:	002a      	movs	r2, r5
    25f0:	2100      	movs	r1, #0
    25f2:	2000      	movs	r0, #0
    25f4:	4798      	blx	r3
			return true;
    25f6:	2401      	movs	r4, #1
    25f8:	e757      	b.n	24aa <udd_ep_run+0x16>
				next_trans -= next_trans % ptr_job->ep_size;
    25fa:	8a39      	ldrh	r1, [r7, #16]
    25fc:	0020      	movs	r0, r4
    25fe:	4b19      	ldr	r3, [pc, #100]	; (2664 <udd_ep_run+0x1d0>)
    2600:	4798      	blx	r3
    2602:	1a63      	subs	r3, r4, r1
    2604:	b29a      	uxth	r2, r3
    2606:	e7a4      	b.n	2552 <udd_ep_run+0xbe>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    2608:	0013      	movs	r3, r2
    260a:	9a02      	ldr	r2, [sp, #8]
    260c:	0031      	movs	r1, r6
    260e:	4813      	ldr	r0, [pc, #76]	; (265c <udd_ep_run+0x1c8>)
    2610:	4c13      	ldr	r4, [pc, #76]	; (2660 <udd_ep_run+0x1cc>)
    2612:	47a0      	blx	r4
				return (STATUS_OK ==
    2614:	4244      	negs	r4, r0
    2616:	4144      	adcs	r4, r0
    2618:	b2e4      	uxtb	r4, r4
    261a:	e746      	b.n	24aa <udd_ep_run+0x16>
			ptr_job->busy = false;
    261c:	7cbb      	ldrb	r3, [r7, #18]
    261e:	2201      	movs	r2, #1
    2620:	4393      	bics	r3, r2
    2622:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    2624:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2626:	2b00      	cmp	r3, #0
    2628:	d009      	beq.n	263e <udd_ep_run+0x1aa>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    262a:	002a      	movs	r2, r5
    262c:	2100      	movs	r1, #0
    262e:	2000      	movs	r0, #0
    2630:	4798      	blx	r3
			return true;
    2632:	2401      	movs	r4, #1
    2634:	e739      	b.n	24aa <udd_ep_run+0x16>
		return false;
    2636:	2400      	movs	r4, #0
    2638:	e737      	b.n	24aa <udd_ep_run+0x16>
			return true;
    263a:	2401      	movs	r4, #1
    263c:	e735      	b.n	24aa <udd_ep_run+0x16>
			return true;
    263e:	2401      	movs	r4, #1
    2640:	e733      	b.n	24aa <udd_ep_run+0x16>
    2642:	46c0      	nop			; (mov r8, r8)
    2644:	0000230d 	.word	0x0000230d
    2648:	00001ba5 	.word	0x00001ba5
    264c:	200000da 	.word	0x200000da
    2650:	00001fff 	.word	0x00001fff
    2654:	00003e2d 	.word	0x00003e2d
    2658:	2000024c 	.word	0x2000024c
    265c:	2000028c 	.word	0x2000028c
    2660:	00002dbd 	.word	0x00002dbd
    2664:	00003c59 	.word	0x00003c59
    2668:	00002d69 	.word	0x00002d69

0000266c <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    266c:	4b02      	ldr	r3, [pc, #8]	; (2678 <udd_set_address+0xc>)
    266e:	681b      	ldr	r3, [r3, #0]
    2670:	2280      	movs	r2, #128	; 0x80
    2672:	4310      	orrs	r0, r2
    2674:	7298      	strb	r0, [r3, #10]
}
    2676:	4770      	bx	lr
    2678:	2000028c 	.word	0x2000028c

0000267c <udd_getaddress>:
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    267c:	4b02      	ldr	r3, [pc, #8]	; (2688 <udd_getaddress+0xc>)
    267e:	681b      	ldr	r3, [r3, #0]
    2680:	7a98      	ldrb	r0, [r3, #10]
    2682:	0640      	lsls	r0, r0, #25
    2684:	0e40      	lsrs	r0, r0, #25
}
    2686:	4770      	bx	lr
    2688:	2000028c 	.word	0x2000028c

0000268c <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    268c:	4b01      	ldr	r3, [pc, #4]	; (2694 <udd_set_setup_payload+0x8>)
    268e:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    2690:	8199      	strh	r1, [r3, #12]
}
    2692:	4770      	bx	lr
    2694:	200003f4 	.word	0x200003f4

00002698 <udd_attach>:
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
}

void udd_attach(void)
{
    2698:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    269a:	2003      	movs	r0, #3
    269c:	4b16      	ldr	r3, [pc, #88]	; (26f8 <udd_attach+0x60>)
    269e:	4798      	blx	r3
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    26a0:	4c16      	ldr	r4, [pc, #88]	; (26fc <udd_attach+0x64>)
    26a2:	6822      	ldr	r2, [r4, #0]
    26a4:	8913      	ldrh	r3, [r2, #8]
    26a6:	2101      	movs	r1, #1
    26a8:	438b      	bics	r3, r1
    26aa:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    26ac:	4a14      	ldr	r2, [pc, #80]	; (2700 <udd_attach+0x68>)
    26ae:	3103      	adds	r1, #3
    26b0:	0020      	movs	r0, r4
    26b2:	4e14      	ldr	r6, [pc, #80]	; (2704 <udd_attach+0x6c>)
    26b4:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    26b6:	4a14      	ldr	r2, [pc, #80]	; (2708 <udd_attach+0x70>)
    26b8:	2100      	movs	r1, #0
    26ba:	0020      	movs	r0, r4
    26bc:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    26be:	4a13      	ldr	r2, [pc, #76]	; (270c <udd_attach+0x74>)
    26c0:	2101      	movs	r1, #1
    26c2:	0020      	movs	r0, r4
    26c4:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    26c6:	4a12      	ldr	r2, [pc, #72]	; (2710 <udd_attach+0x78>)
    26c8:	2102      	movs	r1, #2
    26ca:	0020      	movs	r0, r4
    26cc:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    26ce:	2104      	movs	r1, #4
    26d0:	0020      	movs	r0, r4
    26d2:	4d10      	ldr	r5, [pc, #64]	; (2714 <udd_attach+0x7c>)
    26d4:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    26d6:	2100      	movs	r1, #0
    26d8:	0020      	movs	r0, r4
    26da:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    26dc:	2101      	movs	r1, #1
    26de:	0020      	movs	r0, r4
    26e0:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    26e2:	2102      	movs	r1, #2
    26e4:	0020      	movs	r0, r4
    26e6:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    26e8:	4a0b      	ldr	r2, [pc, #44]	; (2718 <udd_attach+0x80>)
    26ea:	2106      	movs	r1, #6
    26ec:	0020      	movs	r0, r4
    26ee:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    26f0:	2106      	movs	r1, #6
    26f2:	0020      	movs	r0, r4
    26f4:	47a8      	blx	r5
#endif
}
    26f6:	bd70      	pop	{r4, r5, r6, pc}
    26f8:	00001ae5 	.word	0x00001ae5
    26fc:	2000028c 	.word	0x2000028c
    2700:	0000212d 	.word	0x0000212d
    2704:	000027b9 	.word	0x000027b9
    2708:	00002119 	.word	0x00002119
    270c:	00001e4d 	.word	0x00001e4d
    2710:	00001ddd 	.word	0x00001ddd
    2714:	000027dd 	.word	0x000027dd
    2718:	00001da9 	.word	0x00001da9

0000271c <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    271c:	b570      	push	{r4, r5, r6, lr}
    271e:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2720:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2724:	425a      	negs	r2, r3
    2726:	4153      	adcs	r3, r2
    2728:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    272a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    272c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2730:	2600      	movs	r6, #0
    2732:	4b18      	ldr	r3, [pc, #96]	; (2794 <udd_enable+0x78>)
    2734:	701e      	strb	r6, [r3, #0]
	return flags;
    2736:	9c00      	ldr	r4, [sp, #0]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    2738:	ad01      	add	r5, sp, #4
    273a:	0028      	movs	r0, r5
    273c:	4b16      	ldr	r3, [pc, #88]	; (2798 <udd_enable+0x7c>)
    273e:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    2740:	70ae      	strb	r6, [r5, #2]
	usb_init(&usb_device, USB, &config_usb);
    2742:	4e16      	ldr	r6, [pc, #88]	; (279c <udd_enable+0x80>)
    2744:	002a      	movs	r2, r5
    2746:	4916      	ldr	r1, [pc, #88]	; (27a0 <udd_enable+0x84>)
    2748:	0030      	movs	r0, r6
    274a:	4b16      	ldr	r3, [pc, #88]	; (27a4 <udd_enable+0x88>)
    274c:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    274e:	0030      	movs	r0, r6
    2750:	4b15      	ldr	r3, [pc, #84]	; (27a8 <udd_enable+0x8c>)
    2752:	4798      	blx	r3
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    2754:	4b15      	ldr	r3, [pc, #84]	; (27ac <udd_enable+0x90>)
    2756:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    2758:	069b      	lsls	r3, r3, #26
    275a:	d414      	bmi.n	2786 <udd_enable+0x6a>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    275c:	4913      	ldr	r1, [pc, #76]	; (27ac <udd_enable+0x90>)
    275e:	22d0      	movs	r2, #208	; 0xd0
    2760:	68cb      	ldr	r3, [r1, #12]
    2762:	4013      	ands	r3, r2
    2764:	2bd0      	cmp	r3, #208	; 0xd0
    2766:	d1fb      	bne.n	2760 <udd_enable+0x44>

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    2768:	2001      	movs	r0, #1
    276a:	4b11      	ldr	r3, [pc, #68]	; (27b0 <udd_enable+0x94>)
    276c:	4798      	blx	r3
		_uhd_vbus_handler();
	}
#else
	// No VBus detect, assume always high
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
    276e:	4b11      	ldr	r3, [pc, #68]	; (27b4 <udd_enable+0x98>)
    2770:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    2772:	2c00      	cmp	r4, #0
    2774:	d005      	beq.n	2782 <udd_enable+0x66>
		cpu_irq_enable();
    2776:	2201      	movs	r2, #1
    2778:	4b06      	ldr	r3, [pc, #24]	; (2794 <udd_enable+0x78>)
    277a:	701a      	strb	r2, [r3, #0]
    277c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2780:	b662      	cpsie	i
# endif
#endif

	cpu_irq_restore(flags);
}
    2782:	b002      	add	sp, #8
    2784:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    2786:	4909      	ldr	r1, [pc, #36]	; (27ac <udd_enable+0x90>)
    2788:	2210      	movs	r2, #16
    278a:	68cb      	ldr	r3, [r1, #12]
    278c:	421a      	tst	r2, r3
    278e:	d0fc      	beq.n	278a <udd_enable+0x6e>
    2790:	e7ea      	b.n	2768 <udd_enable+0x4c>
    2792:	46c0      	nop			; (mov r8, r8)
    2794:	200000da 	.word	0x200000da
    2798:	00003531 	.word	0x00003531
    279c:	2000028c 	.word	0x2000028c
    27a0:	41005000 	.word	0x41005000
    27a4:	00003541 	.word	0x00003541
    27a8:	00002e3d 	.word	0x00002e3d
    27ac:	40000800 	.word	0x40000800
    27b0:	00001ae5 	.word	0x00001ae5
    27b4:	00002699 	.word	0x00002699

000027b8 <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    27b8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    27ba:	000b      	movs	r3, r1
    27bc:	332e      	adds	r3, #46	; 0x2e
    27be:	009b      	lsls	r3, r3, #2
    27c0:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    27c2:	22aa      	movs	r2, #170	; 0xaa
    27c4:	0052      	lsls	r2, r2, #1
    27c6:	0049      	lsls	r1, r1, #1
    27c8:	5a83      	ldrh	r3, [r0, r2]
    27ca:	4c03      	ldr	r4, [pc, #12]	; (27d8 <usb_device_register_callback+0x20>)
    27cc:	5b09      	ldrh	r1, [r1, r4]
    27ce:	430b      	orrs	r3, r1
    27d0:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    27d2:	2000      	movs	r0, #0
    27d4:	bd10      	pop	{r4, pc}
    27d6:	46c0      	nop			; (mov r8, r8)
    27d8:	00003f50 	.word	0x00003f50

000027dc <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    27dc:	0049      	lsls	r1, r1, #1
    27de:	4b06      	ldr	r3, [pc, #24]	; (27f8 <usb_device_enable_callback+0x1c>)
    27e0:	5acb      	ldrh	r3, [r1, r3]
    27e2:	6802      	ldr	r2, [r0, #0]
    27e4:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    27e6:	21ab      	movs	r1, #171	; 0xab
    27e8:	0049      	lsls	r1, r1, #1
    27ea:	5a42      	ldrh	r2, [r0, r1]
    27ec:	431a      	orrs	r2, r3
    27ee:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    27f0:	6802      	ldr	r2, [r0, #0]
    27f2:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    27f4:	2000      	movs	r0, #0
    27f6:	4770      	bx	lr
    27f8:	00003f50 	.word	0x00003f50

000027fc <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    27fc:	0049      	lsls	r1, r1, #1
    27fe:	4b05      	ldr	r3, [pc, #20]	; (2814 <usb_device_disable_callback+0x18>)
    2800:	5aca      	ldrh	r2, [r1, r3]
    2802:	21ab      	movs	r1, #171	; 0xab
    2804:	0049      	lsls	r1, r1, #1
    2806:	5a43      	ldrh	r3, [r0, r1]
    2808:	4393      	bics	r3, r2
    280a:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    280c:	6803      	ldr	r3, [r0, #0]
    280e:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    2810:	2000      	movs	r0, #0
    2812:	4770      	bx	lr
    2814:	00003f50 	.word	0x00003f50

00002818 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    2818:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    281a:	008c      	lsls	r4, r1, #2
    281c:	18a4      	adds	r4, r4, r2
    281e:	3434      	adds	r4, #52	; 0x34
    2820:	00a4      	lsls	r4, r4, #2
    2822:	1904      	adds	r4, r0, r4
    2824:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    2826:	1840      	adds	r0, r0, r1
    2828:	3059      	adds	r0, #89	; 0x59
    282a:	30ff      	adds	r0, #255	; 0xff
    282c:	7803      	ldrb	r3, [r0, #0]
    282e:	4903      	ldr	r1, [pc, #12]	; (283c <usb_device_endpoint_register_callback+0x24>)
    2830:	5c8a      	ldrb	r2, [r1, r2]
    2832:	4313      	orrs	r3, r2
    2834:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    2836:	2000      	movs	r0, #0
    2838:	bd10      	pop	{r4, pc}
    283a:	46c0      	nop			; (mov r8, r8)
    283c:	00003f60 	.word	0x00003f60

00002840 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    2840:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    2842:	008b      	lsls	r3, r1, #2
    2844:	189b      	adds	r3, r3, r2
    2846:	3334      	adds	r3, #52	; 0x34
    2848:	009b      	lsls	r3, r3, #2
    284a:	18c3      	adds	r3, r0, r3
    284c:	2400      	movs	r4, #0
    284e:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    2850:	1840      	adds	r0, r0, r1
    2852:	3059      	adds	r0, #89	; 0x59
    2854:	30ff      	adds	r0, #255	; 0xff
    2856:	4b03      	ldr	r3, [pc, #12]	; (2864 <usb_device_endpoint_unregister_callback+0x24>)
    2858:	5c9a      	ldrb	r2, [r3, r2]
    285a:	7803      	ldrb	r3, [r0, #0]
    285c:	4393      	bics	r3, r2
    285e:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    2860:	2000      	movs	r0, #0
    2862:	bd10      	pop	{r4, pc}
    2864:	00003f60 	.word	0x00003f60

00002868 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    2868:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    286a:	230f      	movs	r3, #15
    286c:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    286e:	18c4      	adds	r4, r0, r3
    2870:	3461      	adds	r4, #97	; 0x61
    2872:	34ff      	adds	r4, #255	; 0xff
    2874:	7825      	ldrb	r5, [r4, #0]
    2876:	4e2f      	ldr	r6, [pc, #188]	; (2934 <usb_device_endpoint_enable_callback+0xcc>)
    2878:	5cb6      	ldrb	r6, [r6, r2]
    287a:	4335      	orrs	r5, r6
    287c:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    287e:	2a00      	cmp	r2, #0
    2880:	d129      	bne.n	28d6 <usb_device_endpoint_enable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    2882:	2b00      	cmp	r3, #0
    2884:	d112      	bne.n	28ac <usb_device_endpoint_enable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    2886:	2503      	movs	r5, #3
    2888:	240a      	movs	r4, #10
    288a:	34ff      	adds	r4, #255	; 0xff
    288c:	6806      	ldr	r6, [r0, #0]
    288e:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    2890:	2a03      	cmp	r2, #3
    2892:	d109      	bne.n	28a8 <usb_device_endpoint_enable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    2894:	b249      	sxtb	r1, r1
    2896:	2900      	cmp	r1, #0
    2898:	db44      	blt.n	2924 <usb_device_endpoint_enable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    289a:	6802      	ldr	r2, [r0, #0]
    289c:	015b      	lsls	r3, r3, #5
    289e:	18d3      	adds	r3, r2, r3
    28a0:	330a      	adds	r3, #10
    28a2:	33ff      	adds	r3, #255	; 0xff
    28a4:	2220      	movs	r2, #32
    28a6:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    28a8:	2000      	movs	r0, #0
    28aa:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    28ac:	b24c      	sxtb	r4, r1
    28ae:	2c00      	cmp	r4, #0
    28b0:	db08      	blt.n	28c4 <usb_device_endpoint_enable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    28b2:	015c      	lsls	r4, r3, #5
    28b4:	6805      	ldr	r5, [r0, #0]
    28b6:	46ac      	mov	ip, r5
    28b8:	4464      	add	r4, ip
    28ba:	340a      	adds	r4, #10
    28bc:	34ff      	adds	r4, #255	; 0xff
    28be:	2501      	movs	r5, #1
    28c0:	7025      	strb	r5, [r4, #0]
    28c2:	e7e5      	b.n	2890 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    28c4:	015c      	lsls	r4, r3, #5
    28c6:	6805      	ldr	r5, [r0, #0]
    28c8:	46ac      	mov	ip, r5
    28ca:	4464      	add	r4, ip
    28cc:	340a      	adds	r4, #10
    28ce:	34ff      	adds	r4, #255	; 0xff
    28d0:	2502      	movs	r5, #2
    28d2:	7025      	strb	r5, [r4, #0]
    28d4:	e7dc      	b.n	2890 <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    28d6:	2a01      	cmp	r2, #1
    28d8:	d11a      	bne.n	2910 <usb_device_endpoint_enable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    28da:	2b00      	cmp	r3, #0
    28dc:	d105      	bne.n	28ea <usb_device_endpoint_enable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    28de:	6802      	ldr	r2, [r0, #0]
    28e0:	210c      	movs	r1, #12
    28e2:	230a      	movs	r3, #10
    28e4:	33ff      	adds	r3, #255	; 0xff
    28e6:	54d1      	strb	r1, [r2, r3]
    28e8:	e7de      	b.n	28a8 <usb_device_endpoint_enable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    28ea:	b249      	sxtb	r1, r1
    28ec:	2900      	cmp	r1, #0
    28ee:	db07      	blt.n	2900 <usb_device_endpoint_enable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    28f0:	6802      	ldr	r2, [r0, #0]
    28f2:	015b      	lsls	r3, r3, #5
    28f4:	18d3      	adds	r3, r2, r3
    28f6:	330a      	adds	r3, #10
    28f8:	33ff      	adds	r3, #255	; 0xff
    28fa:	2204      	movs	r2, #4
    28fc:	701a      	strb	r2, [r3, #0]
    28fe:	e7d3      	b.n	28a8 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    2900:	6802      	ldr	r2, [r0, #0]
    2902:	015b      	lsls	r3, r3, #5
    2904:	18d3      	adds	r3, r2, r3
    2906:	330a      	adds	r3, #10
    2908:	33ff      	adds	r3, #255	; 0xff
    290a:	2208      	movs	r2, #8
    290c:	701a      	strb	r2, [r3, #0]
    290e:	e7cb      	b.n	28a8 <usb_device_endpoint_enable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    2910:	2a02      	cmp	r2, #2
    2912:	d1bd      	bne.n	2890 <usb_device_endpoint_enable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    2914:	6802      	ldr	r2, [r0, #0]
    2916:	015b      	lsls	r3, r3, #5
    2918:	18d3      	adds	r3, r2, r3
    291a:	330a      	adds	r3, #10
    291c:	33ff      	adds	r3, #255	; 0xff
    291e:	2210      	movs	r2, #16
    2920:	701a      	strb	r2, [r3, #0]
    2922:	e7c1      	b.n	28a8 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    2924:	6802      	ldr	r2, [r0, #0]
    2926:	015b      	lsls	r3, r3, #5
    2928:	18d3      	adds	r3, r2, r3
    292a:	330a      	adds	r3, #10
    292c:	33ff      	adds	r3, #255	; 0xff
    292e:	2240      	movs	r2, #64	; 0x40
    2930:	701a      	strb	r2, [r3, #0]
    2932:	e7b9      	b.n	28a8 <usb_device_endpoint_enable_callback+0x40>
    2934:	00003f60 	.word	0x00003f60

00002938 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    2938:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    293a:	230f      	movs	r3, #15
    293c:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    293e:	18c4      	adds	r4, r0, r3
    2940:	3461      	adds	r4, #97	; 0x61
    2942:	34ff      	adds	r4, #255	; 0xff
    2944:	4d2f      	ldr	r5, [pc, #188]	; (2a04 <usb_device_endpoint_disable_callback+0xcc>)
    2946:	5cae      	ldrb	r6, [r5, r2]
    2948:	7825      	ldrb	r5, [r4, #0]
    294a:	43b5      	bics	r5, r6
    294c:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    294e:	2a00      	cmp	r2, #0
    2950:	d129      	bne.n	29a6 <usb_device_endpoint_disable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    2952:	2b00      	cmp	r3, #0
    2954:	d112      	bne.n	297c <usb_device_endpoint_disable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    2956:	2503      	movs	r5, #3
    2958:	2484      	movs	r4, #132	; 0x84
    295a:	0064      	lsls	r4, r4, #1
    295c:	6806      	ldr	r6, [r0, #0]
    295e:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    2960:	2a03      	cmp	r2, #3
    2962:	d109      	bne.n	2978 <usb_device_endpoint_disable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    2964:	b249      	sxtb	r1, r1
    2966:	2900      	cmp	r1, #0
    2968:	db44      	blt.n	29f4 <usb_device_endpoint_disable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    296a:	6802      	ldr	r2, [r0, #0]
    296c:	015b      	lsls	r3, r3, #5
    296e:	18d3      	adds	r3, r2, r3
    2970:	3309      	adds	r3, #9
    2972:	33ff      	adds	r3, #255	; 0xff
    2974:	2220      	movs	r2, #32
    2976:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    2978:	2000      	movs	r0, #0
    297a:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    297c:	b24c      	sxtb	r4, r1
    297e:	2c00      	cmp	r4, #0
    2980:	db08      	blt.n	2994 <usb_device_endpoint_disable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    2982:	015c      	lsls	r4, r3, #5
    2984:	6805      	ldr	r5, [r0, #0]
    2986:	46ac      	mov	ip, r5
    2988:	4464      	add	r4, ip
    298a:	3409      	adds	r4, #9
    298c:	34ff      	adds	r4, #255	; 0xff
    298e:	2501      	movs	r5, #1
    2990:	7025      	strb	r5, [r4, #0]
    2992:	e7e5      	b.n	2960 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    2994:	015c      	lsls	r4, r3, #5
    2996:	6805      	ldr	r5, [r0, #0]
    2998:	46ac      	mov	ip, r5
    299a:	4464      	add	r4, ip
    299c:	3409      	adds	r4, #9
    299e:	34ff      	adds	r4, #255	; 0xff
    29a0:	2502      	movs	r5, #2
    29a2:	7025      	strb	r5, [r4, #0]
    29a4:	e7dc      	b.n	2960 <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    29a6:	2a01      	cmp	r2, #1
    29a8:	d11a      	bne.n	29e0 <usb_device_endpoint_disable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    29aa:	2b00      	cmp	r3, #0
    29ac:	d105      	bne.n	29ba <usb_device_endpoint_disable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    29ae:	6802      	ldr	r2, [r0, #0]
    29b0:	210c      	movs	r1, #12
    29b2:	3309      	adds	r3, #9
    29b4:	33ff      	adds	r3, #255	; 0xff
    29b6:	54d1      	strb	r1, [r2, r3]
    29b8:	e7de      	b.n	2978 <usb_device_endpoint_disable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    29ba:	b249      	sxtb	r1, r1
    29bc:	2900      	cmp	r1, #0
    29be:	db07      	blt.n	29d0 <usb_device_endpoint_disable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    29c0:	6802      	ldr	r2, [r0, #0]
    29c2:	015b      	lsls	r3, r3, #5
    29c4:	18d3      	adds	r3, r2, r3
    29c6:	3309      	adds	r3, #9
    29c8:	33ff      	adds	r3, #255	; 0xff
    29ca:	2204      	movs	r2, #4
    29cc:	701a      	strb	r2, [r3, #0]
    29ce:	e7d3      	b.n	2978 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    29d0:	6802      	ldr	r2, [r0, #0]
    29d2:	015b      	lsls	r3, r3, #5
    29d4:	18d3      	adds	r3, r2, r3
    29d6:	3309      	adds	r3, #9
    29d8:	33ff      	adds	r3, #255	; 0xff
    29da:	2208      	movs	r2, #8
    29dc:	701a      	strb	r2, [r3, #0]
    29de:	e7cb      	b.n	2978 <usb_device_endpoint_disable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    29e0:	2a02      	cmp	r2, #2
    29e2:	d1bd      	bne.n	2960 <usb_device_endpoint_disable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    29e4:	6802      	ldr	r2, [r0, #0]
    29e6:	015b      	lsls	r3, r3, #5
    29e8:	18d3      	adds	r3, r2, r3
    29ea:	3309      	adds	r3, #9
    29ec:	33ff      	adds	r3, #255	; 0xff
    29ee:	2210      	movs	r2, #16
    29f0:	701a      	strb	r2, [r3, #0]
    29f2:	e7c1      	b.n	2978 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    29f4:	6802      	ldr	r2, [r0, #0]
    29f6:	015b      	lsls	r3, r3, #5
    29f8:	18d3      	adds	r3, r2, r3
    29fa:	3309      	adds	r3, #9
    29fc:	33ff      	adds	r3, #255	; 0xff
    29fe:	2240      	movs	r2, #64	; 0x40
    2a00:	701a      	strb	r2, [r3, #0]
    2a02:	e7b9      	b.n	2978 <usb_device_endpoint_disable_callback+0x40>
    2a04:	00003f60 	.word	0x00003f60

00002a08 <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    2a08:	2300      	movs	r3, #0
    2a0a:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    2a0c:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    2a0e:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    2a10:	3301      	adds	r3, #1
    2a12:	70c3      	strb	r3, [r0, #3]
}
    2a14:	4770      	bx	lr
	...

00002a18 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    2a18:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    2a1a:	780c      	ldrb	r4, [r1, #0]
    2a1c:	230f      	movs	r3, #15
    2a1e:	4023      	ands	r3, r4
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    2a20:	b264      	sxtb	r4, r4

	switch (ep_config->ep_type) {
    2a22:	78ca      	ldrb	r2, [r1, #3]
    2a24:	2a04      	cmp	r2, #4
    2a26:	d870      	bhi.n	2b0a <usb_device_endpoint_set_config+0xf2>
    2a28:	0092      	lsls	r2, r2, #2
    2a2a:	4d89      	ldr	r5, [pc, #548]	; (2c50 <usb_device_endpoint_set_config+0x238>)
    2a2c:	58aa      	ldr	r2, [r5, r2]
    2a2e:	4697      	mov	pc, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    2a30:	6802      	ldr	r2, [r0, #0]
    2a32:	3308      	adds	r3, #8
    2a34:	015b      	lsls	r3, r3, #5
    2a36:	2100      	movs	r1, #0
    2a38:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    2a3a:	2200      	movs	r2, #0
    2a3c:	e082      	b.n	2b44 <usb_device_endpoint_set_config+0x12c>
    2a3e:	015c      	lsls	r4, r3, #5
    2a40:	6802      	ldr	r2, [r0, #0]
    2a42:	4694      	mov	ip, r2
    2a44:	4464      	add	r4, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    2a46:	2280      	movs	r2, #128	; 0x80
    2a48:	0052      	lsls	r2, r2, #1
    2a4a:	5ca5      	ldrb	r5, [r4, r2]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    2a4c:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    2a4e:	076d      	lsls	r5, r5, #29
    2a50:	d178      	bne.n	2b44 <usb_device_endpoint_set_config+0x12c>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    2a52:	32e4      	adds	r2, #228	; 0xe4
    2a54:	5ca6      	ldrb	r6, [r4, r2]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    2a56:	2570      	movs	r5, #112	; 0x70
				return STATUS_ERR_DENIED;
    2a58:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    2a5a:	422e      	tst	r6, r5
    2a5c:	d172      	bne.n	2b44 <usb_device_endpoint_set_config+0x12c>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    2a5e:	3d5f      	subs	r5, #95	; 0x5f
    2a60:	32e4      	adds	r2, #228	; 0xe4
    2a62:	54a5      	strb	r5, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    2a64:	001a      	movs	r2, r3
    2a66:	3208      	adds	r2, #8
    2a68:	0152      	lsls	r2, r2, #5
    2a6a:	6804      	ldr	r4, [r0, #0]
    2a6c:	18a4      	adds	r4, r4, r2
    2a6e:	352f      	adds	r5, #47	; 0x2f
    2a70:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2a72:	6800      	ldr	r0, [r0, #0]
    2a74:	1882      	adds	r2, r0, r2
    2a76:	2080      	movs	r0, #128	; 0x80
    2a78:	7110      	strb	r0, [r2, #4]
			}
			if (true == ep_config->auto_zlp) {
    2a7a:	788a      	ldrb	r2, [r1, #2]
    2a7c:	2a00      	cmp	r2, #0
    2a7e:	d01f      	beq.n	2ac0 <usb_device_endpoint_set_config+0xa8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2a80:	0158      	lsls	r0, r3, #5
    2a82:	4a74      	ldr	r2, [pc, #464]	; (2c54 <usb_device_endpoint_set_config+0x23c>)
    2a84:	1812      	adds	r2, r2, r0
    2a86:	6854      	ldr	r4, [r2, #4]
    2a88:	2080      	movs	r0, #128	; 0x80
    2a8a:	0600      	lsls	r0, r0, #24
    2a8c:	4304      	orrs	r4, r0
    2a8e:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2a90:	6954      	ldr	r4, [r2, #20]
    2a92:	4320      	orrs	r0, r4
    2a94:	6150      	str	r0, [r2, #20]
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    2a96:	2507      	movs	r5, #7
    2a98:	784c      	ldrb	r4, [r1, #1]
    2a9a:	015a      	lsls	r2, r3, #5
    2a9c:	4b6d      	ldr	r3, [pc, #436]	; (2c54 <usb_device_endpoint_set_config+0x23c>)
    2a9e:	189b      	adds	r3, r3, r2
    2aa0:	6858      	ldr	r0, [r3, #4]
    2aa2:	402c      	ands	r4, r5
    2aa4:	0724      	lsls	r4, r4, #28
    2aa6:	4e6c      	ldr	r6, [pc, #432]	; (2c58 <usb_device_endpoint_set_config+0x240>)
    2aa8:	4030      	ands	r0, r6
    2aaa:	4320      	orrs	r0, r4
    2aac:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    2aae:	7849      	ldrb	r1, [r1, #1]
    2ab0:	695a      	ldr	r2, [r3, #20]
    2ab2:	4029      	ands	r1, r5
    2ab4:	0709      	lsls	r1, r1, #28
    2ab6:	4032      	ands	r2, r6
    2ab8:	430a      	orrs	r2, r1
    2aba:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    2abc:	2200      	movs	r2, #0
    2abe:	e041      	b.n	2b44 <usb_device_endpoint_set_config+0x12c>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2ac0:	0158      	lsls	r0, r3, #5
    2ac2:	4a64      	ldr	r2, [pc, #400]	; (2c54 <usb_device_endpoint_set_config+0x23c>)
    2ac4:	1812      	adds	r2, r2, r0
    2ac6:	6850      	ldr	r0, [r2, #4]
    2ac8:	0040      	lsls	r0, r0, #1
    2aca:	0840      	lsrs	r0, r0, #1
    2acc:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2ace:	6950      	ldr	r0, [r2, #20]
    2ad0:	0040      	lsls	r0, r0, #1
    2ad2:	0840      	lsrs	r0, r0, #1
    2ad4:	6150      	str	r0, [r2, #20]
    2ad6:	e7de      	b.n	2a96 <usb_device_endpoint_set_config+0x7e>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    2ad8:	2c00      	cmp	r4, #0
    2ada:	db35      	blt.n	2b48 <usb_device_endpoint_set_config+0x130>
    2adc:	015d      	lsls	r5, r3, #5
    2ade:	6802      	ldr	r2, [r0, #0]
    2ae0:	4694      	mov	ip, r2
    2ae2:	4465      	add	r5, ip
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2ae4:	2280      	movs	r2, #128	; 0x80
    2ae6:	0052      	lsls	r2, r2, #1
    2ae8:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    2aea:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2aec:	0776      	lsls	r6, r6, #29
    2aee:	d129      	bne.n	2b44 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    2af0:	2680      	movs	r6, #128	; 0x80
    2af2:	0076      	lsls	r6, r6, #1
    2af4:	5daa      	ldrb	r2, [r5, r6]
    2af6:	2702      	movs	r7, #2
    2af8:	433a      	orrs	r2, r7
    2afa:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    2afc:	6802      	ldr	r2, [r0, #0]
    2afe:	0018      	movs	r0, r3
    2b00:	3008      	adds	r0, #8
    2b02:	0140      	lsls	r0, r0, #5
    2b04:	1812      	adds	r2, r2, r0
    2b06:	2040      	movs	r0, #64	; 0x40
    2b08:	7150      	strb	r0, [r2, #5]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    2b0a:	0fe2      	lsrs	r2, r4, #31

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    2b0c:	784f      	ldrb	r7, [r1, #1]
    2b0e:	005d      	lsls	r5, r3, #1
    2b10:	18ad      	adds	r5, r5, r2
    2b12:	012d      	lsls	r5, r5, #4
    2b14:	4e4f      	ldr	r6, [pc, #316]	; (2c54 <usb_device_endpoint_set_config+0x23c>)
    2b16:	1975      	adds	r5, r6, r5
    2b18:	6868      	ldr	r0, [r5, #4]
    2b1a:	2407      	movs	r4, #7
    2b1c:	403c      	ands	r4, r7
    2b1e:	0724      	lsls	r4, r4, #28
    2b20:	4e4d      	ldr	r6, [pc, #308]	; (2c58 <usb_device_endpoint_set_config+0x240>)
    2b22:	4030      	ands	r0, r6
    2b24:	4320      	orrs	r0, r4
    2b26:	6068      	str	r0, [r5, #4]

	if (true == ep_config->auto_zlp) {
    2b28:	7889      	ldrb	r1, [r1, #2]
    2b2a:	2900      	cmp	r1, #0
    2b2c:	d000      	beq.n	2b30 <usb_device_endpoint_set_config+0x118>
    2b2e:	e088      	b.n	2c42 <usb_device_endpoint_set_config+0x22a>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2b30:	005b      	lsls	r3, r3, #1
    2b32:	189b      	adds	r3, r3, r2
    2b34:	011b      	lsls	r3, r3, #4
    2b36:	4a47      	ldr	r2, [pc, #284]	; (2c54 <usb_device_endpoint_set_config+0x23c>)
    2b38:	18d3      	adds	r3, r2, r3
    2b3a:	685a      	ldr	r2, [r3, #4]
    2b3c:	0052      	lsls	r2, r2, #1
    2b3e:	0852      	lsrs	r2, r2, #1
    2b40:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    2b42:	2200      	movs	r2, #0
}
    2b44:	0010      	movs	r0, r2
    2b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b48:	015d      	lsls	r5, r3, #5
    2b4a:	6802      	ldr	r2, [r0, #0]
    2b4c:	4694      	mov	ip, r2
    2b4e:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2b50:	2280      	movs	r2, #128	; 0x80
    2b52:	0052      	lsls	r2, r2, #1
    2b54:	5caf      	ldrb	r7, [r5, r2]
    2b56:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    2b58:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2b5a:	4237      	tst	r7, r6
    2b5c:	d1f2      	bne.n	2b44 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    2b5e:	3690      	adds	r6, #144	; 0x90
    2b60:	5daa      	ldrb	r2, [r5, r6]
    2b62:	2720      	movs	r7, #32
    2b64:	433a      	orrs	r2, r7
    2b66:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2b68:	6802      	ldr	r2, [r0, #0]
    2b6a:	0018      	movs	r0, r3
    2b6c:	3008      	adds	r0, #8
    2b6e:	0140      	lsls	r0, r0, #5
    2b70:	1812      	adds	r2, r2, r0
    2b72:	2080      	movs	r0, #128	; 0x80
    2b74:	7110      	strb	r0, [r2, #4]
    2b76:	e7c8      	b.n	2b0a <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    2b78:	2c00      	cmp	r4, #0
    2b7a:	db17      	blt.n	2bac <usb_device_endpoint_set_config+0x194>
    2b7c:	015d      	lsls	r5, r3, #5
    2b7e:	6802      	ldr	r2, [r0, #0]
    2b80:	4694      	mov	ip, r2
    2b82:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2b84:	2280      	movs	r2, #128	; 0x80
    2b86:	0052      	lsls	r2, r2, #1
    2b88:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    2b8a:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2b8c:	0776      	lsls	r6, r6, #29
    2b8e:	d1d9      	bne.n	2b44 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    2b90:	2680      	movs	r6, #128	; 0x80
    2b92:	0076      	lsls	r6, r6, #1
    2b94:	5daa      	ldrb	r2, [r5, r6]
    2b96:	2703      	movs	r7, #3
    2b98:	433a      	orrs	r2, r7
    2b9a:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    2b9c:	6802      	ldr	r2, [r0, #0]
    2b9e:	0018      	movs	r0, r3
    2ba0:	3008      	adds	r0, #8
    2ba2:	0140      	lsls	r0, r0, #5
    2ba4:	1812      	adds	r2, r2, r0
    2ba6:	2040      	movs	r0, #64	; 0x40
    2ba8:	7150      	strb	r0, [r2, #5]
    2baa:	e7ae      	b.n	2b0a <usb_device_endpoint_set_config+0xf2>
    2bac:	015d      	lsls	r5, r3, #5
    2bae:	6802      	ldr	r2, [r0, #0]
    2bb0:	4694      	mov	ip, r2
    2bb2:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2bb4:	2280      	movs	r2, #128	; 0x80
    2bb6:	0052      	lsls	r2, r2, #1
    2bb8:	5caf      	ldrb	r7, [r5, r2]
    2bba:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    2bbc:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2bbe:	4237      	tst	r7, r6
    2bc0:	d1c0      	bne.n	2b44 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    2bc2:	3690      	adds	r6, #144	; 0x90
    2bc4:	5daa      	ldrb	r2, [r5, r6]
    2bc6:	2730      	movs	r7, #48	; 0x30
    2bc8:	433a      	orrs	r2, r7
    2bca:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2bcc:	6802      	ldr	r2, [r0, #0]
    2bce:	0018      	movs	r0, r3
    2bd0:	3008      	adds	r0, #8
    2bd2:	0140      	lsls	r0, r0, #5
    2bd4:	1812      	adds	r2, r2, r0
    2bd6:	2080      	movs	r0, #128	; 0x80
    2bd8:	7110      	strb	r0, [r2, #4]
    2bda:	e796      	b.n	2b0a <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    2bdc:	2c00      	cmp	r4, #0
    2bde:	db17      	blt.n	2c10 <usb_device_endpoint_set_config+0x1f8>
    2be0:	015d      	lsls	r5, r3, #5
    2be2:	6802      	ldr	r2, [r0, #0]
    2be4:	4694      	mov	ip, r2
    2be6:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2be8:	2280      	movs	r2, #128	; 0x80
    2bea:	0052      	lsls	r2, r2, #1
    2bec:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    2bee:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2bf0:	0776      	lsls	r6, r6, #29
    2bf2:	d1a7      	bne.n	2b44 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    2bf4:	2680      	movs	r6, #128	; 0x80
    2bf6:	0076      	lsls	r6, r6, #1
    2bf8:	5daa      	ldrb	r2, [r5, r6]
    2bfa:	2704      	movs	r7, #4
    2bfc:	433a      	orrs	r2, r7
    2bfe:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    2c00:	6802      	ldr	r2, [r0, #0]
    2c02:	0018      	movs	r0, r3
    2c04:	3008      	adds	r0, #8
    2c06:	0140      	lsls	r0, r0, #5
    2c08:	1812      	adds	r2, r2, r0
    2c0a:	2040      	movs	r0, #64	; 0x40
    2c0c:	7150      	strb	r0, [r2, #5]
    2c0e:	e77c      	b.n	2b0a <usb_device_endpoint_set_config+0xf2>
    2c10:	015d      	lsls	r5, r3, #5
    2c12:	6802      	ldr	r2, [r0, #0]
    2c14:	4694      	mov	ip, r2
    2c16:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2c18:	2280      	movs	r2, #128	; 0x80
    2c1a:	0052      	lsls	r2, r2, #1
    2c1c:	5caf      	ldrb	r7, [r5, r2]
    2c1e:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    2c20:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2c22:	4237      	tst	r7, r6
    2c24:	d000      	beq.n	2c28 <usb_device_endpoint_set_config+0x210>
    2c26:	e78d      	b.n	2b44 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    2c28:	3690      	adds	r6, #144	; 0x90
    2c2a:	5daa      	ldrb	r2, [r5, r6]
    2c2c:	2740      	movs	r7, #64	; 0x40
    2c2e:	433a      	orrs	r2, r7
    2c30:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2c32:	6802      	ldr	r2, [r0, #0]
    2c34:	0018      	movs	r0, r3
    2c36:	3008      	adds	r0, #8
    2c38:	0140      	lsls	r0, r0, #5
    2c3a:	1812      	adds	r2, r2, r0
    2c3c:	2080      	movs	r0, #128	; 0x80
    2c3e:	7110      	strb	r0, [r2, #4]
    2c40:	e763      	b.n	2b0a <usb_device_endpoint_set_config+0xf2>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2c42:	6869      	ldr	r1, [r5, #4]
    2c44:	2380      	movs	r3, #128	; 0x80
    2c46:	061b      	lsls	r3, r3, #24
    2c48:	430b      	orrs	r3, r1
    2c4a:	606b      	str	r3, [r5, #4]
	return STATUS_OK;
    2c4c:	2200      	movs	r2, #0
    2c4e:	e779      	b.n	2b44 <usb_device_endpoint_set_config+0x12c>
    2c50:	00003f3c 	.word	0x00003f3c
    2c54:	20000414 	.word	0x20000414
    2c58:	8fffffff 	.word	0x8fffffff

00002c5c <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    2c5c:	230f      	movs	r3, #15
    2c5e:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    2c60:	b249      	sxtb	r1, r1
    2c62:	2900      	cmp	r1, #0
    2c64:	db0a      	blt.n	2c7c <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    2c66:	3308      	adds	r3, #8
    2c68:	015b      	lsls	r3, r3, #5
    2c6a:	6802      	ldr	r2, [r0, #0]
    2c6c:	18d2      	adds	r2, r2, r3
    2c6e:	2140      	movs	r1, #64	; 0x40
    2c70:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    2c72:	6802      	ldr	r2, [r0, #0]
    2c74:	18d3      	adds	r3, r2, r3
    2c76:	2201      	movs	r2, #1
    2c78:	71da      	strb	r2, [r3, #7]
	}
}
    2c7a:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2c7c:	3308      	adds	r3, #8
    2c7e:	015b      	lsls	r3, r3, #5
    2c80:	6802      	ldr	r2, [r0, #0]
    2c82:	18d2      	adds	r2, r2, r3
    2c84:	2180      	movs	r1, #128	; 0x80
    2c86:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    2c88:	6802      	ldr	r2, [r0, #0]
    2c8a:	18d3      	adds	r3, r2, r3
    2c8c:	2202      	movs	r2, #2
    2c8e:	71da      	strb	r2, [r3, #7]
    2c90:	e7f3      	b.n	2c7a <usb_device_endpoint_abort_job+0x1e>

00002c92 <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2c92:	230f      	movs	r3, #15
    2c94:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    2c96:	b249      	sxtb	r1, r1
    2c98:	2900      	cmp	r1, #0
    2c9a:	db07      	blt.n	2cac <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    2c9c:	6802      	ldr	r2, [r0, #0]
    2c9e:	3308      	adds	r3, #8
    2ca0:	015b      	lsls	r3, r3, #5
    2ca2:	18d3      	adds	r3, r2, r3
    2ca4:	7998      	ldrb	r0, [r3, #6]
    2ca6:	06c0      	lsls	r0, r0, #27
    2ca8:	0fc0      	lsrs	r0, r0, #31
	}
}
    2caa:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    2cac:	6802      	ldr	r2, [r0, #0]
    2cae:	3308      	adds	r3, #8
    2cb0:	015b      	lsls	r3, r3, #5
    2cb2:	18d3      	adds	r3, r2, r3
    2cb4:	7998      	ldrb	r0, [r3, #6]
    2cb6:	0680      	lsls	r0, r0, #26
    2cb8:	0fc0      	lsrs	r0, r0, #31
    2cba:	e7f6      	b.n	2caa <usb_device_endpoint_is_halted+0x18>

00002cbc <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2cbc:	230f      	movs	r3, #15
    2cbe:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    2cc0:	b249      	sxtb	r1, r1
    2cc2:	2900      	cmp	r1, #0
    2cc4:	db06      	blt.n	2cd4 <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    2cc6:	6802      	ldr	r2, [r0, #0]
    2cc8:	3308      	adds	r3, #8
    2cca:	015b      	lsls	r3, r3, #5
    2ccc:	18d3      	adds	r3, r2, r3
    2cce:	2210      	movs	r2, #16
    2cd0:	715a      	strb	r2, [r3, #5]
	}
}
    2cd2:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    2cd4:	6802      	ldr	r2, [r0, #0]
    2cd6:	3308      	adds	r3, #8
    2cd8:	015b      	lsls	r3, r3, #5
    2cda:	18d3      	adds	r3, r2, r3
    2cdc:	2220      	movs	r2, #32
    2cde:	715a      	strb	r2, [r3, #5]
    2ce0:	e7f7      	b.n	2cd2 <usb_device_endpoint_set_halt+0x16>

00002ce2 <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    2ce2:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2ce4:	230f      	movs	r3, #15
    2ce6:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    2ce8:	b249      	sxtb	r1, r1
    2cea:	2900      	cmp	r1, #0
    2cec:	db1d      	blt.n	2d2a <usb_device_endpoint_clear_halt+0x48>
    2cee:	0159      	lsls	r1, r3, #5
    2cf0:	6802      	ldr	r2, [r0, #0]
    2cf2:	1852      	adds	r2, r2, r1
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    2cf4:	2483      	movs	r4, #131	; 0x83
    2cf6:	0064      	lsls	r4, r4, #1
    2cf8:	5d14      	ldrb	r4, [r2, r4]
    2cfa:	06e4      	lsls	r4, r4, #27
    2cfc:	d514      	bpl.n	2d28 <usb_device_endpoint_clear_halt+0x46>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    2cfe:	2510      	movs	r5, #16
    2d00:	2482      	movs	r4, #130	; 0x82
    2d02:	0064      	lsls	r4, r4, #1
    2d04:	5515      	strb	r5, [r2, r4]
    2d06:	6802      	ldr	r2, [r0, #0]
    2d08:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    2d0a:	2108      	movs	r1, #8
    2d0c:	31ff      	adds	r1, #255	; 0xff
    2d0e:	5c51      	ldrb	r1, [r2, r1]
    2d10:	0689      	lsls	r1, r1, #26
    2d12:	d509      	bpl.n	2d28 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    2d14:	3ce4      	subs	r4, #228	; 0xe4
    2d16:	2108      	movs	r1, #8
    2d18:	31ff      	adds	r1, #255	; 0xff
    2d1a:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    2d1c:	6802      	ldr	r2, [r0, #0]
    2d1e:	3308      	adds	r3, #8
    2d20:	015b      	lsls	r3, r3, #5
    2d22:	18d3      	adds	r3, r2, r3
    2d24:	2201      	movs	r2, #1
    2d26:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    2d28:	bd30      	pop	{r4, r5, pc}
    2d2a:	0159      	lsls	r1, r3, #5
    2d2c:	6802      	ldr	r2, [r0, #0]
    2d2e:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    2d30:	2483      	movs	r4, #131	; 0x83
    2d32:	0064      	lsls	r4, r4, #1
    2d34:	5d14      	ldrb	r4, [r2, r4]
    2d36:	06a4      	lsls	r4, r4, #26
    2d38:	d5f6      	bpl.n	2d28 <usb_device_endpoint_clear_halt+0x46>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    2d3a:	2520      	movs	r5, #32
    2d3c:	2482      	movs	r4, #130	; 0x82
    2d3e:	0064      	lsls	r4, r4, #1
    2d40:	5515      	strb	r5, [r2, r4]
    2d42:	6802      	ldr	r2, [r0, #0]
    2d44:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    2d46:	2108      	movs	r1, #8
    2d48:	31ff      	adds	r1, #255	; 0xff
    2d4a:	5c51      	ldrb	r1, [r2, r1]
    2d4c:	0649      	lsls	r1, r1, #25
    2d4e:	d5eb      	bpl.n	2d28 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    2d50:	3cc4      	subs	r4, #196	; 0xc4
    2d52:	2108      	movs	r1, #8
    2d54:	31ff      	adds	r1, #255	; 0xff
    2d56:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    2d58:	6802      	ldr	r2, [r0, #0]
    2d5a:	3308      	adds	r3, #8
    2d5c:	015b      	lsls	r3, r3, #5
    2d5e:	18d3      	adds	r3, r2, r3
    2d60:	2202      	movs	r2, #2
    2d62:	711a      	strb	r2, [r3, #4]
    2d64:	e7e0      	b.n	2d28 <usb_device_endpoint_clear_halt+0x46>
	...

00002d68 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    2d68:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    2d6a:	000c      	movs	r4, r1
    2d6c:	3408      	adds	r4, #8
    2d6e:	0164      	lsls	r4, r4, #5
    2d70:	6805      	ldr	r5, [r0, #0]
    2d72:	5d64      	ldrb	r4, [r4, r5]
    2d74:	0664      	lsls	r4, r4, #25
    2d76:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    2d78:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    2d7a:	2c00      	cmp	r4, #0
    2d7c:	d101      	bne.n	2d82 <usb_device_endpoint_write_buffer_job+0x1a>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
    2d7e:	0028      	movs	r0, r5
    2d80:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    2d82:	014c      	lsls	r4, r1, #5
    2d84:	4d0b      	ldr	r5, [pc, #44]	; (2db4 <usb_device_endpoint_write_buffer_job+0x4c>)
    2d86:	192d      	adds	r5, r5, r4
    2d88:	002c      	movs	r4, r5
    2d8a:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    2d8c:	696a      	ldr	r2, [r5, #20]
    2d8e:	4d0a      	ldr	r5, [pc, #40]	; (2db8 <usb_device_endpoint_write_buffer_job+0x50>)
    2d90:	402a      	ands	r2, r5
    2d92:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    2d94:	6962      	ldr	r2, [r4, #20]
    2d96:	049b      	lsls	r3, r3, #18
    2d98:	0c9b      	lsrs	r3, r3, #18
    2d9a:	0b92      	lsrs	r2, r2, #14
    2d9c:	0392      	lsls	r2, r2, #14
    2d9e:	4313      	orrs	r3, r2
    2da0:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    2da2:	6803      	ldr	r3, [r0, #0]
    2da4:	3108      	adds	r1, #8
    2da6:	0149      	lsls	r1, r1, #5
    2da8:	1859      	adds	r1, r3, r1
    2daa:	2380      	movs	r3, #128	; 0x80
    2dac:	714b      	strb	r3, [r1, #5]
	return STATUS_OK;
    2dae:	2500      	movs	r5, #0
    2db0:	e7e5      	b.n	2d7e <usb_device_endpoint_write_buffer_job+0x16>
    2db2:	46c0      	nop			; (mov r8, r8)
    2db4:	20000414 	.word	0x20000414
    2db8:	f0003fff 	.word	0xf0003fff

00002dbc <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    2dbc:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    2dbe:	000c      	movs	r4, r1
    2dc0:	3408      	adds	r4, #8
    2dc2:	0164      	lsls	r4, r4, #5
    2dc4:	6805      	ldr	r5, [r0, #0]
    2dc6:	5d64      	ldrb	r4, [r4, r5]
    2dc8:	0764      	lsls	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    2dca:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    2dcc:	2c00      	cmp	r4, #0
    2dce:	d101      	bne.n	2dd4 <usb_device_endpoint_read_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
    2dd0:	0028      	movs	r0, r5
    2dd2:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    2dd4:	4c0b      	ldr	r4, [pc, #44]	; (2e04 <usb_device_endpoint_read_buffer_job+0x48>)
    2dd6:	014d      	lsls	r5, r1, #5
    2dd8:	512a      	str	r2, [r5, r4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    2dda:	1962      	adds	r2, r4, r5
    2ddc:	6854      	ldr	r4, [r2, #4]
    2dde:	049b      	lsls	r3, r3, #18
    2de0:	091b      	lsrs	r3, r3, #4
    2de2:	4d09      	ldr	r5, [pc, #36]	; (2e08 <usb_device_endpoint_read_buffer_job+0x4c>)
    2de4:	402c      	ands	r4, r5
    2de6:	4323      	orrs	r3, r4
    2de8:	6053      	str	r3, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    2dea:	6853      	ldr	r3, [r2, #4]
    2dec:	0b9b      	lsrs	r3, r3, #14
    2dee:	039b      	lsls	r3, r3, #14
    2df0:	6053      	str	r3, [r2, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    2df2:	6803      	ldr	r3, [r0, #0]
    2df4:	3108      	adds	r1, #8
    2df6:	0149      	lsls	r1, r1, #5
    2df8:	1859      	adds	r1, r3, r1
    2dfa:	2340      	movs	r3, #64	; 0x40
    2dfc:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    2dfe:	2500      	movs	r5, #0
    2e00:	e7e6      	b.n	2dd0 <usb_device_endpoint_read_buffer_job+0x14>
    2e02:	46c0      	nop			; (mov r8, r8)
    2e04:	20000414 	.word	0x20000414
    2e08:	f0003fff 	.word	0xf0003fff

00002e0c <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    2e0c:	4b09      	ldr	r3, [pc, #36]	; (2e34 <usb_device_endpoint_setup_buffer_job+0x28>)
    2e0e:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    2e10:	685a      	ldr	r2, [r3, #4]
    2e12:	4909      	ldr	r1, [pc, #36]	; (2e38 <usb_device_endpoint_setup_buffer_job+0x2c>)
    2e14:	4011      	ands	r1, r2
    2e16:	2280      	movs	r2, #128	; 0x80
    2e18:	0292      	lsls	r2, r2, #10
    2e1a:	430a      	orrs	r2, r1
    2e1c:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    2e1e:	685a      	ldr	r2, [r3, #4]
    2e20:	0b92      	lsrs	r2, r2, #14
    2e22:	0392      	lsls	r2, r2, #14
    2e24:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    2e26:	6802      	ldr	r2, [r0, #0]
    2e28:	2140      	movs	r1, #64	; 0x40
    2e2a:	2382      	movs	r3, #130	; 0x82
    2e2c:	005b      	lsls	r3, r3, #1
    2e2e:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    2e30:	2000      	movs	r0, #0
    2e32:	4770      	bx	lr
    2e34:	20000414 	.word	0x20000414
    2e38:	f0003fff 	.word	0xf0003fff

00002e3c <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    2e3c:	6802      	ldr	r2, [r0, #0]
    2e3e:	7813      	ldrb	r3, [r2, #0]
    2e40:	2102      	movs	r1, #2
    2e42:	430b      	orrs	r3, r1
    2e44:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    2e46:	6802      	ldr	r2, [r0, #0]
    2e48:	7893      	ldrb	r3, [r2, #2]
    2e4a:	2b02      	cmp	r3, #2
    2e4c:	d0fc      	beq.n	2e48 <usb_enable+0xc>
}
    2e4e:	4770      	bx	lr

00002e50 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    2e50:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e52:	46de      	mov	lr, fp
    2e54:	4657      	mov	r7, sl
    2e56:	464e      	mov	r6, r9
    2e58:	4645      	mov	r5, r8
    2e5a:	b5e0      	push	{r5, r6, r7, lr}
    2e5c:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    2e5e:	4bc4      	ldr	r3, [pc, #784]	; (3170 <USB_Handler+0x320>)
    2e60:	681f      	ldr	r7, [r3, #0]
    2e62:	683d      	ldr	r5, [r7, #0]
    2e64:	782b      	ldrb	r3, [r5, #0]
    2e66:	09db      	lsrs	r3, r3, #7
    2e68:	d114      	bne.n	2e94 <USB_Handler+0x44>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    2e6a:	8c2e      	ldrh	r6, [r5, #32]
    2e6c:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    2e6e:	2e00      	cmp	r6, #0
    2e70:	d000      	beq.n	2e74 <USB_Handler+0x24>
    2e72:	e22d      	b.n	32d0 <USB_Handler+0x480>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    2e74:	8bae      	ldrh	r6, [r5, #28]
    2e76:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
    2e78:	23ab      	movs	r3, #171	; 0xab
    2e7a:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    2e7c:	5afb      	ldrh	r3, [r7, r3]
    2e7e:	22aa      	movs	r2, #170	; 0xaa
    2e80:	0052      	lsls	r2, r2, #1
    2e82:	5abd      	ldrh	r5, [r7, r2]
    2e84:	401d      	ands	r5, r3
    2e86:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    2e88:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    2e8a:	4fba      	ldr	r7, [pc, #744]	; (3174 <USB_Handler+0x324>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    2e8c:	4bb8      	ldr	r3, [pc, #736]	; (3170 <USB_Handler+0x320>)
    2e8e:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    2e90:	4698      	mov	r8, r3
    2e92:	e208      	b.n	32a6 <USB_Handler+0x456>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    2e94:	8c2b      	ldrh	r3, [r5, #32]
    2e96:	b29b      	uxth	r3, r3
    2e98:	2b00      	cmp	r3, #0
    2e9a:	d100      	bne.n	2e9e <USB_Handler+0x4e>
    2e9c:	e13d      	b.n	311a <USB_Handler+0x2ca>
    2e9e:	8c28      	ldrh	r0, [r5, #32]
    2ea0:	b280      	uxth	r0, r0
    2ea2:	4bb5      	ldr	r3, [pc, #724]	; (3178 <USB_Handler+0x328>)
    2ea4:	4798      	blx	r3
    2ea6:	0004      	movs	r4, r0
	if (pipe_int < 32) {
    2ea8:	281f      	cmp	r0, #31
    2eaa:	d900      	bls.n	2eae <USB_Handler+0x5e>
    2eac:	e135      	b.n	311a <USB_Handler+0x2ca>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    2eae:	0003      	movs	r3, r0
    2eb0:	3308      	adds	r3, #8
    2eb2:	015b      	lsls	r3, r3, #5
    2eb4:	18ed      	adds	r5, r5, r3
    2eb6:	79ed      	ldrb	r5, [r5, #7]
    2eb8:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    2eba:	07ab      	lsls	r3, r5, #30
    2ebc:	d041      	beq.n	2f42 <USB_Handler+0xf2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    2ebe:	4aaf      	ldr	r2, [pc, #700]	; (317c <USB_Handler+0x32c>)
    2ec0:	2301      	movs	r3, #1
    2ec2:	4083      	lsls	r3, r0
    2ec4:	6811      	ldr	r1, [r2, #0]
    2ec6:	4399      	bics	r1, r3
    2ec8:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    2eca:	0003      	movs	r3, r0
    2ecc:	3308      	adds	r3, #8
    2ece:	015b      	lsls	r3, r3, #5
    2ed0:	683a      	ldr	r2, [r7, #0]
    2ed2:	4694      	mov	ip, r2
    2ed4:	4463      	add	r3, ip
    2ed6:	2203      	movs	r2, #3
    2ed8:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    2eda:	183b      	adds	r3, r7, r0
    2edc:	33ae      	adds	r3, #174	; 0xae
    2ede:	781b      	ldrb	r3, [r3, #0]
    2ee0:	07db      	lsls	r3, r3, #31
    2ee2:	d52e      	bpl.n	2f42 <USB_Handler+0xf2>
				pipe_callback_para.pipe_num = pipe_int;
    2ee4:	4ba6      	ldr	r3, [pc, #664]	; (3180 <USB_Handler+0x330>)
    2ee6:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    2ee8:	683a      	ldr	r2, [r7, #0]
    2eea:	0003      	movs	r3, r0
    2eec:	3308      	adds	r3, #8
    2eee:	015b      	lsls	r3, r3, #5
    2ef0:	5c9b      	ldrb	r3, [r3, r2]
    2ef2:	079b      	lsls	r3, r3, #30
    2ef4:	0f9b      	lsrs	r3, r3, #30
    2ef6:	2b01      	cmp	r3, #1
    2ef8:	d100      	bne.n	2efc <USB_Handler+0xac>
    2efa:	e094      	b.n	3026 <USB_Handler+0x1d6>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    2efc:	0142      	lsls	r2, r0, #5
    2efe:	4ba1      	ldr	r3, [pc, #644]	; (3184 <USB_Handler+0x334>)
    2f00:	189b      	adds	r3, r3, r2
    2f02:	685a      	ldr	r2, [r3, #4]
    2f04:	0112      	lsls	r2, r2, #4
    2f06:	0c92      	lsrs	r2, r2, #18
    2f08:	b290      	uxth	r0, r2
    2f0a:	499d      	ldr	r1, [pc, #628]	; (3180 <USB_Handler+0x330>)
    2f0c:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    2f0e:	685a      	ldr	r2, [r3, #4]
    2f10:	0492      	lsls	r2, r2, #18
    2f12:	0c92      	lsrs	r2, r2, #18
    2f14:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    2f16:	685a      	ldr	r2, [r3, #4]
    2f18:	499b      	ldr	r1, [pc, #620]	; (3188 <USB_Handler+0x338>)
    2f1a:	400a      	ands	r2, r1
    2f1c:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    2f1e:	2800      	cmp	r0, #0
    2f20:	d107      	bne.n	2f32 <USB_Handler+0xe2>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    2f22:	0162      	lsls	r2, r4, #5
    2f24:	4b97      	ldr	r3, [pc, #604]	; (3184 <USB_Handler+0x334>)
    2f26:	189b      	adds	r3, r3, r2
    2f28:	685b      	ldr	r3, [r3, #4]
    2f2a:	049b      	lsls	r3, r3, #18
    2f2c:	0c9b      	lsrs	r3, r3, #18
    2f2e:	4a94      	ldr	r2, [pc, #592]	; (3180 <USB_Handler+0x330>)
    2f30:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    2f32:	4b8f      	ldr	r3, [pc, #572]	; (3170 <USB_Handler+0x320>)
    2f34:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    2f36:	1ca3      	adds	r3, r4, #2
    2f38:	011b      	lsls	r3, r3, #4
    2f3a:	18c3      	adds	r3, r0, r3
    2f3c:	685b      	ldr	r3, [r3, #4]
    2f3e:	4990      	ldr	r1, [pc, #576]	; (3180 <USB_Handler+0x330>)
    2f40:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    2f42:	076b      	lsls	r3, r5, #29
    2f44:	d51f      	bpl.n	2f86 <USB_Handler+0x136>
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    2f46:	4b8a      	ldr	r3, [pc, #552]	; (3170 <USB_Handler+0x320>)
    2f48:	6818      	ldr	r0, [r3, #0]
    2f4a:	6802      	ldr	r2, [r0, #0]
    2f4c:	0023      	movs	r3, r4
    2f4e:	3308      	adds	r3, #8
    2f50:	015b      	lsls	r3, r3, #5
    2f52:	5c9b      	ldrb	r3, [r3, r2]
    2f54:	069b      	lsls	r3, r3, #26
    2f56:	0f5b      	lsrs	r3, r3, #29
    2f58:	2b02      	cmp	r3, #2
    2f5a:	d075      	beq.n	3048 <USB_Handler+0x1f8>
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    2f5c:	0023      	movs	r3, r4
    2f5e:	3308      	adds	r3, #8
    2f60:	015b      	lsls	r3, r3, #5
    2f62:	5c9b      	ldrb	r3, [r3, r2]
    2f64:	069b      	lsls	r3, r3, #26
    2f66:	0f5b      	lsrs	r3, r3, #29
    2f68:	2b03      	cmp	r3, #3
    2f6a:	d100      	bne.n	2f6e <USB_Handler+0x11e>
    2f6c:	e09e      	b.n	30ac <USB_Handler+0x25c>
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    2f6e:	0162      	lsls	r2, r4, #5
    2f70:	4b84      	ldr	r3, [pc, #528]	; (3184 <USB_Handler+0x334>)
    2f72:	189b      	adds	r3, r3, r2
    2f74:	2200      	movs	r2, #0
    2f76:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    2f78:	6803      	ldr	r3, [r0, #0]
    2f7a:	0022      	movs	r2, r4
    2f7c:	3208      	adds	r2, #8
    2f7e:	0152      	lsls	r2, r2, #5
    2f80:	189b      	adds	r3, r3, r2
    2f82:	2204      	movs	r2, #4
    2f84:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    2f86:	072b      	lsls	r3, r5, #28
    2f88:	d515      	bpl.n	2fb6 <USB_Handler+0x166>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    2f8a:	4a7c      	ldr	r2, [pc, #496]	; (317c <USB_Handler+0x32c>)
    2f8c:	2301      	movs	r3, #1
    2f8e:	40a3      	lsls	r3, r4
    2f90:	6811      	ldr	r1, [r2, #0]
    2f92:	4399      	bics	r1, r3
    2f94:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    2f96:	4b76      	ldr	r3, [pc, #472]	; (3170 <USB_Handler+0x320>)
    2f98:	6818      	ldr	r0, [r3, #0]
    2f9a:	0023      	movs	r3, r4
    2f9c:	3308      	adds	r3, #8
    2f9e:	015b      	lsls	r3, r3, #5
    2fa0:	6802      	ldr	r2, [r0, #0]
    2fa2:	4694      	mov	ip, r2
    2fa4:	4463      	add	r3, ip
    2fa6:	2208      	movs	r2, #8
    2fa8:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    2faa:	1903      	adds	r3, r0, r4
    2fac:	33ae      	adds	r3, #174	; 0xae
    2fae:	781b      	ldrb	r3, [r3, #0]
    2fb0:	079b      	lsls	r3, r3, #30
    2fb2:	d500      	bpl.n	2fb6 <USB_Handler+0x166>
    2fb4:	e094      	b.n	30e0 <USB_Handler+0x290>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    2fb6:	06eb      	lsls	r3, r5, #27
    2fb8:	d515      	bpl.n	2fe6 <USB_Handler+0x196>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    2fba:	4a70      	ldr	r2, [pc, #448]	; (317c <USB_Handler+0x32c>)
    2fbc:	2301      	movs	r3, #1
    2fbe:	40a3      	lsls	r3, r4
    2fc0:	6811      	ldr	r1, [r2, #0]
    2fc2:	4399      	bics	r1, r3
    2fc4:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    2fc6:	4b6a      	ldr	r3, [pc, #424]	; (3170 <USB_Handler+0x320>)
    2fc8:	6818      	ldr	r0, [r3, #0]
    2fca:	0023      	movs	r3, r4
    2fcc:	3308      	adds	r3, #8
    2fce:	015b      	lsls	r3, r3, #5
    2fd0:	6802      	ldr	r2, [r0, #0]
    2fd2:	4694      	mov	ip, r2
    2fd4:	4463      	add	r3, ip
    2fd6:	2210      	movs	r2, #16
    2fd8:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    2fda:	1903      	adds	r3, r0, r4
    2fdc:	33ae      	adds	r3, #174	; 0xae
    2fde:	781b      	ldrb	r3, [r3, #0]
    2fe0:	075b      	lsls	r3, r3, #29
    2fe2:	d500      	bpl.n	2fe6 <USB_Handler+0x196>
    2fe4:	e08a      	b.n	30fc <USB_Handler+0x2ac>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    2fe6:	06ab      	lsls	r3, r5, #26
    2fe8:	d400      	bmi.n	2fec <USB_Handler+0x19c>
    2fea:	e12f      	b.n	324c <USB_Handler+0x3fc>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    2fec:	4a63      	ldr	r2, [pc, #396]	; (317c <USB_Handler+0x32c>)
    2fee:	2301      	movs	r3, #1
    2ff0:	40a3      	lsls	r3, r4
    2ff2:	6811      	ldr	r1, [r2, #0]
    2ff4:	4399      	bics	r1, r3
    2ff6:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    2ff8:	4b5d      	ldr	r3, [pc, #372]	; (3170 <USB_Handler+0x320>)
    2ffa:	6818      	ldr	r0, [r3, #0]
    2ffc:	0023      	movs	r3, r4
    2ffe:	3308      	adds	r3, #8
    3000:	015b      	lsls	r3, r3, #5
    3002:	6802      	ldr	r2, [r0, #0]
    3004:	4694      	mov	ip, r2
    3006:	4463      	add	r3, ip
    3008:	2220      	movs	r2, #32
    300a:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    300c:	1903      	adds	r3, r0, r4
    300e:	33ae      	adds	r3, #174	; 0xae
    3010:	781b      	ldrb	r3, [r3, #0]
    3012:	071b      	lsls	r3, r3, #28
    3014:	d400      	bmi.n	3018 <USB_Handler+0x1c8>
    3016:	e119      	b.n	324c <USB_Handler+0x3fc>
				pipe_callback_para.pipe_num = pipe_int;
    3018:	4959      	ldr	r1, [pc, #356]	; (3180 <USB_Handler+0x330>)
    301a:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    301c:	0124      	lsls	r4, r4, #4
    301e:	1904      	adds	r4, r0, r4
    3020:	6b23      	ldr	r3, [r4, #48]	; 0x30
    3022:	4798      	blx	r3
    3024:	e112      	b.n	324c <USB_Handler+0x3fc>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    3026:	0142      	lsls	r2, r0, #5
    3028:	4b56      	ldr	r3, [pc, #344]	; (3184 <USB_Handler+0x334>)
    302a:	189b      	adds	r3, r3, r2
    302c:	685a      	ldr	r2, [r3, #4]
    302e:	0492      	lsls	r2, r2, #18
    3030:	0c92      	lsrs	r2, r2, #18
    3032:	4953      	ldr	r1, [pc, #332]	; (3180 <USB_Handler+0x330>)
    3034:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3036:	685a      	ldr	r2, [r3, #4]
    3038:	0112      	lsls	r2, r2, #4
    303a:	0c92      	lsrs	r2, r2, #18
    303c:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    303e:	685a      	ldr	r2, [r3, #4]
    3040:	0b92      	lsrs	r2, r2, #14
    3042:	0392      	lsls	r2, r2, #14
    3044:	605a      	str	r2, [r3, #4]
    3046:	e774      	b.n	2f32 <USB_Handler+0xe2>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    3048:	0023      	movs	r3, r4
    304a:	3308      	adds	r3, #8
    304c:	015b      	lsls	r3, r3, #5
    304e:	5c9b      	ldrb	r3, [r3, r2]
    3050:	079b      	lsls	r3, r3, #30
    3052:	0f9b      	lsrs	r3, r3, #30
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    3054:	2b01      	cmp	r3, #1
    3056:	d181      	bne.n	2f5c <USB_Handler+0x10c>
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.bit.CRCERR) {
    3058:	0161      	lsls	r1, r4, #5
    305a:	4b4a      	ldr	r3, [pc, #296]	; (3184 <USB_Handler+0x334>)
    305c:	185b      	adds	r3, r3, r1
    305e:	3308      	adds	r3, #8
    3060:	789b      	ldrb	r3, [r3, #2]
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    3062:	07db      	lsls	r3, r3, #31
    3064:	d400      	bmi.n	3068 <USB_Handler+0x218>
    3066:	e779      	b.n	2f5c <USB_Handler+0x10c>
				host_pipe_job_busy_status &= ~(1 << pipe_int);
    3068:	4a44      	ldr	r2, [pc, #272]	; (317c <USB_Handler+0x32c>)
    306a:	2301      	movs	r3, #1
    306c:	40a3      	lsls	r3, r4
    306e:	6811      	ldr	r1, [r2, #0]
    3070:	4399      	bics	r1, r3
    3072:	6011      	str	r1, [r2, #0]
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    3074:	0162      	lsls	r2, r4, #5
    3076:	4b43      	ldr	r3, [pc, #268]	; (3184 <USB_Handler+0x334>)
    3078:	189b      	adds	r3, r3, r2
    307a:	2200      	movs	r2, #0
    307c:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    307e:	0023      	movs	r3, r4
    3080:	3308      	adds	r3, #8
    3082:	015b      	lsls	r3, r3, #5
    3084:	6802      	ldr	r2, [r0, #0]
    3086:	4694      	mov	ip, r2
    3088:	4463      	add	r3, ip
    308a:	2204      	movs	r2, #4
    308c:	71da      	strb	r2, [r3, #7]
				if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    308e:	1903      	adds	r3, r0, r4
    3090:	33ae      	adds	r3, #174	; 0xae
    3092:	781b      	ldrb	r3, [r3, #0]
    3094:	079b      	lsls	r3, r3, #30
    3096:	d400      	bmi.n	309a <USB_Handler+0x24a>
    3098:	e775      	b.n	2f86 <USB_Handler+0x136>
					pipe_callback_para.pipe_num = pipe_int;
    309a:	4939      	ldr	r1, [pc, #228]	; (3180 <USB_Handler+0x330>)
    309c:	700c      	strb	r4, [r1, #0]
					pipe_callback_para.pipe_error_status = USB_STATUS_PIPE_CRC16ER;
    309e:	2310      	movs	r3, #16
    30a0:	704b      	strb	r3, [r1, #1]
							[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    30a2:	0123      	lsls	r3, r4, #4
    30a4:	18c3      	adds	r3, r0, r3
    30a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30a8:	4798      	blx	r3
    30aa:	e76c      	b.n	2f86 <USB_Handler+0x136>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN) {
    30ac:	0023      	movs	r3, r4
    30ae:	3308      	adds	r3, #8
    30b0:	015b      	lsls	r3, r3, #5
    30b2:	5c9b      	ldrb	r3, [r3, r2]
    30b4:	079b      	lsls	r3, r3, #30
    30b6:	0f9b      	lsrs	r3, r3, #30
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    30b8:	2b01      	cmp	r3, #1
    30ba:	d000      	beq.n	30be <USB_Handler+0x26e>
    30bc:	e757      	b.n	2f6e <USB_Handler+0x11e>
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    30be:	0162      	lsls	r2, r4, #5
    30c0:	4b30      	ldr	r3, [pc, #192]	; (3184 <USB_Handler+0x334>)
    30c2:	189b      	adds	r3, r3, r2
    30c4:	2200      	movs	r2, #0
    30c6:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    30c8:	0023      	movs	r3, r4
    30ca:	3308      	adds	r3, #8
    30cc:	015b      	lsls	r3, r3, #5
    30ce:	6802      	ldr	r2, [r0, #0]
    30d0:	18d2      	adds	r2, r2, r3
    30d2:	2104      	movs	r1, #4
    30d4:	71d1      	strb	r1, [r2, #7]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSSET.reg = USB_HOST_PSTATUS_PFREEZE;
    30d6:	6802      	ldr	r2, [r0, #0]
    30d8:	18d3      	adds	r3, r2, r3
    30da:	2210      	movs	r2, #16
    30dc:	715a      	strb	r2, [r3, #5]
    30de:	e752      	b.n	2f86 <USB_Handler+0x136>
				pipe_callback_para.pipe_num = pipe_int;
    30e0:	4927      	ldr	r1, [pc, #156]	; (3180 <USB_Handler+0x330>)
    30e2:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    30e4:	0162      	lsls	r2, r4, #5
    30e6:	4b27      	ldr	r3, [pc, #156]	; (3184 <USB_Handler+0x334>)
    30e8:	189b      	adds	r3, r3, r2
    30ea:	89db      	ldrh	r3, [r3, #14]
    30ec:	221f      	movs	r2, #31
    30ee:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    30f0:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    30f2:	0123      	lsls	r3, r4, #4
    30f4:	18c3      	adds	r3, r0, r3
    30f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30f8:	4798      	blx	r3
    30fa:	e75c      	b.n	2fb6 <USB_Handler+0x166>
				pipe_callback_para.pipe_num = pipe_int;
    30fc:	4920      	ldr	r1, [pc, #128]	; (3180 <USB_Handler+0x330>)
    30fe:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3100:	0162      	lsls	r2, r4, #5
    3102:	4b20      	ldr	r3, [pc, #128]	; (3184 <USB_Handler+0x334>)
    3104:	189b      	adds	r3, r3, r2
    3106:	685b      	ldr	r3, [r3, #4]
    3108:	011b      	lsls	r3, r3, #4
    310a:	0c9b      	lsrs	r3, r3, #18
    310c:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    310e:	0123      	lsls	r3, r4, #4
    3110:	18c3      	adds	r3, r0, r3
    3112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3114:	2100      	movs	r1, #0
    3116:	4798      	blx	r3
    3118:	e765      	b.n	2fe6 <USB_Handler+0x196>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    311a:	8bac      	ldrh	r4, [r5, #28]
    311c:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    311e:	0763      	lsls	r3, r4, #29
    3120:	d538      	bpl.n	3194 <USB_Handler+0x344>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    3122:	2304      	movs	r3, #4
    3124:	83ab      	strh	r3, [r5, #28]
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    3126:	4b15      	ldr	r3, [pc, #84]	; (317c <USB_Handler+0x32c>)
    3128:	681d      	ldr	r5, [r3, #0]
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
    312a:	2301      	movs	r3, #1
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    312c:	2001      	movs	r0, #1
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    312e:	2610      	movs	r6, #16
    3130:	e002      	b.n	3138 <USB_Handler+0x2e8>
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
    3132:	3301      	adds	r3, #1
    3134:	2b08      	cmp	r3, #8
    3136:	d029      	beq.n	318c <USB_Handler+0x33c>
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    3138:	0002      	movs	r2, r0
    313a:	409a      	lsls	r2, r3
    313c:	4215      	tst	r5, r2
    313e:	d0f8      	beq.n	3132 <USB_Handler+0x2e2>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    3140:	6839      	ldr	r1, [r7, #0]
    3142:	001a      	movs	r2, r3
    3144:	3208      	adds	r2, #8
    3146:	0152      	lsls	r2, r2, #5
    3148:	5c52      	ldrb	r2, [r2, r1]
    314a:	0692      	lsls	r2, r2, #26
    314c:	0f52      	lsrs	r2, r2, #29
    314e:	2a03      	cmp	r2, #3
    3150:	d1ef      	bne.n	3132 <USB_Handler+0x2e2>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
    3152:	001a      	movs	r2, r3
    3154:	3208      	adds	r2, #8
    3156:	0152      	lsls	r2, r2, #5
    3158:	5c52      	ldrb	r2, [r2, r1]
    315a:	0792      	lsls	r2, r2, #30
    315c:	0f92      	lsrs	r2, r2, #30
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    315e:	2a01      	cmp	r2, #1
    3160:	d1e7      	bne.n	3132 <USB_Handler+0x2e2>
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    3162:	001a      	movs	r2, r3
    3164:	3208      	adds	r2, #8
    3166:	0152      	lsls	r2, r2, #5
    3168:	1889      	adds	r1, r1, r2
    316a:	710e      	strb	r6, [r1, #4]
    316c:	e7e1      	b.n	3132 <USB_Handler+0x2e2>
    316e:	46c0      	nop			; (mov r8, r8)
    3170:	200001b4 	.word	0x200001b4
    3174:	00003f50 	.word	0x00003f50
    3178:	00003e39 	.word	0x00003e39
    317c:	200001c4 	.word	0x200001c4
    3180:	200001c8 	.word	0x200001c8
    3184:	20000414 	.word	0x20000414
    3188:	f0003fff 	.word	0xf0003fff
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    318c:	339d      	adds	r3, #157	; 0x9d
    318e:	5cfb      	ldrb	r3, [r7, r3]
    3190:	07db      	lsls	r3, r3, #31
    3192:	d462      	bmi.n	325a <USB_Handler+0x40a>
		if (flags & USB_HOST_INTFLAG_RST) {
    3194:	0723      	lsls	r3, r4, #28
    3196:	d50b      	bpl.n	31b0 <USB_Handler+0x360>
			host_pipe_job_busy_status = 0;
    3198:	2200      	movs	r2, #0
    319a:	4baf      	ldr	r3, [pc, #700]	; (3458 <USB_Handler+0x608>)
    319c:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    319e:	4baf      	ldr	r3, [pc, #700]	; (345c <USB_Handler+0x60c>)
    31a0:	6818      	ldr	r0, [r3, #0]
    31a2:	2308      	movs	r3, #8
    31a4:	6802      	ldr	r2, [r0, #0]
    31a6:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    31a8:	339d      	adds	r3, #157	; 0x9d
    31aa:	5cc3      	ldrb	r3, [r0, r3]
    31ac:	079b      	lsls	r3, r3, #30
    31ae:	d458      	bmi.n	3262 <USB_Handler+0x412>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    31b0:	0663      	lsls	r3, r4, #25
    31b2:	d508      	bpl.n	31c6 <USB_Handler+0x376>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    31b4:	4ba9      	ldr	r3, [pc, #676]	; (345c <USB_Handler+0x60c>)
    31b6:	6818      	ldr	r0, [r3, #0]
    31b8:	2340      	movs	r3, #64	; 0x40
    31ba:	6802      	ldr	r2, [r0, #0]
    31bc:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    31be:	3365      	adds	r3, #101	; 0x65
    31c0:	5cc3      	ldrb	r3, [r0, r3]
    31c2:	06db      	lsls	r3, r3, #27
    31c4:	d450      	bmi.n	3268 <USB_Handler+0x418>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    31c6:	06a3      	lsls	r3, r4, #26
    31c8:	d508      	bpl.n	31dc <USB_Handler+0x38c>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    31ca:	4ba4      	ldr	r3, [pc, #656]	; (345c <USB_Handler+0x60c>)
    31cc:	6818      	ldr	r0, [r3, #0]
    31ce:	2320      	movs	r3, #32
    31d0:	6802      	ldr	r2, [r0, #0]
    31d2:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    31d4:	3385      	adds	r3, #133	; 0x85
    31d6:	5cc3      	ldrb	r3, [r0, r3]
    31d8:	071b      	lsls	r3, r3, #28
    31da:	d448      	bmi.n	326e <USB_Handler+0x41e>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    31dc:	06e3      	lsls	r3, r4, #27
    31de:	d508      	bpl.n	31f2 <USB_Handler+0x3a2>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    31e0:	4b9e      	ldr	r3, [pc, #632]	; (345c <USB_Handler+0x60c>)
    31e2:	6818      	ldr	r0, [r3, #0]
    31e4:	2310      	movs	r3, #16
    31e6:	6802      	ldr	r2, [r0, #0]
    31e8:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    31ea:	3395      	adds	r3, #149	; 0x95
    31ec:	5cc3      	ldrb	r3, [r0, r3]
    31ee:	075b      	lsls	r3, r3, #29
    31f0:	d440      	bmi.n	3274 <USB_Handler+0x424>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    31f2:	0623      	lsls	r3, r4, #24
    31f4:	d50b      	bpl.n	320e <USB_Handler+0x3be>
			host_pipe_job_busy_status = 0;
    31f6:	2200      	movs	r2, #0
    31f8:	4b97      	ldr	r3, [pc, #604]	; (3458 <USB_Handler+0x608>)
    31fa:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    31fc:	4b97      	ldr	r3, [pc, #604]	; (345c <USB_Handler+0x60c>)
    31fe:	6818      	ldr	r0, [r3, #0]
    3200:	2380      	movs	r3, #128	; 0x80
    3202:	6802      	ldr	r2, [r0, #0]
    3204:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    3206:	3325      	adds	r3, #37	; 0x25
    3208:	5cc3      	ldrb	r3, [r0, r3]
    320a:	069b      	lsls	r3, r3, #26
    320c:	d435      	bmi.n	327a <USB_Handler+0x42a>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    320e:	05e3      	lsls	r3, r4, #23
    3210:	d50c      	bpl.n	322c <USB_Handler+0x3dc>
			host_pipe_job_busy_status = 0;
    3212:	2200      	movs	r2, #0
    3214:	4b90      	ldr	r3, [pc, #576]	; (3458 <USB_Handler+0x608>)
    3216:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    3218:	4b90      	ldr	r3, [pc, #576]	; (345c <USB_Handler+0x60c>)
    321a:	6818      	ldr	r0, [r3, #0]
    321c:	2380      	movs	r3, #128	; 0x80
    321e:	005b      	lsls	r3, r3, #1
    3220:	6802      	ldr	r2, [r0, #0]
    3222:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    3224:	3b5b      	subs	r3, #91	; 0x5b
    3226:	5cc3      	ldrb	r3, [r0, r3]
    3228:	065b      	lsls	r3, r3, #25
    322a:	d429      	bmi.n	3280 <USB_Handler+0x430>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    322c:	05a3      	lsls	r3, r4, #22
    322e:	d50d      	bpl.n	324c <USB_Handler+0x3fc>
			host_pipe_job_busy_status = 0;
    3230:	2200      	movs	r2, #0
    3232:	4b89      	ldr	r3, [pc, #548]	; (3458 <USB_Handler+0x608>)
    3234:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    3236:	4b89      	ldr	r3, [pc, #548]	; (345c <USB_Handler+0x60c>)
    3238:	6818      	ldr	r0, [r3, #0]
    323a:	2380      	movs	r3, #128	; 0x80
    323c:	009b      	lsls	r3, r3, #2
    323e:	6802      	ldr	r2, [r0, #0]
    3240:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    3242:	3b5c      	subs	r3, #92	; 0x5c
    3244:	3bff      	subs	r3, #255	; 0xff
    3246:	5cc3      	ldrb	r3, [r0, r3]
    3248:	2b7f      	cmp	r3, #127	; 0x7f
    324a:	d81c      	bhi.n	3286 <USB_Handler+0x436>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    324c:	b003      	add	sp, #12
    324e:	bc3c      	pop	{r2, r3, r4, r5}
    3250:	4690      	mov	r8, r2
    3252:	4699      	mov	r9, r3
    3254:	46a2      	mov	sl, r4
    3256:	46ab      	mov	fp, r5
    3258:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    325a:	687b      	ldr	r3, [r7, #4]
    325c:	0038      	movs	r0, r7
    325e:	4798      	blx	r3
    3260:	e798      	b.n	3194 <USB_Handler+0x344>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    3262:	6883      	ldr	r3, [r0, #8]
    3264:	4798      	blx	r3
    3266:	e7a3      	b.n	31b0 <USB_Handler+0x360>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    3268:	6943      	ldr	r3, [r0, #20]
    326a:	4798      	blx	r3
    326c:	e7ab      	b.n	31c6 <USB_Handler+0x376>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    326e:	6903      	ldr	r3, [r0, #16]
    3270:	4798      	blx	r3
    3272:	e7b3      	b.n	31dc <USB_Handler+0x38c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    3274:	68c3      	ldr	r3, [r0, #12]
    3276:	4798      	blx	r3
    3278:	e7bb      	b.n	31f2 <USB_Handler+0x3a2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    327a:	6983      	ldr	r3, [r0, #24]
    327c:	4798      	blx	r3
    327e:	e7c6      	b.n	320e <USB_Handler+0x3be>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    3280:	69c3      	ldr	r3, [r0, #28]
    3282:	4798      	blx	r3
    3284:	e7d2      	b.n	322c <USB_Handler+0x3dc>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    3286:	6a03      	ldr	r3, [r0, #32]
    3288:	4798      	blx	r3
    328a:	e7df      	b.n	324c <USB_Handler+0x3fc>
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    328c:	0023      	movs	r3, r4
    328e:	332e      	adds	r3, #46	; 0x2e
    3290:	009b      	lsls	r3, r3, #2
    3292:	4642      	mov	r2, r8
    3294:	6812      	ldr	r2, [r2, #0]
    3296:	589b      	ldr	r3, [r3, r2]
    3298:	4971      	ldr	r1, [pc, #452]	; (3460 <USB_Handler+0x610>)
    329a:	4642      	mov	r2, r8
    329c:	6810      	ldr	r0, [r2, #0]
    329e:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    32a0:	3401      	adds	r4, #1
    32a2:	2c07      	cmp	r4, #7
    32a4:	d0d2      	beq.n	324c <USB_Handler+0x3fc>
			if (flags & _usb_device_irq_bits[i]) {
    32a6:	0063      	lsls	r3, r4, #1
    32a8:	5bdb      	ldrh	r3, [r3, r7]
    32aa:	4233      	tst	r3, r6
    32ac:	d003      	beq.n	32b6 <USB_Handler+0x466>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    32ae:	464a      	mov	r2, r9
    32b0:	6812      	ldr	r2, [r2, #0]
    32b2:	6812      	ldr	r2, [r2, #0]
    32b4:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    32b6:	422b      	tst	r3, r5
    32b8:	d0f2      	beq.n	32a0 <USB_Handler+0x450>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    32ba:	2c06      	cmp	r4, #6
    32bc:	d1e6      	bne.n	328c <USB_Handler+0x43c>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    32be:	4b69      	ldr	r3, [pc, #420]	; (3464 <USB_Handler+0x614>)
    32c0:	891b      	ldrh	r3, [r3, #8]
    32c2:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    32c4:	2280      	movs	r2, #128	; 0x80
    32c6:	0052      	lsls	r2, r2, #1
    32c8:	4013      	ands	r3, r2
    32ca:	4a65      	ldr	r2, [pc, #404]	; (3460 <USB_Handler+0x610>)
    32cc:	6013      	str	r3, [r2, #0]
    32ce:	e7dd      	b.n	328c <USB_Handler+0x43c>
    32d0:	003c      	movs	r4, r7
    32d2:	3459      	adds	r4, #89	; 0x59
    32d4:	34ff      	adds	r4, #255	; 0xff
	if (0 == ep_inst) {
    32d6:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
    32d8:	2201      	movs	r2, #1
    32da:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    32dc:	325f      	adds	r2, #95	; 0x5f
    32de:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    32e0:	3a50      	subs	r2, #80	; 0x50
    32e2:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    32e4:	3a0d      	subs	r2, #13
    32e6:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    32e8:	46b8      	mov	r8, r7
    32ea:	002f      	movs	r7, r5
    32ec:	e0c3      	b.n	3476 <USB_Handler+0x626>
    32ee:	002a      	movs	r2, r5
    32f0:	003d      	movs	r5, r7
    32f2:	4647      	mov	r7, r8
    32f4:	4690      	mov	r8, r2
    32f6:	015b      	lsls	r3, r3, #5
    32f8:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    32fa:	2308      	movs	r3, #8
    32fc:	33ff      	adds	r3, #255	; 0xff
    32fe:	5ceb      	ldrb	r3, [r5, r3]
    3300:	065b      	lsls	r3, r3, #25
    3302:	d515      	bpl.n	3330 <USB_Handler+0x4e0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    3304:	2240      	movs	r2, #64	; 0x40
    3306:	2308      	movs	r3, #8
    3308:	33ff      	adds	r3, #255	; 0xff
    330a:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    330c:	3b88      	subs	r3, #136	; 0x88
    330e:	3bff      	subs	r3, #255	; 0xff
    3310:	4642      	mov	r2, r8
    3312:	4313      	orrs	r3, r2
    3314:	4a54      	ldr	r2, [pc, #336]	; (3468 <USB_Handler+0x618>)
    3316:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    3318:	2360      	movs	r3, #96	; 0x60
    331a:	420b      	tst	r3, r1
    331c:	d096      	beq.n	324c <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    331e:	9b01      	ldr	r3, [sp, #4]
    3320:	011b      	lsls	r3, r3, #4
    3322:	18fb      	adds	r3, r7, r3
    3324:	33e0      	adds	r3, #224	; 0xe0
    3326:	681b      	ldr	r3, [r3, #0]
    3328:	494f      	ldr	r1, [pc, #316]	; (3468 <USB_Handler+0x618>)
    332a:	0038      	movs	r0, r7
    332c:	4798      	blx	r3
    332e:	e78d      	b.n	324c <USB_Handler+0x3fc>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    3330:	2308      	movs	r3, #8
    3332:	33ff      	adds	r3, #255	; 0xff
    3334:	5ceb      	ldrb	r3, [r5, r3]
    3336:	069b      	lsls	r3, r3, #26
    3338:	d5ee      	bpl.n	3318 <USB_Handler+0x4c8>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    333a:	2220      	movs	r2, #32
    333c:	2308      	movs	r3, #8
    333e:	33ff      	adds	r3, #255	; 0xff
    3340:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    3342:	4b49      	ldr	r3, [pc, #292]	; (3468 <USB_Handler+0x618>)
    3344:	4642      	mov	r2, r8
    3346:	719a      	strb	r2, [r3, #6]
    3348:	e7e6      	b.n	3318 <USB_Handler+0x4c8>
    334a:	003d      	movs	r5, r7
    334c:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    334e:	9a01      	ldr	r2, [sp, #4]
    3350:	0013      	movs	r3, r2
    3352:	3308      	adds	r3, #8
    3354:	015b      	lsls	r3, r3, #5
    3356:	18ed      	adds	r5, r5, r3
    3358:	2310      	movs	r3, #16
    335a:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    335c:	18bb      	adds	r3, r7, r2
    335e:	3361      	adds	r3, #97	; 0x61
    3360:	33ff      	adds	r3, #255	; 0xff
    3362:	781b      	ldrb	r3, [r3, #0]
    3364:	06db      	lsls	r3, r3, #27
    3366:	d400      	bmi.n	336a <USB_Handler+0x51a>
    3368:	e770      	b.n	324c <USB_Handler+0x3fc>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    336a:	0010      	movs	r0, r2
    336c:	0152      	lsls	r2, r2, #5
    336e:	4b3d      	ldr	r3, [pc, #244]	; (3464 <USB_Handler+0x614>)
    3370:	189b      	adds	r3, r3, r2
    3372:	685b      	ldr	r3, [r3, #4]
    3374:	049b      	lsls	r3, r3, #18
    3376:	0c9b      	lsrs	r3, r3, #18
    3378:	493b      	ldr	r1, [pc, #236]	; (3468 <USB_Handler+0x618>)
    337a:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    337c:	0103      	lsls	r3, r0, #4
    337e:	18fb      	adds	r3, r7, r3
    3380:	33dc      	adds	r3, #220	; 0xdc
    3382:	681b      	ldr	r3, [r3, #0]
    3384:	4640      	mov	r0, r8
    3386:	4798      	blx	r3
    3388:	e760      	b.n	324c <USB_Handler+0x3fc>
    338a:	002a      	movs	r2, r5
    338c:	003d      	movs	r5, r7
    338e:	4647      	mov	r7, r8
    3390:	4690      	mov	r8, r2
    3392:	015b      	lsls	r3, r3, #5
    3394:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    3396:	2308      	movs	r3, #8
    3398:	33ff      	adds	r3, #255	; 0xff
    339a:	5ceb      	ldrb	r3, [r5, r3]
    339c:	079b      	lsls	r3, r3, #30
    339e:	d51e      	bpl.n	33de <USB_Handler+0x58e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    33a0:	2202      	movs	r2, #2
    33a2:	2308      	movs	r3, #8
    33a4:	33ff      	adds	r3, #255	; 0xff
    33a6:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    33a8:	482f      	ldr	r0, [pc, #188]	; (3468 <USB_Handler+0x618>)
    33aa:	3b88      	subs	r3, #136	; 0x88
    33ac:	3bff      	subs	r3, #255	; 0xff
    33ae:	4642      	mov	r2, r8
    33b0:	4313      	orrs	r3, r2
    33b2:	7183      	strb	r3, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    33b4:	9b01      	ldr	r3, [sp, #4]
    33b6:	015a      	lsls	r2, r3, #5
    33b8:	4b2a      	ldr	r3, [pc, #168]	; (3464 <USB_Handler+0x614>)
    33ba:	189b      	adds	r3, r3, r2
    33bc:	3310      	adds	r3, #16
    33be:	685b      	ldr	r3, [r3, #4]
    33c0:	049b      	lsls	r3, r3, #18
    33c2:	0c9b      	lsrs	r3, r3, #18
    33c4:	8043      	strh	r3, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    33c6:	078b      	lsls	r3, r1, #30
    33c8:	d100      	bne.n	33cc <USB_Handler+0x57c>
    33ca:	e73f      	b.n	324c <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    33cc:	9b01      	ldr	r3, [sp, #4]
    33ce:	330d      	adds	r3, #13
    33d0:	011b      	lsls	r3, r3, #4
    33d2:	18fb      	adds	r3, r7, r3
    33d4:	685b      	ldr	r3, [r3, #4]
    33d6:	4924      	ldr	r1, [pc, #144]	; (3468 <USB_Handler+0x618>)
    33d8:	0038      	movs	r0, r7
    33da:	4798      	blx	r3
    33dc:	e736      	b.n	324c <USB_Handler+0x3fc>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    33de:	2308      	movs	r3, #8
    33e0:	33ff      	adds	r3, #255	; 0xff
    33e2:	5ceb      	ldrb	r3, [r5, r3]
    33e4:	07db      	lsls	r3, r3, #31
    33e6:	d5ee      	bpl.n	33c6 <USB_Handler+0x576>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    33e8:	2201      	movs	r2, #1
    33ea:	2308      	movs	r3, #8
    33ec:	33ff      	adds	r3, #255	; 0xff
    33ee:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    33f0:	481d      	ldr	r0, [pc, #116]	; (3468 <USB_Handler+0x618>)
    33f2:	4643      	mov	r3, r8
    33f4:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    33f6:	9b01      	ldr	r3, [sp, #4]
    33f8:	015b      	lsls	r3, r3, #5
    33fa:	4a1a      	ldr	r2, [pc, #104]	; (3464 <USB_Handler+0x614>)
    33fc:	18d2      	adds	r2, r2, r3
    33fe:	6853      	ldr	r3, [r2, #4]
    3400:	049b      	lsls	r3, r3, #18
    3402:	0c9b      	lsrs	r3, r3, #18
    3404:	8003      	strh	r3, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    3406:	6853      	ldr	r3, [r2, #4]
    3408:	011b      	lsls	r3, r3, #4
    340a:	0c9b      	lsrs	r3, r3, #18
    340c:	8083      	strh	r3, [r0, #4]
    340e:	e7da      	b.n	33c6 <USB_Handler+0x576>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    3410:	2208      	movs	r2, #8
    3412:	32ff      	adds	r2, #255	; 0xff
    3414:	5c9a      	ldrb	r2, [r3, r2]
    3416:	0752      	lsls	r2, r2, #29
    3418:	d579      	bpl.n	350e <USB_Handler+0x6be>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    341a:	2004      	movs	r0, #4
    341c:	2208      	movs	r2, #8
    341e:	32ff      	adds	r2, #255	; 0xff
    3420:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    3422:	9801      	ldr	r0, [sp, #4]
    3424:	0142      	lsls	r2, r0, #5
    3426:	4b0f      	ldr	r3, [pc, #60]	; (3464 <USB_Handler+0x614>)
    3428:	189b      	adds	r3, r3, r2
    342a:	7a9b      	ldrb	r3, [r3, #10]
    342c:	079b      	lsls	r3, r3, #30
    342e:	d505      	bpl.n	343c <USB_Handler+0x5ec>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    3430:	4b0c      	ldr	r3, [pc, #48]	; (3464 <USB_Handler+0x614>)
    3432:	189b      	adds	r3, r3, r2
    3434:	7a9a      	ldrb	r2, [r3, #10]
    3436:	2002      	movs	r0, #2
    3438:	4382      	bics	r2, r0
    343a:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    343c:	4b0a      	ldr	r3, [pc, #40]	; (3468 <USB_Handler+0x618>)
    343e:	4642      	mov	r2, r8
    3440:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    3442:	9b01      	ldr	r3, [sp, #4]
    3444:	3308      	adds	r3, #8
    3446:	015b      	lsls	r3, r3, #5
    3448:	683a      	ldr	r2, [r7, #0]
    344a:	4694      	mov	ip, r2
    344c:	4463      	add	r3, ip
    344e:	79db      	ldrb	r3, [r3, #7]
    3450:	07db      	lsls	r3, r3, #31
    3452:	d55c      	bpl.n	350e <USB_Handler+0x6be>
    3454:	e6fa      	b.n	324c <USB_Handler+0x3fc>
    3456:	46c0      	nop			; (mov r8, r8)
    3458:	200001c4 	.word	0x200001c4
    345c:	200001b4 	.word	0x200001b4
    3460:	200001b8 	.word	0x200001b8
    3464:	20000414 	.word	0x20000414
    3468:	200001bc 	.word	0x200001bc
    346c:	3301      	adds	r3, #1
    346e:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    3470:	2b08      	cmp	r3, #8
    3472:	d100      	bne.n	3476 <USB_Handler+0x626>
    3474:	e6ea      	b.n	324c <USB_Handler+0x3fc>
    3476:	b2dd      	uxtb	r5, r3
			if (ep_inst & (1 << i)) {
    3478:	9301      	str	r3, [sp, #4]
    347a:	0032      	movs	r2, r6
    347c:	411a      	asrs	r2, r3
    347e:	4661      	mov	r1, ip
    3480:	4211      	tst	r1, r2
    3482:	d0f3      	beq.n	346c <USB_Handler+0x61c>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    3484:	001a      	movs	r2, r3
    3486:	3208      	adds	r2, #8
    3488:	0152      	lsls	r2, r2, #5
    348a:	18ba      	adds	r2, r7, r2
    348c:	79d2      	ldrb	r2, [r2, #7]
    348e:	b2d2      	uxtb	r2, r2
    3490:	7a21      	ldrb	r1, [r4, #8]
    3492:	4011      	ands	r1, r2
    3494:	7820      	ldrb	r0, [r4, #0]
    3496:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    3498:	4648      	mov	r0, r9
    349a:	4210      	tst	r0, r2
    349c:	d000      	beq.n	34a0 <USB_Handler+0x650>
    349e:	e726      	b.n	32ee <USB_Handler+0x49e>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    34a0:	4650      	mov	r0, sl
    34a2:	4210      	tst	r0, r2
    34a4:	d000      	beq.n	34a8 <USB_Handler+0x658>
    34a6:	e750      	b.n	334a <USB_Handler+0x4fa>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    34a8:	4658      	mov	r0, fp
    34aa:	4210      	tst	r0, r2
    34ac:	d000      	beq.n	34b0 <USB_Handler+0x660>
    34ae:	e76c      	b.n	338a <USB_Handler+0x53a>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    34b0:	200c      	movs	r0, #12
    34b2:	4210      	tst	r0, r2
    34b4:	d0da      	beq.n	346c <USB_Handler+0x61c>
    34b6:	002a      	movs	r2, r5
    34b8:	003d      	movs	r5, r7
    34ba:	4647      	mov	r7, r8
    34bc:	4690      	mov	r8, r2
    34be:	015b      	lsls	r3, r3, #5
    34c0:	18eb      	adds	r3, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    34c2:	2208      	movs	r2, #8
    34c4:	32ff      	adds	r2, #255	; 0xff
    34c6:	5c9a      	ldrb	r2, [r3, r2]
    34c8:	0712      	lsls	r2, r2, #28
    34ca:	d5a1      	bpl.n	3410 <USB_Handler+0x5c0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    34cc:	3804      	subs	r0, #4
    34ce:	2208      	movs	r2, #8
    34d0:	32ff      	adds	r2, #255	; 0xff
    34d2:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    34d4:	9801      	ldr	r0, [sp, #4]
    34d6:	0142      	lsls	r2, r0, #5
    34d8:	4b13      	ldr	r3, [pc, #76]	; (3528 <USB_Handler+0x6d8>)
    34da:	189b      	adds	r3, r3, r2
    34dc:	7e9b      	ldrb	r3, [r3, #26]
    34de:	079b      	lsls	r3, r3, #30
    34e0:	d505      	bpl.n	34ee <USB_Handler+0x69e>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    34e2:	4b11      	ldr	r3, [pc, #68]	; (3528 <USB_Handler+0x6d8>)
    34e4:	189b      	adds	r3, r3, r2
    34e6:	7e9a      	ldrb	r2, [r3, #26]
    34e8:	2002      	movs	r0, #2
    34ea:	4382      	bics	r2, r0
    34ec:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    34ee:	2380      	movs	r3, #128	; 0x80
    34f0:	425b      	negs	r3, r3
    34f2:	4642      	mov	r2, r8
    34f4:	4313      	orrs	r3, r2
    34f6:	4a0d      	ldr	r2, [pc, #52]	; (352c <USB_Handler+0x6dc>)
    34f8:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    34fa:	9b01      	ldr	r3, [sp, #4]
    34fc:	3308      	adds	r3, #8
    34fe:	015b      	lsls	r3, r3, #5
    3500:	683a      	ldr	r2, [r7, #0]
    3502:	4694      	mov	ip, r2
    3504:	4463      	add	r3, ip
    3506:	79db      	ldrb	r3, [r3, #7]
    3508:	079b      	lsls	r3, r3, #30
    350a:	d500      	bpl.n	350e <USB_Handler+0x6be>
    350c:	e69e      	b.n	324c <USB_Handler+0x3fc>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    350e:	230c      	movs	r3, #12
    3510:	420b      	tst	r3, r1
    3512:	d100      	bne.n	3516 <USB_Handler+0x6c6>
    3514:	e69a      	b.n	324c <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    3516:	9b01      	ldr	r3, [sp, #4]
    3518:	011b      	lsls	r3, r3, #4
    351a:	18fb      	adds	r3, r7, r3
    351c:	33d8      	adds	r3, #216	; 0xd8
    351e:	681b      	ldr	r3, [r3, #0]
    3520:	4902      	ldr	r1, [pc, #8]	; (352c <USB_Handler+0x6dc>)
    3522:	0038      	movs	r0, r7
    3524:	4798      	blx	r3
    3526:	e691      	b.n	324c <USB_Handler+0x3fc>
    3528:	20000414 	.word	0x20000414
    352c:	200001bc 	.word	0x200001bc

00003530 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    3530:	2200      	movs	r2, #0
    3532:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    3534:	2301      	movs	r3, #1
    3536:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    3538:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    353a:	70c3      	strb	r3, [r0, #3]
}
    353c:	4770      	bx	lr
	...

00003540 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    3540:	b5f0      	push	{r4, r5, r6, r7, lr}
    3542:	46ce      	mov	lr, r9
    3544:	4647      	mov	r7, r8
    3546:	b580      	push	{r7, lr}
    3548:	b083      	sub	sp, #12
    354a:	0004      	movs	r4, r0
    354c:	000d      	movs	r5, r1
    354e:	0016      	movs	r6, r2
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    3550:	2300      	movs	r3, #0
    3552:	4a6e      	ldr	r2, [pc, #440]	; (370c <usb_init+0x1cc>)
    3554:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    3556:	4a6e      	ldr	r2, [pc, #440]	; (3710 <usb_init+0x1d0>)
    3558:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    355a:	6021      	str	r1, [r4, #0]
			PM->APBBMASK.reg |= mask;
    355c:	496d      	ldr	r1, [pc, #436]	; (3714 <usb_init+0x1d4>)
    355e:	69ca      	ldr	r2, [r1, #28]
    3560:	2020      	movs	r0, #32
    3562:	4302      	orrs	r2, r0
    3564:	61ca      	str	r2, [r1, #28]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3566:	af01      	add	r7, sp, #4
    3568:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    356a:	2201      	movs	r2, #1
    356c:	70ba      	strb	r2, [r7, #2]
	config->powersave    = false;
    356e:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    3570:	3306      	adds	r3, #6
    3572:	4699      	mov	r9, r3
    3574:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    3576:	0039      	movs	r1, r7
    3578:	3808      	subs	r0, #8
    357a:	4b67      	ldr	r3, [pc, #412]	; (3718 <usb_init+0x1d8>)
    357c:	4698      	mov	r8, r3
    357e:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    3580:	464b      	mov	r3, r9
    3582:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    3584:	0039      	movs	r1, r7
    3586:	2019      	movs	r0, #25
    3588:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    358a:	78b3      	ldrb	r3, [r6, #2]
    358c:	466a      	mov	r2, sp
    358e:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    3590:	4669      	mov	r1, sp
    3592:	2006      	movs	r0, #6
    3594:	4b61      	ldr	r3, [pc, #388]	; (371c <usb_init+0x1dc>)
    3596:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    3598:	2006      	movs	r0, #6
    359a:	4b61      	ldr	r3, [pc, #388]	; (3720 <usb_init+0x1e0>)
    359c:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    359e:	782b      	ldrb	r3, [r5, #0]
    35a0:	2201      	movs	r2, #1
    35a2:	4313      	orrs	r3, r2
    35a4:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    35a6:	78ab      	ldrb	r3, [r5, #2]
    35a8:	07db      	lsls	r3, r3, #31
    35aa:	d4fc      	bmi.n	35a6 <usb_init+0x66>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    35ac:	4a5d      	ldr	r2, [pc, #372]	; (3724 <usb_init+0x1e4>)
    35ae:	78d3      	ldrb	r3, [r2, #3]
    35b0:	2103      	movs	r1, #3
    35b2:	438b      	bics	r3, r1
    35b4:	2102      	movs	r1, #2
    35b6:	430b      	orrs	r3, r1
    35b8:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    35ba:	78d3      	ldrb	r3, [r2, #3]
    35bc:	210c      	movs	r1, #12
    35be:	438b      	bics	r3, r1
    35c0:	2108      	movs	r1, #8
    35c2:	430b      	orrs	r3, r1
    35c4:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    35c6:	4b58      	ldr	r3, [pc, #352]	; (3728 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    35c8:	681b      	ldr	r3, [r3, #0]
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    35ca:	039b      	lsls	r3, r3, #14
    35cc:	0edb      	lsrs	r3, r3, #27
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    35ce:	2b1f      	cmp	r3, #31
    35d0:	d100      	bne.n	35d4 <usb_init+0x94>
    35d2:	e08f      	b.n	36f4 <usb_init+0x1b4>
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    35d4:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    35d6:	019b      	lsls	r3, r3, #6
    35d8:	4954      	ldr	r1, [pc, #336]	; (372c <usb_init+0x1ec>)
    35da:	400a      	ands	r2, r1
    35dc:	4313      	orrs	r3, r2
    35de:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    35e0:	4b51      	ldr	r3, [pc, #324]	; (3728 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    35e2:	681b      	ldr	r3, [r3, #0]
    35e4:	025b      	lsls	r3, r3, #9
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    35e6:	0edb      	lsrs	r3, r3, #27
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    35e8:	2b1f      	cmp	r3, #31
    35ea:	d100      	bne.n	35ee <usb_init+0xae>
    35ec:	e084      	b.n	36f8 <usb_init+0x1b8>
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    35ee:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    35f0:	211f      	movs	r1, #31
    35f2:	438a      	bics	r2, r1
    35f4:	4313      	orrs	r3, r2
    35f6:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    35f8:	4b4b      	ldr	r3, [pc, #300]	; (3728 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    35fa:	681b      	ldr	r3, [r3, #0]
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    35fc:	019b      	lsls	r3, r3, #6
    35fe:	0f5b      	lsrs	r3, r3, #29
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    3600:	2b07      	cmp	r3, #7
    3602:	d100      	bne.n	3606 <usb_init+0xc6>
    3604:	e07a      	b.n	36fc <usb_init+0x1bc>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    3606:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    3608:	031b      	lsls	r3, r3, #12
    360a:	4949      	ldr	r1, [pc, #292]	; (3730 <usb_init+0x1f0>)
    360c:	400a      	ands	r2, r1
    360e:	4313      	orrs	r3, r2
    3610:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    3612:	7832      	ldrb	r2, [r6, #0]
    3614:	7829      	ldrb	r1, [r5, #0]
    3616:	01d2      	lsls	r2, r2, #7
    3618:	237f      	movs	r3, #127	; 0x7f
    361a:	400b      	ands	r3, r1
    361c:	4313      	orrs	r3, r2
    361e:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    3620:	7871      	ldrb	r1, [r6, #1]
    3622:	782b      	ldrb	r3, [r5, #0]
    3624:	2201      	movs	r2, #1
    3626:	400a      	ands	r2, r1
    3628:	0092      	lsls	r2, r2, #2
    362a:	2104      	movs	r1, #4
    362c:	438b      	bics	r3, r1
    362e:	4313      	orrs	r3, r2
    3630:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    3632:	4b40      	ldr	r3, [pc, #256]	; (3734 <usb_init+0x1f4>)
    3634:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    3636:	78f3      	ldrb	r3, [r6, #3]
    3638:	2b01      	cmp	r3, #1
    363a:	d061      	beq.n	3700 <usb_init+0x1c0>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    363c:	2b00      	cmp	r3, #0
    363e:	d106      	bne.n	364e <usb_init+0x10e>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    3640:	6822      	ldr	r2, [r4, #0]
    3642:	8913      	ldrh	r3, [r2, #8]
    3644:	210c      	movs	r1, #12
    3646:	438b      	bics	r3, r1
    3648:	2104      	movs	r1, #4
    364a:	430b      	orrs	r3, r1
    364c:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    364e:	2280      	movs	r2, #128	; 0x80
    3650:	0052      	lsls	r2, r2, #1
    3652:	2100      	movs	r1, #0
    3654:	4837      	ldr	r0, [pc, #220]	; (3734 <usb_init+0x1f4>)
    3656:	4b38      	ldr	r3, [pc, #224]	; (3738 <usb_init+0x1f8>)
    3658:	4798      	blx	r3
    365a:	1d23      	adds	r3, r4, #4
    365c:	0021      	movs	r1, r4
    365e:	3124      	adds	r1, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    3660:	2200      	movs	r2, #0
    3662:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    3664:	428b      	cmp	r3, r1
    3666:	d1fc      	bne.n	3662 <usb_init+0x122>
    3668:	0021      	movs	r1, r4
    366a:	31a4      	adds	r1, #164	; 0xa4
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    366c:	2200      	movs	r2, #0
    366e:	601a      	str	r2, [r3, #0]
    3670:	605a      	str	r2, [r3, #4]
    3672:	609a      	str	r2, [r3, #8]
    3674:	60da      	str	r2, [r3, #12]
    3676:	3310      	adds	r3, #16
	for (i = 0; i < USB_PIPE_NUM; i++) {
    3678:	428b      	cmp	r3, r1
    367a:	d1f8      	bne.n	366e <usb_init+0x12e>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    367c:	2300      	movs	r3, #0
    367e:	22a4      	movs	r2, #164	; 0xa4
    3680:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    3682:	3201      	adds	r2, #1
    3684:	54a3      	strb	r3, [r4, r2]
    3686:	0023      	movs	r3, r4
    3688:	33a6      	adds	r3, #166	; 0xa6
    368a:	0021      	movs	r1, r4
    368c:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    368e:	2200      	movs	r2, #0
    3690:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    3692:	721a      	strb	r2, [r3, #8]
    3694:	3301      	adds	r3, #1
	for (i = 0; i < USB_PIPE_NUM; i++) {
    3696:	4299      	cmp	r1, r3
    3698:	d1fa      	bne.n	3690 <usb_init+0x150>
    369a:	0023      	movs	r3, r4
    369c:	33b8      	adds	r3, #184	; 0xb8
    369e:	0021      	movs	r1, r4
    36a0:	31d4      	adds	r1, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    36a2:	2200      	movs	r2, #0
    36a4:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    36a6:	428b      	cmp	r3, r1
    36a8:	d1fc      	bne.n	36a4 <usb_init+0x164>
    36aa:	0021      	movs	r1, r4
    36ac:	3155      	adds	r1, #85	; 0x55
    36ae:	31ff      	adds	r1, #255	; 0xff
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    36b0:	2200      	movs	r2, #0
    36b2:	601a      	str	r2, [r3, #0]
    36b4:	605a      	str	r2, [r3, #4]
    36b6:	609a      	str	r2, [r3, #8]
    36b8:	60da      	str	r2, [r3, #12]
    36ba:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
    36bc:	428b      	cmp	r3, r1
    36be:	d1f8      	bne.n	36b2 <usb_init+0x172>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    36c0:	2300      	movs	r3, #0
    36c2:	22aa      	movs	r2, #170	; 0xaa
    36c4:	0052      	lsls	r2, r2, #1
    36c6:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    36c8:	3202      	adds	r2, #2
    36ca:	52a3      	strh	r3, [r4, r2]
    36cc:	0023      	movs	r3, r4
    36ce:	3359      	adds	r3, #89	; 0x59
    36d0:	33ff      	adds	r3, #255	; 0xff
    36d2:	3461      	adds	r4, #97	; 0x61
    36d4:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    36d6:	2200      	movs	r2, #0
    36d8:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    36da:	721a      	strb	r2, [r3, #8]
    36dc:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
    36de:	42a3      	cmp	r3, r4
    36e0:	d1fa      	bne.n	36d8 <usb_init+0x198>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    36e2:	2280      	movs	r2, #128	; 0x80
    36e4:	4b15      	ldr	r3, [pc, #84]	; (373c <usb_init+0x1fc>)
    36e6:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    36e8:	2000      	movs	r0, #0
    36ea:	b003      	add	sp, #12
    36ec:	bc0c      	pop	{r2, r3}
    36ee:	4690      	mov	r8, r2
    36f0:	4699      	mov	r9, r3
    36f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pad_transn = 5;
    36f4:	3b1a      	subs	r3, #26
    36f6:	e76d      	b.n	35d4 <usb_init+0x94>
		pad_transp = 29;
    36f8:	3b02      	subs	r3, #2
    36fa:	e778      	b.n	35ee <usb_init+0xae>
		pad_trim = 3;
    36fc:	3b04      	subs	r3, #4
    36fe:	e782      	b.n	3606 <usb_init+0xc6>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    3700:	6822      	ldr	r2, [r4, #0]
    3702:	8913      	ldrh	r3, [r2, #8]
    3704:	3108      	adds	r1, #8
    3706:	438b      	bics	r3, r1
    3708:	8113      	strh	r3, [r2, #8]
    370a:	e7a0      	b.n	364e <usb_init+0x10e>
    370c:	200001c4 	.word	0x200001c4
    3710:	200001b4 	.word	0x200001b4
    3714:	40000400 	.word	0x40000400
    3718:	00001a85 	.word	0x00001a85
    371c:	0000198d 	.word	0x0000198d
    3720:	00001901 	.word	0x00001901
    3724:	41005000 	.word	0x41005000
    3728:	00806024 	.word	0x00806024
    372c:	fffff83f 	.word	0xfffff83f
    3730:	ffff8fff 	.word	0xffff8fff
    3734:	20000414 	.word	0x20000414
    3738:	00003ed3 	.word	0x00003ed3
    373c:	e000e100 	.word	0xe000e100

00003740 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    3740:	e7fe      	b.n	3740 <Dummy_Handler>
	...

00003744 <Reset_Handler>:
{
    3744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    3746:	4a2a      	ldr	r2, [pc, #168]	; (37f0 <Reset_Handler+0xac>)
    3748:	4b2a      	ldr	r3, [pc, #168]	; (37f4 <Reset_Handler+0xb0>)
    374a:	429a      	cmp	r2, r3
    374c:	d011      	beq.n	3772 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    374e:	001a      	movs	r2, r3
    3750:	4b29      	ldr	r3, [pc, #164]	; (37f8 <Reset_Handler+0xb4>)
    3752:	429a      	cmp	r2, r3
    3754:	d20d      	bcs.n	3772 <Reset_Handler+0x2e>
    3756:	4a29      	ldr	r2, [pc, #164]	; (37fc <Reset_Handler+0xb8>)
    3758:	3303      	adds	r3, #3
    375a:	1a9b      	subs	r3, r3, r2
    375c:	089b      	lsrs	r3, r3, #2
    375e:	3301      	adds	r3, #1
    3760:	009b      	lsls	r3, r3, #2
    3762:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    3764:	4823      	ldr	r0, [pc, #140]	; (37f4 <Reset_Handler+0xb0>)
    3766:	4922      	ldr	r1, [pc, #136]	; (37f0 <Reset_Handler+0xac>)
    3768:	588c      	ldr	r4, [r1, r2]
    376a:	5084      	str	r4, [r0, r2]
    376c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    376e:	429a      	cmp	r2, r3
    3770:	d1fa      	bne.n	3768 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    3772:	4a23      	ldr	r2, [pc, #140]	; (3800 <Reset_Handler+0xbc>)
    3774:	4b23      	ldr	r3, [pc, #140]	; (3804 <Reset_Handler+0xc0>)
    3776:	429a      	cmp	r2, r3
    3778:	d20a      	bcs.n	3790 <Reset_Handler+0x4c>
    377a:	43d3      	mvns	r3, r2
    377c:	4921      	ldr	r1, [pc, #132]	; (3804 <Reset_Handler+0xc0>)
    377e:	185b      	adds	r3, r3, r1
    3780:	2103      	movs	r1, #3
    3782:	438b      	bics	r3, r1
    3784:	3304      	adds	r3, #4
    3786:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    3788:	2100      	movs	r1, #0
    378a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    378c:	4293      	cmp	r3, r2
    378e:	d1fc      	bne.n	378a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3790:	4a1d      	ldr	r2, [pc, #116]	; (3808 <Reset_Handler+0xc4>)
    3792:	21ff      	movs	r1, #255	; 0xff
    3794:	4b1d      	ldr	r3, [pc, #116]	; (380c <Reset_Handler+0xc8>)
    3796:	438b      	bics	r3, r1
    3798:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    379a:	39fd      	subs	r1, #253	; 0xfd
    379c:	2390      	movs	r3, #144	; 0x90
    379e:	005b      	lsls	r3, r3, #1
    37a0:	4a1b      	ldr	r2, [pc, #108]	; (3810 <Reset_Handler+0xcc>)
    37a2:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    37a4:	4a1b      	ldr	r2, [pc, #108]	; (3814 <Reset_Handler+0xd0>)
    37a6:	78d3      	ldrb	r3, [r2, #3]
    37a8:	2503      	movs	r5, #3
    37aa:	43ab      	bics	r3, r5
    37ac:	2402      	movs	r4, #2
    37ae:	4323      	orrs	r3, r4
    37b0:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    37b2:	78d3      	ldrb	r3, [r2, #3]
    37b4:	270c      	movs	r7, #12
    37b6:	43bb      	bics	r3, r7
    37b8:	2608      	movs	r6, #8
    37ba:	4333      	orrs	r3, r6
    37bc:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    37be:	4b16      	ldr	r3, [pc, #88]	; (3818 <Reset_Handler+0xd4>)
    37c0:	7b98      	ldrb	r0, [r3, #14]
    37c2:	2230      	movs	r2, #48	; 0x30
    37c4:	4390      	bics	r0, r2
    37c6:	2220      	movs	r2, #32
    37c8:	4310      	orrs	r0, r2
    37ca:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    37cc:	7b99      	ldrb	r1, [r3, #14]
    37ce:	43b9      	bics	r1, r7
    37d0:	4331      	orrs	r1, r6
    37d2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    37d4:	7b9a      	ldrb	r2, [r3, #14]
    37d6:	43aa      	bics	r2, r5
    37d8:	4322      	orrs	r2, r4
    37da:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    37dc:	4a0f      	ldr	r2, [pc, #60]	; (381c <Reset_Handler+0xd8>)
    37de:	6853      	ldr	r3, [r2, #4]
    37e0:	2180      	movs	r1, #128	; 0x80
    37e2:	430b      	orrs	r3, r1
    37e4:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    37e6:	4b0e      	ldr	r3, [pc, #56]	; (3820 <Reset_Handler+0xdc>)
    37e8:	4798      	blx	r3
        main();
    37ea:	4b0e      	ldr	r3, [pc, #56]	; (3824 <Reset_Handler+0xe0>)
    37ec:	4798      	blx	r3
    37ee:	e7fe      	b.n	37ee <Reset_Handler+0xaa>
    37f0:	00003f84 	.word	0x00003f84
    37f4:	20000000 	.word	0x20000000
    37f8:	200000fc 	.word	0x200000fc
    37fc:	20000004 	.word	0x20000004
    3800:	200000fc 	.word	0x200000fc
    3804:	20000554 	.word	0x20000554
    3808:	e000ed00 	.word	0xe000ed00
    380c:	00000000 	.word	0x00000000
    3810:	41007000 	.word	0x41007000
    3814:	41005000 	.word	0x41005000
    3818:	41004800 	.word	0x41004800
    381c:	41004000 	.word	0x41004000
    3820:	00003e79 	.word	0x00003e79
    3824:	000039c5 	.word	0x000039c5

00003828 <callback_spi_master>:

volatile bool is_transferring = false;

static void callback_spi_master( struct spi_module *const module)
{
	is_transferring = false;
    3828:	2200      	movs	r2, #0
    382a:	4b01      	ldr	r3, [pc, #4]	; (3830 <callback_spi_master+0x8>)
    382c:	701a      	strb	r2, [r3, #0]
}
    382e:	4770      	bx	lr
    3830:	200001ce 	.word	0x200001ce

00003834 <configure_spi_master_callbacks>:

void configure_spi_master_callbacks(void)
{
    3834:	b510      	push	{r4, lr}
	spi_register_callback(&spi_master_instance, callback_spi_master, SPI_CALLBACK_BUFFER_TRANSCEIVED);
    3836:	4c06      	ldr	r4, [pc, #24]	; (3850 <configure_spi_master_callbacks+0x1c>)
    3838:	2202      	movs	r2, #2
    383a:	4906      	ldr	r1, [pc, #24]	; (3854 <configure_spi_master_callbacks+0x20>)
    383c:	0020      	movs	r0, r4
    383e:	4b06      	ldr	r3, [pc, #24]	; (3858 <configure_spi_master_callbacks+0x24>)
    3840:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback |= (1 << callback_type);
    3842:	2237      	movs	r2, #55	; 0x37
    3844:	5ca3      	ldrb	r3, [r4, r2]
    3846:	2104      	movs	r1, #4
    3848:	430b      	orrs	r3, r1
    384a:	54a3      	strb	r3, [r4, r2]
	spi_enable_callback(&spi_master_instance, SPI_CALLBACK_BUFFER_TRANSCEIVED);
}
    384c:	bd10      	pop	{r4, pc}
    384e:	46c0      	nop			; (mov r8, r8)
    3850:	20000514 	.word	0x20000514
    3854:	00003829 	.word	0x00003829
    3858:	0000123d 	.word	0x0000123d

0000385c <configure_spi_master>:

void configure_spi_master(void)
{
    385c:	b5f0      	push	{r4, r5, r6, r7, lr}
    385e:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    3860:	4c2a      	ldr	r4, [pc, #168]	; (390c <configure_spi_master+0xb0>)
    3862:	2301      	movs	r3, #1
    3864:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    3866:	2200      	movs	r2, #0
    3868:	7062      	strb	r2, [r4, #1]
	slave->address         = config->address;
    386a:	70a2      	strb	r2, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    386c:	a901      	add	r1, sp, #4
    386e:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    3870:	708a      	strb	r2, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    3872:	700b      	strb	r3, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    3874:	2001      	movs	r0, #1
    3876:	4b26      	ldr	r3, [pc, #152]	; (3910 <configure_spi_master+0xb4>)
    3878:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    387a:	7823      	ldrb	r3, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    387c:	09d9      	lsrs	r1, r3, #7
		return NULL;
    387e:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    3880:	2900      	cmp	r1, #0
    3882:	d104      	bne.n	388e <configure_spi_master+0x32>
		return &(ports[port_index]->Group[group_index]);
    3884:	095a      	lsrs	r2, r3, #5
    3886:	01d2      	lsls	r2, r2, #7
    3888:	4922      	ldr	r1, [pc, #136]	; (3914 <configure_spi_master+0xb8>)
    388a:	468c      	mov	ip, r1
    388c:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    388e:	261f      	movs	r6, #31
    3890:	4033      	ands	r3, r6
    3892:	2501      	movs	r5, #1
    3894:	0029      	movs	r1, r5
    3896:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    3898:	6191      	str	r1, [r2, #24]
	config->mode             = SPI_MODE_MASTER;
    389a:	ac02      	add	r4, sp, #8
    389c:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    389e:	2300      	movs	r3, #0
    38a0:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    38a2:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    38a4:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    38a6:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    38a8:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
    38aa:	74e5      	strb	r5, [r4, #19]
	config->master_slave_select_enable= false;
    38ac:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    38ae:	2224      	movs	r2, #36	; 0x24
    38b0:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    38b2:	3a18      	subs	r2, #24
    38b4:	2100      	movs	r1, #0
    38b6:	a808      	add	r0, sp, #32
    38b8:	4b17      	ldr	r3, [pc, #92]	; (3918 <configure_spi_master+0xbc>)
    38ba:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    38bc:	4b17      	ldr	r3, [pc, #92]	; (391c <configure_spi_master+0xc0>)
    38be:	61a3      	str	r3, [r4, #24]
	slave_dev_config.ss_pin = CONF_MASTER_SS_PIN;
	spi_attach_slave(&slave, &slave_dev_config);
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_master);

	config_spi_master.mux_setting = CONF_MASTER_MUX_SETTING;
    38c0:	2380      	movs	r3, #128	; 0x80
    38c2:	025b      	lsls	r3, r3, #9
    38c4:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = CONF_MASTER_PINMUX_PAD0;
    38c6:	2301      	movs	r3, #1
    38c8:	425b      	negs	r3, r3
    38ca:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = CONF_MASTER_PINMUX_PAD1;
    38cc:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = CONF_MASTER_PINMUX_PAD2;
    38ce:	4b14      	ldr	r3, [pc, #80]	; (3920 <configure_spi_master+0xc4>)
    38d0:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = CONF_MASTER_PINMUX_PAD3;
    38d2:	4b14      	ldr	r3, [pc, #80]	; (3924 <configure_spi_master+0xc8>)
    38d4:	6363      	str	r3, [r4, #52]	; 0x34

	spi_init(&spi_master_instance, CONF_MASTER_SPI_MODULE, &config_spi_master);
    38d6:	4f14      	ldr	r7, [pc, #80]	; (3928 <configure_spi_master+0xcc>)
    38d8:	0022      	movs	r2, r4
    38da:	4914      	ldr	r1, [pc, #80]	; (392c <configure_spi_master+0xd0>)
    38dc:	0038      	movs	r0, r7
    38de:	4b14      	ldr	r3, [pc, #80]	; (3930 <configure_spi_master+0xd4>)
    38e0:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    38e2:	683c      	ldr	r4, [r7, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    38e4:	0020      	movs	r0, r4
    38e6:	4b13      	ldr	r3, [pc, #76]	; (3934 <configure_spi_master+0xd8>)
    38e8:	4798      	blx	r3
    38ea:	4006      	ands	r6, r0
    38ec:	40b5      	lsls	r5, r6
    38ee:	4b12      	ldr	r3, [pc, #72]	; (3938 <configure_spi_master+0xdc>)
    38f0:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    38f2:	683a      	ldr	r2, [r7, #0]
	return (spi_module->SYNCBUSY.reg);
    38f4:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    38f6:	2b00      	cmp	r3, #0
    38f8:	d1fc      	bne.n	38f4 <configure_spi_master+0x98>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    38fa:	6823      	ldr	r3, [r4, #0]
    38fc:	2202      	movs	r2, #2
    38fe:	4313      	orrs	r3, r2
    3900:	6023      	str	r3, [r4, #0]

	spi_enable(&spi_master_instance);
	
	configure_spi_master_callbacks();
    3902:	4b0e      	ldr	r3, [pc, #56]	; (393c <configure_spi_master+0xe0>)
    3904:	4798      	blx	r3
}
    3906:	b011      	add	sp, #68	; 0x44
    3908:	bdf0      	pop	{r4, r5, r6, r7, pc}
    390a:	46c0      	nop			; (mov r8, r8)
    390c:	20000550 	.word	0x20000550
    3910:	00000de1 	.word	0x00000de1
    3914:	41004400 	.word	0x41004400
    3918:	00003ed3 	.word	0x00003ed3
    391c:	000186a0 	.word	0x000186a0
    3920:	00060003 	.word	0x00060003
    3924:	00070003 	.word	0x00070003
    3928:	20000514 	.word	0x20000514
    392c:	42000800 	.word	0x42000800
    3930:	00001065 	.word	0x00001065
    3934:	00001001 	.word	0x00001001
    3938:	e000e100 	.word	0xe000e100
    393c:	00003835 	.word	0x00003835

00003940 <setLED>:

static volatile bool main_b_kbd_enable = true;

void setLED(uint8_t index, uint8_t brightness, uint8_t r, uint8_t g, uint8_t b);

void setLED(uint8_t index, uint8_t brightness, uint8_t r, uint8_t g, uint8_t b) {
    3940:	b570      	push	{r4, r5, r6, lr}
    3942:	ac04      	add	r4, sp, #16
    3944:	7826      	ldrb	r6, [r4, #0]
		0x00,
		// end frame 32 bits
		0xff, 0xff, 0xff, 0xff
	}, rd_buffer[16];
	
	uint8_t offset = 4 + 4 * index;
    3946:	3001      	adds	r0, #1
    3948:	0080      	lsls	r0, r0, #2
	wr_buffer[offset + 0] = brightness | 0b11100000;
    394a:	b2c0      	uxtb	r0, r0
    394c:	4c0b      	ldr	r4, [pc, #44]	; (397c <setLED+0x3c>)
    394e:	2520      	movs	r5, #32
    3950:	426d      	negs	r5, r5
    3952:	4329      	orrs	r1, r5
    3954:	5421      	strb	r1, [r4, r0]
	wr_buffer[offset + 1] = b;
    3956:	1820      	adds	r0, r4, r0
    3958:	7046      	strb	r6, [r0, #1]
	wr_buffer[offset + 2] = g;
    395a:	7083      	strb	r3, [r0, #2]
	wr_buffer[offset + 3] = r;
    395c:	70c2      	strb	r2, [r0, #3]
	
	while(is_transferring)  {
    395e:	4a08      	ldr	r2, [pc, #32]	; (3980 <setLED+0x40>)
    3960:	7813      	ldrb	r3, [r2, #0]
    3962:	2b00      	cmp	r3, #0
    3964:	d1fc      	bne.n	3960 <setLED+0x20>
		// wait
	}
	is_transferring = true;
    3966:	2201      	movs	r2, #1
    3968:	4b05      	ldr	r3, [pc, #20]	; (3980 <setLED+0x40>)
    396a:	701a      	strb	r2, [r3, #0]
	spi_transceive_buffer_job(&spi_master_instance, wr_buffer,rd_buffer,16);
    396c:	2310      	movs	r3, #16
    396e:	4a05      	ldr	r2, [pc, #20]	; (3984 <setLED+0x44>)
    3970:	4902      	ldr	r1, [pc, #8]	; (397c <setLED+0x3c>)
    3972:	4805      	ldr	r0, [pc, #20]	; (3988 <setLED+0x48>)
    3974:	4c05      	ldr	r4, [pc, #20]	; (398c <setLED+0x4c>)
    3976:	47a0      	blx	r4
}
    3978:	bd70      	pop	{r4, r5, r6, pc}
    397a:	46c0      	nop			; (mov r8, r8)
    397c:	200000dc 	.word	0x200000dc
    3980:	200001ce 	.word	0x200001ce
    3984:	200001d0 	.word	0x200001d0
    3988:	20000514 	.word	0x20000514
    398c:	00001255 	.word	0x00001255

00003990 <clearLEDs>:

void clearLEDs() {
    3990:	b510      	push	{r4, lr}
		0x00,
		// end frame 32 bits
		0xff, 0xff, 0xff, 0xff
	}, rd_buffer[16];

	while(is_transferring)  {
    3992:	4a07      	ldr	r2, [pc, #28]	; (39b0 <clearLEDs+0x20>)
    3994:	7813      	ldrb	r3, [r2, #0]
    3996:	2b00      	cmp	r3, #0
    3998:	d1fc      	bne.n	3994 <clearLEDs+0x4>
		// wait
	}
	is_transferring = true;		
    399a:	2201      	movs	r2, #1
    399c:	4b04      	ldr	r3, [pc, #16]	; (39b0 <clearLEDs+0x20>)
    399e:	701a      	strb	r2, [r3, #0]
	spi_transceive_buffer_job(&spi_master_instance, wr_buffer,rd_buffer,16);
    39a0:	2310      	movs	r3, #16
    39a2:	4a04      	ldr	r2, [pc, #16]	; (39b4 <clearLEDs+0x24>)
    39a4:	4904      	ldr	r1, [pc, #16]	; (39b8 <clearLEDs+0x28>)
    39a6:	4805      	ldr	r0, [pc, #20]	; (39bc <clearLEDs+0x2c>)
    39a8:	4c05      	ldr	r4, [pc, #20]	; (39c0 <clearLEDs+0x30>)
    39aa:	47a0      	blx	r4
}
    39ac:	bd10      	pop	{r4, pc}
    39ae:	46c0      	nop			; (mov r8, r8)
    39b0:	200001ce 	.word	0x200001ce
    39b4:	200001e0 	.word	0x200001e0
    39b8:	200000ec 	.word	0x200000ec
    39bc:	20000514 	.word	0x20000514
    39c0:	00001255 	.word	0x00001255

000039c4 <main>:

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
    39c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    39c6:	46de      	mov	lr, fp
    39c8:	4657      	mov	r7, sl
    39ca:	464e      	mov	r6, r9
    39cc:	4645      	mov	r5, r8
    39ce:	b5e0      	push	{r5, r6, r7, lr}
	irq_initialize_vectors();
	cpu_irq_enable();
    39d0:	2101      	movs	r1, #1
    39d2:	4b36      	ldr	r3, [pc, #216]	; (3aac <main+0xe8>)
    39d4:	7019      	strb	r1, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    39d6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    39da:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
    39dc:	4b34      	ldr	r3, [pc, #208]	; (3ab0 <main+0xec>)
    39de:	2200      	movs	r2, #0
    39e0:	701a      	strb	r2, [r3, #0]
    39e2:	705a      	strb	r2, [r3, #1]
    39e4:	709a      	strb	r2, [r3, #2]
    39e6:	70da      	strb	r2, [r3, #3]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    39e8:	7119      	strb	r1, [r3, #4]

#if !SAM0
	sysclk_init();
	board_init();
#else
	system_init();
    39ea:	4b32      	ldr	r3, [pc, #200]	; (3ab4 <main+0xf0>)
    39ec:	4798      	blx	r3
#endif
	configure_spi_master();
    39ee:	4b32      	ldr	r3, [pc, #200]	; (3ab8 <main+0xf4>)
    39f0:	4798      	blx	r3
	clearLEDs();
    39f2:	4b32      	ldr	r3, [pc, #200]	; (3abc <main+0xf8>)
    39f4:	4798      	blx	r3
	ui_init();
    39f6:	4b32      	ldr	r3, [pc, #200]	; (3ac0 <main+0xfc>)
    39f8:	4798      	blx	r3
	ui_powerdown();
    39fa:	4b32      	ldr	r3, [pc, #200]	; (3ac4 <main+0x100>)
    39fc:	4798      	blx	r3

	// Start USB stack to authorize VBus monitoring
	udc_start();
    39fe:	4b32      	ldr	r3, [pc, #200]	; (3ac8 <main+0x104>)
    3a00:	4798      	blx	r3
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    3a02:	4f2a      	ldr	r7, [pc, #168]	; (3aac <main+0xe8>)
    3a04:	2400      	movs	r4, #0
    3a06:	1c26      	adds	r6, r4, #0
	while (!(*lock_ptr)) {
    3a08:	4d29      	ldr	r5, [pc, #164]	; (3ab0 <main+0xec>)

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
		cpu_irq_enable();
    3a0a:	46b8      	mov	r8, r7
    3a0c:	2301      	movs	r3, #1
    3a0e:	469c      	mov	ip, r3

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
    3a10:	46bb      	mov	fp, r7
{

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
    3a12:	4b2e      	ldr	r3, [pc, #184]	; (3acc <main+0x108>)
    3a14:	469a      	mov	sl, r3

	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;
    3a16:	230f      	movs	r3, #15
    3a18:	4699      	mov	r9, r3
    3a1a:	e00e      	b.n	3a3a <main+0x76>
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    3a1c:	0019      	movs	r1, r3
		lock_ptr++;
    3a1e:	3201      	adds	r2, #1
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    3a20:	1c4b      	adds	r3, r1, #1
    3a22:	b2db      	uxtb	r3, r3
	while (!(*lock_ptr)) {
    3a24:	7810      	ldrb	r0, [r2, #0]
    3a26:	2800      	cmp	r0, #0
    3a28:	d0f8      	beq.n	3a1c <main+0x58>
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    3a2a:	2b00      	cmp	r3, #0
    3a2c:	d10f      	bne.n	3a4e <main+0x8a>
		cpu_irq_enable();
    3a2e:	4643      	mov	r3, r8
    3a30:	4662      	mov	r2, ip
    3a32:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    3a34:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3a38:	b662      	cpsie	i
  __ASM volatile ("cpsid i" : : : "memory");
    3a3a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    3a3c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3a40:	703e      	strb	r6, [r7, #0]
	while (!(*lock_ptr)) {
    3a42:	782b      	ldrb	r3, [r5, #0]
    3a44:	2b00      	cmp	r3, #0
    3a46:	d1f2      	bne.n	3a2e <main+0x6a>
    3a48:	0021      	movs	r1, r4
    3a4a:	4a19      	ldr	r2, [pc, #100]	; (3ab0 <main+0xec>)
    3a4c:	e7e7      	b.n	3a1e <main+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
    3a4e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    3a50:	f3bf 8f5f 	dmb	sy
    3a54:	465b      	mov	r3, fp
    3a56:	701c      	strb	r4, [r3, #0]
	uint32_t rev = DSU->DID.reg;
    3a58:	4653      	mov	r3, sl
    3a5a:	699b      	ldr	r3, [r3, #24]
    3a5c:	0a1b      	lsrs	r3, r3, #8
	rev = rev >> DSU_DID_REVISION_Pos;
    3a5e:	464a      	mov	r2, r9
    3a60:	4013      	ands	r3, r2
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
    3a62:	2b02      	cmp	r3, #2
    3a64:	d805      	bhi.n	3a72 <main+0xae>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    3a66:	4a1a      	ldr	r2, [pc, #104]	; (3ad0 <main+0x10c>)
    3a68:	6850      	ldr	r0, [r2, #4]
    3a6a:	23c0      	movs	r3, #192	; 0xc0
    3a6c:	009b      	lsls	r3, r3, #2
    3a6e:	4303      	orrs	r3, r0
    3a70:	6053      	str	r3, [r2, #4]
	}
#endif

#endif

	switch (sleep_mode) {
    3a72:	2902      	cmp	r1, #2
    3a74:	d90b      	bls.n	3a8e <main+0xca>
    3a76:	2903      	cmp	r1, #3
    3a78:	d011      	beq.n	3a9e <main+0xda>

	/* Enter the sleep mode. */
	system_set_sleepmode((enum system_sleepmode)(sleep_mode - 1));
	cpu_irq_enable();
    3a7a:	4b0c      	ldr	r3, [pc, #48]	; (3aac <main+0xe8>)
    3a7c:	4662      	mov	r2, ip
    3a7e:	701a      	strb	r2, [r3, #0]
    3a80:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3a84:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    3a86:	f3bf 8f4f 	dsb	sy
 * \ref system_set_sleepmode until woken by an interrupt.
 */
static inline void system_sleep(void)
{
	__DSB();
	__WFI();
    3a8a:	bf30      	wfi
    3a8c:	e7d5      	b.n	3a3a <main+0x76>
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    3a8e:	4a11      	ldr	r2, [pc, #68]	; (3ad4 <main+0x110>)
    3a90:	6913      	ldr	r3, [r2, #16]
    3a92:	2004      	movs	r0, #4
    3a94:	4383      	bics	r3, r0
    3a96:	6113      	str	r3, [r2, #16]
			PM->SLEEP.reg = sleep_mode;
    3a98:	4b0f      	ldr	r3, [pc, #60]	; (3ad8 <main+0x114>)
    3a9a:	7059      	strb	r1, [r3, #1]
    3a9c:	e7ed      	b.n	3a7a <main+0xb6>
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    3a9e:	4a0d      	ldr	r2, [pc, #52]	; (3ad4 <main+0x110>)
    3aa0:	6913      	ldr	r3, [r2, #16]
    3aa2:	2104      	movs	r1, #4
    3aa4:	430b      	orrs	r3, r1
    3aa6:	6113      	str	r3, [r2, #16]
    3aa8:	e7e7      	b.n	3a7a <main+0xb6>
    3aaa:	46c0      	nop			; (mov r8, r8)
    3aac:	200000da 	.word	0x200000da
    3ab0:	200001f0 	.word	0x200001f0
    3ab4:	00001ab9 	.word	0x00001ab9
    3ab8:	0000385d 	.word	0x0000385d
    3abc:	00003991 	.word	0x00003991
    3ac0:	00000115 	.word	0x00000115
    3ac4:	00000141 	.word	0x00000141
    3ac8:	00000741 	.word	0x00000741
    3acc:	41002000 	.word	0x41002000
    3ad0:	41004000 	.word	0x41004000
    3ad4:	e000ed00 	.word	0xe000ed00
    3ad8:	40000400 	.word	0x40000400

00003adc <main_suspend_action>:
#endif
	}
}

void main_suspend_action(void)
{
    3adc:	b510      	push	{r4, lr}
	ui_powerdown();
    3ade:	4b01      	ldr	r3, [pc, #4]	; (3ae4 <main_suspend_action+0x8>)
    3ae0:	4798      	blx	r3
}
    3ae2:	bd10      	pop	{r4, pc}
    3ae4:	00000141 	.word	0x00000141

00003ae8 <main_resume_action>:

void main_resume_action(void)
{
    3ae8:	b510      	push	{r4, lr}
	ui_wakeup();
    3aea:	4b01      	ldr	r3, [pc, #4]	; (3af0 <main_resume_action+0x8>)
    3aec:	4798      	blx	r3
}
    3aee:	bd10      	pop	{r4, pc}
    3af0:	00000147 	.word	0x00000147

00003af4 <main_sof_action>:

void main_sof_action(void)
{
    3af4:	b510      	push	{r4, lr}
	if (!main_b_kbd_enable)
    3af6:	4b05      	ldr	r3, [pc, #20]	; (3b0c <main_sof_action+0x18>)
    3af8:	781b      	ldrb	r3, [r3, #0]
    3afa:	2b00      	cmp	r3, #0
    3afc:	d100      	bne.n	3b00 <main_sof_action+0xc>
		return;
	ui_process(udd_get_frame_number());
}
    3afe:	bd10      	pop	{r4, pc}
	ui_process(udd_get_frame_number());
    3b00:	4b03      	ldr	r3, [pc, #12]	; (3b10 <main_sof_action+0x1c>)
    3b02:	4798      	blx	r3
    3b04:	4b03      	ldr	r3, [pc, #12]	; (3b14 <main_sof_action+0x20>)
    3b06:	4798      	blx	r3
    3b08:	e7f9      	b.n	3afe <main_sof_action+0xa>
    3b0a:	46c0      	nop			; (mov r8, r8)
    3b0c:	200000db 	.word	0x200000db
    3b10:	0000219d 	.word	0x0000219d
    3b14:	00000149 	.word	0x00000149

00003b18 <main_remotewakeup_enable>:

void main_remotewakeup_enable(void)
{
    3b18:	b510      	push	{r4, lr}
	ui_wakeup_enable();
    3b1a:	4b01      	ldr	r3, [pc, #4]	; (3b20 <main_remotewakeup_enable+0x8>)
    3b1c:	4798      	blx	r3
}
    3b1e:	bd10      	pop	{r4, pc}
    3b20:	00000143 	.word	0x00000143

00003b24 <main_remotewakeup_disable>:

void main_remotewakeup_disable(void)
{
    3b24:	b510      	push	{r4, lr}
	ui_wakeup_disable();
    3b26:	4b01      	ldr	r3, [pc, #4]	; (3b2c <main_remotewakeup_disable+0x8>)
    3b28:	4798      	blx	r3
}
    3b2a:	bd10      	pop	{r4, pc}
    3b2c:	00000145 	.word	0x00000145

00003b30 <main_kbd_enable>:

bool main_kbd_enable(void)
{
	main_b_kbd_enable = true;
    3b30:	2201      	movs	r2, #1
    3b32:	4b02      	ldr	r3, [pc, #8]	; (3b3c <main_kbd_enable+0xc>)
    3b34:	701a      	strb	r2, [r3, #0]
	return true;
}
    3b36:	2001      	movs	r0, #1
    3b38:	4770      	bx	lr
    3b3a:	46c0      	nop			; (mov r8, r8)
    3b3c:	200000db 	.word	0x200000db

00003b40 <main_kbd_disable>:

void main_kbd_disable(void)
{
	main_b_kbd_enable = false;
    3b40:	2200      	movs	r2, #0
    3b42:	4b01      	ldr	r3, [pc, #4]	; (3b48 <main_kbd_disable+0x8>)
    3b44:	701a      	strb	r2, [r3, #0]
}
    3b46:	4770      	bx	lr
    3b48:	200000db 	.word	0x200000db

00003b4c <__udivsi3>:
    3b4c:	2200      	movs	r2, #0
    3b4e:	0843      	lsrs	r3, r0, #1
    3b50:	428b      	cmp	r3, r1
    3b52:	d374      	bcc.n	3c3e <__udivsi3+0xf2>
    3b54:	0903      	lsrs	r3, r0, #4
    3b56:	428b      	cmp	r3, r1
    3b58:	d35f      	bcc.n	3c1a <__udivsi3+0xce>
    3b5a:	0a03      	lsrs	r3, r0, #8
    3b5c:	428b      	cmp	r3, r1
    3b5e:	d344      	bcc.n	3bea <__udivsi3+0x9e>
    3b60:	0b03      	lsrs	r3, r0, #12
    3b62:	428b      	cmp	r3, r1
    3b64:	d328      	bcc.n	3bb8 <__udivsi3+0x6c>
    3b66:	0c03      	lsrs	r3, r0, #16
    3b68:	428b      	cmp	r3, r1
    3b6a:	d30d      	bcc.n	3b88 <__udivsi3+0x3c>
    3b6c:	22ff      	movs	r2, #255	; 0xff
    3b6e:	0209      	lsls	r1, r1, #8
    3b70:	ba12      	rev	r2, r2
    3b72:	0c03      	lsrs	r3, r0, #16
    3b74:	428b      	cmp	r3, r1
    3b76:	d302      	bcc.n	3b7e <__udivsi3+0x32>
    3b78:	1212      	asrs	r2, r2, #8
    3b7a:	0209      	lsls	r1, r1, #8
    3b7c:	d065      	beq.n	3c4a <__udivsi3+0xfe>
    3b7e:	0b03      	lsrs	r3, r0, #12
    3b80:	428b      	cmp	r3, r1
    3b82:	d319      	bcc.n	3bb8 <__udivsi3+0x6c>
    3b84:	e000      	b.n	3b88 <__udivsi3+0x3c>
    3b86:	0a09      	lsrs	r1, r1, #8
    3b88:	0bc3      	lsrs	r3, r0, #15
    3b8a:	428b      	cmp	r3, r1
    3b8c:	d301      	bcc.n	3b92 <__udivsi3+0x46>
    3b8e:	03cb      	lsls	r3, r1, #15
    3b90:	1ac0      	subs	r0, r0, r3
    3b92:	4152      	adcs	r2, r2
    3b94:	0b83      	lsrs	r3, r0, #14
    3b96:	428b      	cmp	r3, r1
    3b98:	d301      	bcc.n	3b9e <__udivsi3+0x52>
    3b9a:	038b      	lsls	r3, r1, #14
    3b9c:	1ac0      	subs	r0, r0, r3
    3b9e:	4152      	adcs	r2, r2
    3ba0:	0b43      	lsrs	r3, r0, #13
    3ba2:	428b      	cmp	r3, r1
    3ba4:	d301      	bcc.n	3baa <__udivsi3+0x5e>
    3ba6:	034b      	lsls	r3, r1, #13
    3ba8:	1ac0      	subs	r0, r0, r3
    3baa:	4152      	adcs	r2, r2
    3bac:	0b03      	lsrs	r3, r0, #12
    3bae:	428b      	cmp	r3, r1
    3bb0:	d301      	bcc.n	3bb6 <__udivsi3+0x6a>
    3bb2:	030b      	lsls	r3, r1, #12
    3bb4:	1ac0      	subs	r0, r0, r3
    3bb6:	4152      	adcs	r2, r2
    3bb8:	0ac3      	lsrs	r3, r0, #11
    3bba:	428b      	cmp	r3, r1
    3bbc:	d301      	bcc.n	3bc2 <__udivsi3+0x76>
    3bbe:	02cb      	lsls	r3, r1, #11
    3bc0:	1ac0      	subs	r0, r0, r3
    3bc2:	4152      	adcs	r2, r2
    3bc4:	0a83      	lsrs	r3, r0, #10
    3bc6:	428b      	cmp	r3, r1
    3bc8:	d301      	bcc.n	3bce <__udivsi3+0x82>
    3bca:	028b      	lsls	r3, r1, #10
    3bcc:	1ac0      	subs	r0, r0, r3
    3bce:	4152      	adcs	r2, r2
    3bd0:	0a43      	lsrs	r3, r0, #9
    3bd2:	428b      	cmp	r3, r1
    3bd4:	d301      	bcc.n	3bda <__udivsi3+0x8e>
    3bd6:	024b      	lsls	r3, r1, #9
    3bd8:	1ac0      	subs	r0, r0, r3
    3bda:	4152      	adcs	r2, r2
    3bdc:	0a03      	lsrs	r3, r0, #8
    3bde:	428b      	cmp	r3, r1
    3be0:	d301      	bcc.n	3be6 <__udivsi3+0x9a>
    3be2:	020b      	lsls	r3, r1, #8
    3be4:	1ac0      	subs	r0, r0, r3
    3be6:	4152      	adcs	r2, r2
    3be8:	d2cd      	bcs.n	3b86 <__udivsi3+0x3a>
    3bea:	09c3      	lsrs	r3, r0, #7
    3bec:	428b      	cmp	r3, r1
    3bee:	d301      	bcc.n	3bf4 <__udivsi3+0xa8>
    3bf0:	01cb      	lsls	r3, r1, #7
    3bf2:	1ac0      	subs	r0, r0, r3
    3bf4:	4152      	adcs	r2, r2
    3bf6:	0983      	lsrs	r3, r0, #6
    3bf8:	428b      	cmp	r3, r1
    3bfa:	d301      	bcc.n	3c00 <__udivsi3+0xb4>
    3bfc:	018b      	lsls	r3, r1, #6
    3bfe:	1ac0      	subs	r0, r0, r3
    3c00:	4152      	adcs	r2, r2
    3c02:	0943      	lsrs	r3, r0, #5
    3c04:	428b      	cmp	r3, r1
    3c06:	d301      	bcc.n	3c0c <__udivsi3+0xc0>
    3c08:	014b      	lsls	r3, r1, #5
    3c0a:	1ac0      	subs	r0, r0, r3
    3c0c:	4152      	adcs	r2, r2
    3c0e:	0903      	lsrs	r3, r0, #4
    3c10:	428b      	cmp	r3, r1
    3c12:	d301      	bcc.n	3c18 <__udivsi3+0xcc>
    3c14:	010b      	lsls	r3, r1, #4
    3c16:	1ac0      	subs	r0, r0, r3
    3c18:	4152      	adcs	r2, r2
    3c1a:	08c3      	lsrs	r3, r0, #3
    3c1c:	428b      	cmp	r3, r1
    3c1e:	d301      	bcc.n	3c24 <__udivsi3+0xd8>
    3c20:	00cb      	lsls	r3, r1, #3
    3c22:	1ac0      	subs	r0, r0, r3
    3c24:	4152      	adcs	r2, r2
    3c26:	0883      	lsrs	r3, r0, #2
    3c28:	428b      	cmp	r3, r1
    3c2a:	d301      	bcc.n	3c30 <__udivsi3+0xe4>
    3c2c:	008b      	lsls	r3, r1, #2
    3c2e:	1ac0      	subs	r0, r0, r3
    3c30:	4152      	adcs	r2, r2
    3c32:	0843      	lsrs	r3, r0, #1
    3c34:	428b      	cmp	r3, r1
    3c36:	d301      	bcc.n	3c3c <__udivsi3+0xf0>
    3c38:	004b      	lsls	r3, r1, #1
    3c3a:	1ac0      	subs	r0, r0, r3
    3c3c:	4152      	adcs	r2, r2
    3c3e:	1a41      	subs	r1, r0, r1
    3c40:	d200      	bcs.n	3c44 <__udivsi3+0xf8>
    3c42:	4601      	mov	r1, r0
    3c44:	4152      	adcs	r2, r2
    3c46:	4610      	mov	r0, r2
    3c48:	4770      	bx	lr
    3c4a:	e7ff      	b.n	3c4c <__udivsi3+0x100>
    3c4c:	b501      	push	{r0, lr}
    3c4e:	2000      	movs	r0, #0
    3c50:	f000 f8f0 	bl	3e34 <__aeabi_idiv0>
    3c54:	bd02      	pop	{r1, pc}
    3c56:	46c0      	nop			; (mov r8, r8)

00003c58 <__aeabi_uidivmod>:
    3c58:	2900      	cmp	r1, #0
    3c5a:	d0f7      	beq.n	3c4c <__udivsi3+0x100>
    3c5c:	e776      	b.n	3b4c <__udivsi3>
    3c5e:	4770      	bx	lr

00003c60 <__divsi3>:
    3c60:	4603      	mov	r3, r0
    3c62:	430b      	orrs	r3, r1
    3c64:	d47f      	bmi.n	3d66 <__divsi3+0x106>
    3c66:	2200      	movs	r2, #0
    3c68:	0843      	lsrs	r3, r0, #1
    3c6a:	428b      	cmp	r3, r1
    3c6c:	d374      	bcc.n	3d58 <__divsi3+0xf8>
    3c6e:	0903      	lsrs	r3, r0, #4
    3c70:	428b      	cmp	r3, r1
    3c72:	d35f      	bcc.n	3d34 <__divsi3+0xd4>
    3c74:	0a03      	lsrs	r3, r0, #8
    3c76:	428b      	cmp	r3, r1
    3c78:	d344      	bcc.n	3d04 <__divsi3+0xa4>
    3c7a:	0b03      	lsrs	r3, r0, #12
    3c7c:	428b      	cmp	r3, r1
    3c7e:	d328      	bcc.n	3cd2 <__divsi3+0x72>
    3c80:	0c03      	lsrs	r3, r0, #16
    3c82:	428b      	cmp	r3, r1
    3c84:	d30d      	bcc.n	3ca2 <__divsi3+0x42>
    3c86:	22ff      	movs	r2, #255	; 0xff
    3c88:	0209      	lsls	r1, r1, #8
    3c8a:	ba12      	rev	r2, r2
    3c8c:	0c03      	lsrs	r3, r0, #16
    3c8e:	428b      	cmp	r3, r1
    3c90:	d302      	bcc.n	3c98 <__divsi3+0x38>
    3c92:	1212      	asrs	r2, r2, #8
    3c94:	0209      	lsls	r1, r1, #8
    3c96:	d065      	beq.n	3d64 <__divsi3+0x104>
    3c98:	0b03      	lsrs	r3, r0, #12
    3c9a:	428b      	cmp	r3, r1
    3c9c:	d319      	bcc.n	3cd2 <__divsi3+0x72>
    3c9e:	e000      	b.n	3ca2 <__divsi3+0x42>
    3ca0:	0a09      	lsrs	r1, r1, #8
    3ca2:	0bc3      	lsrs	r3, r0, #15
    3ca4:	428b      	cmp	r3, r1
    3ca6:	d301      	bcc.n	3cac <__divsi3+0x4c>
    3ca8:	03cb      	lsls	r3, r1, #15
    3caa:	1ac0      	subs	r0, r0, r3
    3cac:	4152      	adcs	r2, r2
    3cae:	0b83      	lsrs	r3, r0, #14
    3cb0:	428b      	cmp	r3, r1
    3cb2:	d301      	bcc.n	3cb8 <__divsi3+0x58>
    3cb4:	038b      	lsls	r3, r1, #14
    3cb6:	1ac0      	subs	r0, r0, r3
    3cb8:	4152      	adcs	r2, r2
    3cba:	0b43      	lsrs	r3, r0, #13
    3cbc:	428b      	cmp	r3, r1
    3cbe:	d301      	bcc.n	3cc4 <__divsi3+0x64>
    3cc0:	034b      	lsls	r3, r1, #13
    3cc2:	1ac0      	subs	r0, r0, r3
    3cc4:	4152      	adcs	r2, r2
    3cc6:	0b03      	lsrs	r3, r0, #12
    3cc8:	428b      	cmp	r3, r1
    3cca:	d301      	bcc.n	3cd0 <__divsi3+0x70>
    3ccc:	030b      	lsls	r3, r1, #12
    3cce:	1ac0      	subs	r0, r0, r3
    3cd0:	4152      	adcs	r2, r2
    3cd2:	0ac3      	lsrs	r3, r0, #11
    3cd4:	428b      	cmp	r3, r1
    3cd6:	d301      	bcc.n	3cdc <__divsi3+0x7c>
    3cd8:	02cb      	lsls	r3, r1, #11
    3cda:	1ac0      	subs	r0, r0, r3
    3cdc:	4152      	adcs	r2, r2
    3cde:	0a83      	lsrs	r3, r0, #10
    3ce0:	428b      	cmp	r3, r1
    3ce2:	d301      	bcc.n	3ce8 <__divsi3+0x88>
    3ce4:	028b      	lsls	r3, r1, #10
    3ce6:	1ac0      	subs	r0, r0, r3
    3ce8:	4152      	adcs	r2, r2
    3cea:	0a43      	lsrs	r3, r0, #9
    3cec:	428b      	cmp	r3, r1
    3cee:	d301      	bcc.n	3cf4 <__divsi3+0x94>
    3cf0:	024b      	lsls	r3, r1, #9
    3cf2:	1ac0      	subs	r0, r0, r3
    3cf4:	4152      	adcs	r2, r2
    3cf6:	0a03      	lsrs	r3, r0, #8
    3cf8:	428b      	cmp	r3, r1
    3cfa:	d301      	bcc.n	3d00 <__divsi3+0xa0>
    3cfc:	020b      	lsls	r3, r1, #8
    3cfe:	1ac0      	subs	r0, r0, r3
    3d00:	4152      	adcs	r2, r2
    3d02:	d2cd      	bcs.n	3ca0 <__divsi3+0x40>
    3d04:	09c3      	lsrs	r3, r0, #7
    3d06:	428b      	cmp	r3, r1
    3d08:	d301      	bcc.n	3d0e <__divsi3+0xae>
    3d0a:	01cb      	lsls	r3, r1, #7
    3d0c:	1ac0      	subs	r0, r0, r3
    3d0e:	4152      	adcs	r2, r2
    3d10:	0983      	lsrs	r3, r0, #6
    3d12:	428b      	cmp	r3, r1
    3d14:	d301      	bcc.n	3d1a <__divsi3+0xba>
    3d16:	018b      	lsls	r3, r1, #6
    3d18:	1ac0      	subs	r0, r0, r3
    3d1a:	4152      	adcs	r2, r2
    3d1c:	0943      	lsrs	r3, r0, #5
    3d1e:	428b      	cmp	r3, r1
    3d20:	d301      	bcc.n	3d26 <__divsi3+0xc6>
    3d22:	014b      	lsls	r3, r1, #5
    3d24:	1ac0      	subs	r0, r0, r3
    3d26:	4152      	adcs	r2, r2
    3d28:	0903      	lsrs	r3, r0, #4
    3d2a:	428b      	cmp	r3, r1
    3d2c:	d301      	bcc.n	3d32 <__divsi3+0xd2>
    3d2e:	010b      	lsls	r3, r1, #4
    3d30:	1ac0      	subs	r0, r0, r3
    3d32:	4152      	adcs	r2, r2
    3d34:	08c3      	lsrs	r3, r0, #3
    3d36:	428b      	cmp	r3, r1
    3d38:	d301      	bcc.n	3d3e <__divsi3+0xde>
    3d3a:	00cb      	lsls	r3, r1, #3
    3d3c:	1ac0      	subs	r0, r0, r3
    3d3e:	4152      	adcs	r2, r2
    3d40:	0883      	lsrs	r3, r0, #2
    3d42:	428b      	cmp	r3, r1
    3d44:	d301      	bcc.n	3d4a <__divsi3+0xea>
    3d46:	008b      	lsls	r3, r1, #2
    3d48:	1ac0      	subs	r0, r0, r3
    3d4a:	4152      	adcs	r2, r2
    3d4c:	0843      	lsrs	r3, r0, #1
    3d4e:	428b      	cmp	r3, r1
    3d50:	d301      	bcc.n	3d56 <__divsi3+0xf6>
    3d52:	004b      	lsls	r3, r1, #1
    3d54:	1ac0      	subs	r0, r0, r3
    3d56:	4152      	adcs	r2, r2
    3d58:	1a41      	subs	r1, r0, r1
    3d5a:	d200      	bcs.n	3d5e <__divsi3+0xfe>
    3d5c:	4601      	mov	r1, r0
    3d5e:	4152      	adcs	r2, r2
    3d60:	4610      	mov	r0, r2
    3d62:	4770      	bx	lr
    3d64:	e05d      	b.n	3e22 <__divsi3+0x1c2>
    3d66:	0fca      	lsrs	r2, r1, #31
    3d68:	d000      	beq.n	3d6c <__divsi3+0x10c>
    3d6a:	4249      	negs	r1, r1
    3d6c:	1003      	asrs	r3, r0, #32
    3d6e:	d300      	bcc.n	3d72 <__divsi3+0x112>
    3d70:	4240      	negs	r0, r0
    3d72:	4053      	eors	r3, r2
    3d74:	2200      	movs	r2, #0
    3d76:	469c      	mov	ip, r3
    3d78:	0903      	lsrs	r3, r0, #4
    3d7a:	428b      	cmp	r3, r1
    3d7c:	d32d      	bcc.n	3dda <__divsi3+0x17a>
    3d7e:	0a03      	lsrs	r3, r0, #8
    3d80:	428b      	cmp	r3, r1
    3d82:	d312      	bcc.n	3daa <__divsi3+0x14a>
    3d84:	22fc      	movs	r2, #252	; 0xfc
    3d86:	0189      	lsls	r1, r1, #6
    3d88:	ba12      	rev	r2, r2
    3d8a:	0a03      	lsrs	r3, r0, #8
    3d8c:	428b      	cmp	r3, r1
    3d8e:	d30c      	bcc.n	3daa <__divsi3+0x14a>
    3d90:	0189      	lsls	r1, r1, #6
    3d92:	1192      	asrs	r2, r2, #6
    3d94:	428b      	cmp	r3, r1
    3d96:	d308      	bcc.n	3daa <__divsi3+0x14a>
    3d98:	0189      	lsls	r1, r1, #6
    3d9a:	1192      	asrs	r2, r2, #6
    3d9c:	428b      	cmp	r3, r1
    3d9e:	d304      	bcc.n	3daa <__divsi3+0x14a>
    3da0:	0189      	lsls	r1, r1, #6
    3da2:	d03a      	beq.n	3e1a <__divsi3+0x1ba>
    3da4:	1192      	asrs	r2, r2, #6
    3da6:	e000      	b.n	3daa <__divsi3+0x14a>
    3da8:	0989      	lsrs	r1, r1, #6
    3daa:	09c3      	lsrs	r3, r0, #7
    3dac:	428b      	cmp	r3, r1
    3dae:	d301      	bcc.n	3db4 <__divsi3+0x154>
    3db0:	01cb      	lsls	r3, r1, #7
    3db2:	1ac0      	subs	r0, r0, r3
    3db4:	4152      	adcs	r2, r2
    3db6:	0983      	lsrs	r3, r0, #6
    3db8:	428b      	cmp	r3, r1
    3dba:	d301      	bcc.n	3dc0 <__divsi3+0x160>
    3dbc:	018b      	lsls	r3, r1, #6
    3dbe:	1ac0      	subs	r0, r0, r3
    3dc0:	4152      	adcs	r2, r2
    3dc2:	0943      	lsrs	r3, r0, #5
    3dc4:	428b      	cmp	r3, r1
    3dc6:	d301      	bcc.n	3dcc <__divsi3+0x16c>
    3dc8:	014b      	lsls	r3, r1, #5
    3dca:	1ac0      	subs	r0, r0, r3
    3dcc:	4152      	adcs	r2, r2
    3dce:	0903      	lsrs	r3, r0, #4
    3dd0:	428b      	cmp	r3, r1
    3dd2:	d301      	bcc.n	3dd8 <__divsi3+0x178>
    3dd4:	010b      	lsls	r3, r1, #4
    3dd6:	1ac0      	subs	r0, r0, r3
    3dd8:	4152      	adcs	r2, r2
    3dda:	08c3      	lsrs	r3, r0, #3
    3ddc:	428b      	cmp	r3, r1
    3dde:	d301      	bcc.n	3de4 <__divsi3+0x184>
    3de0:	00cb      	lsls	r3, r1, #3
    3de2:	1ac0      	subs	r0, r0, r3
    3de4:	4152      	adcs	r2, r2
    3de6:	0883      	lsrs	r3, r0, #2
    3de8:	428b      	cmp	r3, r1
    3dea:	d301      	bcc.n	3df0 <__divsi3+0x190>
    3dec:	008b      	lsls	r3, r1, #2
    3dee:	1ac0      	subs	r0, r0, r3
    3df0:	4152      	adcs	r2, r2
    3df2:	d2d9      	bcs.n	3da8 <__divsi3+0x148>
    3df4:	0843      	lsrs	r3, r0, #1
    3df6:	428b      	cmp	r3, r1
    3df8:	d301      	bcc.n	3dfe <__divsi3+0x19e>
    3dfa:	004b      	lsls	r3, r1, #1
    3dfc:	1ac0      	subs	r0, r0, r3
    3dfe:	4152      	adcs	r2, r2
    3e00:	1a41      	subs	r1, r0, r1
    3e02:	d200      	bcs.n	3e06 <__divsi3+0x1a6>
    3e04:	4601      	mov	r1, r0
    3e06:	4663      	mov	r3, ip
    3e08:	4152      	adcs	r2, r2
    3e0a:	105b      	asrs	r3, r3, #1
    3e0c:	4610      	mov	r0, r2
    3e0e:	d301      	bcc.n	3e14 <__divsi3+0x1b4>
    3e10:	4240      	negs	r0, r0
    3e12:	2b00      	cmp	r3, #0
    3e14:	d500      	bpl.n	3e18 <__divsi3+0x1b8>
    3e16:	4249      	negs	r1, r1
    3e18:	4770      	bx	lr
    3e1a:	4663      	mov	r3, ip
    3e1c:	105b      	asrs	r3, r3, #1
    3e1e:	d300      	bcc.n	3e22 <__divsi3+0x1c2>
    3e20:	4240      	negs	r0, r0
    3e22:	b501      	push	{r0, lr}
    3e24:	2000      	movs	r0, #0
    3e26:	f000 f805 	bl	3e34 <__aeabi_idiv0>
    3e2a:	bd02      	pop	{r1, pc}

00003e2c <__aeabi_idivmod>:
    3e2c:	2900      	cmp	r1, #0
    3e2e:	d0f8      	beq.n	3e22 <__divsi3+0x1c2>
    3e30:	e716      	b.n	3c60 <__divsi3>
    3e32:	4770      	bx	lr

00003e34 <__aeabi_idiv0>:
    3e34:	4770      	bx	lr
    3e36:	46c0      	nop			; (mov r8, r8)

00003e38 <__ctzsi2>:
    3e38:	4241      	negs	r1, r0
    3e3a:	4008      	ands	r0, r1
    3e3c:	211c      	movs	r1, #28
    3e3e:	2301      	movs	r3, #1
    3e40:	041b      	lsls	r3, r3, #16
    3e42:	4298      	cmp	r0, r3
    3e44:	d301      	bcc.n	3e4a <__ctzsi2+0x12>
    3e46:	0c00      	lsrs	r0, r0, #16
    3e48:	3910      	subs	r1, #16
    3e4a:	0a1b      	lsrs	r3, r3, #8
    3e4c:	4298      	cmp	r0, r3
    3e4e:	d301      	bcc.n	3e54 <__ctzsi2+0x1c>
    3e50:	0a00      	lsrs	r0, r0, #8
    3e52:	3908      	subs	r1, #8
    3e54:	091b      	lsrs	r3, r3, #4
    3e56:	4298      	cmp	r0, r3
    3e58:	d301      	bcc.n	3e5e <__ctzsi2+0x26>
    3e5a:	0900      	lsrs	r0, r0, #4
    3e5c:	3904      	subs	r1, #4
    3e5e:	a202      	add	r2, pc, #8	; (adr r2, 3e68 <__ctzsi2+0x30>)
    3e60:	5c10      	ldrb	r0, [r2, r0]
    3e62:	1a40      	subs	r0, r0, r1
    3e64:	4770      	bx	lr
    3e66:	46c0      	nop			; (mov r8, r8)
    3e68:	1d1d1c1b 	.word	0x1d1d1c1b
    3e6c:	1e1e1e1e 	.word	0x1e1e1e1e
    3e70:	1f1f1f1f 	.word	0x1f1f1f1f
    3e74:	1f1f1f1f 	.word	0x1f1f1f1f

00003e78 <__libc_init_array>:
    3e78:	b570      	push	{r4, r5, r6, lr}
    3e7a:	2600      	movs	r6, #0
    3e7c:	4d0c      	ldr	r5, [pc, #48]	; (3eb0 <__libc_init_array+0x38>)
    3e7e:	4c0d      	ldr	r4, [pc, #52]	; (3eb4 <__libc_init_array+0x3c>)
    3e80:	1b64      	subs	r4, r4, r5
    3e82:	10a4      	asrs	r4, r4, #2
    3e84:	42a6      	cmp	r6, r4
    3e86:	d109      	bne.n	3e9c <__libc_init_array+0x24>
    3e88:	2600      	movs	r6, #0
    3e8a:	f000 f86b 	bl	3f64 <_init>
    3e8e:	4d0a      	ldr	r5, [pc, #40]	; (3eb8 <__libc_init_array+0x40>)
    3e90:	4c0a      	ldr	r4, [pc, #40]	; (3ebc <__libc_init_array+0x44>)
    3e92:	1b64      	subs	r4, r4, r5
    3e94:	10a4      	asrs	r4, r4, #2
    3e96:	42a6      	cmp	r6, r4
    3e98:	d105      	bne.n	3ea6 <__libc_init_array+0x2e>
    3e9a:	bd70      	pop	{r4, r5, r6, pc}
    3e9c:	00b3      	lsls	r3, r6, #2
    3e9e:	58eb      	ldr	r3, [r5, r3]
    3ea0:	4798      	blx	r3
    3ea2:	3601      	adds	r6, #1
    3ea4:	e7ee      	b.n	3e84 <__libc_init_array+0xc>
    3ea6:	00b3      	lsls	r3, r6, #2
    3ea8:	58eb      	ldr	r3, [r5, r3]
    3eaa:	4798      	blx	r3
    3eac:	3601      	adds	r6, #1
    3eae:	e7f2      	b.n	3e96 <__libc_init_array+0x1e>
    3eb0:	00003f70 	.word	0x00003f70
    3eb4:	00003f70 	.word	0x00003f70
    3eb8:	00003f70 	.word	0x00003f70
    3ebc:	00003f74 	.word	0x00003f74

00003ec0 <memcpy>:
    3ec0:	2300      	movs	r3, #0
    3ec2:	b510      	push	{r4, lr}
    3ec4:	429a      	cmp	r2, r3
    3ec6:	d100      	bne.n	3eca <memcpy+0xa>
    3ec8:	bd10      	pop	{r4, pc}
    3eca:	5ccc      	ldrb	r4, [r1, r3]
    3ecc:	54c4      	strb	r4, [r0, r3]
    3ece:	3301      	adds	r3, #1
    3ed0:	e7f8      	b.n	3ec4 <memcpy+0x4>

00003ed2 <memset>:
    3ed2:	0003      	movs	r3, r0
    3ed4:	1882      	adds	r2, r0, r2
    3ed6:	4293      	cmp	r3, r2
    3ed8:	d100      	bne.n	3edc <memset+0xa>
    3eda:	4770      	bx	lr
    3edc:	7019      	strb	r1, [r3, #0]
    3ede:	3301      	adds	r3, #1
    3ee0:	e7f9      	b.n	3ed6 <memset+0x4>
    3ee2:	0000      	movs	r0, r0
    3ee4:	42000800 	.word	0x42000800
    3ee8:	42000c00 	.word	0x42000c00
    3eec:	42001000 	.word	0x42001000
    3ef0:	42001400 	.word	0x42001400
    3ef4:	0000146e 	.word	0x0000146e
    3ef8:	0000146a 	.word	0x0000146a
    3efc:	0000146a 	.word	0x0000146a
    3f00:	000014d0 	.word	0x000014d0
    3f04:	000014d0 	.word	0x000014d0
    3f08:	00001482 	.word	0x00001482
    3f0c:	00001474 	.word	0x00001474
    3f10:	00001488 	.word	0x00001488
    3f14:	000014be 	.word	0x000014be
    3f18:	000015d8 	.word	0x000015d8
    3f1c:	000015b8 	.word	0x000015b8
    3f20:	000015b8 	.word	0x000015b8
    3f24:	00001644 	.word	0x00001644
    3f28:	000015ca 	.word	0x000015ca
    3f2c:	000015e6 	.word	0x000015e6
    3f30:	000015bc 	.word	0x000015bc
    3f34:	000015f4 	.word	0x000015f4
    3f38:	00001634 	.word	0x00001634
    3f3c:	00002a30 	.word	0x00002a30
    3f40:	00002a3e 	.word	0x00002a3e
    3f44:	00002ad8 	.word	0x00002ad8
    3f48:	00002b78 	.word	0x00002b78
    3f4c:	00002bdc 	.word	0x00002bdc

00003f50 <_usb_device_irq_bits>:
    3f50:	00080004 00800070 01000001 00000200     ....p...........

00003f60 <_usb_endpoint_irq_bits>:
    3f60:	60100c03                                ...`

00003f64 <_init>:
    3f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f66:	46c0      	nop			; (mov r8, r8)
    3f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3f6a:	bc08      	pop	{r3}
    3f6c:	469e      	mov	lr, r3
    3f6e:	4770      	bx	lr

00003f70 <__init_array_start>:
    3f70:	000000dd 	.word	0x000000dd

00003f74 <_fini>:
    3f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f76:	46c0      	nop			; (mov r8, r8)
    3f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3f7a:	bc08      	pop	{r3}
    3f7c:	469e      	mov	lr, r3
    3f7e:	4770      	bx	lr

00003f80 <__fini_array_start>:
    3f80:	000000b5 	.word	0x000000b5
