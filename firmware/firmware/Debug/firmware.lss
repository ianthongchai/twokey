
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000035b4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000dc  20000000  000035b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003d0  200000dc  00003690  000200dc  2**2
                  ALLOC
  3 .stack        00002004  200004ac  00003a60  000200dc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
  6 .debug_info   00027e1a  00000000  00000000  0002015d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003f9c  00000000  00000000  00047f77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005cb7  00000000  00000000  0004bf13  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000006f0  00000000  00000000  00051bca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000007c0  00000000  00000000  000522ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001be40  00000000  00000000  00052a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000dbae  00000000  00000000  0006e8ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008b682  00000000  00000000  0007c468  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001148  00000000  00000000  00107aec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b0 24 00 20 55 2f 00 00 51 2f 00 00 51 2f 00 00     .$. U/..Q/..Q/..
	...
      2c:	51 2f 00 00 00 00 00 00 00 00 00 00 51 2f 00 00     Q/..........Q/..
      3c:	51 2f 00 00 51 2f 00 00 51 2f 00 00 51 2f 00 00     Q/..Q/..Q/..Q/..
      4c:	51 2f 00 00 c5 0c 00 00 51 2f 00 00 51 2f 00 00     Q/......Q/..Q/..
      5c:	61 26 00 00 51 2f 00 00 51 2f 00 00 51 2f 00 00     a&..Q/..Q/..Q/..
      6c:	51 2f 00 00 51 2f 00 00 00 00 00 00 00 00 00 00     Q/..Q/..........
      7c:	51 2f 00 00 51 2f 00 00 51 2f 00 00 51 2f 00 00     Q/..Q/..Q/..Q/..
      8c:	51 2f 00 00 51 2f 00 00 00 00 00 00 00 00 00 00     Q/..Q/..........
      9c:	51 2f 00 00 51 2f 00 00 51 2f 00 00 51 2f 00 00     Q/..Q/..Q/..Q/..
      ac:	51 2f 00 00 00 00 00 00                             Q/......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000dc 	.word	0x200000dc
      d4:	00000000 	.word	0x00000000
      d8:	000035b4 	.word	0x000035b4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000e0 	.word	0x200000e0
     108:	000035b4 	.word	0x000035b4
     10c:	000035b4 	.word	0x000035b4
     110:	00000000 	.word	0x00000000

00000114 <ui_init>:

#include <asf.h>
#include "ui.h"

void ui_init(void)
{
     114:	b530      	push	{r4, r5, lr}
     116:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     118:	ac01      	add	r4, sp, #4
     11a:	2300      	movs	r3, #0
     11c:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     11e:	2201      	movs	r2, #1
     120:	7062      	strb	r2, [r4, #1]
	config->powersave  = false;
     122:	70a3      	strb	r3, [r4, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(BUTTON_0_PIN, &config_port_pin);
     124:	0021      	movs	r1, r4
     126:	200e      	movs	r0, #14
     128:	4d04      	ldr	r5, [pc, #16]	; (13c <ui_init+0x28>)
     12a:	47a8      	blx	r5
	port_pin_set_config(BUTTON_1_PIN, &config_port_pin); 
     12c:	0021      	movs	r1, r4
     12e:	200f      	movs	r0, #15
     130:	47a8      	blx	r5
	port_pin_set_config(PIN_PA00, &config_port_pin); 
     132:	0021      	movs	r1, r4
     134:	2000      	movs	r0, #0
     136:	47a8      	blx	r5
}
     138:	b003      	add	sp, #12
     13a:	bd30      	pop	{r4, r5, pc}
     13c:	00000d9d 	.word	0x00000d9d

00000140 <ui_powerdown>:

void ui_powerdown(void)
{
	//LED_Off(LED_0_PIN);
}
     140:	4770      	bx	lr

00000142 <ui_wakeup_enable>:

void ui_wakeup_enable(void)
{
	//extint_chan_enable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
	//extint_chan_enable_callback(BUTTON_1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
}
     142:	4770      	bx	lr

00000144 <ui_wakeup_disable>:

void ui_wakeup_disable(void)
{
	//extint_chan_disable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
	//extint_chan_disable_callback(BUTTON_1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
}
     144:	4770      	bx	lr

00000146 <ui_wakeup>:

void ui_wakeup(void)
{
	//LED_On(LED_0_PIN);
}
     146:	4770      	bx	lr

00000148 <ui_process>:


void ui_process(uint16_t framenumber)
{
     148:	b510      	push	{r4, lr}
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     14a:	4b17      	ldr	r3, [pc, #92]	; (1a8 <ui_process+0x60>)
     14c:	6a1b      	ldr	r3, [r3, #32]
     14e:	2280      	movs	r2, #128	; 0x80
     150:	01d2      	lsls	r2, r2, #7
     152:	4013      	ands	r3, r2
	bool b_btn_state;
	static bool btn_last_state = false;

	b_btn_state = !port_pin_get_input_level(BUTTON_0_PIN);
     154:	425a      	negs	r2, r3
     156:	415a      	adcs	r2, r3
     158:	b2d2      	uxtb	r2, r2
	if (b_btn_state != btn_last_state) {
     15a:	4914      	ldr	r1, [pc, #80]	; (1ac <ui_process+0x64>)
     15c:	7809      	ldrb	r1, [r1, #0]
     15e:	4291      	cmp	r1, r2
     160:	d006      	beq.n	170 <ui_process+0x28>
		btn_last_state = b_btn_state;
     162:	4912      	ldr	r1, [pc, #72]	; (1ac <ui_process+0x64>)
     164:	700a      	strb	r2, [r1, #0]
		
		if(b_btn_state) {
     166:	2b00      	cmp	r3, #0
     168:	d116      	bne.n	198 <ui_process+0x50>
			udi_hid_kbd_down(HID_E);
     16a:	2008      	movs	r0, #8
     16c:	4b10      	ldr	r3, [pc, #64]	; (1b0 <ui_process+0x68>)
     16e:	4798      	blx	r3
     170:	4b0d      	ldr	r3, [pc, #52]	; (1a8 <ui_process+0x60>)
     172:	6a1b      	ldr	r3, [r3, #32]
     174:	2280      	movs	r2, #128	; 0x80
     176:	0212      	lsls	r2, r2, #8
     178:	4013      	ands	r3, r2
	}
	
	bool b_btn_state2;
	static bool btn_last_state2 = false;

	b_btn_state2 = !port_pin_get_input_level(BUTTON_1_PIN);
     17a:	425a      	negs	r2, r3
     17c:	415a      	adcs	r2, r3
     17e:	b2d2      	uxtb	r2, r2
	if (b_btn_state2 != btn_last_state2) {
     180:	490c      	ldr	r1, [pc, #48]	; (1b4 <ui_process+0x6c>)
     182:	7809      	ldrb	r1, [r1, #0]
     184:	4291      	cmp	r1, r2
     186:	d006      	beq.n	196 <ui_process+0x4e>
		btn_last_state2 = b_btn_state2;
     188:	490a      	ldr	r1, [pc, #40]	; (1b4 <ui_process+0x6c>)
     18a:	700a      	strb	r2, [r1, #0]
		
		if(b_btn_state2) {
     18c:	2b00      	cmp	r3, #0
     18e:	d007      	beq.n	1a0 <ui_process+0x58>
			udi_hid_kbd_down(HID_R);
		} else {
			udi_hid_kbd_up(HID_R);
     190:	2015      	movs	r0, #21
     192:	4b09      	ldr	r3, [pc, #36]	; (1b8 <ui_process+0x70>)
     194:	4798      	blx	r3
		}
	}
}
     196:	bd10      	pop	{r4, pc}
			udi_hid_kbd_up(HID_E);
     198:	2008      	movs	r0, #8
     19a:	4b07      	ldr	r3, [pc, #28]	; (1b8 <ui_process+0x70>)
     19c:	4798      	blx	r3
     19e:	e7e7      	b.n	170 <ui_process+0x28>
			udi_hid_kbd_down(HID_R);
     1a0:	2015      	movs	r0, #21
     1a2:	4b03      	ldr	r3, [pc, #12]	; (1b0 <ui_process+0x68>)
     1a4:	4798      	blx	r3
     1a6:	e7f6      	b.n	196 <ui_process+0x4e>
     1a8:	41004400 	.word	0x41004400
     1ac:	200000f8 	.word	0x200000f8
     1b0:	000003b5 	.word	0x000003b5
     1b4:	200000f9 	.word	0x200000f9
     1b8:	000002f5 	.word	0x000002f5

000001bc <ui_kbd_led>:

void ui_kbd_led(uint8_t value)
{
	//UNUSED(value);
}
     1bc:	4770      	bx	lr

000001be <udi_hid_kbd_getsetting>:


uint8_t udi_hid_kbd_getsetting(void)
{
	return 0;
}
     1be:	2000      	movs	r0, #0
     1c0:	4770      	bx	lr
	...

000001c4 <udi_hid_kbd_setreport>:


static bool udi_hid_kbd_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8))
     1c4:	4b0b      	ldr	r3, [pc, #44]	; (1f4 <udi_hid_kbd_setreport+0x30>)
     1c6:	885b      	ldrh	r3, [r3, #2]
     1c8:	0a1a      	lsrs	r2, r3, #8
		udd_g_ctrlreq.payload = &udi_hid_kbd_report_set;
		udd_g_ctrlreq.callback = udi_hid_kbd_setreport_valid;
		udd_g_ctrlreq.payload_size = 1;
		return true;
	}
	return false;
     1ca:	2000      	movs	r0, #0
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8))
     1cc:	2a02      	cmp	r2, #2
     1ce:	d000      	beq.n	1d2 <udi_hid_kbd_setreport+0xe>
}
     1d0:	4770      	bx	lr
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
     1d2:	32fd      	adds	r2, #253	; 0xfd
     1d4:	421a      	tst	r2, r3
     1d6:	d1fb      	bne.n	1d0 <udi_hid_kbd_setreport+0xc>
			&& (1 == udd_g_ctrlreq.req.wLength)) {
     1d8:	4b06      	ldr	r3, [pc, #24]	; (1f4 <udi_hid_kbd_setreport+0x30>)
     1da:	88db      	ldrh	r3, [r3, #6]
     1dc:	2b01      	cmp	r3, #1
     1de:	d1f7      	bne.n	1d0 <udi_hid_kbd_setreport+0xc>
		udd_g_ctrlreq.payload = &udi_hid_kbd_report_set;
     1e0:	4b04      	ldr	r3, [pc, #16]	; (1f4 <udi_hid_kbd_setreport+0x30>)
     1e2:	4a05      	ldr	r2, [pc, #20]	; (1f8 <udi_hid_kbd_setreport+0x34>)
     1e4:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.callback = udi_hid_kbd_setreport_valid;
     1e6:	4a05      	ldr	r2, [pc, #20]	; (1fc <udi_hid_kbd_setreport+0x38>)
     1e8:	611a      	str	r2, [r3, #16]
		udd_g_ctrlreq.payload_size = 1;
     1ea:	2201      	movs	r2, #1
     1ec:	819a      	strh	r2, [r3, #12]
		return true;
     1ee:	3001      	adds	r0, #1
     1f0:	e7ee      	b.n	1d0 <udi_hid_kbd_setreport+0xc>
     1f2:	46c0      	nop			; (mov r8, r8)
     1f4:	2000038c 	.word	0x2000038c
     1f8:	2000010c 	.word	0x2000010c
     1fc:	00000271 	.word	0x00000271

00000200 <udi_hid_kbd_enable>:
{
     200:	b510      	push	{r4, lr}
	udi_hid_kbd_rate = 0;
     202:	2400      	movs	r4, #0
     204:	4b07      	ldr	r3, [pc, #28]	; (224 <udi_hid_kbd_enable+0x24>)
     206:	701c      	strb	r4, [r3, #0]
	udi_hid_kbd_protocol = 0;
     208:	4b07      	ldr	r3, [pc, #28]	; (228 <udi_hid_kbd_enable+0x28>)
     20a:	701c      	strb	r4, [r3, #0]
	udi_hid_kbd_b_report_trans_ongoing = false;
     20c:	4b07      	ldr	r3, [pc, #28]	; (22c <udi_hid_kbd_enable+0x2c>)
     20e:	701c      	strb	r4, [r3, #0]
	memset(udi_hid_kbd_report, 0, UDI_HID_KBD_REPORT_SIZE);
     210:	2208      	movs	r2, #8
     212:	2100      	movs	r1, #0
     214:	4806      	ldr	r0, [pc, #24]	; (230 <udi_hid_kbd_enable+0x30>)
     216:	4b07      	ldr	r3, [pc, #28]	; (234 <udi_hid_kbd_enable+0x34>)
     218:	4798      	blx	r3
	udi_hid_kbd_b_report_valid = false;
     21a:	4b07      	ldr	r3, [pc, #28]	; (238 <udi_hid_kbd_enable+0x38>)
     21c:	701c      	strb	r4, [r3, #0]
	return UDI_HID_KBD_ENABLE_EXT();
     21e:	4b07      	ldr	r3, [pc, #28]	; (23c <udi_hid_kbd_enable+0x3c>)
     220:	4798      	blx	r3
}
     222:	bd10      	pop	{r4, pc}
     224:	20000100 	.word	0x20000100
     228:	200000fc 	.word	0x200000fc
     22c:	200000fa 	.word	0x200000fa
     230:	20000104 	.word	0x20000104
     234:	00003537 	.word	0x00003537
     238:	200000fb 	.word	0x200000fb
     23c:	00003195 	.word	0x00003195

00000240 <udi_hid_kbd_disable>:
{
     240:	b510      	push	{r4, lr}
	UDI_HID_KBD_DISABLE_EXT();
     242:	4b01      	ldr	r3, [pc, #4]	; (248 <udi_hid_kbd_disable+0x8>)
     244:	4798      	blx	r3
}
     246:	bd10      	pop	{r4, pc}
     248:	000031a5 	.word	0x000031a5

0000024c <udi_hid_kbd_setup>:
{
     24c:	b510      	push	{r4, lr}
	return udi_hid_setup(&udi_hid_kbd_rate,
     24e:	4b03      	ldr	r3, [pc, #12]	; (25c <udi_hid_kbd_setup+0x10>)
     250:	4a03      	ldr	r2, [pc, #12]	; (260 <udi_hid_kbd_setup+0x14>)
     252:	4904      	ldr	r1, [pc, #16]	; (264 <udi_hid_kbd_setup+0x18>)
     254:	4804      	ldr	r0, [pc, #16]	; (268 <udi_hid_kbd_setup+0x1c>)
     256:	4c05      	ldr	r4, [pc, #20]	; (26c <udi_hid_kbd_setup+0x20>)
     258:	47a0      	blx	r4
}
     25a:	bd10      	pop	{r4, pc}
     25c:	000001c5 	.word	0x000001c5
     260:	20000014 	.word	0x20000014
     264:	200000fc 	.word	0x200000fc
     268:	20000100 	.word	0x20000100
     26c:	00000459 	.word	0x00000459

00000270 <udi_hid_kbd_setreport_valid>:
		udi_hid_kbd_send_report();
	}
}

static void udi_hid_kbd_setreport_valid(void)
{
     270:	b510      	push	{r4, lr}
	UDI_HID_KBD_CHANGE_LED(udi_hid_kbd_report_set);
     272:	4b02      	ldr	r3, [pc, #8]	; (27c <udi_hid_kbd_setreport_valid+0xc>)
     274:	7818      	ldrb	r0, [r3, #0]
     276:	4b02      	ldr	r3, [pc, #8]	; (280 <udi_hid_kbd_setreport_valid+0x10>)
     278:	4798      	blx	r3
}
     27a:	bd10      	pop	{r4, pc}
     27c:	2000010c 	.word	0x2000010c
     280:	000001bd 	.word	0x000001bd

00000284 <udi_hid_kbd_send_report>:
{
     284:	b510      	push	{r4, lr}
     286:	b082      	sub	sp, #8
	if (udi_hid_kbd_b_report_trans_ongoing)
     288:	4b0b      	ldr	r3, [pc, #44]	; (2b8 <udi_hid_kbd_send_report+0x34>)
     28a:	781b      	ldrb	r3, [r3, #0]
		return false;
     28c:	2000      	movs	r0, #0
	if (udi_hid_kbd_b_report_trans_ongoing)
     28e:	2b00      	cmp	r3, #0
     290:	d001      	beq.n	296 <udi_hid_kbd_send_report+0x12>
}
     292:	b002      	add	sp, #8
     294:	bd10      	pop	{r4, pc}
	memcpy(udi_hid_kbd_report_trans, udi_hid_kbd_report,
     296:	4a09      	ldr	r2, [pc, #36]	; (2bc <udi_hid_kbd_send_report+0x38>)
     298:	4b09      	ldr	r3, [pc, #36]	; (2c0 <udi_hid_kbd_send_report+0x3c>)
     29a:	0011      	movs	r1, r2
     29c:	cb11      	ldmia	r3!, {r0, r4}
     29e:	c111      	stmia	r1!, {r0, r4}
	udi_hid_kbd_b_report_valid = false;
     2a0:	2100      	movs	r1, #0
     2a2:	4b08      	ldr	r3, [pc, #32]	; (2c4 <udi_hid_kbd_send_report+0x40>)
     2a4:	7019      	strb	r1, [r3, #0]
			udd_ep_run(	UDI_HID_KBD_EP_IN,
     2a6:	4b08      	ldr	r3, [pc, #32]	; (2c8 <udi_hid_kbd_send_report+0x44>)
     2a8:	9300      	str	r3, [sp, #0]
     2aa:	2308      	movs	r3, #8
     2ac:	2081      	movs	r0, #129	; 0x81
     2ae:	4c07      	ldr	r4, [pc, #28]	; (2cc <udi_hid_kbd_send_report+0x48>)
     2b0:	47a0      	blx	r4
	udi_hid_kbd_b_report_trans_ongoing =
     2b2:	4a01      	ldr	r2, [pc, #4]	; (2b8 <udi_hid_kbd_send_report+0x34>)
     2b4:	7010      	strb	r0, [r2, #0]
	return udi_hid_kbd_b_report_trans_ongoing;
     2b6:	e7ec      	b.n	292 <udi_hid_kbd_send_report+0xe>
     2b8:	200000fa 	.word	0x200000fa
     2bc:	20000110 	.word	0x20000110
     2c0:	20000104 	.word	0x20000104
     2c4:	200000fb 	.word	0x200000fb
     2c8:	000002d1 	.word	0x000002d1
     2cc:	00001ca5 	.word	0x00001ca5

000002d0 <udi_hid_kbd_report_sent>:
{
     2d0:	b510      	push	{r4, lr}
	udi_hid_kbd_b_report_trans_ongoing = false;
     2d2:	2200      	movs	r2, #0
     2d4:	4b04      	ldr	r3, [pc, #16]	; (2e8 <udi_hid_kbd_report_sent+0x18>)
     2d6:	701a      	strb	r2, [r3, #0]
	if (udi_hid_kbd_b_report_valid) {
     2d8:	4b04      	ldr	r3, [pc, #16]	; (2ec <udi_hid_kbd_report_sent+0x1c>)
     2da:	781b      	ldrb	r3, [r3, #0]
     2dc:	2b00      	cmp	r3, #0
     2de:	d100      	bne.n	2e2 <udi_hid_kbd_report_sent+0x12>
}
     2e0:	bd10      	pop	{r4, pc}
		udi_hid_kbd_send_report();
     2e2:	4b03      	ldr	r3, [pc, #12]	; (2f0 <udi_hid_kbd_report_sent+0x20>)
     2e4:	4798      	blx	r3
}
     2e6:	e7fb      	b.n	2e0 <udi_hid_kbd_report_sent+0x10>
     2e8:	200000fa 	.word	0x200000fa
     2ec:	200000fb 	.word	0x200000fb
     2f0:	00000285 	.word	0x00000285

000002f4 <udi_hid_kbd_up>:
{
     2f4:	b530      	push	{r4, r5, lr}
     2f6:	b083      	sub	sp, #12
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     2f8:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
     2fc:	425a      	negs	r2, r3
     2fe:	4153      	adcs	r3, r2
     300:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     302:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     304:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     308:	2200      	movs	r2, #0
     30a:	4b26      	ldr	r3, [pc, #152]	; (3a4 <udi_hid_kbd_up+0xb0>)
     30c:	701a      	strb	r2, [r3, #0]
	return flags;
     30e:	9c01      	ldr	r4, [sp, #4]
		if (0 == udi_hid_kbd_report[i]) {
     310:	4b25      	ldr	r3, [pc, #148]	; (3a8 <udi_hid_kbd_up+0xb4>)
     312:	789b      	ldrb	r3, [r3, #2]
     314:	2b00      	cmp	r3, #0
     316:	d016      	beq.n	346 <udi_hid_kbd_up+0x52>
		if (key_id == udi_hid_kbd_report[i])
     318:	4298      	cmp	r0, r3
     31a:	d041      	beq.n	3a0 <udi_hid_kbd_up+0xac>
     31c:	4b22      	ldr	r3, [pc, #136]	; (3a8 <udi_hid_kbd_up+0xb4>)
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     31e:	3203      	adds	r2, #3
		if (0 == udi_hid_kbd_report[i]) {
     320:	78d9      	ldrb	r1, [r3, #3]
     322:	2900      	cmp	r1, #0
     324:	d00f      	beq.n	346 <udi_hid_kbd_up+0x52>
		if (key_id == udi_hid_kbd_report[i])
     326:	4281      	cmp	r1, r0
     328:	d016      	beq.n	358 <udi_hid_kbd_up+0x64>
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     32a:	3201      	adds	r2, #1
     32c:	b2d2      	uxtb	r2, r2
     32e:	3301      	adds	r3, #1
     330:	2a08      	cmp	r2, #8
     332:	d1f5      	bne.n	320 <udi_hid_kbd_up+0x2c>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     334:	2c00      	cmp	r4, #0
     336:	d030      	beq.n	39a <udi_hid_kbd_up+0xa6>
		cpu_irq_enable();
     338:	2201      	movs	r2, #1
     33a:	4b1a      	ldr	r3, [pc, #104]	; (3a4 <udi_hid_kbd_up+0xb0>)
     33c:	701a      	strb	r2, [r3, #0]
     33e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     342:	b662      	cpsie	i
     344:	e029      	b.n	39a <udi_hid_kbd_up+0xa6>
	if (cpu_irq_is_enabled_flags(flags))
     346:	2c00      	cmp	r4, #0
     348:	d027      	beq.n	39a <udi_hid_kbd_up+0xa6>
		cpu_irq_enable();
     34a:	2201      	movs	r2, #1
     34c:	4b15      	ldr	r3, [pc, #84]	; (3a4 <udi_hid_kbd_up+0xb0>)
     34e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
     350:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     354:	b662      	cpsie	i
     356:	e020      	b.n	39a <udi_hid_kbd_up+0xa6>
	if (UDI_HID_KBD_REPORT_SIZE == i) {
     358:	2a08      	cmp	r2, #8
     35a:	d0eb      	beq.n	334 <udi_hid_kbd_up+0x40>
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
     35c:	2a06      	cmp	r2, #6
     35e:	d80c      	bhi.n	37a <udi_hid_kbd_up+0x86>
     360:	4911      	ldr	r1, [pc, #68]	; (3a8 <udi_hid_kbd_up+0xb4>)
     362:	188b      	adds	r3, r1, r2
     364:	1c55      	adds	r5, r2, #1
     366:	2006      	movs	r0, #6
     368:	1a82      	subs	r2, r0, r2
     36a:	b2d2      	uxtb	r2, r2
     36c:	18aa      	adds	r2, r5, r2
     36e:	188a      	adds	r2, r1, r2
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
     370:	7859      	ldrb	r1, [r3, #1]
     372:	7019      	strb	r1, [r3, #0]
     374:	3301      	adds	r3, #1
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
     376:	4293      	cmp	r3, r2
     378:	d1fa      	bne.n	370 <udi_hid_kbd_up+0x7c>
	udi_hid_kbd_report[UDI_HID_KBD_REPORT_SIZE - 1] = 0x00;
     37a:	2200      	movs	r2, #0
     37c:	4b0a      	ldr	r3, [pc, #40]	; (3a8 <udi_hid_kbd_up+0xb4>)
     37e:	71da      	strb	r2, [r3, #7]
	udi_hid_kbd_b_report_valid = true;
     380:	3201      	adds	r2, #1
     382:	4b0a      	ldr	r3, [pc, #40]	; (3ac <udi_hid_kbd_up+0xb8>)
     384:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_send_report();
     386:	4b0a      	ldr	r3, [pc, #40]	; (3b0 <udi_hid_kbd_up+0xbc>)
     388:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
     38a:	2c00      	cmp	r4, #0
     38c:	d005      	beq.n	39a <udi_hid_kbd_up+0xa6>
		cpu_irq_enable();
     38e:	2201      	movs	r2, #1
     390:	4b04      	ldr	r3, [pc, #16]	; (3a4 <udi_hid_kbd_up+0xb0>)
     392:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
     394:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     398:	b662      	cpsie	i
}
     39a:	2001      	movs	r0, #1
     39c:	b003      	add	sp, #12
     39e:	bd30      	pop	{r4, r5, pc}
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     3a0:	2202      	movs	r2, #2
     3a2:	e7dd      	b.n	360 <udi_hid_kbd_up+0x6c>
     3a4:	200000da 	.word	0x200000da
     3a8:	20000104 	.word	0x20000104
     3ac:	200000fb 	.word	0x200000fb
     3b0:	00000285 	.word	0x00000285

000003b4 <udi_hid_kbd_down>:
{
     3b4:	b510      	push	{r4, lr}
     3b6:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     3b8:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
     3bc:	425a      	negs	r2, r3
     3be:	4153      	adcs	r3, r2
     3c0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     3c2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     3c4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     3c8:	2200      	movs	r2, #0
     3ca:	4b1f      	ldr	r3, [pc, #124]	; (448 <udi_hid_kbd_down+0x94>)
     3cc:	701a      	strb	r2, [r3, #0]
	return flags;
     3ce:	9c01      	ldr	r4, [sp, #4]
		if (0 == udi_hid_kbd_report[i])
     3d0:	4b1e      	ldr	r3, [pc, #120]	; (44c <udi_hid_kbd_down+0x98>)
     3d2:	789b      	ldrb	r3, [r3, #2]
     3d4:	2b00      	cmp	r3, #0
     3d6:	d035      	beq.n	444 <udi_hid_kbd_down+0x90>
		if (key_id == udi_hid_kbd_report[i]) {
     3d8:	4298      	cmp	r0, r3
     3da:	d015      	beq.n	408 <udi_hid_kbd_down+0x54>
     3dc:	4a1b      	ldr	r2, [pc, #108]	; (44c <udi_hid_kbd_down+0x98>)
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     3de:	2303      	movs	r3, #3
		if (0 == udi_hid_kbd_report[i])
     3e0:	78d1      	ldrb	r1, [r2, #3]
     3e2:	2900      	cmp	r1, #0
     3e4:	d01a      	beq.n	41c <udi_hid_kbd_down+0x68>
		if (key_id == udi_hid_kbd_report[i]) {
     3e6:	4281      	cmp	r1, r0
     3e8:	d00e      	beq.n	408 <udi_hid_kbd_down+0x54>
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     3ea:	3301      	adds	r3, #1
     3ec:	b2db      	uxtb	r3, r3
     3ee:	3201      	adds	r2, #1
     3f0:	2b08      	cmp	r3, #8
     3f2:	d1f5      	bne.n	3e0 <udi_hid_kbd_down+0x2c>
		return false;
     3f4:	2000      	movs	r0, #0
	if (cpu_irq_is_enabled_flags(flags))
     3f6:	2c00      	cmp	r4, #0
     3f8:	d022      	beq.n	440 <udi_hid_kbd_down+0x8c>
		cpu_irq_enable();
     3fa:	2201      	movs	r2, #1
     3fc:	4b12      	ldr	r3, [pc, #72]	; (448 <udi_hid_kbd_down+0x94>)
     3fe:	701a      	strb	r2, [r3, #0]
     400:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     404:	b662      	cpsie	i
     406:	e01b      	b.n	440 <udi_hid_kbd_down+0x8c>
			return true;
     408:	2001      	movs	r0, #1
	if (cpu_irq_is_enabled_flags(flags))
     40a:	2c00      	cmp	r4, #0
     40c:	d018      	beq.n	440 <udi_hid_kbd_down+0x8c>
		cpu_irq_enable();
     40e:	2201      	movs	r2, #1
     410:	4b0d      	ldr	r3, [pc, #52]	; (448 <udi_hid_kbd_down+0x94>)
     412:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
     414:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     418:	b662      	cpsie	i
     41a:	e011      	b.n	440 <udi_hid_kbd_down+0x8c>
	if (UDI_HID_KBD_REPORT_SIZE == i) {
     41c:	2b08      	cmp	r3, #8
     41e:	d0e9      	beq.n	3f4 <udi_hid_kbd_down+0x40>
	udi_hid_kbd_report[i] = key_id;
     420:	4a0a      	ldr	r2, [pc, #40]	; (44c <udi_hid_kbd_down+0x98>)
     422:	54d0      	strb	r0, [r2, r3]
	udi_hid_kbd_b_report_valid = true;
     424:	2201      	movs	r2, #1
     426:	4b0a      	ldr	r3, [pc, #40]	; (450 <udi_hid_kbd_down+0x9c>)
     428:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_send_report();
     42a:	4b0a      	ldr	r3, [pc, #40]	; (454 <udi_hid_kbd_down+0xa0>)
     42c:	4798      	blx	r3
	return true;
     42e:	2001      	movs	r0, #1
	if (cpu_irq_is_enabled_flags(flags))
     430:	2c00      	cmp	r4, #0
     432:	d005      	beq.n	440 <udi_hid_kbd_down+0x8c>
		cpu_irq_enable();
     434:	2201      	movs	r2, #1
     436:	4b04      	ldr	r3, [pc, #16]	; (448 <udi_hid_kbd_down+0x94>)
     438:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
     43a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     43e:	b662      	cpsie	i
}
     440:	b002      	add	sp, #8
     442:	bd10      	pop	{r4, pc}
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     444:	2302      	movs	r3, #2
     446:	e7eb      	b.n	420 <udi_hid_kbd_down+0x6c>
     448:	200000da 	.word	0x200000da
     44c:	20000104 	.word	0x20000104
     450:	200000fb 	.word	0x200000fb
     454:	00000285 	.word	0x00000285

00000458 <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
     458:	b570      	push	{r4, r5, r6, lr}
     45a:	0005      	movs	r5, r0
     45c:	0014      	movs	r4, r2
	if (Udd_setup_is_in()) {
     45e:	4a3b      	ldr	r2, [pc, #236]	; (54c <udi_hid_setup+0xf4>)
     460:	7812      	ldrb	r2, [r2, #0]
     462:	b250      	sxtb	r0, r2
     464:	2800      	cmp	r0, #0
     466:	db05      	blt.n	474 <udi_hid_setup+0x1c>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     468:	2460      	movs	r4, #96	; 0x60
     46a:	4022      	ands	r2, r4
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
     46c:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     46e:	2a20      	cmp	r2, #32
     470:	d04f      	beq.n	512 <udi_hid_setup+0xba>
}
     472:	bd70      	pop	{r4, r5, r6, pc}
     474:	2060      	movs	r0, #96	; 0x60
     476:	4002      	ands	r2, r0
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     478:	d103      	bne.n	482 <udi_hid_setup+0x2a>
			switch (udd_g_ctrlreq.req.bRequest) {
     47a:	4834      	ldr	r0, [pc, #208]	; (54c <udi_hid_setup+0xf4>)
     47c:	7840      	ldrb	r0, [r0, #1]
     47e:	2806      	cmp	r0, #6
     480:	d00d      	beq.n	49e <udi_hid_setup+0x46>
	return false;	// Request not supported
     482:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     484:	2a20      	cmp	r2, #32
     486:	d1f4      	bne.n	472 <udi_hid_setup+0x1a>
			switch (udd_g_ctrlreq.req.bRequest) {
     488:	4a30      	ldr	r2, [pc, #192]	; (54c <udi_hid_setup+0xf4>)
     48a:	7852      	ldrb	r2, [r2, #1]
     48c:	2a02      	cmp	r2, #2
     48e:	d034      	beq.n	4fa <udi_hid_setup+0xa2>
     490:	2a03      	cmp	r2, #3
     492:	d038      	beq.n	506 <udi_hid_setup+0xae>
	return false;	// Request not supported
     494:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
     496:	2a01      	cmp	r2, #1
     498:	d1eb      	bne.n	472 <udi_hid_setup+0x1a>
				return setup_report();
     49a:	4798      	blx	r3
     49c:	e7e9      	b.n	472 <udi_hid_setup+0x1a>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
     49e:	4b2c      	ldr	r3, [pc, #176]	; (550 <udi_hid_setup+0xf8>)
     4a0:	4798      	blx	r3
     4a2:	0003      	movs	r3, r0
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
     4a4:	7a82      	ldrb	r2, [r0, #10]
		return false;
     4a6:	2000      	movs	r0, #0
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
     4a8:	2a21      	cmp	r2, #33	; 0x21
     4aa:	d1e2      	bne.n	472 <udi_hid_setup+0x1a>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     4ac:	4a27      	ldr	r2, [pc, #156]	; (54c <udi_hid_setup+0xf4>)
     4ae:	8852      	ldrh	r2, [r2, #2]
     4b0:	0a12      	lsrs	r2, r2, #8
     4b2:	2a21      	cmp	r2, #33	; 0x21
     4b4:	d013      	beq.n	4de <udi_hid_setup+0x86>
				ptr_hid_desc->bLength);
		return true;
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
     4b6:	7bd9      	ldrb	r1, [r3, #15]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
     4b8:	2000      	movs	r0, #0
	if (ptr_hid_desc->bRDescriptorType ==
     4ba:	4291      	cmp	r1, r2
     4bc:	d1d9      	bne.n	472 <udi_hid_setup+0x1a>
		udd_g_ctrlreq.payload = report_desc;
     4be:	4a23      	ldr	r2, [pc, #140]	; (54c <udi_hid_setup+0xf4>)
     4c0:	6094      	str	r4, [r2, #8]
				min(udd_g_ctrlreq.req.wLength,
     4c2:	7c19      	ldrb	r1, [r3, #16]
     4c4:	3309      	adds	r3, #9
     4c6:	7a1b      	ldrb	r3, [r3, #8]
     4c8:	021b      	lsls	r3, r3, #8
     4ca:	430b      	orrs	r3, r1
		udd_g_ctrlreq.payload_size =
     4cc:	88d0      	ldrh	r0, [r2, #6]
     4ce:	1c19      	adds	r1, r3, #0
     4d0:	b29b      	uxth	r3, r3
     4d2:	4283      	cmp	r3, r0
     4d4:	d900      	bls.n	4d8 <udi_hid_setup+0x80>
     4d6:	1c01      	adds	r1, r0, #0
     4d8:	8191      	strh	r1, [r2, #12]
		return true;
     4da:	2001      	movs	r0, #1
     4dc:	e7c9      	b.n	472 <udi_hid_setup+0x1a>
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
     4de:	4a1b      	ldr	r2, [pc, #108]	; (54c <udi_hid_setup+0xf4>)
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
     4e0:	0019      	movs	r1, r3
     4e2:	3109      	adds	r1, #9
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
     4e4:	6091      	str	r1, [r2, #8]
				min(udd_g_ctrlreq.req.wLength,
     4e6:	7a5b      	ldrb	r3, [r3, #9]
     4e8:	88d0      	ldrh	r0, [r2, #6]
     4ea:	1c19      	adds	r1, r3, #0
     4ec:	b29b      	uxth	r3, r3
     4ee:	4283      	cmp	r3, r0
     4f0:	d900      	bls.n	4f4 <udi_hid_setup+0x9c>
     4f2:	1c01      	adds	r1, r0, #0
		udd_g_ctrlreq.payload_size =
     4f4:	8191      	strh	r1, [r2, #12]
		return true;
     4f6:	2001      	movs	r0, #1
     4f8:	e7bb      	b.n	472 <udi_hid_setup+0x1a>
				udd_g_ctrlreq.payload = rate;
     4fa:	4b14      	ldr	r3, [pc, #80]	; (54c <udi_hid_setup+0xf4>)
     4fc:	609d      	str	r5, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
     4fe:	2201      	movs	r2, #1
     500:	819a      	strh	r2, [r3, #12]
				return true;
     502:	2001      	movs	r0, #1
     504:	e7b5      	b.n	472 <udi_hid_setup+0x1a>
				udd_g_ctrlreq.payload = protocol;
     506:	4b11      	ldr	r3, [pc, #68]	; (54c <udi_hid_setup+0xf4>)
     508:	6099      	str	r1, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
     50a:	2201      	movs	r2, #1
     50c:	819a      	strh	r2, [r3, #12]
				return true;
     50e:	2001      	movs	r0, #1
     510:	e7af      	b.n	472 <udi_hid_setup+0x1a>
			switch (udd_g_ctrlreq.req.bRequest) {
     512:	4a0e      	ldr	r2, [pc, #56]	; (54c <udi_hid_setup+0xf4>)
     514:	7852      	ldrb	r2, [r2, #1]
     516:	2a0a      	cmp	r2, #10
     518:	d006      	beq.n	528 <udi_hid_setup+0xd0>
     51a:	2a0b      	cmp	r2, #11
     51c:	d00a      	beq.n	534 <udi_hid_setup+0xdc>
	return false;	// Request not supported
     51e:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
     520:	2a09      	cmp	r2, #9
     522:	d1a6      	bne.n	472 <udi_hid_setup+0x1a>
				return setup_report();
     524:	4798      	blx	r3
     526:	e7a4      	b.n	472 <udi_hid_setup+0x1a>
				*rate = udd_g_ctrlreq.req.wValue >> 8;
     528:	4b08      	ldr	r3, [pc, #32]	; (54c <udi_hid_setup+0xf4>)
     52a:	885b      	ldrh	r3, [r3, #2]
     52c:	0a1b      	lsrs	r3, r3, #8
     52e:	702b      	strb	r3, [r5, #0]
				return true;
     530:	2001      	movs	r0, #1
     532:	e79e      	b.n	472 <udi_hid_setup+0x1a>
				if (0 != udd_g_ctrlreq.req.wLength)
     534:	4b05      	ldr	r3, [pc, #20]	; (54c <udi_hid_setup+0xf4>)
     536:	88db      	ldrh	r3, [r3, #6]
					return false;
     538:	2000      	movs	r0, #0
				if (0 != udd_g_ctrlreq.req.wLength)
     53a:	2b00      	cmp	r3, #0
     53c:	d000      	beq.n	540 <udi_hid_setup+0xe8>
     53e:	e798      	b.n	472 <udi_hid_setup+0x1a>
				*protocol = udd_g_ctrlreq.req.wValue;
     540:	4b02      	ldr	r3, [pc, #8]	; (54c <udi_hid_setup+0xf4>)
     542:	885b      	ldrh	r3, [r3, #2]
     544:	700b      	strb	r3, [r1, #0]
				return true;
     546:	3001      	adds	r0, #1
     548:	e793      	b.n	472 <udi_hid_setup+0x1a>
     54a:	46c0      	nop			; (mov r8, r8)
     54c:	2000038c 	.word	0x2000038c
     550:	000006f1 	.word	0x000006f1

00000554 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
     554:	b510      	push	{r4, lr}
			udc_ptr_conf->desc +
     556:	4b11      	ldr	r3, [pc, #68]	; (59c <udc_next_desc_in_iface+0x48>)
     558:	681b      	ldr	r3, [r3, #0]
     55a:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     55c:	7894      	ldrb	r4, [r2, #2]
     55e:	78d3      	ldrb	r3, [r2, #3]
     560:	021b      	lsls	r3, r3, #8
     562:	4323      	orrs	r3, r4
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     564:	18d2      	adds	r2, r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
     566:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     568:	18c0      	adds	r0, r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
     56a:	4290      	cmp	r0, r2
     56c:	d210      	bcs.n	590 <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     56e:	7843      	ldrb	r3, [r0, #1]
     570:	2b04      	cmp	r3, #4
     572:	d00f      	beq.n	594 <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
     574:	428b      	cmp	r3, r1
     576:	d00a      	beq.n	58e <udc_next_desc_in_iface+0x3a>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
     578:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     57a:	18c0      	adds	r0, r0, r3
	while (ptr_eof_desc > desc) {
     57c:	4290      	cmp	r0, r2
     57e:	d205      	bcs.n	58c <udc_next_desc_in_iface+0x38>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     580:	7843      	ldrb	r3, [r0, #1]
     582:	2b04      	cmp	r3, #4
     584:	d008      	beq.n	598 <udc_next_desc_in_iface+0x44>
		if (desc_id == desc->bDescriptorType) {
     586:	428b      	cmp	r3, r1
     588:	d1f6      	bne.n	578 <udc_next_desc_in_iface+0x24>
     58a:	e000      	b.n	58e <udc_next_desc_in_iface+0x3a>
	}
	return NULL; // No specific descriptor found
     58c:	2000      	movs	r0, #0
}
     58e:	bd10      	pop	{r4, pc}
	return NULL; // No specific descriptor found
     590:	2000      	movs	r0, #0
     592:	e7fc      	b.n	58e <udc_next_desc_in_iface+0x3a>
     594:	2000      	movs	r0, #0
     596:	e7fa      	b.n	58e <udc_next_desc_in_iface+0x3a>
     598:	2000      	movs	r0, #0
     59a:	e7f8      	b.n	58e <udc_next_desc_in_iface+0x3a>
     59c:	20000124 	.word	0x20000124

000005a0 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
     5a0:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
     5a2:	4b03      	ldr	r3, [pc, #12]	; (5b0 <udc_valid_address+0x10>)
     5a4:	885b      	ldrh	r3, [r3, #2]
     5a6:	207f      	movs	r0, #127	; 0x7f
     5a8:	4018      	ands	r0, r3
     5aa:	4b02      	ldr	r3, [pc, #8]	; (5b4 <udc_valid_address+0x14>)
     5ac:	4798      	blx	r3
}
     5ae:	bd10      	pop	{r4, pc}
     5b0:	2000038c 	.word	0x2000038c
     5b4:	00001e7d 	.word	0x00001e7d

000005b8 <udc_update_iface_desc>:
{
     5b8:	b570      	push	{r4, r5, r6, lr}
	if (0 == udc_num_configuration) {
     5ba:	4b19      	ldr	r3, [pc, #100]	; (620 <udc_update_iface_desc+0x68>)
     5bc:	781b      	ldrb	r3, [r3, #0]
		return false;
     5be:	2200      	movs	r2, #0
	if (0 == udc_num_configuration) {
     5c0:	2b00      	cmp	r3, #0
     5c2:	d029      	beq.n	618 <udc_update_iface_desc+0x60>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     5c4:	4b17      	ldr	r3, [pc, #92]	; (624 <udc_update_iface_desc+0x6c>)
     5c6:	681b      	ldr	r3, [r3, #0]
     5c8:	681b      	ldr	r3, [r3, #0]
     5ca:	791c      	ldrb	r4, [r3, #4]
     5cc:	4284      	cmp	r4, r0
     5ce:	d923      	bls.n	618 <udc_update_iface_desc+0x60>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
     5d0:	4a15      	ldr	r2, [pc, #84]	; (628 <udc_update_iface_desc+0x70>)
     5d2:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     5d4:	789a      	ldrb	r2, [r3, #2]
     5d6:	78dc      	ldrb	r4, [r3, #3]
     5d8:	0224      	lsls	r4, r4, #8
     5da:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     5dc:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
     5de:	42a3      	cmp	r3, r4
     5e0:	d21c      	bcs.n	61c <udc_update_iface_desc+0x64>
     5e2:	2500      	movs	r5, #0
     5e4:	2601      	movs	r6, #1
     5e6:	e007      	b.n	5f8 <udc_update_iface_desc+0x40>
     5e8:	4a0f      	ldr	r2, [pc, #60]	; (628 <udc_update_iface_desc+0x70>)
     5ea:	6013      	str	r3, [r2, #0]
     5ec:	e00f      	b.n	60e <udc_update_iface_desc+0x56>
				udc_ptr_iface->bLength);
     5ee:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
     5f0:	189b      	adds	r3, r3, r2
     5f2:	0035      	movs	r5, r6
	while (ptr_end_desc >
     5f4:	42a3      	cmp	r3, r4
     5f6:	d20c      	bcs.n	612 <udc_update_iface_desc+0x5a>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
     5f8:	785a      	ldrb	r2, [r3, #1]
     5fa:	2a04      	cmp	r2, #4
     5fc:	d1f7      	bne.n	5ee <udc_update_iface_desc+0x36>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
     5fe:	789a      	ldrb	r2, [r3, #2]
     600:	4282      	cmp	r2, r0
     602:	d1f4      	bne.n	5ee <udc_update_iface_desc+0x36>
     604:	78da      	ldrb	r2, [r3, #3]
     606:	428a      	cmp	r2, r1
     608:	d1f1      	bne.n	5ee <udc_update_iface_desc+0x36>
     60a:	2d00      	cmp	r5, #0
     60c:	d1ec      	bne.n	5e8 <udc_update_iface_desc+0x30>
				return true; // Interface found
     60e:	2201      	movs	r2, #1
     610:	e002      	b.n	618 <udc_update_iface_desc+0x60>
     612:	4a05      	ldr	r2, [pc, #20]	; (628 <udc_update_iface_desc+0x70>)
     614:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
     616:	2200      	movs	r2, #0
}
     618:	0010      	movs	r0, r2
     61a:	bd70      	pop	{r4, r5, r6, pc}
	return false; // Interface not found
     61c:	2200      	movs	r2, #0
     61e:	e7fb      	b.n	618 <udc_update_iface_desc+0x60>
     620:	20000120 	.word	0x20000120
     624:	20000124 	.word	0x20000124
     628:	20000128 	.word	0x20000128

0000062c <udc_iface_disable>:
{
     62c:	b5f0      	push	{r4, r5, r6, r7, lr}
     62e:	46c6      	mov	lr, r8
     630:	b500      	push	{lr}
     632:	0004      	movs	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
     634:	2100      	movs	r1, #0
     636:	4b13      	ldr	r3, [pc, #76]	; (684 <udc_iface_disable+0x58>)
     638:	4798      	blx	r3
     63a:	1e05      	subs	r5, r0, #0
     63c:	d103      	bne.n	646 <udc_iface_disable+0x1a>
}
     63e:	0028      	movs	r0, r5
     640:	bc04      	pop	{r2}
     642:	4690      	mov	r8, r2
     644:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     646:	4b10      	ldr	r3, [pc, #64]	; (688 <udc_iface_disable+0x5c>)
     648:	681b      	ldr	r3, [r3, #0]
     64a:	685b      	ldr	r3, [r3, #4]
     64c:	00a2      	lsls	r2, r4, #2
     64e:	58d3      	ldr	r3, [r2, r3]
     650:	4698      	mov	r8, r3
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     652:	68db      	ldr	r3, [r3, #12]
     654:	4798      	blx	r3
     656:	0001      	movs	r1, r0
     658:	0020      	movs	r0, r4
     65a:	4b0a      	ldr	r3, [pc, #40]	; (684 <udc_iface_disable+0x58>)
     65c:	4798      	blx	r3
     65e:	1e05      	subs	r5, r0, #0
     660:	d0ed      	beq.n	63e <udc_iface_disable+0x12>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     662:	4b0a      	ldr	r3, [pc, #40]	; (68c <udc_iface_disable+0x60>)
     664:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     666:	4e0a      	ldr	r6, [pc, #40]	; (690 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
     668:	4f0a      	ldr	r7, [pc, #40]	; (694 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     66a:	2105      	movs	r1, #5
     66c:	0020      	movs	r0, r4
     66e:	47b0      	blx	r6
     670:	1e04      	subs	r4, r0, #0
			if (NULL == ep_desc) {
     672:	d002      	beq.n	67a <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
     674:	7880      	ldrb	r0, [r0, #2]
     676:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     678:	e7f7      	b.n	66a <udc_iface_disable+0x3e>
	udi_api->disable();
     67a:	4643      	mov	r3, r8
     67c:	685b      	ldr	r3, [r3, #4]
     67e:	4798      	blx	r3
	return true;
     680:	e7dd      	b.n	63e <udc_iface_disable+0x12>
     682:	46c0      	nop			; (mov r8, r8)
     684:	000005b9 	.word	0x000005b9
     688:	20000124 	.word	0x20000124
     68c:	20000128 	.word	0x20000128
     690:	00000555 	.word	0x00000555
     694:	000019bd 	.word	0x000019bd

00000698 <udc_iface_enable>:
{
     698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     69a:	0005      	movs	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
     69c:	4b0f      	ldr	r3, [pc, #60]	; (6dc <udc_iface_enable+0x44>)
     69e:	4798      	blx	r3
     6a0:	2800      	cmp	r0, #0
     6a2:	d019      	beq.n	6d8 <udc_iface_enable+0x40>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     6a4:	4b0e      	ldr	r3, [pc, #56]	; (6e0 <udc_iface_enable+0x48>)
     6a6:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     6a8:	4e0e      	ldr	r6, [pc, #56]	; (6e4 <udc_iface_enable+0x4c>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     6aa:	4f0f      	ldr	r7, [pc, #60]	; (6e8 <udc_iface_enable+0x50>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     6ac:	2105      	movs	r1, #5
     6ae:	0020      	movs	r0, r4
     6b0:	47b0      	blx	r6
     6b2:	1e04      	subs	r4, r0, #0
		if (NULL == ep_desc)
     6b4:	d009      	beq.n	6ca <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     6b6:	7903      	ldrb	r3, [r0, #4]
     6b8:	7942      	ldrb	r2, [r0, #5]
     6ba:	0212      	lsls	r2, r2, #8
     6bc:	431a      	orrs	r2, r3
     6be:	78c1      	ldrb	r1, [r0, #3]
     6c0:	7880      	ldrb	r0, [r0, #2]
     6c2:	47b8      	blx	r7
     6c4:	2800      	cmp	r0, #0
     6c6:	d1f1      	bne.n	6ac <udc_iface_enable+0x14>
     6c8:	e006      	b.n	6d8 <udc_iface_enable+0x40>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
     6ca:	4b08      	ldr	r3, [pc, #32]	; (6ec <udc_iface_enable+0x54>)
     6cc:	681b      	ldr	r3, [r3, #0]
     6ce:	685b      	ldr	r3, [r3, #4]
     6d0:	00ad      	lsls	r5, r5, #2
     6d2:	58eb      	ldr	r3, [r5, r3]
     6d4:	681b      	ldr	r3, [r3, #0]
     6d6:	4798      	blx	r3
}
     6d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     6da:	46c0      	nop			; (mov r8, r8)
     6dc:	000005b9 	.word	0x000005b9
     6e0:	20000128 	.word	0x20000128
     6e4:	00000555 	.word	0x00000555
     6e8:	00001a15 	.word	0x00001a15
     6ec:	20000124 	.word	0x20000124

000006f0 <udc_get_interface_desc>:
	return udc_ptr_iface;
     6f0:	4b01      	ldr	r3, [pc, #4]	; (6f8 <udc_get_interface_desc+0x8>)
     6f2:	6818      	ldr	r0, [r3, #0]
}
     6f4:	4770      	bx	lr
     6f6:	46c0      	nop			; (mov r8, r8)
     6f8:	20000128 	.word	0x20000128

000006fc <udc_start>:
{
     6fc:	b510      	push	{r4, lr}
	udd_enable();
     6fe:	4b01      	ldr	r3, [pc, #4]	; (704 <udc_start+0x8>)
     700:	4798      	blx	r3
}
     702:	bd10      	pop	{r4, pc}
     704:	00001f2d 	.word	0x00001f2d

00000708 <udc_reset>:
{
     708:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
     70a:	4b12      	ldr	r3, [pc, #72]	; (754 <udc_reset+0x4c>)
     70c:	781b      	ldrb	r3, [r3, #0]
     70e:	2b00      	cmp	r3, #0
     710:	d011      	beq.n	736 <udc_reset+0x2e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     712:	4b11      	ldr	r3, [pc, #68]	; (758 <udc_reset+0x50>)
     714:	681b      	ldr	r3, [r3, #0]
     716:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     718:	791b      	ldrb	r3, [r3, #4]
     71a:	2b00      	cmp	r3, #0
     71c:	d00b      	beq.n	736 <udc_reset+0x2e>
     71e:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
     720:	4e0e      	ldr	r6, [pc, #56]	; (75c <udc_reset+0x54>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     722:	4d0d      	ldr	r5, [pc, #52]	; (758 <udc_reset+0x50>)
			udc_iface_disable(iface_num);
     724:	0020      	movs	r0, r4
     726:	47b0      	blx	r6
				iface_num++) {
     728:	3401      	adds	r4, #1
     72a:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     72c:	682b      	ldr	r3, [r5, #0]
     72e:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     730:	791b      	ldrb	r3, [r3, #4]
     732:	42a3      	cmp	r3, r4
     734:	d8f6      	bhi.n	724 <udc_reset+0x1c>
	udc_num_configuration = 0;
     736:	2200      	movs	r2, #0
     738:	4b06      	ldr	r3, [pc, #24]	; (754 <udc_reset+0x4c>)
     73a:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
     73c:	4b08      	ldr	r3, [pc, #32]	; (760 <udc_reset+0x58>)
     73e:	881b      	ldrh	r3, [r3, #0]
     740:	079b      	lsls	r3, r3, #30
     742:	d403      	bmi.n	74c <udc_reset+0x44>
	udc_device_status =
     744:	2201      	movs	r2, #1
     746:	4b06      	ldr	r3, [pc, #24]	; (760 <udc_reset+0x58>)
     748:	801a      	strh	r2, [r3, #0]
}
     74a:	bd70      	pop	{r4, r5, r6, pc}
		UDC_REMOTEWAKEUP_DISABLE();
     74c:	4b05      	ldr	r3, [pc, #20]	; (764 <udc_reset+0x5c>)
     74e:	4798      	blx	r3
     750:	e7f8      	b.n	744 <udc_reset+0x3c>
     752:	46c0      	nop			; (mov r8, r8)
     754:	20000120 	.word	0x20000120
     758:	20000124 	.word	0x20000124
     75c:	0000062d 	.word	0x0000062d
     760:	20000118 	.word	0x20000118
     764:	00003189 	.word	0x00003189

00000768 <udc_sof_notify>:
{
     768:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
     76a:	4b0e      	ldr	r3, [pc, #56]	; (7a4 <udc_sof_notify+0x3c>)
     76c:	781b      	ldrb	r3, [r3, #0]
     76e:	2b00      	cmp	r3, #0
     770:	d017      	beq.n	7a2 <udc_sof_notify+0x3a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     772:	4b0d      	ldr	r3, [pc, #52]	; (7a8 <udc_sof_notify+0x40>)
     774:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
     776:	681a      	ldr	r2, [r3, #0]
     778:	7912      	ldrb	r2, [r2, #4]
     77a:	2a00      	cmp	r2, #0
     77c:	d011      	beq.n	7a2 <udc_sof_notify+0x3a>
     77e:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     780:	4d09      	ldr	r5, [pc, #36]	; (7a8 <udc_sof_notify+0x40>)
     782:	e006      	b.n	792 <udc_sof_notify+0x2a>
				iface_num++) {
     784:	3401      	adds	r4, #1
     786:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     788:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
     78a:	681a      	ldr	r2, [r3, #0]
     78c:	7912      	ldrb	r2, [r2, #4]
     78e:	42a2      	cmp	r2, r4
     790:	d907      	bls.n	7a2 <udc_sof_notify+0x3a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     792:	685b      	ldr	r3, [r3, #4]
     794:	00a2      	lsls	r2, r4, #2
     796:	58d3      	ldr	r3, [r2, r3]
     798:	691b      	ldr	r3, [r3, #16]
     79a:	2b00      	cmp	r3, #0
     79c:	d0f2      	beq.n	784 <udc_sof_notify+0x1c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     79e:	4798      	blx	r3
     7a0:	e7f0      	b.n	784 <udc_sof_notify+0x1c>
}
     7a2:	bd70      	pop	{r4, r5, r6, pc}
     7a4:	20000120 	.word	0x20000120
     7a8:	20000124 	.word	0x20000124

000007ac <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     7ae:	4bb6      	ldr	r3, [pc, #728]	; (a88 <udc_process_setup+0x2dc>)
     7b0:	2200      	movs	r2, #0
     7b2:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
     7b4:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
     7b6:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
     7b8:	781b      	ldrb	r3, [r3, #0]
     7ba:	b25a      	sxtb	r2, r3
     7bc:	2a00      	cmp	r2, #0
     7be:	db13      	blt.n	7e8 <udc_process_setup+0x3c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     7c0:	2260      	movs	r2, #96	; 0x60
     7c2:	421a      	tst	r2, r3
     7c4:	d100      	bne.n	7c8 <udc_process_setup+0x1c>
     7c6:	e0d7      	b.n	978 <udc_process_setup+0x1cc>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     7c8:	4baf      	ldr	r3, [pc, #700]	; (a88 <udc_process_setup+0x2dc>)
     7ca:	781a      	ldrb	r2, [r3, #0]
     7cc:	231f      	movs	r3, #31
     7ce:	4013      	ands	r3, r2
     7d0:	2b01      	cmp	r3, #1
     7d2:	d100      	bne.n	7d6 <udc_process_setup+0x2a>
     7d4:	e18e      	b.n	af4 <udc_process_setup+0x348>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     7d6:	4bac      	ldr	r3, [pc, #688]	; (a88 <udc_process_setup+0x2dc>)
     7d8:	781a      	ldrb	r2, [r3, #0]
     7da:	231f      	movs	r3, #31
     7dc:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
     7de:	2000      	movs	r0, #0
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     7e0:	2b02      	cmp	r3, #2
     7e2:	d100      	bne.n	7e6 <udc_process_setup+0x3a>
     7e4:	e1df      	b.n	ba6 <udc_process_setup+0x3fa>
#endif
}
     7e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
     7e8:	4aa7      	ldr	r2, [pc, #668]	; (a88 <udc_process_setup+0x2dc>)
     7ea:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
     7ec:	2000      	movs	r0, #0
		if (udd_g_ctrlreq.req.wLength == 0) {
     7ee:	2a00      	cmp	r2, #0
     7f0:	d0f9      	beq.n	7e6 <udc_process_setup+0x3a>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     7f2:	2160      	movs	r1, #96	; 0x60
     7f4:	4219      	tst	r1, r3
     7f6:	d1e7      	bne.n	7c8 <udc_process_setup+0x1c>
     7f8:	211f      	movs	r1, #31
     7fa:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     7fc:	d108      	bne.n	810 <udc_process_setup+0x64>
			switch (udd_g_ctrlreq.req.bRequest) {
     7fe:	49a2      	ldr	r1, [pc, #648]	; (a88 <udc_process_setup+0x2dc>)
     800:	7849      	ldrb	r1, [r1, #1]
     802:	2906      	cmp	r1, #6
     804:	d023      	beq.n	84e <udc_process_setup+0xa2>
     806:	2908      	cmp	r1, #8
     808:	d100      	bne.n	80c <udc_process_setup+0x60>
     80a:	e084      	b.n	916 <udc_process_setup+0x16a>
     80c:	2900      	cmp	r1, #0
     80e:	d017      	beq.n	840 <udc_process_setup+0x94>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     810:	2b01      	cmp	r3, #1
     812:	d100      	bne.n	816 <udc_process_setup+0x6a>
     814:	e087      	b.n	926 <udc_process_setup+0x17a>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     816:	2b02      	cmp	r3, #2
     818:	d1d6      	bne.n	7c8 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
     81a:	4b9b      	ldr	r3, [pc, #620]	; (a88 <udc_process_setup+0x2dc>)
     81c:	785b      	ldrb	r3, [r3, #1]
	return false;
     81e:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
     820:	2b00      	cmp	r3, #0
     822:	d000      	beq.n	826 <udc_process_setup+0x7a>
     824:	e12b      	b.n	a7e <udc_process_setup+0x2d2>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     826:	2a02      	cmp	r2, #2
     828:	d1d5      	bne.n	7d6 <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     82a:	4b97      	ldr	r3, [pc, #604]	; (a88 <udc_process_setup+0x2dc>)
     82c:	7918      	ldrb	r0, [r3, #4]
     82e:	4b97      	ldr	r3, [pc, #604]	; (a8c <udc_process_setup+0x2e0>)
     830:	4798      	blx	r3
     832:	4b97      	ldr	r3, [pc, #604]	; (a90 <udc_process_setup+0x2e4>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
     834:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     836:	2102      	movs	r1, #2
     838:	0018      	movs	r0, r3
     83a:	4b96      	ldr	r3, [pc, #600]	; (a94 <udc_process_setup+0x2e8>)
     83c:	4798      	blx	r3
     83e:	e0fd      	b.n	a3c <udc_process_setup+0x290>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     840:	2a02      	cmp	r2, #2
     842:	d1c8      	bne.n	7d6 <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     844:	3102      	adds	r1, #2
     846:	4894      	ldr	r0, [pc, #592]	; (a98 <udc_process_setup+0x2ec>)
     848:	4b92      	ldr	r3, [pc, #584]	; (a94 <udc_process_setup+0x2e8>)
     84a:	4798      	blx	r3
     84c:	e0f6      	b.n	a3c <udc_process_setup+0x290>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     84e:	4b8e      	ldr	r3, [pc, #568]	; (a88 <udc_process_setup+0x2dc>)
     850:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     852:	0a13      	lsrs	r3, r2, #8
     854:	2b02      	cmp	r3, #2
     856:	d023      	beq.n	8a0 <udc_process_setup+0xf4>
     858:	b2d9      	uxtb	r1, r3
     85a:	2902      	cmp	r1, #2
     85c:	d90f      	bls.n	87e <udc_process_setup+0xd2>
     85e:	2b03      	cmp	r3, #3
     860:	d034      	beq.n	8cc <udc_process_setup+0x120>
     862:	2b0f      	cmp	r3, #15
     864:	d000      	beq.n	868 <udc_process_setup+0xbc>
     866:	e19c      	b.n	ba2 <udc_process_setup+0x3f6>
		if (udc_config.conf_bos == NULL) {
     868:	4b8c      	ldr	r3, [pc, #560]	; (a9c <udc_process_setup+0x2f0>)
     86a:	6898      	ldr	r0, [r3, #8]
     86c:	2800      	cmp	r0, #0
     86e:	d0b2      	beq.n	7d6 <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     870:	7883      	ldrb	r3, [r0, #2]
     872:	78c1      	ldrb	r1, [r0, #3]
     874:	0209      	lsls	r1, r1, #8
     876:	4319      	orrs	r1, r3
     878:	4b86      	ldr	r3, [pc, #536]	; (a94 <udc_process_setup+0x2e8>)
     87a:	4798      	blx	r3
     87c:	e007      	b.n	88e <udc_process_setup+0xe2>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     87e:	2b01      	cmp	r3, #1
     880:	d000      	beq.n	884 <udc_process_setup+0xd8>
     882:	e18e      	b.n	ba2 <udc_process_setup+0x3f6>
				(uint8_t *) udc_config.confdev_lsfs,
     884:	4b85      	ldr	r3, [pc, #532]	; (a9c <udc_process_setup+0x2f0>)
     886:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
     888:	7801      	ldrb	r1, [r0, #0]
     88a:	4b82      	ldr	r3, [pc, #520]	; (a94 <udc_process_setup+0x2e8>)
     88c:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     88e:	4b7e      	ldr	r3, [pc, #504]	; (a88 <udc_process_setup+0x2dc>)
     890:	88da      	ldrh	r2, [r3, #6]
     892:	899b      	ldrh	r3, [r3, #12]
     894:	4293      	cmp	r3, r2
     896:	d800      	bhi.n	89a <udc_process_setup+0xee>
     898:	e0d0      	b.n	a3c <udc_process_setup+0x290>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     89a:	4b7b      	ldr	r3, [pc, #492]	; (a88 <udc_process_setup+0x2dc>)
     89c:	819a      	strh	r2, [r3, #12]
     89e:	e0cd      	b.n	a3c <udc_process_setup+0x290>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     8a0:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
     8a2:	4b7e      	ldr	r3, [pc, #504]	; (a9c <udc_process_setup+0x2f0>)
     8a4:	681b      	ldr	r3, [r3, #0]
     8a6:	7c5b      	ldrb	r3, [r3, #17]
     8a8:	4293      	cmp	r3, r2
     8aa:	d800      	bhi.n	8ae <udc_process_setup+0x102>
     8ac:	e793      	b.n	7d6 <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
     8ae:	4b7b      	ldr	r3, [pc, #492]	; (a9c <udc_process_setup+0x2f0>)
     8b0:	685b      	ldr	r3, [r3, #4]
     8b2:	00d2      	lsls	r2, r2, #3
     8b4:	58d0      	ldr	r0, [r2, r3]
			udd_set_setup_payload(
     8b6:	7883      	ldrb	r3, [r0, #2]
     8b8:	78c1      	ldrb	r1, [r0, #3]
     8ba:	0209      	lsls	r1, r1, #8
     8bc:	4319      	orrs	r1, r3
     8be:	4b75      	ldr	r3, [pc, #468]	; (a94 <udc_process_setup+0x2e8>)
     8c0:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     8c2:	4b71      	ldr	r3, [pc, #452]	; (a88 <udc_process_setup+0x2dc>)
     8c4:	689b      	ldr	r3, [r3, #8]
     8c6:	2202      	movs	r2, #2
     8c8:	705a      	strb	r2, [r3, #1]
     8ca:	e7e0      	b.n	88e <udc_process_setup+0xe2>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     8cc:	23ff      	movs	r3, #255	; 0xff
     8ce:	401a      	ands	r2, r3
     8d0:	2a01      	cmp	r2, #1
     8d2:	d01d      	beq.n	910 <udc_process_setup+0x164>
     8d4:	2a00      	cmp	r2, #0
     8d6:	d016      	beq.n	906 <udc_process_setup+0x15a>
     8d8:	2a02      	cmp	r2, #2
     8da:	d000      	beq.n	8de <udc_process_setup+0x132>
     8dc:	e774      	b.n	7c8 <udc_process_setup+0x1c>
		str = udc_string_product_name;
     8de:	4c70      	ldr	r4, [pc, #448]	; (aa0 <udc_process_setup+0x2f4>)
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
     8e0:	210d      	movs	r1, #13
     8e2:	4a70      	ldr	r2, [pc, #448]	; (aa4 <udc_process_setup+0x2f8>)
     8e4:	3202      	adds	r2, #2
     8e6:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     8e8:	5ce0      	ldrb	r0, [r4, r3]
     8ea:	8010      	strh	r0, [r2, #0]
     8ec:	3301      	adds	r3, #1
     8ee:	3202      	adds	r2, #2
		for(i = 0; i < str_length; i++) {
     8f0:	b2d8      	uxtb	r0, r3
     8f2:	4288      	cmp	r0, r1
     8f4:	d3f8      	bcc.n	8e8 <udc_process_setup+0x13c>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     8f6:	0049      	lsls	r1, r1, #1
     8f8:	3102      	adds	r1, #2
     8fa:	486a      	ldr	r0, [pc, #424]	; (aa4 <udc_process_setup+0x2f8>)
     8fc:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
     8fe:	b289      	uxth	r1, r1
     900:	4b64      	ldr	r3, [pc, #400]	; (a94 <udc_process_setup+0x2e8>)
     902:	4798      	blx	r3
     904:	e7c3      	b.n	88e <udc_process_setup+0xe2>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     906:	2104      	movs	r1, #4
     908:	4867      	ldr	r0, [pc, #412]	; (aa8 <udc_process_setup+0x2fc>)
     90a:	4b62      	ldr	r3, [pc, #392]	; (a94 <udc_process_setup+0x2e8>)
     90c:	4798      	blx	r3
     90e:	e7be      	b.n	88e <udc_process_setup+0xe2>
		str = udc_string_manufacturer_name;
     910:	4c66      	ldr	r4, [pc, #408]	; (aac <udc_process_setup+0x300>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     912:	2108      	movs	r1, #8
     914:	e7e5      	b.n	8e2 <udc_process_setup+0x136>
	if (udd_g_ctrlreq.req.wLength != 1) {
     916:	2a01      	cmp	r2, #1
     918:	d000      	beq.n	91c <udc_process_setup+0x170>
     91a:	e75c      	b.n	7d6 <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
     91c:	2101      	movs	r1, #1
     91e:	4864      	ldr	r0, [pc, #400]	; (ab0 <udc_process_setup+0x304>)
     920:	4b5c      	ldr	r3, [pc, #368]	; (a94 <udc_process_setup+0x2e8>)
     922:	4798      	blx	r3
     924:	e08a      	b.n	a3c <udc_process_setup+0x290>
			switch (udd_g_ctrlreq.req.bRequest) {
     926:	4958      	ldr	r1, [pc, #352]	; (a88 <udc_process_setup+0x2dc>)
     928:	7849      	ldrb	r1, [r1, #1]
     92a:	290a      	cmp	r1, #10
     92c:	d000      	beq.n	930 <udc_process_setup+0x184>
     92e:	e772      	b.n	816 <udc_process_setup+0x6a>
	if (udd_g_ctrlreq.req.wLength != 1) {
     930:	2a01      	cmp	r2, #1
     932:	d000      	beq.n	936 <udc_process_setup+0x18a>
     934:	e0de      	b.n	af4 <udc_process_setup+0x348>
	if (!udc_num_configuration) {
     936:	4b5e      	ldr	r3, [pc, #376]	; (ab0 <udc_process_setup+0x304>)
     938:	781b      	ldrb	r3, [r3, #0]
     93a:	2b00      	cmp	r3, #0
     93c:	d100      	bne.n	940 <udc_process_setup+0x194>
     93e:	e0d9      	b.n	af4 <udc_process_setup+0x348>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     940:	4b51      	ldr	r3, [pc, #324]	; (a88 <udc_process_setup+0x2dc>)
     942:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     944:	4b5b      	ldr	r3, [pc, #364]	; (ab4 <udc_process_setup+0x308>)
     946:	681d      	ldr	r5, [r3, #0]
     948:	682b      	ldr	r3, [r5, #0]
     94a:	791b      	ldrb	r3, [r3, #4]
     94c:	42a3      	cmp	r3, r4
     94e:	d800      	bhi.n	952 <udc_process_setup+0x1a6>
     950:	e0d0      	b.n	af4 <udc_process_setup+0x348>
	if (!udc_update_iface_desc(iface_num, 0)) {
     952:	2100      	movs	r1, #0
     954:	0020      	movs	r0, r4
     956:	4b58      	ldr	r3, [pc, #352]	; (ab8 <udc_process_setup+0x30c>)
     958:	4798      	blx	r3
     95a:	2800      	cmp	r0, #0
     95c:	d100      	bne.n	960 <udc_process_setup+0x1b4>
     95e:	e733      	b.n	7c8 <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     960:	686b      	ldr	r3, [r5, #4]
     962:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
     964:	58e3      	ldr	r3, [r4, r3]
     966:	68db      	ldr	r3, [r3, #12]
     968:	4798      	blx	r3
     96a:	4b54      	ldr	r3, [pc, #336]	; (abc <udc_process_setup+0x310>)
     96c:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
     96e:	2101      	movs	r1, #1
     970:	0018      	movs	r0, r3
     972:	4b48      	ldr	r3, [pc, #288]	; (a94 <udc_process_setup+0x2e8>)
     974:	4798      	blx	r3
     976:	e061      	b.n	a3c <udc_process_setup+0x290>
     978:	221f      	movs	r2, #31
     97a:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     97c:	d172      	bne.n	a64 <udc_process_setup+0x2b8>
			switch (udd_g_ctrlreq.req.bRequest) {
     97e:	4a42      	ldr	r2, [pc, #264]	; (a88 <udc_process_setup+0x2dc>)
     980:	7852      	ldrb	r2, [r2, #1]
     982:	2a03      	cmp	r2, #3
     984:	d05c      	beq.n	a40 <udc_process_setup+0x294>
     986:	b2d1      	uxtb	r1, r2
     988:	2903      	cmp	r1, #3
     98a:	d93b      	bls.n	a04 <udc_process_setup+0x258>
     98c:	2a05      	cmp	r2, #5
     98e:	d04d      	beq.n	a2c <udc_process_setup+0x280>
     990:	2a09      	cmp	r2, #9
     992:	d167      	bne.n	a64 <udc_process_setup+0x2b8>
	if (udd_g_ctrlreq.req.wLength) {
     994:	4b3c      	ldr	r3, [pc, #240]	; (a88 <udc_process_setup+0x2dc>)
     996:	88db      	ldrh	r3, [r3, #6]
     998:	2b00      	cmp	r3, #0
     99a:	d000      	beq.n	99e <udc_process_setup+0x1f2>
     99c:	e71b      	b.n	7d6 <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
     99e:	4b48      	ldr	r3, [pc, #288]	; (ac0 <udc_process_setup+0x314>)
     9a0:	4798      	blx	r3
     9a2:	2800      	cmp	r0, #0
     9a4:	d100      	bne.n	9a8 <udc_process_setup+0x1fc>
     9a6:	e70f      	b.n	7c8 <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     9a8:	4b37      	ldr	r3, [pc, #220]	; (a88 <udc_process_setup+0x2dc>)
     9aa:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
     9ac:	4b3b      	ldr	r3, [pc, #236]	; (a9c <udc_process_setup+0x2f0>)
     9ae:	681b      	ldr	r3, [r3, #0]
     9b0:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     9b2:	429a      	cmp	r2, r3
     9b4:	dd00      	ble.n	9b8 <udc_process_setup+0x20c>
     9b6:	e707      	b.n	7c8 <udc_process_setup+0x1c>
	udc_reset();
     9b8:	4b42      	ldr	r3, [pc, #264]	; (ac4 <udc_process_setup+0x318>)
     9ba:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     9bc:	4b32      	ldr	r3, [pc, #200]	; (a88 <udc_process_setup+0x2dc>)
     9be:	789b      	ldrb	r3, [r3, #2]
     9c0:	4a3b      	ldr	r2, [pc, #236]	; (ab0 <udc_process_setup+0x304>)
     9c2:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
     9c4:	2b00      	cmp	r3, #0
     9c6:	d039      	beq.n	a3c <udc_process_setup+0x290>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     9c8:	4a3f      	ldr	r2, [pc, #252]	; (ac8 <udc_process_setup+0x31c>)
     9ca:	4694      	mov	ip, r2
     9cc:	4463      	add	r3, ip
     9ce:	00db      	lsls	r3, r3, #3
     9d0:	4a32      	ldr	r2, [pc, #200]	; (a9c <udc_process_setup+0x2f0>)
     9d2:	6852      	ldr	r2, [r2, #4]
     9d4:	18d3      	adds	r3, r2, r3
     9d6:	4a37      	ldr	r2, [pc, #220]	; (ab4 <udc_process_setup+0x308>)
     9d8:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     9da:	681b      	ldr	r3, [r3, #0]
     9dc:	791b      	ldrb	r3, [r3, #4]
     9de:	2b00      	cmp	r3, #0
     9e0:	d02c      	beq.n	a3c <udc_process_setup+0x290>
     9e2:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
     9e4:	4d39      	ldr	r5, [pc, #228]	; (acc <udc_process_setup+0x320>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     9e6:	0016      	movs	r6, r2
		if (!udc_iface_enable(iface_num, 0)) {
     9e8:	2100      	movs	r1, #0
     9ea:	0020      	movs	r0, r4
     9ec:	47a8      	blx	r5
     9ee:	2800      	cmp	r0, #0
     9f0:	d100      	bne.n	9f4 <udc_process_setup+0x248>
     9f2:	e6e9      	b.n	7c8 <udc_process_setup+0x1c>
			iface_num++) {
     9f4:	3401      	adds	r4, #1
     9f6:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     9f8:	6833      	ldr	r3, [r6, #0]
     9fa:	681b      	ldr	r3, [r3, #0]
     9fc:	791b      	ldrb	r3, [r3, #4]
     9fe:	42a3      	cmp	r3, r4
     a00:	d8f2      	bhi.n	9e8 <udc_process_setup+0x23c>
     a02:	e01b      	b.n	a3c <udc_process_setup+0x290>
			switch (udd_g_ctrlreq.req.bRequest) {
     a04:	2a01      	cmp	r2, #1
     a06:	d12d      	bne.n	a64 <udc_process_setup+0x2b8>
	if (udd_g_ctrlreq.req.wLength) {
     a08:	4b1f      	ldr	r3, [pc, #124]	; (a88 <udc_process_setup+0x2dc>)
     a0a:	88db      	ldrh	r3, [r3, #6]
     a0c:	2b00      	cmp	r3, #0
     a0e:	d000      	beq.n	a12 <udc_process_setup+0x266>
     a10:	e6e1      	b.n	7d6 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     a12:	4b1d      	ldr	r3, [pc, #116]	; (a88 <udc_process_setup+0x2dc>)
     a14:	885b      	ldrh	r3, [r3, #2]
     a16:	2b01      	cmp	r3, #1
     a18:	d000      	beq.n	a1c <udc_process_setup+0x270>
     a1a:	e6dc      	b.n	7d6 <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     a1c:	4a1e      	ldr	r2, [pc, #120]	; (a98 <udc_process_setup+0x2ec>)
     a1e:	8813      	ldrh	r3, [r2, #0]
     a20:	2102      	movs	r1, #2
     a22:	438b      	bics	r3, r1
     a24:	8013      	strh	r3, [r2, #0]
		UDC_REMOTEWAKEUP_DISABLE();
     a26:	4b2a      	ldr	r3, [pc, #168]	; (ad0 <udc_process_setup+0x324>)
     a28:	4798      	blx	r3
     a2a:	e007      	b.n	a3c <udc_process_setup+0x290>
	if (udd_g_ctrlreq.req.wLength) {
     a2c:	4b16      	ldr	r3, [pc, #88]	; (a88 <udc_process_setup+0x2dc>)
     a2e:	88db      	ldrh	r3, [r3, #6]
     a30:	2b00      	cmp	r3, #0
     a32:	d000      	beq.n	a36 <udc_process_setup+0x28a>
     a34:	e6cf      	b.n	7d6 <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
     a36:	4a27      	ldr	r2, [pc, #156]	; (ad4 <udc_process_setup+0x328>)
     a38:	4b13      	ldr	r3, [pc, #76]	; (a88 <udc_process_setup+0x2dc>)
     a3a:	611a      	str	r2, [r3, #16]
			return true;
     a3c:	2001      	movs	r0, #1
     a3e:	e6d2      	b.n	7e6 <udc_process_setup+0x3a>
	if (udd_g_ctrlreq.req.wLength) {
     a40:	4b11      	ldr	r3, [pc, #68]	; (a88 <udc_process_setup+0x2dc>)
     a42:	88db      	ldrh	r3, [r3, #6]
     a44:	2b00      	cmp	r3, #0
     a46:	d000      	beq.n	a4a <udc_process_setup+0x29e>
     a48:	e6c5      	b.n	7d6 <udc_process_setup+0x2a>
	switch (udd_g_ctrlreq.req.wValue) {
     a4a:	4b0f      	ldr	r3, [pc, #60]	; (a88 <udc_process_setup+0x2dc>)
     a4c:	885b      	ldrh	r3, [r3, #2]
	return false;
     a4e:	2000      	movs	r0, #0
	switch (udd_g_ctrlreq.req.wValue) {
     a50:	2b01      	cmp	r3, #1
     a52:	d114      	bne.n	a7e <udc_process_setup+0x2d2>
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
     a54:	4a10      	ldr	r2, [pc, #64]	; (a98 <udc_process_setup+0x2ec>)
     a56:	8813      	ldrh	r3, [r2, #0]
     a58:	2102      	movs	r1, #2
     a5a:	430b      	orrs	r3, r1
     a5c:	8013      	strh	r3, [r2, #0]
		UDC_REMOTEWAKEUP_ENABLE();
     a5e:	4b1e      	ldr	r3, [pc, #120]	; (ad8 <udc_process_setup+0x32c>)
     a60:	4798      	blx	r3
     a62:	e7eb      	b.n	a3c <udc_process_setup+0x290>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     a64:	2b01      	cmp	r3, #1
     a66:	d039      	beq.n	adc <udc_process_setup+0x330>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     a68:	2b02      	cmp	r3, #2
     a6a:	d000      	beq.n	a6e <udc_process_setup+0x2c2>
     a6c:	e6ac      	b.n	7c8 <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
     a6e:	4b06      	ldr	r3, [pc, #24]	; (a88 <udc_process_setup+0x2dc>)
     a70:	785b      	ldrb	r3, [r3, #1]
     a72:	2b01      	cmp	r3, #1
     a74:	d074      	beq.n	b60 <udc_process_setup+0x3b4>
     a76:	2b03      	cmp	r3, #3
     a78:	d100      	bne.n	a7c <udc_process_setup+0x2d0>
     a7a:	e080      	b.n	b7e <udc_process_setup+0x3d2>
	return false;
     a7c:	2000      	movs	r0, #0
		if (udc_reqstd()) {
     a7e:	2800      	cmp	r0, #0
     a80:	d000      	beq.n	a84 <udc_process_setup+0x2d8>
     a82:	e6b0      	b.n	7e6 <udc_process_setup+0x3a>
     a84:	e6a0      	b.n	7c8 <udc_process_setup+0x1c>
     a86:	46c0      	nop			; (mov r8, r8)
     a88:	2000038c 	.word	0x2000038c
     a8c:	00001b1d 	.word	0x00001b1d
     a90:	2000011a 	.word	0x2000011a
     a94:	00001e9d 	.word	0x00001e9d
     a98:	20000118 	.word	0x20000118
     a9c:	20000050 	.word	0x20000050
     aa0:	200000cc 	.word	0x200000cc
     aa4:	200000a0 	.word	0x200000a0
     aa8:	200000bc 	.word	0x200000bc
     aac:	200000c0 	.word	0x200000c0
     ab0:	20000120 	.word	0x20000120
     ab4:	20000124 	.word	0x20000124
     ab8:	000005b9 	.word	0x000005b9
     abc:	2000011c 	.word	0x2000011c
     ac0:	00001e8d 	.word	0x00001e8d
     ac4:	00000709 	.word	0x00000709
     ac8:	1fffffff 	.word	0x1fffffff
     acc:	00000699 	.word	0x00000699
     ad0:	00003189 	.word	0x00003189
     ad4:	000005a1 	.word	0x000005a1
     ad8:	0000317d 	.word	0x0000317d
			switch (udd_g_ctrlreq.req.bRequest) {
     adc:	4a46      	ldr	r2, [pc, #280]	; (bf8 <udc_process_setup+0x44c>)
     ade:	7852      	ldrb	r2, [r2, #1]
     ae0:	2a0b      	cmp	r2, #11
     ae2:	d1c1      	bne.n	a68 <udc_process_setup+0x2bc>
	if (udd_g_ctrlreq.req.wLength) {
     ae4:	4b44      	ldr	r3, [pc, #272]	; (bf8 <udc_process_setup+0x44c>)
     ae6:	88db      	ldrh	r3, [r3, #6]
     ae8:	2b00      	cmp	r3, #0
     aea:	d103      	bne.n	af4 <udc_process_setup+0x348>
	if (!udc_num_configuration) {
     aec:	4b43      	ldr	r3, [pc, #268]	; (bfc <udc_process_setup+0x450>)
     aee:	781b      	ldrb	r3, [r3, #0]
     af0:	2b00      	cmp	r3, #0
     af2:	d127      	bne.n	b44 <udc_process_setup+0x398>
	if (0 == udc_num_configuration) {
     af4:	4b41      	ldr	r3, [pc, #260]	; (bfc <udc_process_setup+0x450>)
     af6:	781b      	ldrb	r3, [r3, #0]
	return false;
     af8:	2000      	movs	r0, #0
	if (0 == udc_num_configuration) {
     afa:	2b00      	cmp	r3, #0
     afc:	d100      	bne.n	b00 <udc_process_setup+0x354>
     afe:	e672      	b.n	7e6 <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     b00:	4b3d      	ldr	r3, [pc, #244]	; (bf8 <udc_process_setup+0x44c>)
     b02:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     b04:	4b3e      	ldr	r3, [pc, #248]	; (c00 <udc_process_setup+0x454>)
     b06:	681d      	ldr	r5, [r3, #0]
     b08:	682b      	ldr	r3, [r5, #0]
     b0a:	791b      	ldrb	r3, [r3, #4]
     b0c:	42a3      	cmp	r3, r4
     b0e:	d800      	bhi.n	b12 <udc_process_setup+0x366>
     b10:	e669      	b.n	7e6 <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
     b12:	2100      	movs	r1, #0
     b14:	0020      	movs	r0, r4
     b16:	4b3b      	ldr	r3, [pc, #236]	; (c04 <udc_process_setup+0x458>)
     b18:	4798      	blx	r3
     b1a:	2800      	cmp	r0, #0
     b1c:	d100      	bne.n	b20 <udc_process_setup+0x374>
     b1e:	e65a      	b.n	7d6 <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     b20:	686b      	ldr	r3, [r5, #4]
     b22:	00a2      	lsls	r2, r4, #2
     b24:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     b26:	68eb      	ldr	r3, [r5, #12]
     b28:	4798      	blx	r3
     b2a:	0001      	movs	r1, r0
     b2c:	0020      	movs	r0, r4
     b2e:	4b35      	ldr	r3, [pc, #212]	; (c04 <udc_process_setup+0x458>)
     b30:	4798      	blx	r3
     b32:	2800      	cmp	r0, #0
     b34:	d100      	bne.n	b38 <udc_process_setup+0x38c>
     b36:	e64e      	b.n	7d6 <udc_process_setup+0x2a>
	return udi_api->setup();
     b38:	68ab      	ldr	r3, [r5, #8]
     b3a:	4798      	blx	r3
		if (udc_req_iface()) {
     b3c:	2800      	cmp	r0, #0
     b3e:	d000      	beq.n	b42 <udc_process_setup+0x396>
     b40:	e651      	b.n	7e6 <udc_process_setup+0x3a>
     b42:	e648      	b.n	7d6 <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     b44:	4b2c      	ldr	r3, [pc, #176]	; (bf8 <udc_process_setup+0x44c>)
     b46:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     b48:	885c      	ldrh	r4, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
     b4a:	0028      	movs	r0, r5
     b4c:	4b2e      	ldr	r3, [pc, #184]	; (c08 <udc_process_setup+0x45c>)
     b4e:	4798      	blx	r3
     b50:	2800      	cmp	r0, #0
     b52:	d100      	bne.n	b56 <udc_process_setup+0x3aa>
     b54:	e638      	b.n	7c8 <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
     b56:	b2e1      	uxtb	r1, r4
     b58:	0028      	movs	r0, r5
     b5a:	4b2c      	ldr	r3, [pc, #176]	; (c0c <udc_process_setup+0x460>)
     b5c:	4798      	blx	r3
     b5e:	e78e      	b.n	a7e <udc_process_setup+0x2d2>
	if (udd_g_ctrlreq.req.wLength) {
     b60:	4b25      	ldr	r3, [pc, #148]	; (bf8 <udc_process_setup+0x44c>)
     b62:	88db      	ldrh	r3, [r3, #6]
     b64:	2b00      	cmp	r3, #0
     b66:	d000      	beq.n	b6a <udc_process_setup+0x3be>
     b68:	e635      	b.n	7d6 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     b6a:	4b23      	ldr	r3, [pc, #140]	; (bf8 <udc_process_setup+0x44c>)
     b6c:	885b      	ldrh	r3, [r3, #2]
     b6e:	2b00      	cmp	r3, #0
     b70:	d000      	beq.n	b74 <udc_process_setup+0x3c8>
     b72:	e630      	b.n	7d6 <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     b74:	4b20      	ldr	r3, [pc, #128]	; (bf8 <udc_process_setup+0x44c>)
     b76:	7918      	ldrb	r0, [r3, #4]
     b78:	4b25      	ldr	r3, [pc, #148]	; (c10 <udc_process_setup+0x464>)
     b7a:	4798      	blx	r3
     b7c:	e77f      	b.n	a7e <udc_process_setup+0x2d2>
	if (udd_g_ctrlreq.req.wLength) {
     b7e:	4b1e      	ldr	r3, [pc, #120]	; (bf8 <udc_process_setup+0x44c>)
     b80:	88db      	ldrh	r3, [r3, #6]
     b82:	2b00      	cmp	r3, #0
     b84:	d000      	beq.n	b88 <udc_process_setup+0x3dc>
     b86:	e626      	b.n	7d6 <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     b88:	4b1b      	ldr	r3, [pc, #108]	; (bf8 <udc_process_setup+0x44c>)
     b8a:	885b      	ldrh	r3, [r3, #2]
     b8c:	2b00      	cmp	r3, #0
     b8e:	d000      	beq.n	b92 <udc_process_setup+0x3e6>
     b90:	e621      	b.n	7d6 <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
     b92:	4c19      	ldr	r4, [pc, #100]	; (bf8 <udc_process_setup+0x44c>)
     b94:	7920      	ldrb	r0, [r4, #4]
     b96:	4b1f      	ldr	r3, [pc, #124]	; (c14 <udc_process_setup+0x468>)
     b98:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     b9a:	7920      	ldrb	r0, [r4, #4]
     b9c:	4b1e      	ldr	r3, [pc, #120]	; (c18 <udc_process_setup+0x46c>)
     b9e:	4798      	blx	r3
     ba0:	e76d      	b.n	a7e <udc_process_setup+0x2d2>
		return false;
     ba2:	2000      	movs	r0, #0
     ba4:	e76b      	b.n	a7e <udc_process_setup+0x2d2>
	if (0 == udc_num_configuration) {
     ba6:	4b15      	ldr	r3, [pc, #84]	; (bfc <udc_process_setup+0x450>)
     ba8:	781b      	ldrb	r3, [r3, #0]
     baa:	2b00      	cmp	r3, #0
     bac:	d100      	bne.n	bb0 <udc_process_setup+0x404>
     bae:	e61a      	b.n	7e6 <udc_process_setup+0x3a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     bb0:	4b13      	ldr	r3, [pc, #76]	; (c00 <udc_process_setup+0x454>)
     bb2:	681b      	ldr	r3, [r3, #0]
     bb4:	681a      	ldr	r2, [r3, #0]
     bb6:	7912      	ldrb	r2, [r2, #4]
     bb8:	2a00      	cmp	r2, #0
     bba:	d01a      	beq.n	bf2 <udc_process_setup+0x446>
     bbc:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     bbe:	4e11      	ldr	r6, [pc, #68]	; (c04 <udc_process_setup+0x458>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     bc0:	4f0f      	ldr	r7, [pc, #60]	; (c00 <udc_process_setup+0x454>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
     bc2:	685b      	ldr	r3, [r3, #4]
     bc4:	00aa      	lsls	r2, r5, #2
     bc6:	58d4      	ldr	r4, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     bc8:	68e3      	ldr	r3, [r4, #12]
     bca:	4798      	blx	r3
     bcc:	0001      	movs	r1, r0
     bce:	0028      	movs	r0, r5
     bd0:	47b0      	blx	r6
     bd2:	2800      	cmp	r0, #0
     bd4:	d100      	bne.n	bd8 <udc_process_setup+0x42c>
     bd6:	e606      	b.n	7e6 <udc_process_setup+0x3a>
		if (udi_api->setup()) {
     bd8:	68a3      	ldr	r3, [r4, #8]
     bda:	4798      	blx	r3
     bdc:	2800      	cmp	r0, #0
     bde:	d000      	beq.n	be2 <udc_process_setup+0x436>
     be0:	e601      	b.n	7e6 <udc_process_setup+0x3a>
			iface_num++) {
     be2:	3501      	adds	r5, #1
     be4:	b2ed      	uxtb	r5, r5
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     be6:	683b      	ldr	r3, [r7, #0]
     be8:	681a      	ldr	r2, [r3, #0]
     bea:	7912      	ldrb	r2, [r2, #4]
     bec:	42aa      	cmp	r2, r5
     bee:	d8e8      	bhi.n	bc2 <udc_process_setup+0x416>
     bf0:	e5f9      	b.n	7e6 <udc_process_setup+0x3a>
	return false;
     bf2:	2000      	movs	r0, #0
     bf4:	e5f7      	b.n	7e6 <udc_process_setup+0x3a>
     bf6:	46c0      	nop			; (mov r8, r8)
     bf8:	2000038c 	.word	0x2000038c
     bfc:	20000120 	.word	0x20000120
     c00:	20000124 	.word	0x20000124
     c04:	000005b9 	.word	0x000005b9
     c08:	0000062d 	.word	0x0000062d
     c0c:	00000699 	.word	0x00000699
     c10:	00001c61 	.word	0x00001c61
     c14:	00001971 	.word	0x00001971
     c18:	00001b31 	.word	0x00001b31

00000c1c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     c1c:	4b0c      	ldr	r3, [pc, #48]	; (c50 <cpu_irq_enter_critical+0x34>)
     c1e:	681b      	ldr	r3, [r3, #0]
     c20:	2b00      	cmp	r3, #0
     c22:	d106      	bne.n	c32 <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     c24:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     c28:	2b00      	cmp	r3, #0
     c2a:	d007      	beq.n	c3c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     c2c:	2200      	movs	r2, #0
     c2e:	4b09      	ldr	r3, [pc, #36]	; (c54 <cpu_irq_enter_critical+0x38>)
     c30:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     c32:	4a07      	ldr	r2, [pc, #28]	; (c50 <cpu_irq_enter_critical+0x34>)
     c34:	6813      	ldr	r3, [r2, #0]
     c36:	3301      	adds	r3, #1
     c38:	6013      	str	r3, [r2, #0]
}
     c3a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     c3c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     c3e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     c42:	2200      	movs	r2, #0
     c44:	4b04      	ldr	r3, [pc, #16]	; (c58 <cpu_irq_enter_critical+0x3c>)
     c46:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     c48:	3201      	adds	r2, #1
     c4a:	4b02      	ldr	r3, [pc, #8]	; (c54 <cpu_irq_enter_critical+0x38>)
     c4c:	701a      	strb	r2, [r3, #0]
     c4e:	e7f0      	b.n	c32 <cpu_irq_enter_critical+0x16>
     c50:	2000012c 	.word	0x2000012c
     c54:	20000130 	.word	0x20000130
     c58:	200000da 	.word	0x200000da

00000c5c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     c5c:	4b08      	ldr	r3, [pc, #32]	; (c80 <cpu_irq_leave_critical+0x24>)
     c5e:	681a      	ldr	r2, [r3, #0]
     c60:	3a01      	subs	r2, #1
     c62:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     c64:	681b      	ldr	r3, [r3, #0]
     c66:	2b00      	cmp	r3, #0
     c68:	d109      	bne.n	c7e <cpu_irq_leave_critical+0x22>
     c6a:	4b06      	ldr	r3, [pc, #24]	; (c84 <cpu_irq_leave_critical+0x28>)
     c6c:	781b      	ldrb	r3, [r3, #0]
     c6e:	2b00      	cmp	r3, #0
     c70:	d005      	beq.n	c7e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     c72:	2201      	movs	r2, #1
     c74:	4b04      	ldr	r3, [pc, #16]	; (c88 <cpu_irq_leave_critical+0x2c>)
     c76:	701a      	strb	r2, [r3, #0]
     c78:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     c7c:	b662      	cpsie	i
	}
}
     c7e:	4770      	bx	lr
     c80:	2000012c 	.word	0x2000012c
     c84:	20000130 	.word	0x20000130
     c88:	200000da 	.word	0x200000da

00000c8c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
     c8e:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
     c90:	ac01      	add	r4, sp, #4
     c92:	2501      	movs	r5, #1
     c94:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     c96:	2700      	movs	r7, #0
     c98:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     c9a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     c9c:	0021      	movs	r1, r4
     c9e:	200a      	movs	r0, #10
     ca0:	4e06      	ldr	r6, [pc, #24]	; (cbc <system_board_init+0x30>)
     ca2:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     ca4:	2280      	movs	r2, #128	; 0x80
     ca6:	00d2      	lsls	r2, r2, #3
     ca8:	4b05      	ldr	r3, [pc, #20]	; (cc0 <system_board_init+0x34>)
     caa:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     cac:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     cae:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     cb0:	0021      	movs	r1, r4
     cb2:	200e      	movs	r0, #14
     cb4:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     cb6:	b003      	add	sp, #12
     cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     cba:	46c0      	nop			; (mov r8, r8)
     cbc:	00000d9d 	.word	0x00000d9d
     cc0:	41004400 	.word	0x41004400

00000cc4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     cc4:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     cc6:	2200      	movs	r2, #0
     cc8:	4b10      	ldr	r3, [pc, #64]	; (d0c <EIC_Handler+0x48>)
     cca:	701a      	strb	r2, [r3, #0]
     ccc:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     cce:	4910      	ldr	r1, [pc, #64]	; (d10 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     cd0:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     cd2:	4e10      	ldr	r6, [pc, #64]	; (d14 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     cd4:	4c0d      	ldr	r4, [pc, #52]	; (d0c <EIC_Handler+0x48>)
     cd6:	e00a      	b.n	cee <EIC_Handler+0x2a>
		return eics[eic_index];
     cd8:	490d      	ldr	r1, [pc, #52]	; (d10 <EIC_Handler+0x4c>)
     cda:	e008      	b.n	cee <EIC_Handler+0x2a>
     cdc:	7823      	ldrb	r3, [r4, #0]
     cde:	3301      	adds	r3, #1
     ce0:	b2db      	uxtb	r3, r3
     ce2:	7023      	strb	r3, [r4, #0]
     ce4:	2b0f      	cmp	r3, #15
     ce6:	d810      	bhi.n	d0a <EIC_Handler+0x46>
		return NULL;
     ce8:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     cea:	2b1f      	cmp	r3, #31
     cec:	d9f4      	bls.n	cd8 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     cee:	0028      	movs	r0, r5
     cf0:	4018      	ands	r0, r3
     cf2:	2201      	movs	r2, #1
     cf4:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     cf6:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     cf8:	4210      	tst	r0, r2
     cfa:	d0ef      	beq.n	cdc <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     cfc:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     cfe:	009b      	lsls	r3, r3, #2
     d00:	599b      	ldr	r3, [r3, r6]
     d02:	2b00      	cmp	r3, #0
     d04:	d0ea      	beq.n	cdc <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     d06:	4798      	blx	r3
     d08:	e7e8      	b.n	cdc <EIC_Handler+0x18>
			}
		}
	}
}
     d0a:	bd70      	pop	{r4, r5, r6, pc}
     d0c:	200001a1 	.word	0x200001a1
     d10:	40001800 	.word	0x40001800
     d14:	200001a4 	.word	0x200001a4

00000d18 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     d18:	4a04      	ldr	r2, [pc, #16]	; (d2c <_extint_enable+0x14>)
     d1a:	7813      	ldrb	r3, [r2, #0]
     d1c:	2102      	movs	r1, #2
     d1e:	430b      	orrs	r3, r1
     d20:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     d22:	7853      	ldrb	r3, [r2, #1]
     d24:	b25b      	sxtb	r3, r3
     d26:	2b00      	cmp	r3, #0
     d28:	dbfb      	blt.n	d22 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     d2a:	4770      	bx	lr
     d2c:	40001800 	.word	0x40001800

00000d30 <_system_extint_init>:
{
     d30:	b500      	push	{lr}
     d32:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     d34:	4a12      	ldr	r2, [pc, #72]	; (d80 <_system_extint_init+0x50>)
     d36:	6993      	ldr	r3, [r2, #24]
     d38:	2140      	movs	r1, #64	; 0x40
     d3a:	430b      	orrs	r3, r1
     d3c:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     d3e:	a901      	add	r1, sp, #4
     d40:	2300      	movs	r3, #0
     d42:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     d44:	2005      	movs	r0, #5
     d46:	4b0f      	ldr	r3, [pc, #60]	; (d84 <_system_extint_init+0x54>)
     d48:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     d4a:	2005      	movs	r0, #5
     d4c:	4b0e      	ldr	r3, [pc, #56]	; (d88 <_system_extint_init+0x58>)
     d4e:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     d50:	4a0e      	ldr	r2, [pc, #56]	; (d8c <_system_extint_init+0x5c>)
     d52:	7813      	ldrb	r3, [r2, #0]
     d54:	2101      	movs	r1, #1
     d56:	430b      	orrs	r3, r1
     d58:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     d5a:	7853      	ldrb	r3, [r2, #1]
     d5c:	b25b      	sxtb	r3, r3
     d5e:	2b00      	cmp	r3, #0
     d60:	dbfb      	blt.n	d5a <_system_extint_init+0x2a>
     d62:	4b0b      	ldr	r3, [pc, #44]	; (d90 <_system_extint_init+0x60>)
     d64:	0019      	movs	r1, r3
     d66:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     d68:	2200      	movs	r2, #0
     d6a:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     d6c:	4299      	cmp	r1, r3
     d6e:	d1fc      	bne.n	d6a <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     d70:	2210      	movs	r2, #16
     d72:	4b08      	ldr	r3, [pc, #32]	; (d94 <_system_extint_init+0x64>)
     d74:	601a      	str	r2, [r3, #0]
	_extint_enable();
     d76:	4b08      	ldr	r3, [pc, #32]	; (d98 <_system_extint_init+0x68>)
     d78:	4798      	blx	r3
}
     d7a:	b003      	add	sp, #12
     d7c:	bd00      	pop	{pc}
     d7e:	46c0      	nop			; (mov r8, r8)
     d80:	40000400 	.word	0x40000400
     d84:	000011d1 	.word	0x000011d1
     d88:	00001145 	.word	0x00001145
     d8c:	40001800 	.word	0x40001800
     d90:	200001a4 	.word	0x200001a4
     d94:	e000e100 	.word	0xe000e100
     d98:	00000d19 	.word	0x00000d19

00000d9c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     d9c:	b500      	push	{lr}
     d9e:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     da0:	ab01      	add	r3, sp, #4
     da2:	2280      	movs	r2, #128	; 0x80
     da4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     da6:	780a      	ldrb	r2, [r1, #0]
     da8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     daa:	784a      	ldrb	r2, [r1, #1]
     dac:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     dae:	788a      	ldrb	r2, [r1, #2]
     db0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     db2:	0019      	movs	r1, r3
     db4:	4b01      	ldr	r3, [pc, #4]	; (dbc <port_pin_set_config+0x20>)
     db6:	4798      	blx	r3
}
     db8:	b003      	add	sp, #12
     dba:	bd00      	pop	{pc}
     dbc:	00001295 	.word	0x00001295

00000dc0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     dc0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     dc2:	490c      	ldr	r1, [pc, #48]	; (df4 <system_clock_source_osc8m_set_config+0x34>)
     dc4:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     dc6:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     dc8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     dca:	7840      	ldrb	r0, [r0, #1]
     dcc:	2201      	movs	r2, #1
     dce:	4010      	ands	r0, r2
     dd0:	0180      	lsls	r0, r0, #6
     dd2:	2640      	movs	r6, #64	; 0x40
     dd4:	43b3      	bics	r3, r6
     dd6:	4303      	orrs	r3, r0
     dd8:	402a      	ands	r2, r5
     dda:	01d2      	lsls	r2, r2, #7
     ddc:	2080      	movs	r0, #128	; 0x80
     dde:	4383      	bics	r3, r0
     de0:	4313      	orrs	r3, r2
     de2:	2203      	movs	r2, #3
     de4:	4022      	ands	r2, r4
     de6:	0212      	lsls	r2, r2, #8
     de8:	4803      	ldr	r0, [pc, #12]	; (df8 <system_clock_source_osc8m_set_config+0x38>)
     dea:	4003      	ands	r3, r0
     dec:	4313      	orrs	r3, r2
     dee:	620b      	str	r3, [r1, #32]
}
     df0:	bd70      	pop	{r4, r5, r6, pc}
     df2:	46c0      	nop			; (mov r8, r8)
     df4:	40000800 	.word	0x40000800
     df8:	fffffcff 	.word	0xfffffcff

00000dfc <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
     dfc:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     dfe:	7a03      	ldrb	r3, [r0, #8]
     e00:	069b      	lsls	r3, r3, #26
     e02:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
     e04:	8942      	ldrh	r2, [r0, #10]
     e06:	0592      	lsls	r2, r2, #22
     e08:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     e0a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
     e0c:	4918      	ldr	r1, [pc, #96]	; (e70 <system_clock_source_dfll_set_config+0x74>)
     e0e:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
     e10:	7983      	ldrb	r3, [r0, #6]
     e12:	79c2      	ldrb	r2, [r0, #7]
     e14:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
     e16:	8842      	ldrh	r2, [r0, #2]
     e18:	8884      	ldrh	r4, [r0, #4]
     e1a:	4322      	orrs	r2, r4
     e1c:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
     e1e:	7842      	ldrb	r2, [r0, #1]
     e20:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
     e22:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
     e24:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
     e26:	7803      	ldrb	r3, [r0, #0]
     e28:	2b04      	cmp	r3, #4
     e2a:	d011      	beq.n	e50 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
     e2c:	2b20      	cmp	r3, #32
     e2e:	d10e      	bne.n	e4e <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     e30:	7b03      	ldrb	r3, [r0, #12]
     e32:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     e34:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     e36:	4313      	orrs	r3, r2
     e38:	89c2      	ldrh	r2, [r0, #14]
     e3a:	0412      	lsls	r2, r2, #16
     e3c:	490d      	ldr	r1, [pc, #52]	; (e74 <system_clock_source_dfll_set_config+0x78>)
     e3e:	400a      	ands	r2, r1
     e40:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
     e42:	4a0b      	ldr	r2, [pc, #44]	; (e70 <system_clock_source_dfll_set_config+0x74>)
     e44:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
     e46:	6811      	ldr	r1, [r2, #0]
     e48:	4b0b      	ldr	r3, [pc, #44]	; (e78 <system_clock_source_dfll_set_config+0x7c>)
     e4a:	430b      	orrs	r3, r1
     e4c:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
     e4e:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     e50:	7b03      	ldrb	r3, [r0, #12]
     e52:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     e54:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     e56:	4313      	orrs	r3, r2
     e58:	89c2      	ldrh	r2, [r0, #14]
     e5a:	0412      	lsls	r2, r2, #16
     e5c:	4905      	ldr	r1, [pc, #20]	; (e74 <system_clock_source_dfll_set_config+0x78>)
     e5e:	400a      	ands	r2, r1
     e60:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
     e62:	4a03      	ldr	r2, [pc, #12]	; (e70 <system_clock_source_dfll_set_config+0x74>)
     e64:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
     e66:	6813      	ldr	r3, [r2, #0]
     e68:	2104      	movs	r1, #4
     e6a:	430b      	orrs	r3, r1
     e6c:	6013      	str	r3, [r2, #0]
     e6e:	e7ee      	b.n	e4e <system_clock_source_dfll_set_config+0x52>
     e70:	20000134 	.word	0x20000134
     e74:	03ff0000 	.word	0x03ff0000
     e78:	00000424 	.word	0x00000424

00000e7c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     e7c:	2808      	cmp	r0, #8
     e7e:	d803      	bhi.n	e88 <system_clock_source_enable+0xc>
     e80:	0080      	lsls	r0, r0, #2
     e82:	4b25      	ldr	r3, [pc, #148]	; (f18 <system_clock_source_enable+0x9c>)
     e84:	581b      	ldr	r3, [r3, r0]
     e86:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     e88:	2017      	movs	r0, #23
     e8a:	e044      	b.n	f16 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     e8c:	4a23      	ldr	r2, [pc, #140]	; (f1c <system_clock_source_enable+0xa0>)
     e8e:	6a13      	ldr	r3, [r2, #32]
     e90:	2102      	movs	r1, #2
     e92:	430b      	orrs	r3, r1
     e94:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     e96:	2000      	movs	r0, #0
     e98:	e03d      	b.n	f16 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     e9a:	4a20      	ldr	r2, [pc, #128]	; (f1c <system_clock_source_enable+0xa0>)
     e9c:	6993      	ldr	r3, [r2, #24]
     e9e:	2102      	movs	r1, #2
     ea0:	430b      	orrs	r3, r1
     ea2:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     ea4:	2000      	movs	r0, #0
		break;
     ea6:	e036      	b.n	f16 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     ea8:	4a1c      	ldr	r2, [pc, #112]	; (f1c <system_clock_source_enable+0xa0>)
     eaa:	8a13      	ldrh	r3, [r2, #16]
     eac:	2102      	movs	r1, #2
     eae:	430b      	orrs	r3, r1
     eb0:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     eb2:	2000      	movs	r0, #0
		break;
     eb4:	e02f      	b.n	f16 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     eb6:	4a19      	ldr	r2, [pc, #100]	; (f1c <system_clock_source_enable+0xa0>)
     eb8:	8a93      	ldrh	r3, [r2, #20]
     eba:	2102      	movs	r1, #2
     ebc:	430b      	orrs	r3, r1
     ebe:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     ec0:	2000      	movs	r0, #0
		break;
     ec2:	e028      	b.n	f16 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     ec4:	4916      	ldr	r1, [pc, #88]	; (f20 <system_clock_source_enable+0xa4>)
     ec6:	680b      	ldr	r3, [r1, #0]
     ec8:	2202      	movs	r2, #2
     eca:	4313      	orrs	r3, r2
     ecc:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     ece:	4b13      	ldr	r3, [pc, #76]	; (f1c <system_clock_source_enable+0xa0>)
     ed0:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     ed2:	0019      	movs	r1, r3
     ed4:	320e      	adds	r2, #14
     ed6:	68cb      	ldr	r3, [r1, #12]
     ed8:	421a      	tst	r2, r3
     eda:	d0fc      	beq.n	ed6 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     edc:	4a10      	ldr	r2, [pc, #64]	; (f20 <system_clock_source_enable+0xa4>)
     ede:	6891      	ldr	r1, [r2, #8]
     ee0:	4b0e      	ldr	r3, [pc, #56]	; (f1c <system_clock_source_enable+0xa0>)
     ee2:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     ee4:	6852      	ldr	r2, [r2, #4]
     ee6:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     ee8:	2200      	movs	r2, #0
     eea:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     eec:	0019      	movs	r1, r3
     eee:	3210      	adds	r2, #16
     ef0:	68cb      	ldr	r3, [r1, #12]
     ef2:	421a      	tst	r2, r3
     ef4:	d0fc      	beq.n	ef0 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     ef6:	4b0a      	ldr	r3, [pc, #40]	; (f20 <system_clock_source_enable+0xa4>)
     ef8:	681b      	ldr	r3, [r3, #0]
     efa:	b29b      	uxth	r3, r3
     efc:	4a07      	ldr	r2, [pc, #28]	; (f1c <system_clock_source_enable+0xa0>)
     efe:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     f00:	2000      	movs	r0, #0
     f02:	e008      	b.n	f16 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     f04:	4905      	ldr	r1, [pc, #20]	; (f1c <system_clock_source_enable+0xa0>)
     f06:	2244      	movs	r2, #68	; 0x44
     f08:	5c8b      	ldrb	r3, [r1, r2]
     f0a:	2002      	movs	r0, #2
     f0c:	4303      	orrs	r3, r0
     f0e:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     f10:	2000      	movs	r0, #0
		break;
     f12:	e000      	b.n	f16 <system_clock_source_enable+0x9a>
		return STATUS_OK;
     f14:	2000      	movs	r0, #0
}
     f16:	4770      	bx	lr
     f18:	00003548 	.word	0x00003548
     f1c:	40000800 	.word	0x40000800
     f20:	20000134 	.word	0x20000134

00000f24 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     f24:	b530      	push	{r4, r5, lr}
     f26:	b08b      	sub	sp, #44	; 0x2c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     f28:	22c2      	movs	r2, #194	; 0xc2
     f2a:	00d2      	lsls	r2, r2, #3
     f2c:	4b30      	ldr	r3, [pc, #192]	; (ff0 <system_clock_init+0xcc>)
     f2e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     f30:	4a30      	ldr	r2, [pc, #192]	; (ff4 <system_clock_init+0xd0>)
     f32:	6853      	ldr	r3, [r2, #4]
     f34:	211e      	movs	r1, #30
     f36:	438b      	bics	r3, r1
     f38:	391a      	subs	r1, #26
     f3a:	430b      	orrs	r3, r1
     f3c:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     f3e:	2201      	movs	r2, #1
     f40:	ab01      	add	r3, sp, #4
     f42:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     f44:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     f46:	4d2c      	ldr	r5, [pc, #176]	; (ff8 <system_clock_init+0xd4>)
     f48:	b2e0      	uxtb	r0, r4
     f4a:	a901      	add	r1, sp, #4
     f4c:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     f4e:	3401      	adds	r4, #1
     f50:	2c25      	cmp	r4, #37	; 0x25
     f52:	d1f9      	bne.n	f48 <system_clock_init+0x24>
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
     f54:	ab05      	add	r3, sp, #20
     f56:	2200      	movs	r2, #0
     f58:	2100      	movs	r1, #0
     f5a:	8059      	strh	r1, [r3, #2]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
     f5c:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
     f5e:	71da      	strb	r2, [r3, #7]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
     f60:	3120      	adds	r1, #32
     f62:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
     f64:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     f66:	4b25      	ldr	r3, [pc, #148]	; (ffc <system_clock_init+0xd8>)
     f68:	681b      	ldr	r3, [r3, #0]
     f6a:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
     f6c:	2b3f      	cmp	r3, #63	; 0x3f
     f6e:	d03c      	beq.n	fea <system_clock_init+0xc6>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
     f70:	a805      	add	r0, sp, #20
     f72:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
     f74:	2307      	movs	r3, #7
     f76:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10;
     f78:	3303      	adds	r3, #3
     f7a:	81c3      	strh	r3, [r0, #14]
		dfll_conf.fine_value   = 0x1ff;
     f7c:	4b20      	ldr	r3, [pc, #128]	; (1000 <system_clock_init+0xdc>)
     f7e:	8143      	strh	r3, [r0, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
     f80:	3bff      	subs	r3, #255	; 0xff
     f82:	8083      	strh	r3, [r0, #4]

		dfll_conf.multiply_factor = 48000;
     f84:	4b1f      	ldr	r3, [pc, #124]	; (1004 <system_clock_init+0xe0>)
     f86:	8203      	strh	r3, [r0, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
     f88:	4b1f      	ldr	r3, [pc, #124]	; (1008 <system_clock_init+0xe4>)
     f8a:	4798      	blx	r3
	config->run_in_standby  = false;
     f8c:	a804      	add	r0, sp, #16
     f8e:	2300      	movs	r3, #0
     f90:	7043      	strb	r3, [r0, #1]
	config->on_demand       = true;
     f92:	2201      	movs	r2, #1
     f94:	7082      	strb	r2, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     f96:	7003      	strb	r3, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     f98:	4b1c      	ldr	r3, [pc, #112]	; (100c <system_clock_init+0xe8>)
     f9a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     f9c:	2006      	movs	r0, #6
     f9e:	4c1c      	ldr	r4, [pc, #112]	; (1010 <system_clock_init+0xec>)
     fa0:	47a0      	blx	r4


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     fa2:	4b1c      	ldr	r3, [pc, #112]	; (1014 <system_clock_init+0xf0>)
     fa4:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
     fa6:	2007      	movs	r0, #7
     fa8:	47a0      	blx	r4
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
     faa:	4911      	ldr	r1, [pc, #68]	; (ff0 <system_clock_init+0xcc>)
     fac:	2210      	movs	r2, #16
     fae:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
     fb0:	421a      	tst	r2, r3
     fb2:	d0fc      	beq.n	fae <system_clock_init+0x8a>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
     fb4:	4a0e      	ldr	r2, [pc, #56]	; (ff0 <system_clock_init+0xcc>)
     fb6:	8c93      	ldrh	r3, [r2, #36]	; 0x24
     fb8:	2180      	movs	r1, #128	; 0x80
     fba:	430b      	orrs	r3, r1
     fbc:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
     fbe:	4a16      	ldr	r2, [pc, #88]	; (1018 <system_clock_init+0xf4>)
     fc0:	2300      	movs	r3, #0
     fc2:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     fc4:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     fc6:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     fc8:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
     fca:	a901      	add	r1, sp, #4
     fcc:	2201      	movs	r2, #1
     fce:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
     fd0:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
     fd2:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     fd4:	3307      	adds	r3, #7
     fd6:	700b      	strb	r3, [r1, #0]
     fd8:	720a      	strb	r2, [r1, #8]
     fda:	2000      	movs	r0, #0
     fdc:	4b0f      	ldr	r3, [pc, #60]	; (101c <system_clock_init+0xf8>)
     fde:	4798      	blx	r3
     fe0:	2000      	movs	r0, #0
     fe2:	4b0f      	ldr	r3, [pc, #60]	; (1020 <system_clock_init+0xfc>)
     fe4:	4798      	blx	r3
#endif
}
     fe6:	b00b      	add	sp, #44	; 0x2c
     fe8:	bd30      	pop	{r4, r5, pc}
		coarse = 0x1f;
     fea:	3b20      	subs	r3, #32
     fec:	e7c0      	b.n	f70 <system_clock_init+0x4c>
     fee:	46c0      	nop			; (mov r8, r8)
     ff0:	40000800 	.word	0x40000800
     ff4:	41004000 	.word	0x41004000
     ff8:	000011d1 	.word	0x000011d1
     ffc:	00806024 	.word	0x00806024
    1000:	000001ff 	.word	0x000001ff
    1004:	ffffbb80 	.word	0xffffbb80
    1008:	00000dfd 	.word	0x00000dfd
    100c:	00000dc1 	.word	0x00000dc1
    1010:	00000e7d 	.word	0x00000e7d
    1014:	00001025 	.word	0x00001025
    1018:	40000400 	.word	0x40000400
    101c:	00001049 	.word	0x00001049
    1020:	00001101 	.word	0x00001101

00001024 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1024:	4a06      	ldr	r2, [pc, #24]	; (1040 <system_gclk_init+0x1c>)
    1026:	6993      	ldr	r3, [r2, #24]
    1028:	2108      	movs	r1, #8
    102a:	430b      	orrs	r3, r1
    102c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    102e:	2201      	movs	r2, #1
    1030:	4b04      	ldr	r3, [pc, #16]	; (1044 <system_gclk_init+0x20>)
    1032:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1034:	0019      	movs	r1, r3
    1036:	780b      	ldrb	r3, [r1, #0]
    1038:	4213      	tst	r3, r2
    103a:	d1fc      	bne.n	1036 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    103c:	4770      	bx	lr
    103e:	46c0      	nop			; (mov r8, r8)
    1040:	40000400 	.word	0x40000400
    1044:	40000c00 	.word	0x40000c00

00001048 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1048:	b570      	push	{r4, r5, r6, lr}
    104a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    104c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    104e:	780d      	ldrb	r5, [r1, #0]
    1050:	022d      	lsls	r5, r5, #8
    1052:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1054:	784b      	ldrb	r3, [r1, #1]
    1056:	2b00      	cmp	r3, #0
    1058:	d002      	beq.n	1060 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    105a:	2380      	movs	r3, #128	; 0x80
    105c:	02db      	lsls	r3, r3, #11
    105e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1060:	7a4b      	ldrb	r3, [r1, #9]
    1062:	2b00      	cmp	r3, #0
    1064:	d002      	beq.n	106c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1066:	2380      	movs	r3, #128	; 0x80
    1068:	031b      	lsls	r3, r3, #12
    106a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    106c:	6848      	ldr	r0, [r1, #4]
    106e:	2801      	cmp	r0, #1
    1070:	d910      	bls.n	1094 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1072:	1e43      	subs	r3, r0, #1
    1074:	4218      	tst	r0, r3
    1076:	d134      	bne.n	10e2 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1078:	2802      	cmp	r0, #2
    107a:	d930      	bls.n	10de <system_gclk_gen_set_config+0x96>
    107c:	2302      	movs	r3, #2
    107e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1080:	3201      	adds	r2, #1
						mask <<= 1) {
    1082:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1084:	4298      	cmp	r0, r3
    1086:	d8fb      	bhi.n	1080 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1088:	0212      	lsls	r2, r2, #8
    108a:	4332      	orrs	r2, r6
    108c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    108e:	2380      	movs	r3, #128	; 0x80
    1090:	035b      	lsls	r3, r3, #13
    1092:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1094:	7a0b      	ldrb	r3, [r1, #8]
    1096:	2b00      	cmp	r3, #0
    1098:	d002      	beq.n	10a0 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    109a:	2380      	movs	r3, #128	; 0x80
    109c:	039b      	lsls	r3, r3, #14
    109e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    10a0:	4a13      	ldr	r2, [pc, #76]	; (10f0 <system_gclk_gen_set_config+0xa8>)
    10a2:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    10a4:	b25b      	sxtb	r3, r3
    10a6:	2b00      	cmp	r3, #0
    10a8:	dbfb      	blt.n	10a2 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    10aa:	4b12      	ldr	r3, [pc, #72]	; (10f4 <system_gclk_gen_set_config+0xac>)
    10ac:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    10ae:	4b12      	ldr	r3, [pc, #72]	; (10f8 <system_gclk_gen_set_config+0xb0>)
    10b0:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    10b2:	4a0f      	ldr	r2, [pc, #60]	; (10f0 <system_gclk_gen_set_config+0xa8>)
    10b4:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    10b6:	b25b      	sxtb	r3, r3
    10b8:	2b00      	cmp	r3, #0
    10ba:	dbfb      	blt.n	10b4 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    10bc:	4b0c      	ldr	r3, [pc, #48]	; (10f0 <system_gclk_gen_set_config+0xa8>)
    10be:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    10c0:	001a      	movs	r2, r3
    10c2:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    10c4:	b25b      	sxtb	r3, r3
    10c6:	2b00      	cmp	r3, #0
    10c8:	dbfb      	blt.n	10c2 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    10ca:	4a09      	ldr	r2, [pc, #36]	; (10f0 <system_gclk_gen_set_config+0xa8>)
    10cc:	6853      	ldr	r3, [r2, #4]
    10ce:	2180      	movs	r1, #128	; 0x80
    10d0:	0249      	lsls	r1, r1, #9
    10d2:	400b      	ands	r3, r1
    10d4:	431d      	orrs	r5, r3
    10d6:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    10d8:	4b08      	ldr	r3, [pc, #32]	; (10fc <system_gclk_gen_set_config+0xb4>)
    10da:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    10dc:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    10de:	2200      	movs	r2, #0
    10e0:	e7d2      	b.n	1088 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    10e2:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    10e4:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    10e6:	2380      	movs	r3, #128	; 0x80
    10e8:	029b      	lsls	r3, r3, #10
    10ea:	431d      	orrs	r5, r3
    10ec:	e7d2      	b.n	1094 <system_gclk_gen_set_config+0x4c>
    10ee:	46c0      	nop			; (mov r8, r8)
    10f0:	40000c00 	.word	0x40000c00
    10f4:	00000c1d 	.word	0x00000c1d
    10f8:	40000c08 	.word	0x40000c08
    10fc:	00000c5d 	.word	0x00000c5d

00001100 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1100:	b510      	push	{r4, lr}
    1102:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1104:	4a0b      	ldr	r2, [pc, #44]	; (1134 <system_gclk_gen_enable+0x34>)
    1106:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1108:	b25b      	sxtb	r3, r3
    110a:	2b00      	cmp	r3, #0
    110c:	dbfb      	blt.n	1106 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    110e:	4b0a      	ldr	r3, [pc, #40]	; (1138 <system_gclk_gen_enable+0x38>)
    1110:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1112:	4b0a      	ldr	r3, [pc, #40]	; (113c <system_gclk_gen_enable+0x3c>)
    1114:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1116:	4a07      	ldr	r2, [pc, #28]	; (1134 <system_gclk_gen_enable+0x34>)
    1118:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    111a:	b25b      	sxtb	r3, r3
    111c:	2b00      	cmp	r3, #0
    111e:	dbfb      	blt.n	1118 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1120:	4a04      	ldr	r2, [pc, #16]	; (1134 <system_gclk_gen_enable+0x34>)
    1122:	6851      	ldr	r1, [r2, #4]
    1124:	2380      	movs	r3, #128	; 0x80
    1126:	025b      	lsls	r3, r3, #9
    1128:	430b      	orrs	r3, r1
    112a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    112c:	4b04      	ldr	r3, [pc, #16]	; (1140 <system_gclk_gen_enable+0x40>)
    112e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1130:	bd10      	pop	{r4, pc}
    1132:	46c0      	nop			; (mov r8, r8)
    1134:	40000c00 	.word	0x40000c00
    1138:	00000c1d 	.word	0x00000c1d
    113c:	40000c04 	.word	0x40000c04
    1140:	00000c5d 	.word	0x00000c5d

00001144 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1144:	b510      	push	{r4, lr}
    1146:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1148:	4b06      	ldr	r3, [pc, #24]	; (1164 <system_gclk_chan_enable+0x20>)
    114a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    114c:	4b06      	ldr	r3, [pc, #24]	; (1168 <system_gclk_chan_enable+0x24>)
    114e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1150:	4a06      	ldr	r2, [pc, #24]	; (116c <system_gclk_chan_enable+0x28>)
    1152:	8853      	ldrh	r3, [r2, #2]
    1154:	2180      	movs	r1, #128	; 0x80
    1156:	01c9      	lsls	r1, r1, #7
    1158:	430b      	orrs	r3, r1
    115a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    115c:	4b04      	ldr	r3, [pc, #16]	; (1170 <system_gclk_chan_enable+0x2c>)
    115e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1160:	bd10      	pop	{r4, pc}
    1162:	46c0      	nop			; (mov r8, r8)
    1164:	00000c1d 	.word	0x00000c1d
    1168:	40000c02 	.word	0x40000c02
    116c:	40000c00 	.word	0x40000c00
    1170:	00000c5d 	.word	0x00000c5d

00001174 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1174:	b510      	push	{r4, lr}
    1176:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1178:	4b0f      	ldr	r3, [pc, #60]	; (11b8 <system_gclk_chan_disable+0x44>)
    117a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    117c:	4b0f      	ldr	r3, [pc, #60]	; (11bc <system_gclk_chan_disable+0x48>)
    117e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1180:	4a0f      	ldr	r2, [pc, #60]	; (11c0 <system_gclk_chan_disable+0x4c>)
    1182:	8853      	ldrh	r3, [r2, #2]
    1184:	051b      	lsls	r3, r3, #20
    1186:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1188:	8853      	ldrh	r3, [r2, #2]
    118a:	490e      	ldr	r1, [pc, #56]	; (11c4 <system_gclk_chan_disable+0x50>)
    118c:	400b      	ands	r3, r1
    118e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1190:	8853      	ldrh	r3, [r2, #2]
    1192:	490d      	ldr	r1, [pc, #52]	; (11c8 <system_gclk_chan_disable+0x54>)
    1194:	400b      	ands	r3, r1
    1196:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1198:	0011      	movs	r1, r2
    119a:	2280      	movs	r2, #128	; 0x80
    119c:	01d2      	lsls	r2, r2, #7
    119e:	884b      	ldrh	r3, [r1, #2]
    11a0:	4213      	tst	r3, r2
    11a2:	d1fc      	bne.n	119e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    11a4:	4906      	ldr	r1, [pc, #24]	; (11c0 <system_gclk_chan_disable+0x4c>)
    11a6:	884a      	ldrh	r2, [r1, #2]
    11a8:	0203      	lsls	r3, r0, #8
    11aa:	4806      	ldr	r0, [pc, #24]	; (11c4 <system_gclk_chan_disable+0x50>)
    11ac:	4002      	ands	r2, r0
    11ae:	4313      	orrs	r3, r2
    11b0:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    11b2:	4b06      	ldr	r3, [pc, #24]	; (11cc <system_gclk_chan_disable+0x58>)
    11b4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    11b6:	bd10      	pop	{r4, pc}
    11b8:	00000c1d 	.word	0x00000c1d
    11bc:	40000c02 	.word	0x40000c02
    11c0:	40000c00 	.word	0x40000c00
    11c4:	fffff0ff 	.word	0xfffff0ff
    11c8:	ffffbfff 	.word	0xffffbfff
    11cc:	00000c5d 	.word	0x00000c5d

000011d0 <system_gclk_chan_set_config>:
{
    11d0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    11d2:	780c      	ldrb	r4, [r1, #0]
    11d4:	0224      	lsls	r4, r4, #8
    11d6:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    11d8:	4b02      	ldr	r3, [pc, #8]	; (11e4 <system_gclk_chan_set_config+0x14>)
    11da:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    11dc:	b2a4      	uxth	r4, r4
    11de:	4b02      	ldr	r3, [pc, #8]	; (11e8 <system_gclk_chan_set_config+0x18>)
    11e0:	805c      	strh	r4, [r3, #2]
}
    11e2:	bd10      	pop	{r4, pc}
    11e4:	00001175 	.word	0x00001175
    11e8:	40000c00 	.word	0x40000c00

000011ec <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    11ec:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    11ee:	78d3      	ldrb	r3, [r2, #3]
    11f0:	2b00      	cmp	r3, #0
    11f2:	d135      	bne.n	1260 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    11f4:	7813      	ldrb	r3, [r2, #0]
    11f6:	2b80      	cmp	r3, #128	; 0x80
    11f8:	d029      	beq.n	124e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    11fa:	061b      	lsls	r3, r3, #24
    11fc:	2480      	movs	r4, #128	; 0x80
    11fe:	0264      	lsls	r4, r4, #9
    1200:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1202:	7854      	ldrb	r4, [r2, #1]
    1204:	2502      	movs	r5, #2
    1206:	43ac      	bics	r4, r5
    1208:	d106      	bne.n	1218 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    120a:	7894      	ldrb	r4, [r2, #2]
    120c:	2c00      	cmp	r4, #0
    120e:	d120      	bne.n	1252 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1210:	2480      	movs	r4, #128	; 0x80
    1212:	02a4      	lsls	r4, r4, #10
    1214:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1216:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1218:	7854      	ldrb	r4, [r2, #1]
    121a:	3c01      	subs	r4, #1
    121c:	2c01      	cmp	r4, #1
    121e:	d91c      	bls.n	125a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1220:	040d      	lsls	r5, r1, #16
    1222:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1224:	24a0      	movs	r4, #160	; 0xa0
    1226:	05e4      	lsls	r4, r4, #23
    1228:	432c      	orrs	r4, r5
    122a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    122c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    122e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1230:	24d0      	movs	r4, #208	; 0xd0
    1232:	0624      	lsls	r4, r4, #24
    1234:	432c      	orrs	r4, r5
    1236:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1238:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    123a:	78d4      	ldrb	r4, [r2, #3]
    123c:	2c00      	cmp	r4, #0
    123e:	d122      	bne.n	1286 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1240:	035b      	lsls	r3, r3, #13
    1242:	d51c      	bpl.n	127e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1244:	7893      	ldrb	r3, [r2, #2]
    1246:	2b01      	cmp	r3, #1
    1248:	d01e      	beq.n	1288 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    124a:	6141      	str	r1, [r0, #20]
    124c:	e017      	b.n	127e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    124e:	2300      	movs	r3, #0
    1250:	e7d7      	b.n	1202 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1252:	24c0      	movs	r4, #192	; 0xc0
    1254:	02e4      	lsls	r4, r4, #11
    1256:	4323      	orrs	r3, r4
    1258:	e7dd      	b.n	1216 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    125a:	4c0d      	ldr	r4, [pc, #52]	; (1290 <_system_pinmux_config+0xa4>)
    125c:	4023      	ands	r3, r4
    125e:	e7df      	b.n	1220 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1260:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1262:	040c      	lsls	r4, r1, #16
    1264:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1266:	23a0      	movs	r3, #160	; 0xa0
    1268:	05db      	lsls	r3, r3, #23
    126a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    126c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    126e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1270:	23d0      	movs	r3, #208	; 0xd0
    1272:	061b      	lsls	r3, r3, #24
    1274:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1276:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1278:	78d3      	ldrb	r3, [r2, #3]
    127a:	2b00      	cmp	r3, #0
    127c:	d103      	bne.n	1286 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    127e:	7853      	ldrb	r3, [r2, #1]
    1280:	3b01      	subs	r3, #1
    1282:	2b01      	cmp	r3, #1
    1284:	d902      	bls.n	128c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1286:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1288:	6181      	str	r1, [r0, #24]
    128a:	e7f8      	b.n	127e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    128c:	6081      	str	r1, [r0, #8]
}
    128e:	e7fa      	b.n	1286 <_system_pinmux_config+0x9a>
    1290:	fffbffff 	.word	0xfffbffff

00001294 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1294:	b510      	push	{r4, lr}
    1296:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1298:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    129a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    129c:	2900      	cmp	r1, #0
    129e:	d104      	bne.n	12aa <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    12a0:	0943      	lsrs	r3, r0, #5
    12a2:	01db      	lsls	r3, r3, #7
    12a4:	4905      	ldr	r1, [pc, #20]	; (12bc <system_pinmux_pin_set_config+0x28>)
    12a6:	468c      	mov	ip, r1
    12a8:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    12aa:	241f      	movs	r4, #31
    12ac:	4020      	ands	r0, r4
    12ae:	2101      	movs	r1, #1
    12b0:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    12b2:	0018      	movs	r0, r3
    12b4:	4b02      	ldr	r3, [pc, #8]	; (12c0 <system_pinmux_pin_set_config+0x2c>)
    12b6:	4798      	blx	r3
}
    12b8:	bd10      	pop	{r4, pc}
    12ba:	46c0      	nop			; (mov r8, r8)
    12bc:	41004400 	.word	0x41004400
    12c0:	000011ed 	.word	0x000011ed

000012c4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    12c4:	4770      	bx	lr
	...

000012c8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    12c8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    12ca:	4b05      	ldr	r3, [pc, #20]	; (12e0 <system_init+0x18>)
    12cc:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    12ce:	4b05      	ldr	r3, [pc, #20]	; (12e4 <system_init+0x1c>)
    12d0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    12d2:	4b05      	ldr	r3, [pc, #20]	; (12e8 <system_init+0x20>)
    12d4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    12d6:	4b05      	ldr	r3, [pc, #20]	; (12ec <system_init+0x24>)
    12d8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    12da:	4b05      	ldr	r3, [pc, #20]	; (12f0 <system_init+0x28>)
    12dc:	4798      	blx	r3
}
    12de:	bd10      	pop	{r4, pc}
    12e0:	00000f25 	.word	0x00000f25
    12e4:	00000c8d 	.word	0x00000c8d
    12e8:	000012c5 	.word	0x000012c5
    12ec:	00000d31 	.word	0x00000d31
    12f0:	000012c5 	.word	0x000012c5

000012f4 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    12f4:	b510      	push	{r4, lr}
    12f6:	b084      	sub	sp, #16
	enum sleepmgr_mode sleep_mode[] = {
    12f8:	ab03      	add	r3, sp, #12
    12fa:	2200      	movs	r2, #0
    12fc:	701a      	strb	r2, [r3, #0]
    12fe:	3203      	adds	r2, #3
    1300:	705a      	strb	r2, [r3, #1]
    1302:	3a01      	subs	r2, #1
    1304:	709a      	strb	r2, [r3, #2]
    1306:	3a01      	subs	r2, #1
    1308:	70da      	strb	r2, [r3, #3]
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    130a:	4b27      	ldr	r3, [pc, #156]	; (13a8 <udd_sleep_mode+0xb4>)
    130c:	781b      	ldrb	r3, [r3, #0]
    130e:	4283      	cmp	r3, r0
    1310:	d007      	beq.n	1322 <udd_sleep_mode+0x2e>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    1312:	2800      	cmp	r0, #0
    1314:	d107      	bne.n	1326 <udd_sleep_mode+0x32>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
	}
	if (udd_state != UDD_STATE_OFF) {
    1316:	4b24      	ldr	r3, [pc, #144]	; (13a8 <udd_sleep_mode+0xb4>)
    1318:	781b      	ldrb	r3, [r3, #0]
    131a:	2b00      	cmp	r3, #0
    131c:	d123      	bne.n	1366 <udd_sleep_mode+0x72>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
	}
	udd_state = new_state;
    131e:	4b22      	ldr	r3, [pc, #136]	; (13a8 <udd_sleep_mode+0xb4>)
    1320:	7018      	strb	r0, [r3, #0]
}
    1322:	b004      	add	sp, #16
    1324:	bd10      	pop	{r4, pc}
		sleepmgr_lock_mode(sleep_mode[new_state]);
    1326:	ab03      	add	r3, sp, #12
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    1328:	5c1b      	ldrb	r3, [r3, r0]
    132a:	4a20      	ldr	r2, [pc, #128]	; (13ac <udd_sleep_mode+0xb8>)
    132c:	5cd2      	ldrb	r2, [r2, r3]
    132e:	2aff      	cmp	r2, #255	; 0xff
    1330:	d100      	bne.n	1334 <udd_sleep_mode+0x40>
    1332:	e7fe      	b.n	1332 <udd_sleep_mode+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1334:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1338:	4251      	negs	r1, r2
    133a:	414a      	adcs	r2, r1
    133c:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    133e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1340:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1344:	2100      	movs	r1, #0
    1346:	4a1a      	ldr	r2, [pc, #104]	; (13b0 <udd_sleep_mode+0xbc>)
    1348:	7011      	strb	r1, [r2, #0]
	return flags;
    134a:	9c01      	ldr	r4, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    134c:	4917      	ldr	r1, [pc, #92]	; (13ac <udd_sleep_mode+0xb8>)
    134e:	5cca      	ldrb	r2, [r1, r3]
    1350:	3201      	adds	r2, #1
    1352:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    1354:	2c00      	cmp	r4, #0
    1356:	d0de      	beq.n	1316 <udd_sleep_mode+0x22>
		cpu_irq_enable();
    1358:	2201      	movs	r2, #1
    135a:	4b15      	ldr	r3, [pc, #84]	; (13b0 <udd_sleep_mode+0xbc>)
    135c:	701a      	strb	r2, [r3, #0]
    135e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1362:	b662      	cpsie	i
    1364:	e7d7      	b.n	1316 <udd_sleep_mode+0x22>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    1366:	aa03      	add	r2, sp, #12
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    1368:	5cd3      	ldrb	r3, [r2, r3]
    136a:	4a10      	ldr	r2, [pc, #64]	; (13ac <udd_sleep_mode+0xb8>)
    136c:	5cd2      	ldrb	r2, [r2, r3]
    136e:	2a00      	cmp	r2, #0
    1370:	d100      	bne.n	1374 <udd_sleep_mode+0x80>
    1372:	e7fe      	b.n	1372 <udd_sleep_mode+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1374:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1378:	4251      	negs	r1, r2
    137a:	414a      	adcs	r2, r1
    137c:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    137e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1380:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1384:	2100      	movs	r1, #0
    1386:	4a0a      	ldr	r2, [pc, #40]	; (13b0 <udd_sleep_mode+0xbc>)
    1388:	7011      	strb	r1, [r2, #0]
	return flags;
    138a:	9c02      	ldr	r4, [sp, #8]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    138c:	4907      	ldr	r1, [pc, #28]	; (13ac <udd_sleep_mode+0xb8>)
    138e:	5cca      	ldrb	r2, [r1, r3]
    1390:	3a01      	subs	r2, #1
    1392:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    1394:	2c00      	cmp	r4, #0
    1396:	d0c2      	beq.n	131e <udd_sleep_mode+0x2a>
		cpu_irq_enable();
    1398:	2201      	movs	r2, #1
    139a:	4b05      	ldr	r3, [pc, #20]	; (13b0 <udd_sleep_mode+0xbc>)
    139c:	701a      	strb	r2, [r3, #0]
    139e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    13a2:	b662      	cpsie	i
    13a4:	e7bb      	b.n	131e <udd_sleep_mode+0x2a>
    13a6:	46c0      	nop			; (mov r8, r8)
    13a8:	2000017c 	.word	0x2000017c
    13ac:	2000019c 	.word	0x2000019c
    13b0:	200000da 	.word	0x200000da

000013b4 <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	if ((ep == 0) || (ep == 0x80)) {
    13b4:	0643      	lsls	r3, r0, #25
    13b6:	d00b      	beq.n	13d0 <udd_ep_get_job+0x1c>
		return NULL;
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    13b8:	230f      	movs	r3, #15
    13ba:	4003      	ands	r3, r0
    13bc:	005b      	lsls	r3, r3, #1
    13be:	09c0      	lsrs	r0, r0, #7
    13c0:	1818      	adds	r0, r3, r0
    13c2:	3802      	subs	r0, #2
    13c4:	0083      	lsls	r3, r0, #2
    13c6:	1818      	adds	r0, r3, r0
    13c8:	0080      	lsls	r0, r0, #2
    13ca:	4b02      	ldr	r3, [pc, #8]	; (13d4 <udd_ep_get_job+0x20>)
    13cc:	1818      	adds	r0, r3, r0
	}
}
    13ce:	4770      	bx	lr
		return NULL;
    13d0:	2000      	movs	r0, #0
    13d2:	e7fc      	b.n	13ce <udd_ep_get_job+0x1a>
    13d4:	20000154 	.word	0x20000154

000013d8 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    13d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    13da:	46d6      	mov	lr, sl
    13dc:	464f      	mov	r7, r9
    13de:	4646      	mov	r6, r8
    13e0:	b5c0      	push	{r6, r7, lr}
    13e2:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    13e4:	798d      	ldrb	r5, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
    13e6:	b26b      	sxtb	r3, r5
    13e8:	2b00      	cmp	r3, #0
    13ea:	db26      	blt.n	143a <udd_ep_transfer_process+0x62>
	ptr_job = udd_ep_get_job(ep);
    13ec:	0028      	movs	r0, r5
    13ee:	4b5e      	ldr	r3, [pc, #376]	; (1568 <udd_ep_transfer_process+0x190>)
    13f0:	4798      	blx	r3
    13f2:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    13f4:	270f      	movs	r7, #15
    13f6:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    13f8:	8a03      	ldrh	r3, [r0, #16]
    13fa:	4698      	mov	r8, r3
	nb_trans = ep_callback_para->received_bytes;
    13fc:	464b      	mov	r3, r9
    13fe:	881b      	ldrh	r3, [r3, #0]
    1400:	469a      	mov	sl, r3
	if (ptr_job->b_use_out_cache_buffer) {
    1402:	7c83      	ldrb	r3, [r0, #18]
    1404:	075b      	lsls	r3, r3, #29
    1406:	d46a      	bmi.n	14de <udd_ep_transfer_process+0x106>
	ptr_job->nb_trans += nb_trans;
    1408:	68e3      	ldr	r3, [r4, #12]
    140a:	4453      	add	r3, sl
    140c:	001e      	movs	r6, r3
    140e:	60e3      	str	r3, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    1410:	68a3      	ldr	r3, [r4, #8]
    1412:	429e      	cmp	r6, r3
    1414:	d800      	bhi.n	1418 <udd_ep_transfer_process+0x40>
    1416:	e074      	b.n	1502 <udd_ep_transfer_process+0x12a>
		ptr_job->nb_trans = ptr_job->buf_size;
    1418:	60e3      	str	r3, [r4, #12]
	ptr_job->busy = false;
    141a:	7ca3      	ldrb	r3, [r4, #18]
    141c:	2201      	movs	r2, #1
    141e:	4393      	bics	r3, r2
    1420:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    1422:	6823      	ldr	r3, [r4, #0]
    1424:	2b00      	cmp	r3, #0
    1426:	d003      	beq.n	1430 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    1428:	68e1      	ldr	r1, [r4, #12]
    142a:	002a      	movs	r2, r5
    142c:	2000      	movs	r0, #0
    142e:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    1430:	bc1c      	pop	{r2, r3, r4}
    1432:	4690      	mov	r8, r2
    1434:	4699      	mov	r9, r3
    1436:	46a2      	mov	sl, r4
    1438:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job = udd_ep_get_job(ep);
    143a:	0028      	movs	r0, r5
    143c:	4b4a      	ldr	r3, [pc, #296]	; (1568 <udd_ep_transfer_process+0x190>)
    143e:	4798      	blx	r3
    1440:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    1442:	270f      	movs	r7, #15
    1444:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    1446:	8a03      	ldrh	r3, [r0, #16]
    1448:	4698      	mov	r8, r3
	ptr_job->nb_trans += nb_trans;
    144a:	464b      	mov	r3, r9
    144c:	885e      	ldrh	r6, [r3, #2]
    144e:	68c3      	ldr	r3, [r0, #12]
    1450:	469c      	mov	ip, r3
    1452:	4466      	add	r6, ip
    1454:	60c6      	str	r6, [r0, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    1456:	6881      	ldr	r1, [r0, #8]
    1458:	428e      	cmp	r6, r1
    145a:	d025      	beq.n	14a8 <udd_ep_transfer_process+0xd0>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    145c:	1b8d      	subs	r5, r1, r6
    145e:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1460:	4b42      	ldr	r3, [pc, #264]	; (156c <udd_ep_transfer_process+0x194>)
    1462:	429d      	cmp	r5, r3
    1464:	d906      	bls.n	1474 <udd_ep_transfer_process+0x9c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    1466:	001d      	movs	r5, r3
    1468:	4641      	mov	r1, r8
    146a:	0018      	movs	r0, r3
    146c:	4b40      	ldr	r3, [pc, #256]	; (1570 <udd_ep_transfer_process+0x198>)
    146e:	4798      	blx	r3
    1470:	1a6d      	subs	r5, r5, r1
    1472:	b2ad      	uxth	r5, r5
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    1474:	7ca2      	ldrb	r2, [r4, #18]
    1476:	2300      	movs	r3, #0
    1478:	0792      	lsls	r2, r2, #30
    147a:	d507      	bpl.n	148c <udd_ep_transfer_process+0xb4>
    147c:	4641      	mov	r1, r8
    147e:	0028      	movs	r0, r5
    1480:	4b3c      	ldr	r3, [pc, #240]	; (1574 <udd_ep_transfer_process+0x19c>)
    1482:	4798      	blx	r3
    1484:	b289      	uxth	r1, r1
    1486:	424b      	negs	r3, r1
    1488:	414b      	adcs	r3, r1
    148a:	b2db      	uxtb	r3, r3
    148c:	005b      	lsls	r3, r3, #1
    148e:	7ca2      	ldrb	r2, [r4, #18]
    1490:	2102      	movs	r1, #2
    1492:	438a      	bics	r2, r1
    1494:	4313      	orrs	r3, r2
    1496:	74a3      	strb	r3, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    1498:	6862      	ldr	r2, [r4, #4]
    149a:	1992      	adds	r2, r2, r6
    149c:	002b      	movs	r3, r5
    149e:	0039      	movs	r1, r7
    14a0:	4835      	ldr	r0, [pc, #212]	; (1578 <udd_ep_transfer_process+0x1a0>)
    14a2:	4c36      	ldr	r4, [pc, #216]	; (157c <udd_ep_transfer_process+0x1a4>)
    14a4:	47a0      	blx	r4
    14a6:	e7c3      	b.n	1430 <udd_ep_transfer_process+0x58>
	if (ptr_job->b_shortpacket) {
    14a8:	7c83      	ldrb	r3, [r0, #18]
    14aa:	079b      	lsls	r3, r3, #30
    14ac:	d40b      	bmi.n	14c6 <udd_ep_transfer_process+0xee>
	ptr_job->busy = false;
    14ae:	7c83      	ldrb	r3, [r0, #18]
    14b0:	2201      	movs	r2, #1
    14b2:	4393      	bics	r3, r2
    14b4:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    14b6:	6803      	ldr	r3, [r0, #0]
    14b8:	2b00      	cmp	r3, #0
    14ba:	d0b9      	beq.n	1430 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    14bc:	002a      	movs	r2, r5
    14be:	0031      	movs	r1, r6
    14c0:	2000      	movs	r0, #0
    14c2:	4798      	blx	r3
    14c4:	e7b4      	b.n	1430 <udd_ep_transfer_process+0x58>
		ptr_job->b_shortpacket = false;
    14c6:	7c83      	ldrb	r3, [r0, #18]
    14c8:	2202      	movs	r2, #2
    14ca:	4393      	bics	r3, r2
    14cc:	7483      	strb	r3, [r0, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    14ce:	6842      	ldr	r2, [r0, #4]
    14d0:	1992      	adds	r2, r2, r6
    14d2:	2300      	movs	r3, #0
    14d4:	0039      	movs	r1, r7
    14d6:	4828      	ldr	r0, [pc, #160]	; (1578 <udd_ep_transfer_process+0x1a0>)
    14d8:	4c28      	ldr	r4, [pc, #160]	; (157c <udd_ep_transfer_process+0x1a4>)
    14da:	47a0      	blx	r4
    14dc:	e7a8      	b.n	1430 <udd_ep_transfer_process+0x58>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    14de:	6843      	ldr	r3, [r0, #4]
    14e0:	68c2      	ldr	r2, [r0, #12]
    14e2:	4694      	mov	ip, r2
    14e4:	4463      	add	r3, ip
    14e6:	001e      	movs	r6, r3
    14e8:	4641      	mov	r1, r8
    14ea:	6880      	ldr	r0, [r0, #8]
    14ec:	4b21      	ldr	r3, [pc, #132]	; (1574 <udd_ep_transfer_process+0x19c>)
    14ee:	4798      	blx	r3
    14f0:	000a      	movs	r2, r1
    14f2:	1e7b      	subs	r3, r7, #1
    14f4:	019b      	lsls	r3, r3, #6
    14f6:	4922      	ldr	r1, [pc, #136]	; (1580 <udd_ep_transfer_process+0x1a8>)
    14f8:	1859      	adds	r1, r3, r1
    14fa:	0030      	movs	r0, r6
    14fc:	4b21      	ldr	r3, [pc, #132]	; (1584 <udd_ep_transfer_process+0x1ac>)
    14fe:	4798      	blx	r3
    1500:	e782      	b.n	1408 <udd_ep_transfer_process+0x30>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    1502:	464a      	mov	r2, r9
    1504:	8892      	ldrh	r2, [r2, #4]
    1506:	4552      	cmp	r2, sl
    1508:	d000      	beq.n	150c <udd_ep_transfer_process+0x134>
    150a:	e786      	b.n	141a <udd_ep_transfer_process+0x42>
    150c:	429e      	cmp	r6, r3
    150e:	d100      	bne.n	1512 <udd_ep_transfer_process+0x13a>
    1510:	e783      	b.n	141a <udd_ep_transfer_process+0x42>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    1512:	1b9b      	subs	r3, r3, r6
    1514:	b29d      	uxth	r5, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1516:	4b15      	ldr	r3, [pc, #84]	; (156c <udd_ep_transfer_process+0x194>)
    1518:	429d      	cmp	r5, r3
    151a:	d916      	bls.n	154a <udd_ep_transfer_process+0x172>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    151c:	001d      	movs	r5, r3
    151e:	4641      	mov	r1, r8
    1520:	0018      	movs	r0, r3
    1522:	4b13      	ldr	r3, [pc, #76]	; (1570 <udd_ep_transfer_process+0x198>)
    1524:	4798      	blx	r3
    1526:	1a6b      	subs	r3, r5, r1
    1528:	b29b      	uxth	r3, r3
		if (next_trans < ep_size) {
    152a:	4598      	cmp	r8, r3
    152c:	d914      	bls.n	1558 <udd_ep_transfer_process+0x180>
			ptr_job->b_use_out_cache_buffer = true;
    152e:	7ca3      	ldrb	r3, [r4, #18]
    1530:	2204      	movs	r2, #4
    1532:	4313      	orrs	r3, r2
    1534:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    1536:	1e7a      	subs	r2, r7, #1
    1538:	0192      	lsls	r2, r2, #6
    153a:	4b11      	ldr	r3, [pc, #68]	; (1580 <udd_ep_transfer_process+0x1a8>)
    153c:	18d2      	adds	r2, r2, r3
    153e:	4643      	mov	r3, r8
    1540:	0039      	movs	r1, r7
    1542:	480d      	ldr	r0, [pc, #52]	; (1578 <udd_ep_transfer_process+0x1a0>)
    1544:	4c10      	ldr	r4, [pc, #64]	; (1588 <udd_ep_transfer_process+0x1b0>)
    1546:	47a0      	blx	r4
    1548:	e772      	b.n	1430 <udd_ep_transfer_process+0x58>
			next_trans -= next_trans % ep_size;
    154a:	4641      	mov	r1, r8
    154c:	0028      	movs	r0, r5
    154e:	4b09      	ldr	r3, [pc, #36]	; (1574 <udd_ep_transfer_process+0x19c>)
    1550:	4798      	blx	r3
    1552:	1a6b      	subs	r3, r5, r1
    1554:	b29b      	uxth	r3, r3
    1556:	e7e8      	b.n	152a <udd_ep_transfer_process+0x152>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    1558:	6862      	ldr	r2, [r4, #4]
    155a:	1992      	adds	r2, r2, r6
    155c:	0039      	movs	r1, r7
    155e:	4806      	ldr	r0, [pc, #24]	; (1578 <udd_ep_transfer_process+0x1a0>)
    1560:	4c09      	ldr	r4, [pc, #36]	; (1588 <udd_ep_transfer_process+0x1b0>)
    1562:	47a0      	blx	r4
    1564:	e764      	b.n	1430 <udd_ep_transfer_process+0x58>
    1566:	46c0      	nop			; (mov r8, r8)
    1568:	000013b5 	.word	0x000013b5
    156c:	00001fff 	.word	0x00001fff
    1570:	00003491 	.word	0x00003491
    1574:	000032bd 	.word	0x000032bd
    1578:	20000224 	.word	0x20000224
    157c:	00002579 	.word	0x00002579
    1580:	200001e4 	.word	0x200001e4
    1584:	00003525 	.word	0x00003525
    1588:	000025cd 	.word	0x000025cd

0000158c <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    158c:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    158e:	2205      	movs	r2, #5
    1590:	4b05      	ldr	r3, [pc, #20]	; (15a8 <udd_ctrl_stall_data+0x1c>)
    1592:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    1594:	4c05      	ldr	r4, [pc, #20]	; (15ac <udd_ctrl_stall_data+0x20>)
    1596:	2180      	movs	r1, #128	; 0x80
    1598:	0020      	movs	r0, r4
    159a:	4b05      	ldr	r3, [pc, #20]	; (15b0 <udd_ctrl_stall_data+0x24>)
    159c:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    159e:	2100      	movs	r1, #0
    15a0:	0020      	movs	r0, r4
    15a2:	4b04      	ldr	r3, [pc, #16]	; (15b4 <udd_ctrl_stall_data+0x28>)
    15a4:	4798      	blx	r3
}
    15a6:	bd10      	pop	{r4, pc}
    15a8:	20000152 	.word	0x20000152
    15ac:	20000224 	.word	0x20000224
    15b0:	000024cd 	.word	0x000024cd
    15b4:	000024f3 	.word	0x000024f3

000015b8 <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    15b8:	b570      	push	{r4, r5, r6, lr}
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    15ba:	4c08      	ldr	r4, [pc, #32]	; (15dc <_usb_device_lpm_suspend+0x24>)
    15bc:	2106      	movs	r1, #6
    15be:	0020      	movs	r0, r4
    15c0:	4d07      	ldr	r5, [pc, #28]	; (15e0 <_usb_device_lpm_suspend+0x28>)
    15c2:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    15c4:	2104      	movs	r1, #4
    15c6:	0020      	movs	r0, r4
    15c8:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    15ca:	2102      	movs	r1, #2
    15cc:	0020      	movs	r0, r4
    15ce:	4b05      	ldr	r3, [pc, #20]	; (15e4 <_usb_device_lpm_suspend+0x2c>)
    15d0:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    15d2:	2002      	movs	r0, #2
    15d4:	4b04      	ldr	r3, [pc, #16]	; (15e8 <_usb_device_lpm_suspend+0x30>)
    15d6:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    15d8:	bd70      	pop	{r4, r5, r6, pc}
    15da:	46c0      	nop			; (mov r8, r8)
    15dc:	20000224 	.word	0x20000224
    15e0:	0000200d 	.word	0x0000200d
    15e4:	00001fed 	.word	0x00001fed
    15e8:	000012f5 	.word	0x000012f5

000015ec <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    15ec:	b570      	push	{r4, r5, r6, lr}
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    15ee:	4b13      	ldr	r3, [pc, #76]	; (163c <_usb_on_wakeup+0x50>)
    15f0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    15f2:	069b      	lsls	r3, r3, #26
    15f4:	d41c      	bmi.n	1630 <_usb_on_wakeup+0x44>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    15f6:	4911      	ldr	r1, [pc, #68]	; (163c <_usb_on_wakeup+0x50>)
    15f8:	22d0      	movs	r2, #208	; 0xd0
    15fa:	68cb      	ldr	r3, [r1, #12]
    15fc:	4013      	ands	r3, r2
    15fe:	2bd0      	cmp	r3, #208	; 0xd0
    1600:	d1fb      	bne.n	15fa <_usb_on_wakeup+0xe>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    1602:	4c0f      	ldr	r4, [pc, #60]	; (1640 <_usb_on_wakeup+0x54>)
    1604:	2102      	movs	r1, #2
    1606:	0020      	movs	r0, r4
    1608:	4b0e      	ldr	r3, [pc, #56]	; (1644 <_usb_on_wakeup+0x58>)
    160a:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    160c:	2104      	movs	r1, #4
    160e:	0020      	movs	r0, r4
    1610:	4d0d      	ldr	r5, [pc, #52]	; (1648 <_usb_on_wakeup+0x5c>)
    1612:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    1614:	4a0d      	ldr	r2, [pc, #52]	; (164c <_usb_on_wakeup+0x60>)
    1616:	2106      	movs	r1, #6
    1618:	0020      	movs	r0, r4
    161a:	4b0d      	ldr	r3, [pc, #52]	; (1650 <_usb_on_wakeup+0x64>)
    161c:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    161e:	2106      	movs	r1, #6
    1620:	0020      	movs	r0, r4
    1622:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    1624:	2003      	movs	r0, #3
    1626:	4b0b      	ldr	r3, [pc, #44]	; (1654 <_usb_on_wakeup+0x68>)
    1628:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    162a:	4b0b      	ldr	r3, [pc, #44]	; (1658 <_usb_on_wakeup+0x6c>)
    162c:	4798      	blx	r3
#endif
}
    162e:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    1630:	4902      	ldr	r1, [pc, #8]	; (163c <_usb_on_wakeup+0x50>)
    1632:	2210      	movs	r2, #16
    1634:	68cb      	ldr	r3, [r1, #12]
    1636:	421a      	tst	r2, r3
    1638:	d0fc      	beq.n	1634 <_usb_on_wakeup+0x48>
    163a:	e7e2      	b.n	1602 <_usb_on_wakeup+0x16>
    163c:	40000800 	.word	0x40000800
    1640:	20000224 	.word	0x20000224
    1644:	0000200d 	.word	0x0000200d
    1648:	00001fed 	.word	0x00001fed
    164c:	000015b9 	.word	0x000015b9
    1650:	00001fc9 	.word	0x00001fc9
    1654:	000012f5 	.word	0x000012f5
    1658:	0000314d 	.word	0x0000314d

0000165c <_usb_on_bus_reset>:
{
    165c:	b570      	push	{r4, r5, r6, lr}
    165e:	b082      	sub	sp, #8
    1660:	0004      	movs	r4, r0
	udc_reset();
    1662:	4b1e      	ldr	r3, [pc, #120]	; (16dc <_usb_on_bus_reset+0x80>)
    1664:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    1666:	2380      	movs	r3, #128	; 0x80
    1668:	6822      	ldr	r2, [r4, #0]
    166a:	7293      	strb	r3, [r2, #10]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    166c:	ad01      	add	r5, sp, #4
    166e:	0028      	movs	r0, r5
    1670:	4b1b      	ldr	r3, [pc, #108]	; (16e0 <_usb_on_bus_reset+0x84>)
    1672:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    1674:	2600      	movs	r6, #0
    1676:	706e      	strb	r6, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    1678:	0029      	movs	r1, r5
    167a:	0020      	movs	r0, r4
    167c:	4b19      	ldr	r3, [pc, #100]	; (16e4 <_usb_on_bus_reset+0x88>)
    167e:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    1680:	4919      	ldr	r1, [pc, #100]	; (16e8 <_usb_on_bus_reset+0x8c>)
    1682:	0020      	movs	r0, r4
    1684:	4b19      	ldr	r3, [pc, #100]	; (16ec <_usb_on_bus_reset+0x90>)
    1686:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    1688:	4b19      	ldr	r3, [pc, #100]	; (16f0 <_usb_on_bus_reset+0x94>)
    168a:	2202      	movs	r2, #2
    168c:	2100      	movs	r1, #0
    168e:	0020      	movs	r0, r4
    1690:	4d18      	ldr	r5, [pc, #96]	; (16f4 <_usb_on_bus_reset+0x98>)
    1692:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    1694:	4b18      	ldr	r3, [pc, #96]	; (16f8 <_usb_on_bus_reset+0x9c>)
    1696:	2200      	movs	r2, #0
    1698:	2100      	movs	r1, #0
    169a:	0020      	movs	r0, r4
    169c:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    169e:	4b17      	ldr	r3, [pc, #92]	; (16fc <_usb_on_bus_reset+0xa0>)
    16a0:	2201      	movs	r2, #1
    16a2:	2100      	movs	r1, #0
    16a4:	0020      	movs	r0, r4
    16a6:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    16a8:	2202      	movs	r2, #2
    16aa:	2100      	movs	r1, #0
    16ac:	0020      	movs	r0, r4
    16ae:	4d14      	ldr	r5, [pc, #80]	; (1700 <_usb_on_bus_reset+0xa4>)
    16b0:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    16b2:	2200      	movs	r2, #0
    16b4:	2100      	movs	r1, #0
    16b6:	0020      	movs	r0, r4
    16b8:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    16ba:	2201      	movs	r2, #1
    16bc:	2100      	movs	r1, #0
    16be:	0020      	movs	r0, r4
    16c0:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    16c2:	6821      	ldr	r1, [r4, #0]
    16c4:	890b      	ldrh	r3, [r1, #8]
    16c6:	4a0f      	ldr	r2, [pc, #60]	; (1704 <_usb_on_bus_reset+0xa8>)
    16c8:	401a      	ands	r2, r3
    16ca:	2380      	movs	r3, #128	; 0x80
    16cc:	00db      	lsls	r3, r3, #3
    16ce:	4313      	orrs	r3, r2
    16d0:	810b      	strh	r3, [r1, #8]
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    16d2:	4b0d      	ldr	r3, [pc, #52]	; (1708 <_usb_on_bus_reset+0xac>)
    16d4:	701e      	strb	r6, [r3, #0]
}
    16d6:	b002      	add	sp, #8
    16d8:	bd70      	pop	{r4, r5, r6, pc}
    16da:	46c0      	nop			; (mov r8, r8)
    16dc:	00000709 	.word	0x00000709
    16e0:	00002219 	.word	0x00002219
    16e4:	00002229 	.word	0x00002229
    16e8:	200003a4 	.word	0x200003a4
    16ec:	0000261d 	.word	0x0000261d
    16f0:	00001845 	.word	0x00001845
    16f4:	00002029 	.word	0x00002029
    16f8:	00001b61 	.word	0x00001b61
    16fc:	00001749 	.word	0x00001749
    1700:	00002079 	.word	0x00002079
    1704:	fffff3ff 	.word	0xfffff3ff
    1708:	20000152 	.word	0x20000152

0000170c <udd_ctrl_send_zlp_in>:
{
    170c:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    170e:	2203      	movs	r2, #3
    1710:	4b07      	ldr	r3, [pc, #28]	; (1730 <udd_ctrl_send_zlp_in+0x24>)
    1712:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    1714:	4c07      	ldr	r4, [pc, #28]	; (1734 <udd_ctrl_send_zlp_in+0x28>)
    1716:	4908      	ldr	r1, [pc, #32]	; (1738 <udd_ctrl_send_zlp_in+0x2c>)
    1718:	0020      	movs	r0, r4
    171a:	4b08      	ldr	r3, [pc, #32]	; (173c <udd_ctrl_send_zlp_in+0x30>)
    171c:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    171e:	4b08      	ldr	r3, [pc, #32]	; (1740 <udd_ctrl_send_zlp_in+0x34>)
    1720:	689a      	ldr	r2, [r3, #8]
    1722:	2300      	movs	r3, #0
    1724:	2100      	movs	r1, #0
    1726:	0020      	movs	r0, r4
    1728:	4c06      	ldr	r4, [pc, #24]	; (1744 <udd_ctrl_send_zlp_in+0x38>)
    172a:	47a0      	blx	r4
}
    172c:	bd10      	pop	{r4, pc}
    172e:	46c0      	nop			; (mov r8, r8)
    1730:	20000152 	.word	0x20000152
    1734:	20000224 	.word	0x20000224
    1738:	200003a4 	.word	0x200003a4
    173c:	0000261d 	.word	0x0000261d
    1740:	2000038c 	.word	0x2000038c
    1744:	00002579 	.word	0x00002579

00001748 <_usb_ep0_on_tansfer_fail>:
{
    1748:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    174a:	7989      	ldrb	r1, [r1, #6]
    174c:	b24b      	sxtb	r3, r1
    174e:	2b00      	cmp	r3, #0
    1750:	db06      	blt.n	1760 <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    1752:	4b0e      	ldr	r3, [pc, #56]	; (178c <_usb_ep0_on_tansfer_fail+0x44>)
    1754:	781b      	ldrb	r3, [r3, #0]
    1756:	2b02      	cmp	r3, #2
    1758:	d00f      	beq.n	177a <_usb_ep0_on_tansfer_fail+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    175a:	2b03      	cmp	r3, #3
    175c:	d011      	beq.n	1782 <_usb_ep0_on_tansfer_fail+0x3a>
}
    175e:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    1760:	4b0a      	ldr	r3, [pc, #40]	; (178c <_usb_ep0_on_tansfer_fail+0x44>)
    1762:	781b      	ldrb	r3, [r3, #0]
    1764:	2b01      	cmp	r3, #1
    1766:	d005      	beq.n	1774 <_usb_ep0_on_tansfer_fail+0x2c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1768:	2b04      	cmp	r3, #4
    176a:	d1f8      	bne.n	175e <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    176c:	4808      	ldr	r0, [pc, #32]	; (1790 <_usb_ep0_on_tansfer_fail+0x48>)
    176e:	4b09      	ldr	r3, [pc, #36]	; (1794 <_usb_ep0_on_tansfer_fail+0x4c>)
    1770:	4798      	blx	r3
    1772:	e7f4      	b.n	175e <_usb_ep0_on_tansfer_fail+0x16>
		udd_ctrl_send_zlp_in();
    1774:	4b08      	ldr	r3, [pc, #32]	; (1798 <_usb_ep0_on_tansfer_fail+0x50>)
    1776:	4798      	blx	r3
    1778:	e7f1      	b.n	175e <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    177a:	2204      	movs	r2, #4
    177c:	4b03      	ldr	r3, [pc, #12]	; (178c <_usb_ep0_on_tansfer_fail+0x44>)
    177e:	701a      	strb	r2, [r3, #0]
    1780:	e7ed      	b.n	175e <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    1782:	4803      	ldr	r0, [pc, #12]	; (1790 <_usb_ep0_on_tansfer_fail+0x48>)
    1784:	4b03      	ldr	r3, [pc, #12]	; (1794 <_usb_ep0_on_tansfer_fail+0x4c>)
    1786:	4798      	blx	r3
}
    1788:	e7e9      	b.n	175e <_usb_ep0_on_tansfer_fail+0x16>
    178a:	46c0      	nop			; (mov r8, r8)
    178c:	20000152 	.word	0x20000152
    1790:	20000224 	.word	0x20000224
    1794:	000024cd 	.word	0x000024cd
    1798:	0000170d 	.word	0x0000170d

0000179c <udd_ctrl_in_sent>:
{
    179c:	b570      	push	{r4, r5, r6, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    179e:	4b20      	ldr	r3, [pc, #128]	; (1820 <udd_ctrl_in_sent+0x84>)
    17a0:	881b      	ldrh	r3, [r3, #0]
    17a2:	4a20      	ldr	r2, [pc, #128]	; (1824 <udd_ctrl_in_sent+0x88>)
    17a4:	8994      	ldrh	r4, [r2, #12]
    17a6:	1ae4      	subs	r4, r4, r3
    17a8:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    17aa:	2c00      	cmp	r4, #0
    17ac:	d118      	bne.n	17e0 <udd_ctrl_in_sent+0x44>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    17ae:	4a1e      	ldr	r2, [pc, #120]	; (1828 <udd_ctrl_in_sent+0x8c>)
    17b0:	8811      	ldrh	r1, [r2, #0]
    17b2:	185b      	adds	r3, r3, r1
    17b4:	b29b      	uxth	r3, r3
    17b6:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    17b8:	4a1a      	ldr	r2, [pc, #104]	; (1824 <udd_ctrl_in_sent+0x88>)
    17ba:	88d2      	ldrh	r2, [r2, #6]
    17bc:	429a      	cmp	r2, r3
    17be:	d023      	beq.n	1808 <udd_ctrl_in_sent+0x6c>
    17c0:	4b1a      	ldr	r3, [pc, #104]	; (182c <udd_ctrl_in_sent+0x90>)
    17c2:	781b      	ldrb	r3, [r3, #0]
    17c4:	2b00      	cmp	r3, #0
    17c6:	d11f      	bne.n	1808 <udd_ctrl_in_sent+0x6c>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    17c8:	4b16      	ldr	r3, [pc, #88]	; (1824 <udd_ctrl_in_sent+0x88>)
    17ca:	695b      	ldr	r3, [r3, #20]
    17cc:	2b00      	cmp	r3, #0
    17ce:	d023      	beq.n	1818 <udd_ctrl_in_sent+0x7c>
    17d0:	4798      	blx	r3
    17d2:	2800      	cmp	r0, #0
    17d4:	d020      	beq.n	1818 <udd_ctrl_in_sent+0x7c>
			udd_ctrl_payload_nb_trans = 0;
    17d6:	2200      	movs	r2, #0
    17d8:	4b11      	ldr	r3, [pc, #68]	; (1820 <udd_ctrl_in_sent+0x84>)
    17da:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    17dc:	4b11      	ldr	r3, [pc, #68]	; (1824 <udd_ctrl_in_sent+0x88>)
    17de:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    17e0:	2c07      	cmp	r4, #7
    17e2:	d919      	bls.n	1818 <udd_ctrl_in_sent+0x7c>
		b_shortpacket = false;
    17e4:	2200      	movs	r2, #0
    17e6:	4b11      	ldr	r3, [pc, #68]	; (182c <udd_ctrl_in_sent+0x90>)
    17e8:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    17ea:	2408      	movs	r4, #8
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    17ec:	4d0c      	ldr	r5, [pc, #48]	; (1820 <udd_ctrl_in_sent+0x84>)
    17ee:	882b      	ldrh	r3, [r5, #0]
    17f0:	4a0c      	ldr	r2, [pc, #48]	; (1824 <udd_ctrl_in_sent+0x88>)
    17f2:	6892      	ldr	r2, [r2, #8]
    17f4:	18d2      	adds	r2, r2, r3
    17f6:	0023      	movs	r3, r4
    17f8:	2100      	movs	r1, #0
    17fa:	480d      	ldr	r0, [pc, #52]	; (1830 <udd_ctrl_in_sent+0x94>)
    17fc:	4e0d      	ldr	r6, [pc, #52]	; (1834 <udd_ctrl_in_sent+0x98>)
    17fe:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
    1800:	882b      	ldrh	r3, [r5, #0]
    1802:	18e4      	adds	r4, r4, r3
    1804:	802c      	strh	r4, [r5, #0]
}
    1806:	bd70      	pop	{r4, r5, r6, pc}
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1808:	2204      	movs	r2, #4
    180a:	4b0b      	ldr	r3, [pc, #44]	; (1838 <udd_ctrl_in_sent+0x9c>)
    180c:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    180e:	490b      	ldr	r1, [pc, #44]	; (183c <udd_ctrl_in_sent+0xa0>)
    1810:	4807      	ldr	r0, [pc, #28]	; (1830 <udd_ctrl_in_sent+0x94>)
    1812:	4b0b      	ldr	r3, [pc, #44]	; (1840 <udd_ctrl_in_sent+0xa4>)
    1814:	4798      	blx	r3
			return;
    1816:	e7f6      	b.n	1806 <udd_ctrl_in_sent+0x6a>
		b_shortpacket = true;
    1818:	2201      	movs	r2, #1
    181a:	4b04      	ldr	r3, [pc, #16]	; (182c <udd_ctrl_in_sent+0x90>)
    181c:	701a      	strb	r2, [r3, #0]
    181e:	e7e5      	b.n	17ec <udd_ctrl_in_sent+0x50>
    1820:	2000014e 	.word	0x2000014e
    1824:	2000038c 	.word	0x2000038c
    1828:	20000150 	.word	0x20000150
    182c:	2000014c 	.word	0x2000014c
    1830:	20000224 	.word	0x20000224
    1834:	00002579 	.word	0x00002579
    1838:	20000152 	.word	0x20000152
    183c:	200003a4 	.word	0x200003a4
    1840:	0000261d 	.word	0x0000261d

00001844 <_usb_ep0_on_setup>:
{
    1844:	b510      	push	{r4, lr}
    1846:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    1848:	4b2c      	ldr	r3, [pc, #176]	; (18fc <_usb_ep0_on_setup+0xb8>)
    184a:	781b      	ldrb	r3, [r3, #0]
    184c:	2b00      	cmp	r3, #0
    184e:	d007      	beq.n	1860 <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    1850:	4b2b      	ldr	r3, [pc, #172]	; (1900 <_usb_ep0_on_setup+0xbc>)
    1852:	691b      	ldr	r3, [r3, #16]
    1854:	2b00      	cmp	r3, #0
    1856:	d000      	beq.n	185a <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    1858:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    185a:	2200      	movs	r2, #0
    185c:	4b27      	ldr	r3, [pc, #156]	; (18fc <_usb_ep0_on_setup+0xb8>)
    185e:	701a      	strb	r2, [r3, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    1860:	8823      	ldrh	r3, [r4, #0]
    1862:	2b08      	cmp	r3, #8
    1864:	d002      	beq.n	186c <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    1866:	4b27      	ldr	r3, [pc, #156]	; (1904 <_usb_ep0_on_setup+0xc0>)
    1868:	4798      	blx	r3
}
    186a:	bd10      	pop	{r4, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    186c:	4a24      	ldr	r2, [pc, #144]	; (1900 <_usb_ep0_on_setup+0xbc>)
    186e:	4b26      	ldr	r3, [pc, #152]	; (1908 <_usb_ep0_on_setup+0xc4>)
    1870:	7819      	ldrb	r1, [r3, #0]
    1872:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    1874:	7859      	ldrb	r1, [r3, #1]
    1876:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    1878:	78d8      	ldrb	r0, [r3, #3]
    187a:	0200      	lsls	r0, r0, #8
    187c:	7899      	ldrb	r1, [r3, #2]
    187e:	1809      	adds	r1, r1, r0
    1880:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    1882:	7958      	ldrb	r0, [r3, #5]
    1884:	0200      	lsls	r0, r0, #8
    1886:	7919      	ldrb	r1, [r3, #4]
    1888:	1809      	adds	r1, r1, r0
    188a:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    188c:	79d9      	ldrb	r1, [r3, #7]
    188e:	0209      	lsls	r1, r1, #8
    1890:	799b      	ldrb	r3, [r3, #6]
    1892:	185b      	adds	r3, r3, r1
    1894:	80d3      	strh	r3, [r2, #6]
		if (false == udc_process_setup()) {
    1896:	4b1d      	ldr	r3, [pc, #116]	; (190c <_usb_ep0_on_setup+0xc8>)
    1898:	4798      	blx	r3
    189a:	2800      	cmp	r0, #0
    189c:	d016      	beq.n	18cc <_usb_ep0_on_setup+0x88>
		} else if (Udd_setup_is_in()) {
    189e:	4b18      	ldr	r3, [pc, #96]	; (1900 <_usb_ep0_on_setup+0xbc>)
    18a0:	781b      	ldrb	r3, [r3, #0]
    18a2:	2b7f      	cmp	r3, #127	; 0x7f
    18a4:	d815      	bhi.n	18d2 <_usb_ep0_on_setup+0x8e>
			if(0 == udd_g_ctrlreq.req.wLength) {
    18a6:	4b16      	ldr	r3, [pc, #88]	; (1900 <_usb_ep0_on_setup+0xbc>)
    18a8:	88db      	ldrh	r3, [r3, #6]
    18aa:	2b00      	cmp	r3, #0
    18ac:	d022      	beq.n	18f4 <_usb_ep0_on_setup+0xb0>
				udd_ctrl_prev_payload_nb_trans = 0;
    18ae:	2300      	movs	r3, #0
    18b0:	4a17      	ldr	r2, [pc, #92]	; (1910 <_usb_ep0_on_setup+0xcc>)
    18b2:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    18b4:	4a17      	ldr	r2, [pc, #92]	; (1914 <_usb_ep0_on_setup+0xd0>)
    18b6:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    18b8:	2201      	movs	r2, #1
    18ba:	4b10      	ldr	r3, [pc, #64]	; (18fc <_usb_ep0_on_setup+0xb8>)
    18bc:	701a      	strb	r2, [r3, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    18be:	2308      	movs	r3, #8
    18c0:	4a11      	ldr	r2, [pc, #68]	; (1908 <_usb_ep0_on_setup+0xc4>)
    18c2:	2100      	movs	r1, #0
    18c4:	4814      	ldr	r0, [pc, #80]	; (1918 <_usb_ep0_on_setup+0xd4>)
    18c6:	4c15      	ldr	r4, [pc, #84]	; (191c <_usb_ep0_on_setup+0xd8>)
    18c8:	47a0      	blx	r4
    18ca:	e7ce      	b.n	186a <_usb_ep0_on_setup+0x26>
			udd_ctrl_stall_data();
    18cc:	4b0d      	ldr	r3, [pc, #52]	; (1904 <_usb_ep0_on_setup+0xc0>)
    18ce:	4798      	blx	r3
			return;
    18d0:	e7cb      	b.n	186a <_usb_ep0_on_setup+0x26>
			udd_ctrl_prev_payload_nb_trans = 0;
    18d2:	2300      	movs	r3, #0
    18d4:	4a0e      	ldr	r2, [pc, #56]	; (1910 <_usb_ep0_on_setup+0xcc>)
    18d6:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    18d8:	4a0e      	ldr	r2, [pc, #56]	; (1914 <_usb_ep0_on_setup+0xd0>)
    18da:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    18dc:	2202      	movs	r2, #2
    18de:	4b07      	ldr	r3, [pc, #28]	; (18fc <_usb_ep0_on_setup+0xb8>)
    18e0:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    18e2:	2308      	movs	r3, #8
    18e4:	4a08      	ldr	r2, [pc, #32]	; (1908 <_usb_ep0_on_setup+0xc4>)
    18e6:	2100      	movs	r1, #0
    18e8:	480b      	ldr	r0, [pc, #44]	; (1918 <_usb_ep0_on_setup+0xd4>)
    18ea:	4c0c      	ldr	r4, [pc, #48]	; (191c <_usb_ep0_on_setup+0xd8>)
    18ec:	47a0      	blx	r4
			udd_ctrl_in_sent();
    18ee:	4b0c      	ldr	r3, [pc, #48]	; (1920 <_usb_ep0_on_setup+0xdc>)
    18f0:	4798      	blx	r3
    18f2:	e7ba      	b.n	186a <_usb_ep0_on_setup+0x26>
				udd_ctrl_send_zlp_in();
    18f4:	4b0b      	ldr	r3, [pc, #44]	; (1924 <_usb_ep0_on_setup+0xe0>)
    18f6:	4798      	blx	r3
				return;
    18f8:	e7b7      	b.n	186a <_usb_ep0_on_setup+0x26>
    18fa:	46c0      	nop			; (mov r8, r8)
    18fc:	20000152 	.word	0x20000152
    1900:	2000038c 	.word	0x2000038c
    1904:	0000158d 	.word	0x0000158d
    1908:	200003a4 	.word	0x200003a4
    190c:	000007ad 	.word	0x000007ad
    1910:	20000150 	.word	0x20000150
    1914:	2000014e 	.word	0x2000014e
    1918:	20000224 	.word	0x20000224
    191c:	000025cd 	.word	0x000025cd
    1920:	0000179d 	.word	0x0000179d
    1924:	0000170d 	.word	0x0000170d

00001928 <_usb_on_sof_notify>:
{
    1928:	b510      	push	{r4, lr}
	udc_sof_notify();
    192a:	4b02      	ldr	r3, [pc, #8]	; (1934 <_usb_on_sof_notify+0xc>)
    192c:	4798      	blx	r3
	UDC_SOF_EVENT();
    192e:	4b02      	ldr	r3, [pc, #8]	; (1938 <_usb_on_sof_notify+0x10>)
    1930:	4798      	blx	r3
}
    1932:	bd10      	pop	{r4, pc}
    1934:	00000769 	.word	0x00000769
    1938:	00003159 	.word	0x00003159

0000193c <_usb_on_suspend>:
{
    193c:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    193e:	4c07      	ldr	r4, [pc, #28]	; (195c <_usb_on_suspend+0x20>)
    1940:	2104      	movs	r1, #4
    1942:	0020      	movs	r0, r4
    1944:	4b06      	ldr	r3, [pc, #24]	; (1960 <_usb_on_suspend+0x24>)
    1946:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    1948:	2102      	movs	r1, #2
    194a:	0020      	movs	r0, r4
    194c:	4b05      	ldr	r3, [pc, #20]	; (1964 <_usb_on_suspend+0x28>)
    194e:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    1950:	2001      	movs	r0, #1
    1952:	4b05      	ldr	r3, [pc, #20]	; (1968 <_usb_on_suspend+0x2c>)
    1954:	4798      	blx	r3
	UDC_SUSPEND_EVENT();
    1956:	4b05      	ldr	r3, [pc, #20]	; (196c <_usb_on_suspend+0x30>)
    1958:	4798      	blx	r3
}
    195a:	bd10      	pop	{r4, pc}
    195c:	20000224 	.word	0x20000224
    1960:	0000200d 	.word	0x0000200d
    1964:	00001fed 	.word	0x00001fed
    1968:	000012f5 	.word	0x000012f5
    196c:	00003141 	.word	0x00003141

00001970 <udd_ep_abort>:
{
    1970:	b510      	push	{r4, lr}
    1972:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    1974:	0001      	movs	r1, r0
    1976:	480a      	ldr	r0, [pc, #40]	; (19a0 <udd_ep_abort+0x30>)
    1978:	4b0a      	ldr	r3, [pc, #40]	; (19a4 <udd_ep_abort+0x34>)
    197a:	4798      	blx	r3
	ptr_job = udd_ep_get_job(ep);
    197c:	0020      	movs	r0, r4
    197e:	4b0a      	ldr	r3, [pc, #40]	; (19a8 <udd_ep_abort+0x38>)
    1980:	4798      	blx	r3
	if (!ptr_job->busy) {
    1982:	7c83      	ldrb	r3, [r0, #18]
    1984:	07db      	lsls	r3, r3, #31
    1986:	d50a      	bpl.n	199e <udd_ep_abort+0x2e>
	ptr_job->busy = false;
    1988:	7c83      	ldrb	r3, [r0, #18]
    198a:	2201      	movs	r2, #1
    198c:	4393      	bics	r3, r2
    198e:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    1990:	6803      	ldr	r3, [r0, #0]
    1992:	2b00      	cmp	r3, #0
    1994:	d003      	beq.n	199e <udd_ep_abort+0x2e>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    1996:	68c1      	ldr	r1, [r0, #12]
    1998:	0022      	movs	r2, r4
    199a:	2001      	movs	r0, #1
    199c:	4798      	blx	r3
}
    199e:	bd10      	pop	{r4, pc}
    19a0:	20000224 	.word	0x20000224
    19a4:	0000246d 	.word	0x0000246d
    19a8:	000013b5 	.word	0x000013b5

000019ac <udd_get_frame_number>:
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    19ac:	4b02      	ldr	r3, [pc, #8]	; (19b8 <udd_get_frame_number+0xc>)
    19ae:	681b      	ldr	r3, [r3, #0]
    19b0:	8a18      	ldrh	r0, [r3, #16]
    19b2:	0480      	lsls	r0, r0, #18
    19b4:	0d40      	lsrs	r0, r0, #21
}
    19b6:	4770      	bx	lr
    19b8:	20000224 	.word	0x20000224

000019bc <udd_ep_free>:
{
    19bc:	b570      	push	{r4, r5, r6, lr}
    19be:	b082      	sub	sp, #8
    19c0:	0004      	movs	r4, r0
	usb_device_endpoint_get_config_defaults(&config_ep);
    19c2:	ad01      	add	r5, sp, #4
    19c4:	0028      	movs	r0, r5
    19c6:	4b0d      	ldr	r3, [pc, #52]	; (19fc <udd_ep_free+0x40>)
    19c8:	4798      	blx	r3
	udd_ep_abort(ep);
    19ca:	0020      	movs	r0, r4
    19cc:	4b0c      	ldr	r3, [pc, #48]	; (1a00 <udd_ep_free+0x44>)
    19ce:	4798      	blx	r3
	config_ep.ep_address = ep;
    19d0:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    19d2:	2300      	movs	r3, #0
    19d4:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    19d6:	4e0b      	ldr	r6, [pc, #44]	; (1a04 <udd_ep_free+0x48>)
    19d8:	0029      	movs	r1, r5
    19da:	0030      	movs	r0, r6
    19dc:	4b0a      	ldr	r3, [pc, #40]	; (1a08 <udd_ep_free+0x4c>)
    19de:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    19e0:	210f      	movs	r1, #15
    19e2:	4021      	ands	r1, r4
    19e4:	2200      	movs	r2, #0
    19e6:	0030      	movs	r0, r6
    19e8:	4b08      	ldr	r3, [pc, #32]	; (1a0c <udd_ep_free+0x50>)
    19ea:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    19ec:	2200      	movs	r2, #0
    19ee:	0021      	movs	r1, r4
    19f0:	0030      	movs	r0, r6
    19f2:	4b07      	ldr	r3, [pc, #28]	; (1a10 <udd_ep_free+0x54>)
    19f4:	4798      	blx	r3
}
    19f6:	b002      	add	sp, #8
    19f8:	bd70      	pop	{r4, r5, r6, pc}
    19fa:	46c0      	nop			; (mov r8, r8)
    19fc:	00002219 	.word	0x00002219
    1a00:	00001971 	.word	0x00001971
    1a04:	20000224 	.word	0x20000224
    1a08:	00002229 	.word	0x00002229
    1a0c:	00002051 	.word	0x00002051
    1a10:	00002149 	.word	0x00002149

00001a14 <udd_ep_alloc>:
{
    1a14:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a16:	b083      	sub	sp, #12
    1a18:	0005      	movs	r5, r0
    1a1a:	000f      	movs	r7, r1
    1a1c:	0014      	movs	r4, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    1a1e:	ae01      	add	r6, sp, #4
    1a20:	0030      	movs	r0, r6
    1a22:	4b36      	ldr	r3, [pc, #216]	; (1afc <udd_ep_alloc+0xe8>)
    1a24:	4798      	blx	r3
	config_ep.ep_address = ep;
    1a26:	7035      	strb	r5, [r6, #0]
	if(MaxEndpointSize <= 8) {
    1a28:	2c08      	cmp	r4, #8
    1a2a:	d813      	bhi.n	1a54 <udd_ep_alloc+0x40>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    1a2c:	2200      	movs	r2, #0
    1a2e:	ab01      	add	r3, sp, #4
    1a30:	705a      	strb	r2, [r3, #1]
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    1a32:	0028      	movs	r0, r5
    1a34:	4b32      	ldr	r3, [pc, #200]	; (1b00 <udd_ep_alloc+0xec>)
    1a36:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    1a38:	8204      	strh	r4, [r0, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    1a3a:	2103      	movs	r1, #3
    1a3c:	4039      	ands	r1, r7
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    1a3e:	2901      	cmp	r1, #1
    1a40:	d038      	beq.n	1ab4 <udd_ep_alloc+0xa0>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    1a42:	2902      	cmp	r1, #2
    1a44:	d043      	beq.n	1ace <udd_ep_alloc+0xba>
		return false;
    1a46:	2300      	movs	r3, #0
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    1a48:	2903      	cmp	r1, #3
    1a4a:	d13d      	bne.n	1ac8 <udd_ep_alloc+0xb4>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    1a4c:	2204      	movs	r2, #4
    1a4e:	ab01      	add	r3, sp, #4
    1a50:	70da      	strb	r2, [r3, #3]
    1a52:	e032      	b.n	1aba <udd_ep_alloc+0xa6>
	} else if(MaxEndpointSize <= 16) {
    1a54:	2c10      	cmp	r4, #16
    1a56:	d803      	bhi.n	1a60 <udd_ep_alloc+0x4c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    1a58:	2201      	movs	r2, #1
    1a5a:	ab01      	add	r3, sp, #4
    1a5c:	705a      	strb	r2, [r3, #1]
    1a5e:	e7e8      	b.n	1a32 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 32) {
    1a60:	2c20      	cmp	r4, #32
    1a62:	d803      	bhi.n	1a6c <udd_ep_alloc+0x58>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    1a64:	2202      	movs	r2, #2
    1a66:	ab01      	add	r3, sp, #4
    1a68:	705a      	strb	r2, [r3, #1]
    1a6a:	e7e2      	b.n	1a32 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 64) {
    1a6c:	2c40      	cmp	r4, #64	; 0x40
    1a6e:	d803      	bhi.n	1a78 <udd_ep_alloc+0x64>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    1a70:	2203      	movs	r2, #3
    1a72:	ab01      	add	r3, sp, #4
    1a74:	705a      	strb	r2, [r3, #1]
    1a76:	e7dc      	b.n	1a32 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 128) {
    1a78:	2c80      	cmp	r4, #128	; 0x80
    1a7a:	d803      	bhi.n	1a84 <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    1a7c:	2204      	movs	r2, #4
    1a7e:	ab01      	add	r3, sp, #4
    1a80:	705a      	strb	r2, [r3, #1]
    1a82:	e7d6      	b.n	1a32 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 256) {
    1a84:	2380      	movs	r3, #128	; 0x80
    1a86:	005b      	lsls	r3, r3, #1
    1a88:	429c      	cmp	r4, r3
    1a8a:	d803      	bhi.n	1a94 <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    1a8c:	2205      	movs	r2, #5
    1a8e:	ab01      	add	r3, sp, #4
    1a90:	705a      	strb	r2, [r3, #1]
    1a92:	e7ce      	b.n	1a32 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 512) {
    1a94:	2380      	movs	r3, #128	; 0x80
    1a96:	009b      	lsls	r3, r3, #2
    1a98:	429c      	cmp	r4, r3
    1a9a:	d803      	bhi.n	1aa4 <udd_ep_alloc+0x90>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    1a9c:	2206      	movs	r2, #6
    1a9e:	ab01      	add	r3, sp, #4
    1aa0:	705a      	strb	r2, [r3, #1]
    1aa2:	e7c6      	b.n	1a32 <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 1023) {
    1aa4:	4a17      	ldr	r2, [pc, #92]	; (1b04 <udd_ep_alloc+0xf0>)
		return false;
    1aa6:	2300      	movs	r3, #0
	} else if(MaxEndpointSize <= 1023) {
    1aa8:	4294      	cmp	r4, r2
    1aaa:	d80d      	bhi.n	1ac8 <udd_ep_alloc+0xb4>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    1aac:	2207      	movs	r2, #7
    1aae:	ab01      	add	r3, sp, #4
    1ab0:	705a      	strb	r2, [r3, #1]
    1ab2:	e7be      	b.n	1a32 <udd_ep_alloc+0x1e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    1ab4:	2202      	movs	r2, #2
    1ab6:	ab01      	add	r3, sp, #4
    1ab8:	70da      	strb	r2, [r3, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    1aba:	a901      	add	r1, sp, #4
    1abc:	4812      	ldr	r0, [pc, #72]	; (1b08 <udd_ep_alloc+0xf4>)
    1abe:	4b13      	ldr	r3, [pc, #76]	; (1b0c <udd_ep_alloc+0xf8>)
    1ac0:	4798      	blx	r3
		return false;
    1ac2:	2300      	movs	r3, #0
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    1ac4:	2800      	cmp	r0, #0
    1ac6:	d006      	beq.n	1ad6 <udd_ep_alloc+0xc2>
}
    1ac8:	0018      	movs	r0, r3
    1aca:	b003      	add	sp, #12
    1acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    1ace:	2203      	movs	r2, #3
    1ad0:	ab01      	add	r3, sp, #4
    1ad2:	70da      	strb	r2, [r3, #3]
    1ad4:	e7f1      	b.n	1aba <udd_ep_alloc+0xa6>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    1ad6:	210f      	movs	r1, #15
    1ad8:	4029      	ands	r1, r5
    1ada:	4c0b      	ldr	r4, [pc, #44]	; (1b08 <udd_ep_alloc+0xf4>)
    1adc:	4b0c      	ldr	r3, [pc, #48]	; (1b10 <udd_ep_alloc+0xfc>)
    1ade:	2200      	movs	r2, #0
    1ae0:	0020      	movs	r0, r4
    1ae2:	4e0c      	ldr	r6, [pc, #48]	; (1b14 <udd_ep_alloc+0x100>)
    1ae4:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    1ae6:	2200      	movs	r2, #0
    1ae8:	0029      	movs	r1, r5
    1aea:	0020      	movs	r0, r4
    1aec:	4e0a      	ldr	r6, [pc, #40]	; (1b18 <udd_ep_alloc+0x104>)
    1aee:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    1af0:	2201      	movs	r2, #1
    1af2:	0029      	movs	r1, r5
    1af4:	0020      	movs	r0, r4
    1af6:	47b0      	blx	r6
	return true;
    1af8:	2301      	movs	r3, #1
    1afa:	e7e5      	b.n	1ac8 <udd_ep_alloc+0xb4>
    1afc:	00002219 	.word	0x00002219
    1b00:	000013b5 	.word	0x000013b5
    1b04:	000003ff 	.word	0x000003ff
    1b08:	20000224 	.word	0x20000224
    1b0c:	00002229 	.word	0x00002229
    1b10:	000013d9 	.word	0x000013d9
    1b14:	00002029 	.word	0x00002029
    1b18:	00002079 	.word	0x00002079

00001b1c <udd_ep_is_halted>:
{
    1b1c:	b510      	push	{r4, lr}
    1b1e:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    1b20:	4801      	ldr	r0, [pc, #4]	; (1b28 <udd_ep_is_halted+0xc>)
    1b22:	4b02      	ldr	r3, [pc, #8]	; (1b2c <udd_ep_is_halted+0x10>)
    1b24:	4798      	blx	r3
}
    1b26:	bd10      	pop	{r4, pc}
    1b28:	20000224 	.word	0x20000224
    1b2c:	000024a3 	.word	0x000024a3

00001b30 <udd_ep_set_halt>:
{
    1b30:	b510      	push	{r4, lr}
    1b32:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    1b34:	230f      	movs	r3, #15
    1b36:	4003      	ands	r3, r0
		return false;
    1b38:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    1b3a:	2b01      	cmp	r3, #1
    1b3c:	d900      	bls.n	1b40 <udd_ep_set_halt+0x10>
}
    1b3e:	bd10      	pop	{r4, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    1b40:	0021      	movs	r1, r4
    1b42:	4804      	ldr	r0, [pc, #16]	; (1b54 <udd_ep_set_halt+0x24>)
    1b44:	4b04      	ldr	r3, [pc, #16]	; (1b58 <udd_ep_set_halt+0x28>)
    1b46:	4798      	blx	r3
	udd_ep_abort(ep);
    1b48:	0020      	movs	r0, r4
    1b4a:	4b04      	ldr	r3, [pc, #16]	; (1b5c <udd_ep_set_halt+0x2c>)
    1b4c:	4798      	blx	r3
	return true;
    1b4e:	2001      	movs	r0, #1
    1b50:	e7f5      	b.n	1b3e <udd_ep_set_halt+0xe>
    1b52:	46c0      	nop			; (mov r8, r8)
    1b54:	20000224 	.word	0x20000224
    1b58:	000024cd 	.word	0x000024cd
    1b5c:	00001971 	.word	0x00001971

00001b60 <_usb_ep0_on_tansfer_ok>:
{
    1b60:	b570      	push	{r4, r5, r6, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    1b62:	4b34      	ldr	r3, [pc, #208]	; (1c34 <_usb_ep0_on_tansfer_ok+0xd4>)
    1b64:	781b      	ldrb	r3, [r3, #0]
    1b66:	2b01      	cmp	r3, #1
    1b68:	d00a      	beq.n	1b80 <_usb_ep0_on_tansfer_ok+0x20>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    1b6a:	2b02      	cmp	r3, #2
    1b6c:	d05f      	beq.n	1c2e <_usb_ep0_on_tansfer_ok+0xce>
			if (NULL != udd_g_ctrlreq.callback) {
    1b6e:	4b32      	ldr	r3, [pc, #200]	; (1c38 <_usb_ep0_on_tansfer_ok+0xd8>)
    1b70:	691b      	ldr	r3, [r3, #16]
    1b72:	2b00      	cmp	r3, #0
    1b74:	d000      	beq.n	1b78 <_usb_ep0_on_tansfer_ok+0x18>
				udd_g_ctrlreq.callback();
    1b76:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    1b78:	2200      	movs	r2, #0
    1b7a:	4b2e      	ldr	r3, [pc, #184]	; (1c34 <_usb_ep0_on_tansfer_ok+0xd4>)
    1b7c:	701a      	strb	r2, [r3, #0]
}
    1b7e:	bd70      	pop	{r4, r5, r6, pc}
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    1b80:	880d      	ldrh	r5, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    1b82:	4b2d      	ldr	r3, [pc, #180]	; (1c38 <_usb_ep0_on_tansfer_ok+0xd8>)
    1b84:	899b      	ldrh	r3, [r3, #12]
    1b86:	4a2d      	ldr	r2, [pc, #180]	; (1c3c <_usb_ep0_on_tansfer_ok+0xdc>)
    1b88:	8814      	ldrh	r4, [r2, #0]
    1b8a:	1962      	adds	r2, r4, r5
    1b8c:	4293      	cmp	r3, r2
    1b8e:	da01      	bge.n	1b94 <_usb_ep0_on_tansfer_ok+0x34>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    1b90:	1b1d      	subs	r5, r3, r4
    1b92:	b2ad      	uxth	r5, r5
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    1b94:	4b28      	ldr	r3, [pc, #160]	; (1c38 <_usb_ep0_on_tansfer_ok+0xd8>)
    1b96:	6898      	ldr	r0, [r3, #8]
    1b98:	1900      	adds	r0, r0, r4
    1b9a:	002a      	movs	r2, r5
    1b9c:	4928      	ldr	r1, [pc, #160]	; (1c40 <_usb_ep0_on_tansfer_ok+0xe0>)
    1b9e:	4b29      	ldr	r3, [pc, #164]	; (1c44 <_usb_ep0_on_tansfer_ok+0xe4>)
    1ba0:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    1ba2:	1964      	adds	r4, r4, r5
    1ba4:	b2a4      	uxth	r4, r4
    1ba6:	4b25      	ldr	r3, [pc, #148]	; (1c3c <_usb_ep0_on_tansfer_ok+0xdc>)
    1ba8:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    1baa:	2d08      	cmp	r5, #8
    1bac:	d00a      	beq.n	1bc4 <_usb_ep0_on_tansfer_ok+0x64>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    1bae:	4b22      	ldr	r3, [pc, #136]	; (1c38 <_usb_ep0_on_tansfer_ok+0xd8>)
    1bb0:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    1bb2:	695b      	ldr	r3, [r3, #20]
    1bb4:	2b00      	cmp	r3, #0
    1bb6:	d002      	beq.n	1bbe <_usb_ep0_on_tansfer_ok+0x5e>
			if (!udd_g_ctrlreq.over_under_run()) {
    1bb8:	4798      	blx	r3
    1bba:	2800      	cmp	r0, #0
    1bbc:	d014      	beq.n	1be8 <_usb_ep0_on_tansfer_ok+0x88>
		udd_ctrl_send_zlp_in();
    1bbe:	4b22      	ldr	r3, [pc, #136]	; (1c48 <_usb_ep0_on_tansfer_ok+0xe8>)
    1bc0:	4798      	blx	r3
    1bc2:	e7dc      	b.n	1b7e <_usb_ep0_on_tansfer_ok+0x1e>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    1bc4:	4b1c      	ldr	r3, [pc, #112]	; (1c38 <_usb_ep0_on_tansfer_ok+0xd8>)
    1bc6:	88da      	ldrh	r2, [r3, #6]
    1bc8:	4b20      	ldr	r3, [pc, #128]	; (1c4c <_usb_ep0_on_tansfer_ok+0xec>)
    1bca:	881b      	ldrh	r3, [r3, #0]
    1bcc:	191b      	adds	r3, r3, r4
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    1bce:	429a      	cmp	r2, r3
    1bd0:	dded      	ble.n	1bae <_usb_ep0_on_tansfer_ok+0x4e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    1bd2:	4b19      	ldr	r3, [pc, #100]	; (1c38 <_usb_ep0_on_tansfer_ok+0xd8>)
    1bd4:	899b      	ldrh	r3, [r3, #12]
    1bd6:	42a3      	cmp	r3, r4
    1bd8:	d00c      	beq.n	1bf4 <_usb_ep0_on_tansfer_ok+0x94>
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    1bda:	2308      	movs	r3, #8
    1bdc:	4a18      	ldr	r2, [pc, #96]	; (1c40 <_usb_ep0_on_tansfer_ok+0xe0>)
    1bde:	2100      	movs	r1, #0
    1be0:	481b      	ldr	r0, [pc, #108]	; (1c50 <_usb_ep0_on_tansfer_ok+0xf0>)
    1be2:	4c1c      	ldr	r4, [pc, #112]	; (1c54 <_usb_ep0_on_tansfer_ok+0xf4>)
    1be4:	47a0      	blx	r4
    1be6:	e7ca      	b.n	1b7e <_usb_ep0_on_tansfer_ok+0x1e>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    1be8:	2205      	movs	r2, #5
    1bea:	4b12      	ldr	r3, [pc, #72]	; (1c34 <_usb_ep0_on_tansfer_ok+0xd4>)
    1bec:	701a      	strb	r2, [r3, #0]
				udd_ep_set_halt(0);
    1bee:	4b1a      	ldr	r3, [pc, #104]	; (1c58 <_usb_ep0_on_tansfer_ok+0xf8>)
    1bf0:	4798      	blx	r3
    1bf2:	e7c4      	b.n	1b7e <_usb_ep0_on_tansfer_ok+0x1e>
		if (!udd_g_ctrlreq.over_under_run) {
    1bf4:	4b10      	ldr	r3, [pc, #64]	; (1c38 <_usb_ep0_on_tansfer_ok+0xd8>)
    1bf6:	695b      	ldr	r3, [r3, #20]
    1bf8:	2b00      	cmp	r3, #0
    1bfa:	d00b      	beq.n	1c14 <_usb_ep0_on_tansfer_ok+0xb4>
		if (!udd_g_ctrlreq.over_under_run()) {
    1bfc:	4798      	blx	r3
    1bfe:	2800      	cmp	r0, #0
    1c00:	d00f      	beq.n	1c22 <_usb_ep0_on_tansfer_ok+0xc2>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    1c02:	4912      	ldr	r1, [pc, #72]	; (1c4c <_usb_ep0_on_tansfer_ok+0xec>)
    1c04:	4a0d      	ldr	r2, [pc, #52]	; (1c3c <_usb_ep0_on_tansfer_ok+0xdc>)
    1c06:	880b      	ldrh	r3, [r1, #0]
    1c08:	8810      	ldrh	r0, [r2, #0]
    1c0a:	181b      	adds	r3, r3, r0
    1c0c:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
    1c0e:	2300      	movs	r3, #0
    1c10:	8013      	strh	r3, [r2, #0]
    1c12:	e7e2      	b.n	1bda <_usb_ep0_on_tansfer_ok+0x7a>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    1c14:	2205      	movs	r2, #5
    1c16:	4b07      	ldr	r3, [pc, #28]	; (1c34 <_usb_ep0_on_tansfer_ok+0xd4>)
    1c18:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    1c1a:	2000      	movs	r0, #0
    1c1c:	4b0e      	ldr	r3, [pc, #56]	; (1c58 <_usb_ep0_on_tansfer_ok+0xf8>)
    1c1e:	4798      	blx	r3
    1c20:	e7ad      	b.n	1b7e <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    1c22:	2205      	movs	r2, #5
    1c24:	4b03      	ldr	r3, [pc, #12]	; (1c34 <_usb_ep0_on_tansfer_ok+0xd4>)
    1c26:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    1c28:	4b0b      	ldr	r3, [pc, #44]	; (1c58 <_usb_ep0_on_tansfer_ok+0xf8>)
    1c2a:	4798      	blx	r3
    1c2c:	e7a7      	b.n	1b7e <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ctrl_in_sent();
    1c2e:	4b0b      	ldr	r3, [pc, #44]	; (1c5c <_usb_ep0_on_tansfer_ok+0xfc>)
    1c30:	4798      	blx	r3
    1c32:	e7a4      	b.n	1b7e <_usb_ep0_on_tansfer_ok+0x1e>
    1c34:	20000152 	.word	0x20000152
    1c38:	2000038c 	.word	0x2000038c
    1c3c:	2000014e 	.word	0x2000014e
    1c40:	200003a4 	.word	0x200003a4
    1c44:	00003525 	.word	0x00003525
    1c48:	0000170d 	.word	0x0000170d
    1c4c:	20000150 	.word	0x20000150
    1c50:	20000224 	.word	0x20000224
    1c54:	000025cd 	.word	0x000025cd
    1c58:	00001b31 	.word	0x00001b31
    1c5c:	0000179d 	.word	0x0000179d

00001c60 <udd_ep_clear_halt>:
{
    1c60:	b570      	push	{r4, r5, r6, lr}
    1c62:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    1c64:	230f      	movs	r3, #15
    1c66:	4003      	ands	r3, r0
		return false;
    1c68:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    1c6a:	2b01      	cmp	r3, #1
    1c6c:	d900      	bls.n	1c70 <udd_ep_clear_halt+0x10>
}
    1c6e:	bd70      	pop	{r4, r5, r6, pc}
	ptr_job = udd_ep_get_job(ep);
    1c70:	0020      	movs	r0, r4
    1c72:	4b09      	ldr	r3, [pc, #36]	; (1c98 <udd_ep_clear_halt+0x38>)
    1c74:	4798      	blx	r3
    1c76:	0005      	movs	r5, r0
	usb_device_endpoint_clear_halt(&usb_device, ep);
    1c78:	0021      	movs	r1, r4
    1c7a:	4808      	ldr	r0, [pc, #32]	; (1c9c <udd_ep_clear_halt+0x3c>)
    1c7c:	4b08      	ldr	r3, [pc, #32]	; (1ca0 <udd_ep_clear_halt+0x40>)
    1c7e:	4798      	blx	r3
	if (ptr_job->busy == true) {
    1c80:	7cab      	ldrb	r3, [r5, #18]
	return true;
    1c82:	2001      	movs	r0, #1
	if (ptr_job->busy == true) {
    1c84:	07db      	lsls	r3, r3, #31
    1c86:	d5f2      	bpl.n	1c6e <udd_ep_clear_halt+0xe>
		ptr_job->busy = false;
    1c88:	7cab      	ldrb	r3, [r5, #18]
    1c8a:	2201      	movs	r2, #1
    1c8c:	4393      	bics	r3, r2
    1c8e:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    1c90:	682b      	ldr	r3, [r5, #0]
    1c92:	4798      	blx	r3
	return true;
    1c94:	2001      	movs	r0, #1
    1c96:	e7ea      	b.n	1c6e <udd_ep_clear_halt+0xe>
    1c98:	000013b5 	.word	0x000013b5
    1c9c:	20000224 	.word	0x20000224
    1ca0:	000024f3 	.word	0x000024f3

00001ca4 <udd_ep_run>:
{
    1ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ca6:	b087      	sub	sp, #28
    1ca8:	0005      	movs	r5, r0
    1caa:	9103      	str	r1, [sp, #12]
    1cac:	9202      	str	r2, [sp, #8]
    1cae:	9301      	str	r3, [sp, #4]
	ep_num = ep & USB_EP_ADDR_MASK;
    1cb0:	260f      	movs	r6, #15
    1cb2:	4006      	ands	r6, r0
		return false;
    1cb4:	2400      	movs	r4, #0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    1cb6:	2e01      	cmp	r6, #1
    1cb8:	d902      	bls.n	1cc0 <udd_ep_run+0x1c>
}
    1cba:	0020      	movs	r0, r4
    1cbc:	b007      	add	sp, #28
    1cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    1cc0:	4b64      	ldr	r3, [pc, #400]	; (1e54 <udd_ep_run+0x1b0>)
    1cc2:	4798      	blx	r3
    1cc4:	1e04      	subs	r4, r0, #0
    1cc6:	d000      	beq.n	1cca <udd_ep_run+0x26>
    1cc8:	e0bd      	b.n	1e46 <udd_ep_run+0x1a2>
	ptr_job = udd_ep_get_job(ep);
    1cca:	0028      	movs	r0, r5
    1ccc:	4b62      	ldr	r3, [pc, #392]	; (1e58 <udd_ep_run+0x1b4>)
    1cce:	4798      	blx	r3
    1cd0:	0007      	movs	r7, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1cd2:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1cd6:	425a      	negs	r2, r3
    1cd8:	4153      	adcs	r3, r2
    1cda:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    1cdc:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1cde:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1ce2:	2200      	movs	r2, #0
    1ce4:	4b5d      	ldr	r3, [pc, #372]	; (1e5c <udd_ep_run+0x1b8>)
    1ce6:	701a      	strb	r2, [r3, #0]
	return flags;
    1ce8:	9b05      	ldr	r3, [sp, #20]
	if (ptr_job->busy == true) {
    1cea:	7c82      	ldrb	r2, [r0, #18]
    1cec:	07d2      	lsls	r2, r2, #31
    1cee:	d508      	bpl.n	1d02 <udd_ep_run+0x5e>
	if (cpu_irq_is_enabled_flags(flags))
    1cf0:	2b00      	cmp	r3, #0
    1cf2:	d0e2      	beq.n	1cba <udd_ep_run+0x16>
		cpu_irq_enable();
    1cf4:	2201      	movs	r2, #1
    1cf6:	4b59      	ldr	r3, [pc, #356]	; (1e5c <udd_ep_run+0x1b8>)
    1cf8:	701a      	strb	r2, [r3, #0]
    1cfa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1cfe:	b662      	cpsie	i
    1d00:	e7db      	b.n	1cba <udd_ep_run+0x16>
	ptr_job->busy = true;
    1d02:	7c82      	ldrb	r2, [r0, #18]
    1d04:	2101      	movs	r1, #1
    1d06:	430a      	orrs	r2, r1
    1d08:	7482      	strb	r2, [r0, #18]
	if (cpu_irq_is_enabled_flags(flags))
    1d0a:	2b00      	cmp	r3, #0
    1d0c:	d005      	beq.n	1d1a <udd_ep_run+0x76>
		cpu_irq_enable();
    1d0e:	2201      	movs	r2, #1
    1d10:	4b52      	ldr	r3, [pc, #328]	; (1e5c <udd_ep_run+0x1b8>)
    1d12:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    1d14:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1d18:	b662      	cpsie	i
	ptr_job->buf = buf;
    1d1a:	9b02      	ldr	r3, [sp, #8]
    1d1c:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    1d1e:	9b01      	ldr	r3, [sp, #4]
    1d20:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    1d22:	2300      	movs	r3, #0
    1d24:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    1d26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1d28:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    1d2a:	2301      	movs	r3, #1
    1d2c:	9a03      	ldr	r2, [sp, #12]
    1d2e:	4013      	ands	r3, r2
    1d30:	005a      	lsls	r2, r3, #1
    1d32:	7cbb      	ldrb	r3, [r7, #18]
    1d34:	2102      	movs	r1, #2
    1d36:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    1d38:	4313      	orrs	r3, r2
    1d3a:	2204      	movs	r2, #4
    1d3c:	4393      	bics	r3, r2
    1d3e:	74bb      	strb	r3, [r7, #18]
	if (ep & USB_EP_DIR_IN) {
    1d40:	b26b      	sxtb	r3, r5
    1d42:	2b00      	cmp	r3, #0
    1d44:	db20      	blt.n	1d88 <udd_ep_run+0xe4>
		if (0 != ptr_job->buf_size) {
    1d46:	9b01      	ldr	r3, [sp, #4]
    1d48:	2b00      	cmp	r3, #0
    1d4a:	d06f      	beq.n	1e2c <udd_ep_run+0x188>
			next_trans = ptr_job->buf_size;
    1d4c:	b29c      	uxth	r4, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1d4e:	4b44      	ldr	r3, [pc, #272]	; (1e60 <udd_ep_run+0x1bc>)
    1d50:	429c      	cmp	r4, r3
    1d52:	d95a      	bls.n	1e0a <udd_ep_run+0x166>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    1d54:	8a39      	ldrh	r1, [r7, #16]
    1d56:	001c      	movs	r4, r3
    1d58:	0018      	movs	r0, r3
    1d5a:	4b42      	ldr	r3, [pc, #264]	; (1e64 <udd_ep_run+0x1c0>)
    1d5c:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    1d5e:	1a63      	subs	r3, r4, r1
    1d60:	b29a      	uxth	r2, r3
			if (next_trans < ptr_job->ep_size) {
    1d62:	8a3b      	ldrh	r3, [r7, #16]
    1d64:	429a      	cmp	r2, r3
    1d66:	d257      	bcs.n	1e18 <udd_ep_run+0x174>
				ptr_job->b_use_out_cache_buffer = true;
    1d68:	7cba      	ldrb	r2, [r7, #18]
    1d6a:	2104      	movs	r1, #4
    1d6c:	430a      	orrs	r2, r1
    1d6e:	74ba      	strb	r2, [r7, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    1d70:	1e72      	subs	r2, r6, #1
    1d72:	0192      	lsls	r2, r2, #6
    1d74:	493c      	ldr	r1, [pc, #240]	; (1e68 <udd_ep_run+0x1c4>)
    1d76:	1852      	adds	r2, r2, r1
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    1d78:	0031      	movs	r1, r6
    1d7a:	483c      	ldr	r0, [pc, #240]	; (1e6c <udd_ep_run+0x1c8>)
    1d7c:	4c3c      	ldr	r4, [pc, #240]	; (1e70 <udd_ep_run+0x1cc>)
    1d7e:	47a0      	blx	r4
				return (STATUS_OK ==
    1d80:	4244      	negs	r4, r0
    1d82:	4144      	adcs	r4, r0
    1d84:	b2e4      	uxtb	r4, r4
    1d86:	e798      	b.n	1cba <udd_ep_run+0x16>
		if (0 != ptr_job->buf_size) {
    1d88:	9b01      	ldr	r3, [sp, #4]
    1d8a:	2b00      	cmp	r3, #0
    1d8c:	d027      	beq.n	1dde <udd_ep_run+0x13a>
			next_trans = ptr_job->buf_size;
    1d8e:	b29d      	uxth	r5, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1d90:	4b33      	ldr	r3, [pc, #204]	; (1e60 <udd_ep_run+0x1bc>)
    1d92:	429d      	cmp	r5, r3
    1d94:	d906      	bls.n	1da4 <udd_ep_run+0x100>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    1d96:	8a39      	ldrh	r1, [r7, #16]
    1d98:	001d      	movs	r5, r3
    1d9a:	0018      	movs	r0, r3
    1d9c:	4b31      	ldr	r3, [pc, #196]	; (1e64 <udd_ep_run+0x1c0>)
    1d9e:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    1da0:	1a6b      	subs	r3, r5, r1
    1da2:	b29d      	uxth	r5, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    1da4:	7cbb      	ldrb	r3, [r7, #18]
    1da6:	079b      	lsls	r3, r3, #30
    1da8:	d507      	bpl.n	1dba <udd_ep_run+0x116>
					(0 == (next_trans % ptr_job->ep_size));
    1daa:	8a39      	ldrh	r1, [r7, #16]
    1dac:	0028      	movs	r0, r5
    1dae:	4b31      	ldr	r3, [pc, #196]	; (1e74 <udd_ep_run+0x1d0>)
    1db0:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    1db2:	b289      	uxth	r1, r1
    1db4:	424c      	negs	r4, r1
    1db6:	414c      	adcs	r4, r1
    1db8:	b2e4      	uxtb	r4, r4
    1dba:	2001      	movs	r0, #1
    1dbc:	4020      	ands	r0, r4
    1dbe:	0040      	lsls	r0, r0, #1
    1dc0:	7cbc      	ldrb	r4, [r7, #18]
    1dc2:	2302      	movs	r3, #2
    1dc4:	439c      	bics	r4, r3
    1dc6:	4304      	orrs	r4, r0
    1dc8:	74bc      	strb	r4, [r7, #18]
				usb_device_endpoint_write_buffer_job(&usb_device,
    1dca:	002b      	movs	r3, r5
    1dcc:	9a02      	ldr	r2, [sp, #8]
    1dce:	0031      	movs	r1, r6
    1dd0:	4826      	ldr	r0, [pc, #152]	; (1e6c <udd_ep_run+0x1c8>)
    1dd2:	4c29      	ldr	r4, [pc, #164]	; (1e78 <udd_ep_run+0x1d4>)
    1dd4:	47a0      	blx	r4
		return (STATUS_OK ==
    1dd6:	4244      	negs	r4, r0
    1dd8:	4144      	adcs	r4, r0
    1dda:	b2e4      	uxtb	r4, r4
    1ddc:	e76d      	b.n	1cba <udd_ep_run+0x16>
		} else if (true == ptr_job->b_shortpacket) {
    1dde:	7cbb      	ldrb	r3, [r7, #18]
    1de0:	079b      	lsls	r3, r3, #30
    1de2:	d505      	bpl.n	1df0 <udd_ep_run+0x14c>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    1de4:	7cbb      	ldrb	r3, [r7, #18]
    1de6:	2202      	movs	r2, #2
    1de8:	4393      	bics	r3, r2
    1dea:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    1dec:	2500      	movs	r5, #0
    1dee:	e7ec      	b.n	1dca <udd_ep_run+0x126>
			ptr_job->busy = false;
    1df0:	7cbb      	ldrb	r3, [r7, #18]
    1df2:	2201      	movs	r2, #1
    1df4:	4393      	bics	r3, r2
    1df6:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    1df8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1dfa:	2b00      	cmp	r3, #0
    1dfc:	d025      	beq.n	1e4a <udd_ep_run+0x1a6>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    1dfe:	002a      	movs	r2, r5
    1e00:	2100      	movs	r1, #0
    1e02:	2000      	movs	r0, #0
    1e04:	4798      	blx	r3
			return true;
    1e06:	2401      	movs	r4, #1
    1e08:	e757      	b.n	1cba <udd_ep_run+0x16>
				next_trans -= next_trans % ptr_job->ep_size;
    1e0a:	8a39      	ldrh	r1, [r7, #16]
    1e0c:	0020      	movs	r0, r4
    1e0e:	4b19      	ldr	r3, [pc, #100]	; (1e74 <udd_ep_run+0x1d0>)
    1e10:	4798      	blx	r3
    1e12:	1a63      	subs	r3, r4, r1
    1e14:	b29a      	uxth	r2, r3
    1e16:	e7a4      	b.n	1d62 <udd_ep_run+0xbe>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    1e18:	0013      	movs	r3, r2
    1e1a:	9a02      	ldr	r2, [sp, #8]
    1e1c:	0031      	movs	r1, r6
    1e1e:	4813      	ldr	r0, [pc, #76]	; (1e6c <udd_ep_run+0x1c8>)
    1e20:	4c13      	ldr	r4, [pc, #76]	; (1e70 <udd_ep_run+0x1cc>)
    1e22:	47a0      	blx	r4
				return (STATUS_OK ==
    1e24:	4244      	negs	r4, r0
    1e26:	4144      	adcs	r4, r0
    1e28:	b2e4      	uxtb	r4, r4
    1e2a:	e746      	b.n	1cba <udd_ep_run+0x16>
			ptr_job->busy = false;
    1e2c:	7cbb      	ldrb	r3, [r7, #18]
    1e2e:	2201      	movs	r2, #1
    1e30:	4393      	bics	r3, r2
    1e32:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    1e34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1e36:	2b00      	cmp	r3, #0
    1e38:	d009      	beq.n	1e4e <udd_ep_run+0x1aa>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    1e3a:	002a      	movs	r2, r5
    1e3c:	2100      	movs	r1, #0
    1e3e:	2000      	movs	r0, #0
    1e40:	4798      	blx	r3
			return true;
    1e42:	2401      	movs	r4, #1
    1e44:	e739      	b.n	1cba <udd_ep_run+0x16>
		return false;
    1e46:	2400      	movs	r4, #0
    1e48:	e737      	b.n	1cba <udd_ep_run+0x16>
			return true;
    1e4a:	2401      	movs	r4, #1
    1e4c:	e735      	b.n	1cba <udd_ep_run+0x16>
			return true;
    1e4e:	2401      	movs	r4, #1
    1e50:	e733      	b.n	1cba <udd_ep_run+0x16>
    1e52:	46c0      	nop			; (mov r8, r8)
    1e54:	00001b1d 	.word	0x00001b1d
    1e58:	000013b5 	.word	0x000013b5
    1e5c:	200000da 	.word	0x200000da
    1e60:	00001fff 	.word	0x00001fff
    1e64:	00003491 	.word	0x00003491
    1e68:	200001e4 	.word	0x200001e4
    1e6c:	20000224 	.word	0x20000224
    1e70:	000025cd 	.word	0x000025cd
    1e74:	000032bd 	.word	0x000032bd
    1e78:	00002579 	.word	0x00002579

00001e7c <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    1e7c:	4b02      	ldr	r3, [pc, #8]	; (1e88 <udd_set_address+0xc>)
    1e7e:	681b      	ldr	r3, [r3, #0]
    1e80:	2280      	movs	r2, #128	; 0x80
    1e82:	4310      	orrs	r0, r2
    1e84:	7298      	strb	r0, [r3, #10]
}
    1e86:	4770      	bx	lr
    1e88:	20000224 	.word	0x20000224

00001e8c <udd_getaddress>:
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    1e8c:	4b02      	ldr	r3, [pc, #8]	; (1e98 <udd_getaddress+0xc>)
    1e8e:	681b      	ldr	r3, [r3, #0]
    1e90:	7a98      	ldrb	r0, [r3, #10]
    1e92:	0640      	lsls	r0, r0, #25
    1e94:	0e40      	lsrs	r0, r0, #25
}
    1e96:	4770      	bx	lr
    1e98:	20000224 	.word	0x20000224

00001e9c <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    1e9c:	4b01      	ldr	r3, [pc, #4]	; (1ea4 <udd_set_setup_payload+0x8>)
    1e9e:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    1ea0:	8199      	strh	r1, [r3, #12]
}
    1ea2:	4770      	bx	lr
    1ea4:	2000038c 	.word	0x2000038c

00001ea8 <udd_attach>:
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
}

void udd_attach(void)
{
    1ea8:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    1eaa:	2003      	movs	r0, #3
    1eac:	4b16      	ldr	r3, [pc, #88]	; (1f08 <udd_attach+0x60>)
    1eae:	4798      	blx	r3
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    1eb0:	4c16      	ldr	r4, [pc, #88]	; (1f0c <udd_attach+0x64>)
    1eb2:	6822      	ldr	r2, [r4, #0]
    1eb4:	8913      	ldrh	r3, [r2, #8]
    1eb6:	2101      	movs	r1, #1
    1eb8:	438b      	bics	r3, r1
    1eba:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    1ebc:	4a14      	ldr	r2, [pc, #80]	; (1f10 <udd_attach+0x68>)
    1ebe:	3103      	adds	r1, #3
    1ec0:	0020      	movs	r0, r4
    1ec2:	4e14      	ldr	r6, [pc, #80]	; (1f14 <udd_attach+0x6c>)
    1ec4:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    1ec6:	4a14      	ldr	r2, [pc, #80]	; (1f18 <udd_attach+0x70>)
    1ec8:	2100      	movs	r1, #0
    1eca:	0020      	movs	r0, r4
    1ecc:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    1ece:	4a13      	ldr	r2, [pc, #76]	; (1f1c <udd_attach+0x74>)
    1ed0:	2101      	movs	r1, #1
    1ed2:	0020      	movs	r0, r4
    1ed4:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    1ed6:	4a12      	ldr	r2, [pc, #72]	; (1f20 <udd_attach+0x78>)
    1ed8:	2102      	movs	r1, #2
    1eda:	0020      	movs	r0, r4
    1edc:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    1ede:	2104      	movs	r1, #4
    1ee0:	0020      	movs	r0, r4
    1ee2:	4d10      	ldr	r5, [pc, #64]	; (1f24 <udd_attach+0x7c>)
    1ee4:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    1ee6:	2100      	movs	r1, #0
    1ee8:	0020      	movs	r0, r4
    1eea:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    1eec:	2101      	movs	r1, #1
    1eee:	0020      	movs	r0, r4
    1ef0:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    1ef2:	2102      	movs	r1, #2
    1ef4:	0020      	movs	r0, r4
    1ef6:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    1ef8:	4a0b      	ldr	r2, [pc, #44]	; (1f28 <udd_attach+0x80>)
    1efa:	2106      	movs	r1, #6
    1efc:	0020      	movs	r0, r4
    1efe:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    1f00:	2106      	movs	r1, #6
    1f02:	0020      	movs	r0, r4
    1f04:	47a8      	blx	r5
#endif
}
    1f06:	bd70      	pop	{r4, r5, r6, pc}
    1f08:	000012f5 	.word	0x000012f5
    1f0c:	20000224 	.word	0x20000224
    1f10:	0000193d 	.word	0x0000193d
    1f14:	00001fc9 	.word	0x00001fc9
    1f18:	00001929 	.word	0x00001929
    1f1c:	0000165d 	.word	0x0000165d
    1f20:	000015ed 	.word	0x000015ed
    1f24:	00001fed 	.word	0x00001fed
    1f28:	000015b9 	.word	0x000015b9

00001f2c <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    1f2c:	b570      	push	{r4, r5, r6, lr}
    1f2e:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1f30:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1f34:	425a      	negs	r2, r3
    1f36:	4153      	adcs	r3, r2
    1f38:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    1f3a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1f3c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1f40:	2600      	movs	r6, #0
    1f42:	4b18      	ldr	r3, [pc, #96]	; (1fa4 <udd_enable+0x78>)
    1f44:	701e      	strb	r6, [r3, #0]
	return flags;
    1f46:	9c00      	ldr	r4, [sp, #0]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    1f48:	ad01      	add	r5, sp, #4
    1f4a:	0028      	movs	r0, r5
    1f4c:	4b16      	ldr	r3, [pc, #88]	; (1fa8 <udd_enable+0x7c>)
    1f4e:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    1f50:	70ae      	strb	r6, [r5, #2]
	usb_init(&usb_device, USB, &config_usb);
    1f52:	4e16      	ldr	r6, [pc, #88]	; (1fac <udd_enable+0x80>)
    1f54:	002a      	movs	r2, r5
    1f56:	4916      	ldr	r1, [pc, #88]	; (1fb0 <udd_enable+0x84>)
    1f58:	0030      	movs	r0, r6
    1f5a:	4b16      	ldr	r3, [pc, #88]	; (1fb4 <udd_enable+0x88>)
    1f5c:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    1f5e:	0030      	movs	r0, r6
    1f60:	4b15      	ldr	r3, [pc, #84]	; (1fb8 <udd_enable+0x8c>)
    1f62:	4798      	blx	r3
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    1f64:	4b15      	ldr	r3, [pc, #84]	; (1fbc <udd_enable+0x90>)
    1f66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    1f68:	069b      	lsls	r3, r3, #26
    1f6a:	d414      	bmi.n	1f96 <udd_enable+0x6a>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    1f6c:	4913      	ldr	r1, [pc, #76]	; (1fbc <udd_enable+0x90>)
    1f6e:	22d0      	movs	r2, #208	; 0xd0
    1f70:	68cb      	ldr	r3, [r1, #12]
    1f72:	4013      	ands	r3, r2
    1f74:	2bd0      	cmp	r3, #208	; 0xd0
    1f76:	d1fb      	bne.n	1f70 <udd_enable+0x44>

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    1f78:	2001      	movs	r0, #1
    1f7a:	4b11      	ldr	r3, [pc, #68]	; (1fc0 <udd_enable+0x94>)
    1f7c:	4798      	blx	r3
		_uhd_vbus_handler();
	}
#else
	// No VBus detect, assume always high
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
    1f7e:	4b11      	ldr	r3, [pc, #68]	; (1fc4 <udd_enable+0x98>)
    1f80:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    1f82:	2c00      	cmp	r4, #0
    1f84:	d005      	beq.n	1f92 <udd_enable+0x66>
		cpu_irq_enable();
    1f86:	2201      	movs	r2, #1
    1f88:	4b06      	ldr	r3, [pc, #24]	; (1fa4 <udd_enable+0x78>)
    1f8a:	701a      	strb	r2, [r3, #0]
    1f8c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1f90:	b662      	cpsie	i
# endif
#endif

	cpu_irq_restore(flags);
}
    1f92:	b002      	add	sp, #8
    1f94:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    1f96:	4909      	ldr	r1, [pc, #36]	; (1fbc <udd_enable+0x90>)
    1f98:	2210      	movs	r2, #16
    1f9a:	68cb      	ldr	r3, [r1, #12]
    1f9c:	421a      	tst	r2, r3
    1f9e:	d0fc      	beq.n	1f9a <udd_enable+0x6e>
    1fa0:	e7ea      	b.n	1f78 <udd_enable+0x4c>
    1fa2:	46c0      	nop			; (mov r8, r8)
    1fa4:	200000da 	.word	0x200000da
    1fa8:	00002d41 	.word	0x00002d41
    1fac:	20000224 	.word	0x20000224
    1fb0:	41005000 	.word	0x41005000
    1fb4:	00002d51 	.word	0x00002d51
    1fb8:	0000264d 	.word	0x0000264d
    1fbc:	40000800 	.word	0x40000800
    1fc0:	000012f5 	.word	0x000012f5
    1fc4:	00001ea9 	.word	0x00001ea9

00001fc8 <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    1fc8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    1fca:	000b      	movs	r3, r1
    1fcc:	332e      	adds	r3, #46	; 0x2e
    1fce:	009b      	lsls	r3, r3, #2
    1fd0:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    1fd2:	22aa      	movs	r2, #170	; 0xaa
    1fd4:	0052      	lsls	r2, r2, #1
    1fd6:	0049      	lsls	r1, r1, #1
    1fd8:	5a83      	ldrh	r3, [r0, r2]
    1fda:	4c03      	ldr	r4, [pc, #12]	; (1fe8 <usb_device_register_callback+0x20>)
    1fdc:	5b09      	ldrh	r1, [r1, r4]
    1fde:	430b      	orrs	r3, r1
    1fe0:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    1fe2:	2000      	movs	r0, #0
    1fe4:	bd10      	pop	{r4, pc}
    1fe6:	46c0      	nop			; (mov r8, r8)
    1fe8:	00003580 	.word	0x00003580

00001fec <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    1fec:	0049      	lsls	r1, r1, #1
    1fee:	4b06      	ldr	r3, [pc, #24]	; (2008 <STACK_SIZE+0x8>)
    1ff0:	5acb      	ldrh	r3, [r1, r3]
    1ff2:	6802      	ldr	r2, [r0, #0]
    1ff4:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    1ff6:	21ab      	movs	r1, #171	; 0xab
    1ff8:	0049      	lsls	r1, r1, #1
    1ffa:	5a42      	ldrh	r2, [r0, r1]
    1ffc:	431a      	orrs	r2, r3
    1ffe:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    2000:	6802      	ldr	r2, [r0, #0]
    2002:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    2004:	2000      	movs	r0, #0
    2006:	4770      	bx	lr
    2008:	00003580 	.word	0x00003580

0000200c <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    200c:	0049      	lsls	r1, r1, #1
    200e:	4b05      	ldr	r3, [pc, #20]	; (2024 <usb_device_disable_callback+0x18>)
    2010:	5aca      	ldrh	r2, [r1, r3]
    2012:	21ab      	movs	r1, #171	; 0xab
    2014:	0049      	lsls	r1, r1, #1
    2016:	5a43      	ldrh	r3, [r0, r1]
    2018:	4393      	bics	r3, r2
    201a:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    201c:	6803      	ldr	r3, [r0, #0]
    201e:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    2020:	2000      	movs	r0, #0
    2022:	4770      	bx	lr
    2024:	00003580 	.word	0x00003580

00002028 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    2028:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    202a:	008c      	lsls	r4, r1, #2
    202c:	18a4      	adds	r4, r4, r2
    202e:	3434      	adds	r4, #52	; 0x34
    2030:	00a4      	lsls	r4, r4, #2
    2032:	1904      	adds	r4, r0, r4
    2034:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    2036:	1840      	adds	r0, r0, r1
    2038:	3059      	adds	r0, #89	; 0x59
    203a:	30ff      	adds	r0, #255	; 0xff
    203c:	7803      	ldrb	r3, [r0, #0]
    203e:	4903      	ldr	r1, [pc, #12]	; (204c <usb_device_endpoint_register_callback+0x24>)
    2040:	5c8a      	ldrb	r2, [r1, r2]
    2042:	4313      	orrs	r3, r2
    2044:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    2046:	2000      	movs	r0, #0
    2048:	bd10      	pop	{r4, pc}
    204a:	46c0      	nop			; (mov r8, r8)
    204c:	00003590 	.word	0x00003590

00002050 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    2050:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    2052:	008b      	lsls	r3, r1, #2
    2054:	189b      	adds	r3, r3, r2
    2056:	3334      	adds	r3, #52	; 0x34
    2058:	009b      	lsls	r3, r3, #2
    205a:	18c3      	adds	r3, r0, r3
    205c:	2400      	movs	r4, #0
    205e:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    2060:	1840      	adds	r0, r0, r1
    2062:	3059      	adds	r0, #89	; 0x59
    2064:	30ff      	adds	r0, #255	; 0xff
    2066:	4b03      	ldr	r3, [pc, #12]	; (2074 <usb_device_endpoint_unregister_callback+0x24>)
    2068:	5c9a      	ldrb	r2, [r3, r2]
    206a:	7803      	ldrb	r3, [r0, #0]
    206c:	4393      	bics	r3, r2
    206e:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    2070:	2000      	movs	r0, #0
    2072:	bd10      	pop	{r4, pc}
    2074:	00003590 	.word	0x00003590

00002078 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    2078:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    207a:	230f      	movs	r3, #15
    207c:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    207e:	18c4      	adds	r4, r0, r3
    2080:	3461      	adds	r4, #97	; 0x61
    2082:	34ff      	adds	r4, #255	; 0xff
    2084:	7825      	ldrb	r5, [r4, #0]
    2086:	4e2f      	ldr	r6, [pc, #188]	; (2144 <usb_device_endpoint_enable_callback+0xcc>)
    2088:	5cb6      	ldrb	r6, [r6, r2]
    208a:	4335      	orrs	r5, r6
    208c:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    208e:	2a00      	cmp	r2, #0
    2090:	d129      	bne.n	20e6 <usb_device_endpoint_enable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    2092:	2b00      	cmp	r3, #0
    2094:	d112      	bne.n	20bc <usb_device_endpoint_enable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    2096:	2503      	movs	r5, #3
    2098:	240a      	movs	r4, #10
    209a:	34ff      	adds	r4, #255	; 0xff
    209c:	6806      	ldr	r6, [r0, #0]
    209e:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    20a0:	2a03      	cmp	r2, #3
    20a2:	d109      	bne.n	20b8 <usb_device_endpoint_enable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    20a4:	b249      	sxtb	r1, r1
    20a6:	2900      	cmp	r1, #0
    20a8:	db44      	blt.n	2134 <usb_device_endpoint_enable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    20aa:	6802      	ldr	r2, [r0, #0]
    20ac:	015b      	lsls	r3, r3, #5
    20ae:	18d3      	adds	r3, r2, r3
    20b0:	330a      	adds	r3, #10
    20b2:	33ff      	adds	r3, #255	; 0xff
    20b4:	2220      	movs	r2, #32
    20b6:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    20b8:	2000      	movs	r0, #0
    20ba:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    20bc:	b24c      	sxtb	r4, r1
    20be:	2c00      	cmp	r4, #0
    20c0:	db08      	blt.n	20d4 <usb_device_endpoint_enable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    20c2:	015c      	lsls	r4, r3, #5
    20c4:	6805      	ldr	r5, [r0, #0]
    20c6:	46ac      	mov	ip, r5
    20c8:	4464      	add	r4, ip
    20ca:	340a      	adds	r4, #10
    20cc:	34ff      	adds	r4, #255	; 0xff
    20ce:	2501      	movs	r5, #1
    20d0:	7025      	strb	r5, [r4, #0]
    20d2:	e7e5      	b.n	20a0 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    20d4:	015c      	lsls	r4, r3, #5
    20d6:	6805      	ldr	r5, [r0, #0]
    20d8:	46ac      	mov	ip, r5
    20da:	4464      	add	r4, ip
    20dc:	340a      	adds	r4, #10
    20de:	34ff      	adds	r4, #255	; 0xff
    20e0:	2502      	movs	r5, #2
    20e2:	7025      	strb	r5, [r4, #0]
    20e4:	e7dc      	b.n	20a0 <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    20e6:	2a01      	cmp	r2, #1
    20e8:	d11a      	bne.n	2120 <usb_device_endpoint_enable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    20ea:	2b00      	cmp	r3, #0
    20ec:	d105      	bne.n	20fa <usb_device_endpoint_enable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    20ee:	6802      	ldr	r2, [r0, #0]
    20f0:	210c      	movs	r1, #12
    20f2:	230a      	movs	r3, #10
    20f4:	33ff      	adds	r3, #255	; 0xff
    20f6:	54d1      	strb	r1, [r2, r3]
    20f8:	e7de      	b.n	20b8 <usb_device_endpoint_enable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    20fa:	b249      	sxtb	r1, r1
    20fc:	2900      	cmp	r1, #0
    20fe:	db07      	blt.n	2110 <usb_device_endpoint_enable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    2100:	6802      	ldr	r2, [r0, #0]
    2102:	015b      	lsls	r3, r3, #5
    2104:	18d3      	adds	r3, r2, r3
    2106:	330a      	adds	r3, #10
    2108:	33ff      	adds	r3, #255	; 0xff
    210a:	2204      	movs	r2, #4
    210c:	701a      	strb	r2, [r3, #0]
    210e:	e7d3      	b.n	20b8 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    2110:	6802      	ldr	r2, [r0, #0]
    2112:	015b      	lsls	r3, r3, #5
    2114:	18d3      	adds	r3, r2, r3
    2116:	330a      	adds	r3, #10
    2118:	33ff      	adds	r3, #255	; 0xff
    211a:	2208      	movs	r2, #8
    211c:	701a      	strb	r2, [r3, #0]
    211e:	e7cb      	b.n	20b8 <usb_device_endpoint_enable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    2120:	2a02      	cmp	r2, #2
    2122:	d1bd      	bne.n	20a0 <usb_device_endpoint_enable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    2124:	6802      	ldr	r2, [r0, #0]
    2126:	015b      	lsls	r3, r3, #5
    2128:	18d3      	adds	r3, r2, r3
    212a:	330a      	adds	r3, #10
    212c:	33ff      	adds	r3, #255	; 0xff
    212e:	2210      	movs	r2, #16
    2130:	701a      	strb	r2, [r3, #0]
    2132:	e7c1      	b.n	20b8 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    2134:	6802      	ldr	r2, [r0, #0]
    2136:	015b      	lsls	r3, r3, #5
    2138:	18d3      	adds	r3, r2, r3
    213a:	330a      	adds	r3, #10
    213c:	33ff      	adds	r3, #255	; 0xff
    213e:	2240      	movs	r2, #64	; 0x40
    2140:	701a      	strb	r2, [r3, #0]
    2142:	e7b9      	b.n	20b8 <usb_device_endpoint_enable_callback+0x40>
    2144:	00003590 	.word	0x00003590

00002148 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    2148:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    214a:	230f      	movs	r3, #15
    214c:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    214e:	18c4      	adds	r4, r0, r3
    2150:	3461      	adds	r4, #97	; 0x61
    2152:	34ff      	adds	r4, #255	; 0xff
    2154:	4d2f      	ldr	r5, [pc, #188]	; (2214 <usb_device_endpoint_disable_callback+0xcc>)
    2156:	5cae      	ldrb	r6, [r5, r2]
    2158:	7825      	ldrb	r5, [r4, #0]
    215a:	43b5      	bics	r5, r6
    215c:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    215e:	2a00      	cmp	r2, #0
    2160:	d129      	bne.n	21b6 <usb_device_endpoint_disable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    2162:	2b00      	cmp	r3, #0
    2164:	d112      	bne.n	218c <usb_device_endpoint_disable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    2166:	2503      	movs	r5, #3
    2168:	2484      	movs	r4, #132	; 0x84
    216a:	0064      	lsls	r4, r4, #1
    216c:	6806      	ldr	r6, [r0, #0]
    216e:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    2170:	2a03      	cmp	r2, #3
    2172:	d109      	bne.n	2188 <usb_device_endpoint_disable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    2174:	b249      	sxtb	r1, r1
    2176:	2900      	cmp	r1, #0
    2178:	db44      	blt.n	2204 <usb_device_endpoint_disable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    217a:	6802      	ldr	r2, [r0, #0]
    217c:	015b      	lsls	r3, r3, #5
    217e:	18d3      	adds	r3, r2, r3
    2180:	3309      	adds	r3, #9
    2182:	33ff      	adds	r3, #255	; 0xff
    2184:	2220      	movs	r2, #32
    2186:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    2188:	2000      	movs	r0, #0
    218a:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    218c:	b24c      	sxtb	r4, r1
    218e:	2c00      	cmp	r4, #0
    2190:	db08      	blt.n	21a4 <usb_device_endpoint_disable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    2192:	015c      	lsls	r4, r3, #5
    2194:	6805      	ldr	r5, [r0, #0]
    2196:	46ac      	mov	ip, r5
    2198:	4464      	add	r4, ip
    219a:	3409      	adds	r4, #9
    219c:	34ff      	adds	r4, #255	; 0xff
    219e:	2501      	movs	r5, #1
    21a0:	7025      	strb	r5, [r4, #0]
    21a2:	e7e5      	b.n	2170 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    21a4:	015c      	lsls	r4, r3, #5
    21a6:	6805      	ldr	r5, [r0, #0]
    21a8:	46ac      	mov	ip, r5
    21aa:	4464      	add	r4, ip
    21ac:	3409      	adds	r4, #9
    21ae:	34ff      	adds	r4, #255	; 0xff
    21b0:	2502      	movs	r5, #2
    21b2:	7025      	strb	r5, [r4, #0]
    21b4:	e7dc      	b.n	2170 <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    21b6:	2a01      	cmp	r2, #1
    21b8:	d11a      	bne.n	21f0 <usb_device_endpoint_disable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    21ba:	2b00      	cmp	r3, #0
    21bc:	d105      	bne.n	21ca <usb_device_endpoint_disable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    21be:	6802      	ldr	r2, [r0, #0]
    21c0:	210c      	movs	r1, #12
    21c2:	3309      	adds	r3, #9
    21c4:	33ff      	adds	r3, #255	; 0xff
    21c6:	54d1      	strb	r1, [r2, r3]
    21c8:	e7de      	b.n	2188 <usb_device_endpoint_disable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    21ca:	b249      	sxtb	r1, r1
    21cc:	2900      	cmp	r1, #0
    21ce:	db07      	blt.n	21e0 <usb_device_endpoint_disable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    21d0:	6802      	ldr	r2, [r0, #0]
    21d2:	015b      	lsls	r3, r3, #5
    21d4:	18d3      	adds	r3, r2, r3
    21d6:	3309      	adds	r3, #9
    21d8:	33ff      	adds	r3, #255	; 0xff
    21da:	2204      	movs	r2, #4
    21dc:	701a      	strb	r2, [r3, #0]
    21de:	e7d3      	b.n	2188 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    21e0:	6802      	ldr	r2, [r0, #0]
    21e2:	015b      	lsls	r3, r3, #5
    21e4:	18d3      	adds	r3, r2, r3
    21e6:	3309      	adds	r3, #9
    21e8:	33ff      	adds	r3, #255	; 0xff
    21ea:	2208      	movs	r2, #8
    21ec:	701a      	strb	r2, [r3, #0]
    21ee:	e7cb      	b.n	2188 <usb_device_endpoint_disable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    21f0:	2a02      	cmp	r2, #2
    21f2:	d1bd      	bne.n	2170 <usb_device_endpoint_disable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    21f4:	6802      	ldr	r2, [r0, #0]
    21f6:	015b      	lsls	r3, r3, #5
    21f8:	18d3      	adds	r3, r2, r3
    21fa:	3309      	adds	r3, #9
    21fc:	33ff      	adds	r3, #255	; 0xff
    21fe:	2210      	movs	r2, #16
    2200:	701a      	strb	r2, [r3, #0]
    2202:	e7c1      	b.n	2188 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    2204:	6802      	ldr	r2, [r0, #0]
    2206:	015b      	lsls	r3, r3, #5
    2208:	18d3      	adds	r3, r2, r3
    220a:	3309      	adds	r3, #9
    220c:	33ff      	adds	r3, #255	; 0xff
    220e:	2240      	movs	r2, #64	; 0x40
    2210:	701a      	strb	r2, [r3, #0]
    2212:	e7b9      	b.n	2188 <usb_device_endpoint_disable_callback+0x40>
    2214:	00003590 	.word	0x00003590

00002218 <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    2218:	2300      	movs	r3, #0
    221a:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    221c:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    221e:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    2220:	3301      	adds	r3, #1
    2222:	70c3      	strb	r3, [r0, #3]
}
    2224:	4770      	bx	lr
	...

00002228 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    2228:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    222a:	780c      	ldrb	r4, [r1, #0]
    222c:	230f      	movs	r3, #15
    222e:	4023      	ands	r3, r4
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    2230:	b264      	sxtb	r4, r4

	switch (ep_config->ep_type) {
    2232:	78ca      	ldrb	r2, [r1, #3]
    2234:	2a04      	cmp	r2, #4
    2236:	d870      	bhi.n	231a <usb_device_endpoint_set_config+0xf2>
    2238:	0092      	lsls	r2, r2, #2
    223a:	4d89      	ldr	r5, [pc, #548]	; (2460 <usb_device_endpoint_set_config+0x238>)
    223c:	58aa      	ldr	r2, [r5, r2]
    223e:	4697      	mov	pc, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    2240:	6802      	ldr	r2, [r0, #0]
    2242:	3308      	adds	r3, #8
    2244:	015b      	lsls	r3, r3, #5
    2246:	2100      	movs	r1, #0
    2248:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    224a:	2200      	movs	r2, #0
    224c:	e082      	b.n	2354 <usb_device_endpoint_set_config+0x12c>
    224e:	015c      	lsls	r4, r3, #5
    2250:	6802      	ldr	r2, [r0, #0]
    2252:	4694      	mov	ip, r2
    2254:	4464      	add	r4, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    2256:	2280      	movs	r2, #128	; 0x80
    2258:	0052      	lsls	r2, r2, #1
    225a:	5ca5      	ldrb	r5, [r4, r2]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    225c:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    225e:	076d      	lsls	r5, r5, #29
    2260:	d178      	bne.n	2354 <usb_device_endpoint_set_config+0x12c>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    2262:	32e4      	adds	r2, #228	; 0xe4
    2264:	5ca6      	ldrb	r6, [r4, r2]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    2266:	2570      	movs	r5, #112	; 0x70
				return STATUS_ERR_DENIED;
    2268:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    226a:	422e      	tst	r6, r5
    226c:	d172      	bne.n	2354 <usb_device_endpoint_set_config+0x12c>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    226e:	3d5f      	subs	r5, #95	; 0x5f
    2270:	32e4      	adds	r2, #228	; 0xe4
    2272:	54a5      	strb	r5, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    2274:	001a      	movs	r2, r3
    2276:	3208      	adds	r2, #8
    2278:	0152      	lsls	r2, r2, #5
    227a:	6804      	ldr	r4, [r0, #0]
    227c:	18a4      	adds	r4, r4, r2
    227e:	352f      	adds	r5, #47	; 0x2f
    2280:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2282:	6800      	ldr	r0, [r0, #0]
    2284:	1882      	adds	r2, r0, r2
    2286:	2080      	movs	r0, #128	; 0x80
    2288:	7110      	strb	r0, [r2, #4]
			}
			if (true == ep_config->auto_zlp) {
    228a:	788a      	ldrb	r2, [r1, #2]
    228c:	2a00      	cmp	r2, #0
    228e:	d01f      	beq.n	22d0 <usb_device_endpoint_set_config+0xa8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2290:	0158      	lsls	r0, r3, #5
    2292:	4a74      	ldr	r2, [pc, #464]	; (2464 <usb_device_endpoint_set_config+0x23c>)
    2294:	1812      	adds	r2, r2, r0
    2296:	6854      	ldr	r4, [r2, #4]
    2298:	2080      	movs	r0, #128	; 0x80
    229a:	0600      	lsls	r0, r0, #24
    229c:	4304      	orrs	r4, r0
    229e:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    22a0:	6954      	ldr	r4, [r2, #20]
    22a2:	4320      	orrs	r0, r4
    22a4:	6150      	str	r0, [r2, #20]
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    22a6:	2507      	movs	r5, #7
    22a8:	784c      	ldrb	r4, [r1, #1]
    22aa:	015a      	lsls	r2, r3, #5
    22ac:	4b6d      	ldr	r3, [pc, #436]	; (2464 <usb_device_endpoint_set_config+0x23c>)
    22ae:	189b      	adds	r3, r3, r2
    22b0:	6858      	ldr	r0, [r3, #4]
    22b2:	402c      	ands	r4, r5
    22b4:	0724      	lsls	r4, r4, #28
    22b6:	4e6c      	ldr	r6, [pc, #432]	; (2468 <usb_device_endpoint_set_config+0x240>)
    22b8:	4030      	ands	r0, r6
    22ba:	4320      	orrs	r0, r4
    22bc:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    22be:	7849      	ldrb	r1, [r1, #1]
    22c0:	695a      	ldr	r2, [r3, #20]
    22c2:	4029      	ands	r1, r5
    22c4:	0709      	lsls	r1, r1, #28
    22c6:	4032      	ands	r2, r6
    22c8:	430a      	orrs	r2, r1
    22ca:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    22cc:	2200      	movs	r2, #0
    22ce:	e041      	b.n	2354 <usb_device_endpoint_set_config+0x12c>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    22d0:	0158      	lsls	r0, r3, #5
    22d2:	4a64      	ldr	r2, [pc, #400]	; (2464 <usb_device_endpoint_set_config+0x23c>)
    22d4:	1812      	adds	r2, r2, r0
    22d6:	6850      	ldr	r0, [r2, #4]
    22d8:	0040      	lsls	r0, r0, #1
    22da:	0840      	lsrs	r0, r0, #1
    22dc:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    22de:	6950      	ldr	r0, [r2, #20]
    22e0:	0040      	lsls	r0, r0, #1
    22e2:	0840      	lsrs	r0, r0, #1
    22e4:	6150      	str	r0, [r2, #20]
    22e6:	e7de      	b.n	22a6 <usb_device_endpoint_set_config+0x7e>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    22e8:	2c00      	cmp	r4, #0
    22ea:	db35      	blt.n	2358 <usb_device_endpoint_set_config+0x130>
    22ec:	015d      	lsls	r5, r3, #5
    22ee:	6802      	ldr	r2, [r0, #0]
    22f0:	4694      	mov	ip, r2
    22f2:	4465      	add	r5, ip
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    22f4:	2280      	movs	r2, #128	; 0x80
    22f6:	0052      	lsls	r2, r2, #1
    22f8:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    22fa:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    22fc:	0776      	lsls	r6, r6, #29
    22fe:	d129      	bne.n	2354 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    2300:	2680      	movs	r6, #128	; 0x80
    2302:	0076      	lsls	r6, r6, #1
    2304:	5daa      	ldrb	r2, [r5, r6]
    2306:	2702      	movs	r7, #2
    2308:	433a      	orrs	r2, r7
    230a:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    230c:	6802      	ldr	r2, [r0, #0]
    230e:	0018      	movs	r0, r3
    2310:	3008      	adds	r0, #8
    2312:	0140      	lsls	r0, r0, #5
    2314:	1812      	adds	r2, r2, r0
    2316:	2040      	movs	r0, #64	; 0x40
    2318:	7150      	strb	r0, [r2, #5]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    231a:	0fe2      	lsrs	r2, r4, #31

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    231c:	784f      	ldrb	r7, [r1, #1]
    231e:	005d      	lsls	r5, r3, #1
    2320:	18ad      	adds	r5, r5, r2
    2322:	012d      	lsls	r5, r5, #4
    2324:	4e4f      	ldr	r6, [pc, #316]	; (2464 <usb_device_endpoint_set_config+0x23c>)
    2326:	1975      	adds	r5, r6, r5
    2328:	6868      	ldr	r0, [r5, #4]
    232a:	2407      	movs	r4, #7
    232c:	403c      	ands	r4, r7
    232e:	0724      	lsls	r4, r4, #28
    2330:	4e4d      	ldr	r6, [pc, #308]	; (2468 <usb_device_endpoint_set_config+0x240>)
    2332:	4030      	ands	r0, r6
    2334:	4320      	orrs	r0, r4
    2336:	6068      	str	r0, [r5, #4]

	if (true == ep_config->auto_zlp) {
    2338:	7889      	ldrb	r1, [r1, #2]
    233a:	2900      	cmp	r1, #0
    233c:	d000      	beq.n	2340 <usb_device_endpoint_set_config+0x118>
    233e:	e088      	b.n	2452 <usb_device_endpoint_set_config+0x22a>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2340:	005b      	lsls	r3, r3, #1
    2342:	189b      	adds	r3, r3, r2
    2344:	011b      	lsls	r3, r3, #4
    2346:	4a47      	ldr	r2, [pc, #284]	; (2464 <usb_device_endpoint_set_config+0x23c>)
    2348:	18d3      	adds	r3, r2, r3
    234a:	685a      	ldr	r2, [r3, #4]
    234c:	0052      	lsls	r2, r2, #1
    234e:	0852      	lsrs	r2, r2, #1
    2350:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    2352:	2200      	movs	r2, #0
}
    2354:	0010      	movs	r0, r2
    2356:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2358:	015d      	lsls	r5, r3, #5
    235a:	6802      	ldr	r2, [r0, #0]
    235c:	4694      	mov	ip, r2
    235e:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2360:	2280      	movs	r2, #128	; 0x80
    2362:	0052      	lsls	r2, r2, #1
    2364:	5caf      	ldrb	r7, [r5, r2]
    2366:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    2368:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    236a:	4237      	tst	r7, r6
    236c:	d1f2      	bne.n	2354 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    236e:	3690      	adds	r6, #144	; 0x90
    2370:	5daa      	ldrb	r2, [r5, r6]
    2372:	2720      	movs	r7, #32
    2374:	433a      	orrs	r2, r7
    2376:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2378:	6802      	ldr	r2, [r0, #0]
    237a:	0018      	movs	r0, r3
    237c:	3008      	adds	r0, #8
    237e:	0140      	lsls	r0, r0, #5
    2380:	1812      	adds	r2, r2, r0
    2382:	2080      	movs	r0, #128	; 0x80
    2384:	7110      	strb	r0, [r2, #4]
    2386:	e7c8      	b.n	231a <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    2388:	2c00      	cmp	r4, #0
    238a:	db17      	blt.n	23bc <usb_device_endpoint_set_config+0x194>
    238c:	015d      	lsls	r5, r3, #5
    238e:	6802      	ldr	r2, [r0, #0]
    2390:	4694      	mov	ip, r2
    2392:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2394:	2280      	movs	r2, #128	; 0x80
    2396:	0052      	lsls	r2, r2, #1
    2398:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    239a:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    239c:	0776      	lsls	r6, r6, #29
    239e:	d1d9      	bne.n	2354 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    23a0:	2680      	movs	r6, #128	; 0x80
    23a2:	0076      	lsls	r6, r6, #1
    23a4:	5daa      	ldrb	r2, [r5, r6]
    23a6:	2703      	movs	r7, #3
    23a8:	433a      	orrs	r2, r7
    23aa:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    23ac:	6802      	ldr	r2, [r0, #0]
    23ae:	0018      	movs	r0, r3
    23b0:	3008      	adds	r0, #8
    23b2:	0140      	lsls	r0, r0, #5
    23b4:	1812      	adds	r2, r2, r0
    23b6:	2040      	movs	r0, #64	; 0x40
    23b8:	7150      	strb	r0, [r2, #5]
    23ba:	e7ae      	b.n	231a <usb_device_endpoint_set_config+0xf2>
    23bc:	015d      	lsls	r5, r3, #5
    23be:	6802      	ldr	r2, [r0, #0]
    23c0:	4694      	mov	ip, r2
    23c2:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    23c4:	2280      	movs	r2, #128	; 0x80
    23c6:	0052      	lsls	r2, r2, #1
    23c8:	5caf      	ldrb	r7, [r5, r2]
    23ca:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    23cc:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    23ce:	4237      	tst	r7, r6
    23d0:	d1c0      	bne.n	2354 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    23d2:	3690      	adds	r6, #144	; 0x90
    23d4:	5daa      	ldrb	r2, [r5, r6]
    23d6:	2730      	movs	r7, #48	; 0x30
    23d8:	433a      	orrs	r2, r7
    23da:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    23dc:	6802      	ldr	r2, [r0, #0]
    23de:	0018      	movs	r0, r3
    23e0:	3008      	adds	r0, #8
    23e2:	0140      	lsls	r0, r0, #5
    23e4:	1812      	adds	r2, r2, r0
    23e6:	2080      	movs	r0, #128	; 0x80
    23e8:	7110      	strb	r0, [r2, #4]
    23ea:	e796      	b.n	231a <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    23ec:	2c00      	cmp	r4, #0
    23ee:	db17      	blt.n	2420 <usb_device_endpoint_set_config+0x1f8>
    23f0:	015d      	lsls	r5, r3, #5
    23f2:	6802      	ldr	r2, [r0, #0]
    23f4:	4694      	mov	ip, r2
    23f6:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    23f8:	2280      	movs	r2, #128	; 0x80
    23fa:	0052      	lsls	r2, r2, #1
    23fc:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    23fe:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2400:	0776      	lsls	r6, r6, #29
    2402:	d1a7      	bne.n	2354 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    2404:	2680      	movs	r6, #128	; 0x80
    2406:	0076      	lsls	r6, r6, #1
    2408:	5daa      	ldrb	r2, [r5, r6]
    240a:	2704      	movs	r7, #4
    240c:	433a      	orrs	r2, r7
    240e:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    2410:	6802      	ldr	r2, [r0, #0]
    2412:	0018      	movs	r0, r3
    2414:	3008      	adds	r0, #8
    2416:	0140      	lsls	r0, r0, #5
    2418:	1812      	adds	r2, r2, r0
    241a:	2040      	movs	r0, #64	; 0x40
    241c:	7150      	strb	r0, [r2, #5]
    241e:	e77c      	b.n	231a <usb_device_endpoint_set_config+0xf2>
    2420:	015d      	lsls	r5, r3, #5
    2422:	6802      	ldr	r2, [r0, #0]
    2424:	4694      	mov	ip, r2
    2426:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2428:	2280      	movs	r2, #128	; 0x80
    242a:	0052      	lsls	r2, r2, #1
    242c:	5caf      	ldrb	r7, [r5, r2]
    242e:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    2430:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2432:	4237      	tst	r7, r6
    2434:	d000      	beq.n	2438 <usb_device_endpoint_set_config+0x210>
    2436:	e78d      	b.n	2354 <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    2438:	3690      	adds	r6, #144	; 0x90
    243a:	5daa      	ldrb	r2, [r5, r6]
    243c:	2740      	movs	r7, #64	; 0x40
    243e:	433a      	orrs	r2, r7
    2440:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2442:	6802      	ldr	r2, [r0, #0]
    2444:	0018      	movs	r0, r3
    2446:	3008      	adds	r0, #8
    2448:	0140      	lsls	r0, r0, #5
    244a:	1812      	adds	r2, r2, r0
    244c:	2080      	movs	r0, #128	; 0x80
    244e:	7110      	strb	r0, [r2, #4]
    2450:	e763      	b.n	231a <usb_device_endpoint_set_config+0xf2>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2452:	6869      	ldr	r1, [r5, #4]
    2454:	2380      	movs	r3, #128	; 0x80
    2456:	061b      	lsls	r3, r3, #24
    2458:	430b      	orrs	r3, r1
    245a:	606b      	str	r3, [r5, #4]
	return STATUS_OK;
    245c:	2200      	movs	r2, #0
    245e:	e779      	b.n	2354 <usb_device_endpoint_set_config+0x12c>
    2460:	0000356c 	.word	0x0000356c
    2464:	200003ac 	.word	0x200003ac
    2468:	8fffffff 	.word	0x8fffffff

0000246c <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    246c:	230f      	movs	r3, #15
    246e:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    2470:	b249      	sxtb	r1, r1
    2472:	2900      	cmp	r1, #0
    2474:	db0a      	blt.n	248c <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    2476:	3308      	adds	r3, #8
    2478:	015b      	lsls	r3, r3, #5
    247a:	6802      	ldr	r2, [r0, #0]
    247c:	18d2      	adds	r2, r2, r3
    247e:	2140      	movs	r1, #64	; 0x40
    2480:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    2482:	6802      	ldr	r2, [r0, #0]
    2484:	18d3      	adds	r3, r2, r3
    2486:	2201      	movs	r2, #1
    2488:	71da      	strb	r2, [r3, #7]
	}
}
    248a:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    248c:	3308      	adds	r3, #8
    248e:	015b      	lsls	r3, r3, #5
    2490:	6802      	ldr	r2, [r0, #0]
    2492:	18d2      	adds	r2, r2, r3
    2494:	2180      	movs	r1, #128	; 0x80
    2496:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    2498:	6802      	ldr	r2, [r0, #0]
    249a:	18d3      	adds	r3, r2, r3
    249c:	2202      	movs	r2, #2
    249e:	71da      	strb	r2, [r3, #7]
    24a0:	e7f3      	b.n	248a <usb_device_endpoint_abort_job+0x1e>

000024a2 <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    24a2:	230f      	movs	r3, #15
    24a4:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    24a6:	b249      	sxtb	r1, r1
    24a8:	2900      	cmp	r1, #0
    24aa:	db07      	blt.n	24bc <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    24ac:	6802      	ldr	r2, [r0, #0]
    24ae:	3308      	adds	r3, #8
    24b0:	015b      	lsls	r3, r3, #5
    24b2:	18d3      	adds	r3, r2, r3
    24b4:	7998      	ldrb	r0, [r3, #6]
    24b6:	06c0      	lsls	r0, r0, #27
    24b8:	0fc0      	lsrs	r0, r0, #31
	}
}
    24ba:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    24bc:	6802      	ldr	r2, [r0, #0]
    24be:	3308      	adds	r3, #8
    24c0:	015b      	lsls	r3, r3, #5
    24c2:	18d3      	adds	r3, r2, r3
    24c4:	7998      	ldrb	r0, [r3, #6]
    24c6:	0680      	lsls	r0, r0, #26
    24c8:	0fc0      	lsrs	r0, r0, #31
    24ca:	e7f6      	b.n	24ba <usb_device_endpoint_is_halted+0x18>

000024cc <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    24cc:	230f      	movs	r3, #15
    24ce:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    24d0:	b249      	sxtb	r1, r1
    24d2:	2900      	cmp	r1, #0
    24d4:	db06      	blt.n	24e4 <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    24d6:	6802      	ldr	r2, [r0, #0]
    24d8:	3308      	adds	r3, #8
    24da:	015b      	lsls	r3, r3, #5
    24dc:	18d3      	adds	r3, r2, r3
    24de:	2210      	movs	r2, #16
    24e0:	715a      	strb	r2, [r3, #5]
	}
}
    24e2:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    24e4:	6802      	ldr	r2, [r0, #0]
    24e6:	3308      	adds	r3, #8
    24e8:	015b      	lsls	r3, r3, #5
    24ea:	18d3      	adds	r3, r2, r3
    24ec:	2220      	movs	r2, #32
    24ee:	715a      	strb	r2, [r3, #5]
    24f0:	e7f7      	b.n	24e2 <usb_device_endpoint_set_halt+0x16>

000024f2 <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    24f2:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    24f4:	230f      	movs	r3, #15
    24f6:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    24f8:	b249      	sxtb	r1, r1
    24fa:	2900      	cmp	r1, #0
    24fc:	db1d      	blt.n	253a <usb_device_endpoint_clear_halt+0x48>
    24fe:	0159      	lsls	r1, r3, #5
    2500:	6802      	ldr	r2, [r0, #0]
    2502:	1852      	adds	r2, r2, r1
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    2504:	2483      	movs	r4, #131	; 0x83
    2506:	0064      	lsls	r4, r4, #1
    2508:	5d14      	ldrb	r4, [r2, r4]
    250a:	06e4      	lsls	r4, r4, #27
    250c:	d514      	bpl.n	2538 <usb_device_endpoint_clear_halt+0x46>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    250e:	2510      	movs	r5, #16
    2510:	2482      	movs	r4, #130	; 0x82
    2512:	0064      	lsls	r4, r4, #1
    2514:	5515      	strb	r5, [r2, r4]
    2516:	6802      	ldr	r2, [r0, #0]
    2518:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    251a:	2108      	movs	r1, #8
    251c:	31ff      	adds	r1, #255	; 0xff
    251e:	5c51      	ldrb	r1, [r2, r1]
    2520:	0689      	lsls	r1, r1, #26
    2522:	d509      	bpl.n	2538 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    2524:	3ce4      	subs	r4, #228	; 0xe4
    2526:	2108      	movs	r1, #8
    2528:	31ff      	adds	r1, #255	; 0xff
    252a:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    252c:	6802      	ldr	r2, [r0, #0]
    252e:	3308      	adds	r3, #8
    2530:	015b      	lsls	r3, r3, #5
    2532:	18d3      	adds	r3, r2, r3
    2534:	2201      	movs	r2, #1
    2536:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    2538:	bd30      	pop	{r4, r5, pc}
    253a:	0159      	lsls	r1, r3, #5
    253c:	6802      	ldr	r2, [r0, #0]
    253e:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    2540:	2483      	movs	r4, #131	; 0x83
    2542:	0064      	lsls	r4, r4, #1
    2544:	5d14      	ldrb	r4, [r2, r4]
    2546:	06a4      	lsls	r4, r4, #26
    2548:	d5f6      	bpl.n	2538 <usb_device_endpoint_clear_halt+0x46>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    254a:	2520      	movs	r5, #32
    254c:	2482      	movs	r4, #130	; 0x82
    254e:	0064      	lsls	r4, r4, #1
    2550:	5515      	strb	r5, [r2, r4]
    2552:	6802      	ldr	r2, [r0, #0]
    2554:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    2556:	2108      	movs	r1, #8
    2558:	31ff      	adds	r1, #255	; 0xff
    255a:	5c51      	ldrb	r1, [r2, r1]
    255c:	0649      	lsls	r1, r1, #25
    255e:	d5eb      	bpl.n	2538 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    2560:	3cc4      	subs	r4, #196	; 0xc4
    2562:	2108      	movs	r1, #8
    2564:	31ff      	adds	r1, #255	; 0xff
    2566:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    2568:	6802      	ldr	r2, [r0, #0]
    256a:	3308      	adds	r3, #8
    256c:	015b      	lsls	r3, r3, #5
    256e:	18d3      	adds	r3, r2, r3
    2570:	2202      	movs	r2, #2
    2572:	711a      	strb	r2, [r3, #4]
    2574:	e7e0      	b.n	2538 <usb_device_endpoint_clear_halt+0x46>
	...

00002578 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    2578:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    257a:	000c      	movs	r4, r1
    257c:	3408      	adds	r4, #8
    257e:	0164      	lsls	r4, r4, #5
    2580:	6805      	ldr	r5, [r0, #0]
    2582:	5d64      	ldrb	r4, [r4, r5]
    2584:	0664      	lsls	r4, r4, #25
    2586:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    2588:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    258a:	2c00      	cmp	r4, #0
    258c:	d101      	bne.n	2592 <usb_device_endpoint_write_buffer_job+0x1a>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
    258e:	0028      	movs	r0, r5
    2590:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    2592:	014c      	lsls	r4, r1, #5
    2594:	4d0b      	ldr	r5, [pc, #44]	; (25c4 <usb_device_endpoint_write_buffer_job+0x4c>)
    2596:	192d      	adds	r5, r5, r4
    2598:	002c      	movs	r4, r5
    259a:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    259c:	696a      	ldr	r2, [r5, #20]
    259e:	4d0a      	ldr	r5, [pc, #40]	; (25c8 <usb_device_endpoint_write_buffer_job+0x50>)
    25a0:	402a      	ands	r2, r5
    25a2:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    25a4:	6962      	ldr	r2, [r4, #20]
    25a6:	049b      	lsls	r3, r3, #18
    25a8:	0c9b      	lsrs	r3, r3, #18
    25aa:	0b92      	lsrs	r2, r2, #14
    25ac:	0392      	lsls	r2, r2, #14
    25ae:	4313      	orrs	r3, r2
    25b0:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    25b2:	6803      	ldr	r3, [r0, #0]
    25b4:	3108      	adds	r1, #8
    25b6:	0149      	lsls	r1, r1, #5
    25b8:	1859      	adds	r1, r3, r1
    25ba:	2380      	movs	r3, #128	; 0x80
    25bc:	714b      	strb	r3, [r1, #5]
	return STATUS_OK;
    25be:	2500      	movs	r5, #0
    25c0:	e7e5      	b.n	258e <usb_device_endpoint_write_buffer_job+0x16>
    25c2:	46c0      	nop			; (mov r8, r8)
    25c4:	200003ac 	.word	0x200003ac
    25c8:	f0003fff 	.word	0xf0003fff

000025cc <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    25cc:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    25ce:	000c      	movs	r4, r1
    25d0:	3408      	adds	r4, #8
    25d2:	0164      	lsls	r4, r4, #5
    25d4:	6805      	ldr	r5, [r0, #0]
    25d6:	5d64      	ldrb	r4, [r4, r5]
    25d8:	0764      	lsls	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    25da:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    25dc:	2c00      	cmp	r4, #0
    25de:	d101      	bne.n	25e4 <usb_device_endpoint_read_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
    25e0:	0028      	movs	r0, r5
    25e2:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    25e4:	4c0b      	ldr	r4, [pc, #44]	; (2614 <usb_device_endpoint_read_buffer_job+0x48>)
    25e6:	014d      	lsls	r5, r1, #5
    25e8:	512a      	str	r2, [r5, r4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    25ea:	1962      	adds	r2, r4, r5
    25ec:	6854      	ldr	r4, [r2, #4]
    25ee:	049b      	lsls	r3, r3, #18
    25f0:	091b      	lsrs	r3, r3, #4
    25f2:	4d09      	ldr	r5, [pc, #36]	; (2618 <usb_device_endpoint_read_buffer_job+0x4c>)
    25f4:	402c      	ands	r4, r5
    25f6:	4323      	orrs	r3, r4
    25f8:	6053      	str	r3, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    25fa:	6853      	ldr	r3, [r2, #4]
    25fc:	0b9b      	lsrs	r3, r3, #14
    25fe:	039b      	lsls	r3, r3, #14
    2600:	6053      	str	r3, [r2, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    2602:	6803      	ldr	r3, [r0, #0]
    2604:	3108      	adds	r1, #8
    2606:	0149      	lsls	r1, r1, #5
    2608:	1859      	adds	r1, r3, r1
    260a:	2340      	movs	r3, #64	; 0x40
    260c:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    260e:	2500      	movs	r5, #0
    2610:	e7e6      	b.n	25e0 <usb_device_endpoint_read_buffer_job+0x14>
    2612:	46c0      	nop			; (mov r8, r8)
    2614:	200003ac 	.word	0x200003ac
    2618:	f0003fff 	.word	0xf0003fff

0000261c <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    261c:	4b09      	ldr	r3, [pc, #36]	; (2644 <usb_device_endpoint_setup_buffer_job+0x28>)
    261e:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    2620:	685a      	ldr	r2, [r3, #4]
    2622:	4909      	ldr	r1, [pc, #36]	; (2648 <usb_device_endpoint_setup_buffer_job+0x2c>)
    2624:	4011      	ands	r1, r2
    2626:	2280      	movs	r2, #128	; 0x80
    2628:	0292      	lsls	r2, r2, #10
    262a:	430a      	orrs	r2, r1
    262c:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    262e:	685a      	ldr	r2, [r3, #4]
    2630:	0b92      	lsrs	r2, r2, #14
    2632:	0392      	lsls	r2, r2, #14
    2634:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    2636:	6802      	ldr	r2, [r0, #0]
    2638:	2140      	movs	r1, #64	; 0x40
    263a:	2382      	movs	r3, #130	; 0x82
    263c:	005b      	lsls	r3, r3, #1
    263e:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    2640:	2000      	movs	r0, #0
    2642:	4770      	bx	lr
    2644:	200003ac 	.word	0x200003ac
    2648:	f0003fff 	.word	0xf0003fff

0000264c <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    264c:	6802      	ldr	r2, [r0, #0]
    264e:	7813      	ldrb	r3, [r2, #0]
    2650:	2102      	movs	r1, #2
    2652:	430b      	orrs	r3, r1
    2654:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    2656:	6802      	ldr	r2, [r0, #0]
    2658:	7893      	ldrb	r3, [r2, #2]
    265a:	2b02      	cmp	r3, #2
    265c:	d0fc      	beq.n	2658 <usb_enable+0xc>
}
    265e:	4770      	bx	lr

00002660 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    2660:	b5f0      	push	{r4, r5, r6, r7, lr}
    2662:	46de      	mov	lr, fp
    2664:	4657      	mov	r7, sl
    2666:	464e      	mov	r6, r9
    2668:	4645      	mov	r5, r8
    266a:	b5e0      	push	{r5, r6, r7, lr}
    266c:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    266e:	4bc4      	ldr	r3, [pc, #784]	; (2980 <USB_Handler+0x320>)
    2670:	681f      	ldr	r7, [r3, #0]
    2672:	683d      	ldr	r5, [r7, #0]
    2674:	782b      	ldrb	r3, [r5, #0]
    2676:	09db      	lsrs	r3, r3, #7
    2678:	d114      	bne.n	26a4 <USB_Handler+0x44>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    267a:	8c2e      	ldrh	r6, [r5, #32]
    267c:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    267e:	2e00      	cmp	r6, #0
    2680:	d000      	beq.n	2684 <USB_Handler+0x24>
    2682:	e22d      	b.n	2ae0 <USB_Handler+0x480>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    2684:	8bae      	ldrh	r6, [r5, #28]
    2686:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
    2688:	23ab      	movs	r3, #171	; 0xab
    268a:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    268c:	5afb      	ldrh	r3, [r7, r3]
    268e:	22aa      	movs	r2, #170	; 0xaa
    2690:	0052      	lsls	r2, r2, #1
    2692:	5abd      	ldrh	r5, [r7, r2]
    2694:	401d      	ands	r5, r3
    2696:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    2698:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    269a:	4fba      	ldr	r7, [pc, #744]	; (2984 <USB_Handler+0x324>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    269c:	4bb8      	ldr	r3, [pc, #736]	; (2980 <USB_Handler+0x320>)
    269e:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    26a0:	4698      	mov	r8, r3
    26a2:	e208      	b.n	2ab6 <USB_Handler+0x456>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    26a4:	8c2b      	ldrh	r3, [r5, #32]
    26a6:	b29b      	uxth	r3, r3
    26a8:	2b00      	cmp	r3, #0
    26aa:	d100      	bne.n	26ae <USB_Handler+0x4e>
    26ac:	e13d      	b.n	292a <USB_Handler+0x2ca>
    26ae:	8c28      	ldrh	r0, [r5, #32]
    26b0:	b280      	uxth	r0, r0
    26b2:	4bb5      	ldr	r3, [pc, #724]	; (2988 <USB_Handler+0x328>)
    26b4:	4798      	blx	r3
    26b6:	0004      	movs	r4, r0
	if (pipe_int < 32) {
    26b8:	281f      	cmp	r0, #31
    26ba:	d900      	bls.n	26be <USB_Handler+0x5e>
    26bc:	e135      	b.n	292a <USB_Handler+0x2ca>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    26be:	0003      	movs	r3, r0
    26c0:	3308      	adds	r3, #8
    26c2:	015b      	lsls	r3, r3, #5
    26c4:	18ed      	adds	r5, r5, r3
    26c6:	79ed      	ldrb	r5, [r5, #7]
    26c8:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    26ca:	07ab      	lsls	r3, r5, #30
    26cc:	d041      	beq.n	2752 <USB_Handler+0xf2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    26ce:	4aaf      	ldr	r2, [pc, #700]	; (298c <USB_Handler+0x32c>)
    26d0:	2301      	movs	r3, #1
    26d2:	4083      	lsls	r3, r0
    26d4:	6811      	ldr	r1, [r2, #0]
    26d6:	4399      	bics	r1, r3
    26d8:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    26da:	0003      	movs	r3, r0
    26dc:	3308      	adds	r3, #8
    26de:	015b      	lsls	r3, r3, #5
    26e0:	683a      	ldr	r2, [r7, #0]
    26e2:	4694      	mov	ip, r2
    26e4:	4463      	add	r3, ip
    26e6:	2203      	movs	r2, #3
    26e8:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    26ea:	183b      	adds	r3, r7, r0
    26ec:	33ae      	adds	r3, #174	; 0xae
    26ee:	781b      	ldrb	r3, [r3, #0]
    26f0:	07db      	lsls	r3, r3, #31
    26f2:	d52e      	bpl.n	2752 <USB_Handler+0xf2>
				pipe_callback_para.pipe_num = pipe_int;
    26f4:	4ba6      	ldr	r3, [pc, #664]	; (2990 <USB_Handler+0x330>)
    26f6:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    26f8:	683a      	ldr	r2, [r7, #0]
    26fa:	0003      	movs	r3, r0
    26fc:	3308      	adds	r3, #8
    26fe:	015b      	lsls	r3, r3, #5
    2700:	5c9b      	ldrb	r3, [r3, r2]
    2702:	079b      	lsls	r3, r3, #30
    2704:	0f9b      	lsrs	r3, r3, #30
    2706:	2b01      	cmp	r3, #1
    2708:	d100      	bne.n	270c <USB_Handler+0xac>
    270a:	e094      	b.n	2836 <USB_Handler+0x1d6>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    270c:	0142      	lsls	r2, r0, #5
    270e:	4ba1      	ldr	r3, [pc, #644]	; (2994 <USB_Handler+0x334>)
    2710:	189b      	adds	r3, r3, r2
    2712:	685a      	ldr	r2, [r3, #4]
    2714:	0112      	lsls	r2, r2, #4
    2716:	0c92      	lsrs	r2, r2, #18
    2718:	b290      	uxth	r0, r2
    271a:	499d      	ldr	r1, [pc, #628]	; (2990 <USB_Handler+0x330>)
    271c:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    271e:	685a      	ldr	r2, [r3, #4]
    2720:	0492      	lsls	r2, r2, #18
    2722:	0c92      	lsrs	r2, r2, #18
    2724:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    2726:	685a      	ldr	r2, [r3, #4]
    2728:	499b      	ldr	r1, [pc, #620]	; (2998 <USB_Handler+0x338>)
    272a:	400a      	ands	r2, r1
    272c:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    272e:	2800      	cmp	r0, #0
    2730:	d107      	bne.n	2742 <USB_Handler+0xe2>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    2732:	0162      	lsls	r2, r4, #5
    2734:	4b97      	ldr	r3, [pc, #604]	; (2994 <USB_Handler+0x334>)
    2736:	189b      	adds	r3, r3, r2
    2738:	685b      	ldr	r3, [r3, #4]
    273a:	049b      	lsls	r3, r3, #18
    273c:	0c9b      	lsrs	r3, r3, #18
    273e:	4a94      	ldr	r2, [pc, #592]	; (2990 <USB_Handler+0x330>)
    2740:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    2742:	4b8f      	ldr	r3, [pc, #572]	; (2980 <USB_Handler+0x320>)
    2744:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    2746:	1ca3      	adds	r3, r4, #2
    2748:	011b      	lsls	r3, r3, #4
    274a:	18c3      	adds	r3, r0, r3
    274c:	685b      	ldr	r3, [r3, #4]
    274e:	4990      	ldr	r1, [pc, #576]	; (2990 <USB_Handler+0x330>)
    2750:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    2752:	076b      	lsls	r3, r5, #29
    2754:	d51f      	bpl.n	2796 <USB_Handler+0x136>
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    2756:	4b8a      	ldr	r3, [pc, #552]	; (2980 <USB_Handler+0x320>)
    2758:	6818      	ldr	r0, [r3, #0]
    275a:	6802      	ldr	r2, [r0, #0]
    275c:	0023      	movs	r3, r4
    275e:	3308      	adds	r3, #8
    2760:	015b      	lsls	r3, r3, #5
    2762:	5c9b      	ldrb	r3, [r3, r2]
    2764:	069b      	lsls	r3, r3, #26
    2766:	0f5b      	lsrs	r3, r3, #29
    2768:	2b02      	cmp	r3, #2
    276a:	d075      	beq.n	2858 <USB_Handler+0x1f8>
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    276c:	0023      	movs	r3, r4
    276e:	3308      	adds	r3, #8
    2770:	015b      	lsls	r3, r3, #5
    2772:	5c9b      	ldrb	r3, [r3, r2]
    2774:	069b      	lsls	r3, r3, #26
    2776:	0f5b      	lsrs	r3, r3, #29
    2778:	2b03      	cmp	r3, #3
    277a:	d100      	bne.n	277e <USB_Handler+0x11e>
    277c:	e09e      	b.n	28bc <USB_Handler+0x25c>
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    277e:	0162      	lsls	r2, r4, #5
    2780:	4b84      	ldr	r3, [pc, #528]	; (2994 <USB_Handler+0x334>)
    2782:	189b      	adds	r3, r3, r2
    2784:	2200      	movs	r2, #0
    2786:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    2788:	6803      	ldr	r3, [r0, #0]
    278a:	0022      	movs	r2, r4
    278c:	3208      	adds	r2, #8
    278e:	0152      	lsls	r2, r2, #5
    2790:	189b      	adds	r3, r3, r2
    2792:	2204      	movs	r2, #4
    2794:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    2796:	072b      	lsls	r3, r5, #28
    2798:	d515      	bpl.n	27c6 <USB_Handler+0x166>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    279a:	4a7c      	ldr	r2, [pc, #496]	; (298c <USB_Handler+0x32c>)
    279c:	2301      	movs	r3, #1
    279e:	40a3      	lsls	r3, r4
    27a0:	6811      	ldr	r1, [r2, #0]
    27a2:	4399      	bics	r1, r3
    27a4:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    27a6:	4b76      	ldr	r3, [pc, #472]	; (2980 <USB_Handler+0x320>)
    27a8:	6818      	ldr	r0, [r3, #0]
    27aa:	0023      	movs	r3, r4
    27ac:	3308      	adds	r3, #8
    27ae:	015b      	lsls	r3, r3, #5
    27b0:	6802      	ldr	r2, [r0, #0]
    27b2:	4694      	mov	ip, r2
    27b4:	4463      	add	r3, ip
    27b6:	2208      	movs	r2, #8
    27b8:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    27ba:	1903      	adds	r3, r0, r4
    27bc:	33ae      	adds	r3, #174	; 0xae
    27be:	781b      	ldrb	r3, [r3, #0]
    27c0:	079b      	lsls	r3, r3, #30
    27c2:	d500      	bpl.n	27c6 <USB_Handler+0x166>
    27c4:	e094      	b.n	28f0 <USB_Handler+0x290>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    27c6:	06eb      	lsls	r3, r5, #27
    27c8:	d515      	bpl.n	27f6 <USB_Handler+0x196>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    27ca:	4a70      	ldr	r2, [pc, #448]	; (298c <USB_Handler+0x32c>)
    27cc:	2301      	movs	r3, #1
    27ce:	40a3      	lsls	r3, r4
    27d0:	6811      	ldr	r1, [r2, #0]
    27d2:	4399      	bics	r1, r3
    27d4:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    27d6:	4b6a      	ldr	r3, [pc, #424]	; (2980 <USB_Handler+0x320>)
    27d8:	6818      	ldr	r0, [r3, #0]
    27da:	0023      	movs	r3, r4
    27dc:	3308      	adds	r3, #8
    27de:	015b      	lsls	r3, r3, #5
    27e0:	6802      	ldr	r2, [r0, #0]
    27e2:	4694      	mov	ip, r2
    27e4:	4463      	add	r3, ip
    27e6:	2210      	movs	r2, #16
    27e8:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    27ea:	1903      	adds	r3, r0, r4
    27ec:	33ae      	adds	r3, #174	; 0xae
    27ee:	781b      	ldrb	r3, [r3, #0]
    27f0:	075b      	lsls	r3, r3, #29
    27f2:	d500      	bpl.n	27f6 <USB_Handler+0x196>
    27f4:	e08a      	b.n	290c <USB_Handler+0x2ac>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    27f6:	06ab      	lsls	r3, r5, #26
    27f8:	d400      	bmi.n	27fc <USB_Handler+0x19c>
    27fa:	e12f      	b.n	2a5c <USB_Handler+0x3fc>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    27fc:	4a63      	ldr	r2, [pc, #396]	; (298c <USB_Handler+0x32c>)
    27fe:	2301      	movs	r3, #1
    2800:	40a3      	lsls	r3, r4
    2802:	6811      	ldr	r1, [r2, #0]
    2804:	4399      	bics	r1, r3
    2806:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    2808:	4b5d      	ldr	r3, [pc, #372]	; (2980 <USB_Handler+0x320>)
    280a:	6818      	ldr	r0, [r3, #0]
    280c:	0023      	movs	r3, r4
    280e:	3308      	adds	r3, #8
    2810:	015b      	lsls	r3, r3, #5
    2812:	6802      	ldr	r2, [r0, #0]
    2814:	4694      	mov	ip, r2
    2816:	4463      	add	r3, ip
    2818:	2220      	movs	r2, #32
    281a:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    281c:	1903      	adds	r3, r0, r4
    281e:	33ae      	adds	r3, #174	; 0xae
    2820:	781b      	ldrb	r3, [r3, #0]
    2822:	071b      	lsls	r3, r3, #28
    2824:	d400      	bmi.n	2828 <USB_Handler+0x1c8>
    2826:	e119      	b.n	2a5c <USB_Handler+0x3fc>
				pipe_callback_para.pipe_num = pipe_int;
    2828:	4959      	ldr	r1, [pc, #356]	; (2990 <USB_Handler+0x330>)
    282a:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    282c:	0124      	lsls	r4, r4, #4
    282e:	1904      	adds	r4, r0, r4
    2830:	6b23      	ldr	r3, [r4, #48]	; 0x30
    2832:	4798      	blx	r3
    2834:	e112      	b.n	2a5c <USB_Handler+0x3fc>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    2836:	0142      	lsls	r2, r0, #5
    2838:	4b56      	ldr	r3, [pc, #344]	; (2994 <USB_Handler+0x334>)
    283a:	189b      	adds	r3, r3, r2
    283c:	685a      	ldr	r2, [r3, #4]
    283e:	0492      	lsls	r2, r2, #18
    2840:	0c92      	lsrs	r2, r2, #18
    2842:	4953      	ldr	r1, [pc, #332]	; (2990 <USB_Handler+0x330>)
    2844:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    2846:	685a      	ldr	r2, [r3, #4]
    2848:	0112      	lsls	r2, r2, #4
    284a:	0c92      	lsrs	r2, r2, #18
    284c:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    284e:	685a      	ldr	r2, [r3, #4]
    2850:	0b92      	lsrs	r2, r2, #14
    2852:	0392      	lsls	r2, r2, #14
    2854:	605a      	str	r2, [r3, #4]
    2856:	e774      	b.n	2742 <USB_Handler+0xe2>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    2858:	0023      	movs	r3, r4
    285a:	3308      	adds	r3, #8
    285c:	015b      	lsls	r3, r3, #5
    285e:	5c9b      	ldrb	r3, [r3, r2]
    2860:	079b      	lsls	r3, r3, #30
    2862:	0f9b      	lsrs	r3, r3, #30
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    2864:	2b01      	cmp	r3, #1
    2866:	d181      	bne.n	276c <USB_Handler+0x10c>
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.bit.CRCERR) {
    2868:	0161      	lsls	r1, r4, #5
    286a:	4b4a      	ldr	r3, [pc, #296]	; (2994 <USB_Handler+0x334>)
    286c:	185b      	adds	r3, r3, r1
    286e:	3308      	adds	r3, #8
    2870:	789b      	ldrb	r3, [r3, #2]
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    2872:	07db      	lsls	r3, r3, #31
    2874:	d400      	bmi.n	2878 <USB_Handler+0x218>
    2876:	e779      	b.n	276c <USB_Handler+0x10c>
				host_pipe_job_busy_status &= ~(1 << pipe_int);
    2878:	4a44      	ldr	r2, [pc, #272]	; (298c <USB_Handler+0x32c>)
    287a:	2301      	movs	r3, #1
    287c:	40a3      	lsls	r3, r4
    287e:	6811      	ldr	r1, [r2, #0]
    2880:	4399      	bics	r1, r3
    2882:	6011      	str	r1, [r2, #0]
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    2884:	0162      	lsls	r2, r4, #5
    2886:	4b43      	ldr	r3, [pc, #268]	; (2994 <USB_Handler+0x334>)
    2888:	189b      	adds	r3, r3, r2
    288a:	2200      	movs	r2, #0
    288c:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    288e:	0023      	movs	r3, r4
    2890:	3308      	adds	r3, #8
    2892:	015b      	lsls	r3, r3, #5
    2894:	6802      	ldr	r2, [r0, #0]
    2896:	4694      	mov	ip, r2
    2898:	4463      	add	r3, ip
    289a:	2204      	movs	r2, #4
    289c:	71da      	strb	r2, [r3, #7]
				if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    289e:	1903      	adds	r3, r0, r4
    28a0:	33ae      	adds	r3, #174	; 0xae
    28a2:	781b      	ldrb	r3, [r3, #0]
    28a4:	079b      	lsls	r3, r3, #30
    28a6:	d400      	bmi.n	28aa <USB_Handler+0x24a>
    28a8:	e775      	b.n	2796 <USB_Handler+0x136>
					pipe_callback_para.pipe_num = pipe_int;
    28aa:	4939      	ldr	r1, [pc, #228]	; (2990 <USB_Handler+0x330>)
    28ac:	700c      	strb	r4, [r1, #0]
					pipe_callback_para.pipe_error_status = USB_STATUS_PIPE_CRC16ER;
    28ae:	2310      	movs	r3, #16
    28b0:	704b      	strb	r3, [r1, #1]
							[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    28b2:	0123      	lsls	r3, r4, #4
    28b4:	18c3      	adds	r3, r0, r3
    28b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    28b8:	4798      	blx	r3
    28ba:	e76c      	b.n	2796 <USB_Handler+0x136>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN) {
    28bc:	0023      	movs	r3, r4
    28be:	3308      	adds	r3, #8
    28c0:	015b      	lsls	r3, r3, #5
    28c2:	5c9b      	ldrb	r3, [r3, r2]
    28c4:	079b      	lsls	r3, r3, #30
    28c6:	0f9b      	lsrs	r3, r3, #30
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    28c8:	2b01      	cmp	r3, #1
    28ca:	d000      	beq.n	28ce <USB_Handler+0x26e>
    28cc:	e757      	b.n	277e <USB_Handler+0x11e>
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    28ce:	0162      	lsls	r2, r4, #5
    28d0:	4b30      	ldr	r3, [pc, #192]	; (2994 <USB_Handler+0x334>)
    28d2:	189b      	adds	r3, r3, r2
    28d4:	2200      	movs	r2, #0
    28d6:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    28d8:	0023      	movs	r3, r4
    28da:	3308      	adds	r3, #8
    28dc:	015b      	lsls	r3, r3, #5
    28de:	6802      	ldr	r2, [r0, #0]
    28e0:	18d2      	adds	r2, r2, r3
    28e2:	2104      	movs	r1, #4
    28e4:	71d1      	strb	r1, [r2, #7]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSSET.reg = USB_HOST_PSTATUS_PFREEZE;
    28e6:	6802      	ldr	r2, [r0, #0]
    28e8:	18d3      	adds	r3, r2, r3
    28ea:	2210      	movs	r2, #16
    28ec:	715a      	strb	r2, [r3, #5]
    28ee:	e752      	b.n	2796 <USB_Handler+0x136>
				pipe_callback_para.pipe_num = pipe_int;
    28f0:	4927      	ldr	r1, [pc, #156]	; (2990 <USB_Handler+0x330>)
    28f2:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    28f4:	0162      	lsls	r2, r4, #5
    28f6:	4b27      	ldr	r3, [pc, #156]	; (2994 <USB_Handler+0x334>)
    28f8:	189b      	adds	r3, r3, r2
    28fa:	89db      	ldrh	r3, [r3, #14]
    28fc:	221f      	movs	r2, #31
    28fe:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    2900:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    2902:	0123      	lsls	r3, r4, #4
    2904:	18c3      	adds	r3, r0, r3
    2906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2908:	4798      	blx	r3
    290a:	e75c      	b.n	27c6 <USB_Handler+0x166>
				pipe_callback_para.pipe_num = pipe_int;
    290c:	4920      	ldr	r1, [pc, #128]	; (2990 <USB_Handler+0x330>)
    290e:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    2910:	0162      	lsls	r2, r4, #5
    2912:	4b20      	ldr	r3, [pc, #128]	; (2994 <USB_Handler+0x334>)
    2914:	189b      	adds	r3, r3, r2
    2916:	685b      	ldr	r3, [r3, #4]
    2918:	011b      	lsls	r3, r3, #4
    291a:	0c9b      	lsrs	r3, r3, #18
    291c:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    291e:	0123      	lsls	r3, r4, #4
    2920:	18c3      	adds	r3, r0, r3
    2922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2924:	2100      	movs	r1, #0
    2926:	4798      	blx	r3
    2928:	e765      	b.n	27f6 <USB_Handler+0x196>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    292a:	8bac      	ldrh	r4, [r5, #28]
    292c:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    292e:	0763      	lsls	r3, r4, #29
    2930:	d538      	bpl.n	29a4 <USB_Handler+0x344>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    2932:	2304      	movs	r3, #4
    2934:	83ab      	strh	r3, [r5, #28]
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    2936:	4b15      	ldr	r3, [pc, #84]	; (298c <USB_Handler+0x32c>)
    2938:	681d      	ldr	r5, [r3, #0]
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
    293a:	2301      	movs	r3, #1
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    293c:	2001      	movs	r0, #1
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    293e:	2610      	movs	r6, #16
    2940:	e002      	b.n	2948 <USB_Handler+0x2e8>
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
    2942:	3301      	adds	r3, #1
    2944:	2b08      	cmp	r3, #8
    2946:	d029      	beq.n	299c <USB_Handler+0x33c>
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    2948:	0002      	movs	r2, r0
    294a:	409a      	lsls	r2, r3
    294c:	4215      	tst	r5, r2
    294e:	d0f8      	beq.n	2942 <USB_Handler+0x2e2>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    2950:	6839      	ldr	r1, [r7, #0]
    2952:	001a      	movs	r2, r3
    2954:	3208      	adds	r2, #8
    2956:	0152      	lsls	r2, r2, #5
    2958:	5c52      	ldrb	r2, [r2, r1]
    295a:	0692      	lsls	r2, r2, #26
    295c:	0f52      	lsrs	r2, r2, #29
    295e:	2a03      	cmp	r2, #3
    2960:	d1ef      	bne.n	2942 <USB_Handler+0x2e2>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
    2962:	001a      	movs	r2, r3
    2964:	3208      	adds	r2, #8
    2966:	0152      	lsls	r2, r2, #5
    2968:	5c52      	ldrb	r2, [r2, r1]
    296a:	0792      	lsls	r2, r2, #30
    296c:	0f92      	lsrs	r2, r2, #30
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    296e:	2a01      	cmp	r2, #1
    2970:	d1e7      	bne.n	2942 <USB_Handler+0x2e2>
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    2972:	001a      	movs	r2, r3
    2974:	3208      	adds	r2, #8
    2976:	0152      	lsls	r2, r2, #5
    2978:	1889      	adds	r1, r1, r2
    297a:	710e      	strb	r6, [r1, #4]
    297c:	e7e1      	b.n	2942 <USB_Handler+0x2e2>
    297e:	46c0      	nop			; (mov r8, r8)
    2980:	20000180 	.word	0x20000180
    2984:	00003580 	.word	0x00003580
    2988:	0000349d 	.word	0x0000349d
    298c:	20000190 	.word	0x20000190
    2990:	20000194 	.word	0x20000194
    2994:	200003ac 	.word	0x200003ac
    2998:	f0003fff 	.word	0xf0003fff
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    299c:	339d      	adds	r3, #157	; 0x9d
    299e:	5cfb      	ldrb	r3, [r7, r3]
    29a0:	07db      	lsls	r3, r3, #31
    29a2:	d462      	bmi.n	2a6a <USB_Handler+0x40a>
		if (flags & USB_HOST_INTFLAG_RST) {
    29a4:	0723      	lsls	r3, r4, #28
    29a6:	d50b      	bpl.n	29c0 <USB_Handler+0x360>
			host_pipe_job_busy_status = 0;
    29a8:	2200      	movs	r2, #0
    29aa:	4baf      	ldr	r3, [pc, #700]	; (2c68 <USB_Handler+0x608>)
    29ac:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    29ae:	4baf      	ldr	r3, [pc, #700]	; (2c6c <USB_Handler+0x60c>)
    29b0:	6818      	ldr	r0, [r3, #0]
    29b2:	2308      	movs	r3, #8
    29b4:	6802      	ldr	r2, [r0, #0]
    29b6:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    29b8:	339d      	adds	r3, #157	; 0x9d
    29ba:	5cc3      	ldrb	r3, [r0, r3]
    29bc:	079b      	lsls	r3, r3, #30
    29be:	d458      	bmi.n	2a72 <USB_Handler+0x412>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    29c0:	0663      	lsls	r3, r4, #25
    29c2:	d508      	bpl.n	29d6 <USB_Handler+0x376>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    29c4:	4ba9      	ldr	r3, [pc, #676]	; (2c6c <USB_Handler+0x60c>)
    29c6:	6818      	ldr	r0, [r3, #0]
    29c8:	2340      	movs	r3, #64	; 0x40
    29ca:	6802      	ldr	r2, [r0, #0]
    29cc:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    29ce:	3365      	adds	r3, #101	; 0x65
    29d0:	5cc3      	ldrb	r3, [r0, r3]
    29d2:	06db      	lsls	r3, r3, #27
    29d4:	d450      	bmi.n	2a78 <USB_Handler+0x418>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    29d6:	06a3      	lsls	r3, r4, #26
    29d8:	d508      	bpl.n	29ec <USB_Handler+0x38c>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    29da:	4ba4      	ldr	r3, [pc, #656]	; (2c6c <USB_Handler+0x60c>)
    29dc:	6818      	ldr	r0, [r3, #0]
    29de:	2320      	movs	r3, #32
    29e0:	6802      	ldr	r2, [r0, #0]
    29e2:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    29e4:	3385      	adds	r3, #133	; 0x85
    29e6:	5cc3      	ldrb	r3, [r0, r3]
    29e8:	071b      	lsls	r3, r3, #28
    29ea:	d448      	bmi.n	2a7e <USB_Handler+0x41e>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    29ec:	06e3      	lsls	r3, r4, #27
    29ee:	d508      	bpl.n	2a02 <USB_Handler+0x3a2>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    29f0:	4b9e      	ldr	r3, [pc, #632]	; (2c6c <USB_Handler+0x60c>)
    29f2:	6818      	ldr	r0, [r3, #0]
    29f4:	2310      	movs	r3, #16
    29f6:	6802      	ldr	r2, [r0, #0]
    29f8:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    29fa:	3395      	adds	r3, #149	; 0x95
    29fc:	5cc3      	ldrb	r3, [r0, r3]
    29fe:	075b      	lsls	r3, r3, #29
    2a00:	d440      	bmi.n	2a84 <USB_Handler+0x424>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    2a02:	0623      	lsls	r3, r4, #24
    2a04:	d50b      	bpl.n	2a1e <USB_Handler+0x3be>
			host_pipe_job_busy_status = 0;
    2a06:	2200      	movs	r2, #0
    2a08:	4b97      	ldr	r3, [pc, #604]	; (2c68 <USB_Handler+0x608>)
    2a0a:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    2a0c:	4b97      	ldr	r3, [pc, #604]	; (2c6c <USB_Handler+0x60c>)
    2a0e:	6818      	ldr	r0, [r3, #0]
    2a10:	2380      	movs	r3, #128	; 0x80
    2a12:	6802      	ldr	r2, [r0, #0]
    2a14:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    2a16:	3325      	adds	r3, #37	; 0x25
    2a18:	5cc3      	ldrb	r3, [r0, r3]
    2a1a:	069b      	lsls	r3, r3, #26
    2a1c:	d435      	bmi.n	2a8a <USB_Handler+0x42a>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    2a1e:	05e3      	lsls	r3, r4, #23
    2a20:	d50c      	bpl.n	2a3c <USB_Handler+0x3dc>
			host_pipe_job_busy_status = 0;
    2a22:	2200      	movs	r2, #0
    2a24:	4b90      	ldr	r3, [pc, #576]	; (2c68 <USB_Handler+0x608>)
    2a26:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    2a28:	4b90      	ldr	r3, [pc, #576]	; (2c6c <USB_Handler+0x60c>)
    2a2a:	6818      	ldr	r0, [r3, #0]
    2a2c:	2380      	movs	r3, #128	; 0x80
    2a2e:	005b      	lsls	r3, r3, #1
    2a30:	6802      	ldr	r2, [r0, #0]
    2a32:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    2a34:	3b5b      	subs	r3, #91	; 0x5b
    2a36:	5cc3      	ldrb	r3, [r0, r3]
    2a38:	065b      	lsls	r3, r3, #25
    2a3a:	d429      	bmi.n	2a90 <USB_Handler+0x430>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    2a3c:	05a3      	lsls	r3, r4, #22
    2a3e:	d50d      	bpl.n	2a5c <USB_Handler+0x3fc>
			host_pipe_job_busy_status = 0;
    2a40:	2200      	movs	r2, #0
    2a42:	4b89      	ldr	r3, [pc, #548]	; (2c68 <USB_Handler+0x608>)
    2a44:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    2a46:	4b89      	ldr	r3, [pc, #548]	; (2c6c <USB_Handler+0x60c>)
    2a48:	6818      	ldr	r0, [r3, #0]
    2a4a:	2380      	movs	r3, #128	; 0x80
    2a4c:	009b      	lsls	r3, r3, #2
    2a4e:	6802      	ldr	r2, [r0, #0]
    2a50:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    2a52:	3b5c      	subs	r3, #92	; 0x5c
    2a54:	3bff      	subs	r3, #255	; 0xff
    2a56:	5cc3      	ldrb	r3, [r0, r3]
    2a58:	2b7f      	cmp	r3, #127	; 0x7f
    2a5a:	d81c      	bhi.n	2a96 <USB_Handler+0x436>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    2a5c:	b003      	add	sp, #12
    2a5e:	bc3c      	pop	{r2, r3, r4, r5}
    2a60:	4690      	mov	r8, r2
    2a62:	4699      	mov	r9, r3
    2a64:	46a2      	mov	sl, r4
    2a66:	46ab      	mov	fp, r5
    2a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    2a6a:	687b      	ldr	r3, [r7, #4]
    2a6c:	0038      	movs	r0, r7
    2a6e:	4798      	blx	r3
    2a70:	e798      	b.n	29a4 <USB_Handler+0x344>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    2a72:	6883      	ldr	r3, [r0, #8]
    2a74:	4798      	blx	r3
    2a76:	e7a3      	b.n	29c0 <USB_Handler+0x360>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    2a78:	6943      	ldr	r3, [r0, #20]
    2a7a:	4798      	blx	r3
    2a7c:	e7ab      	b.n	29d6 <USB_Handler+0x376>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    2a7e:	6903      	ldr	r3, [r0, #16]
    2a80:	4798      	blx	r3
    2a82:	e7b3      	b.n	29ec <USB_Handler+0x38c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    2a84:	68c3      	ldr	r3, [r0, #12]
    2a86:	4798      	blx	r3
    2a88:	e7bb      	b.n	2a02 <USB_Handler+0x3a2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    2a8a:	6983      	ldr	r3, [r0, #24]
    2a8c:	4798      	blx	r3
    2a8e:	e7c6      	b.n	2a1e <USB_Handler+0x3be>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    2a90:	69c3      	ldr	r3, [r0, #28]
    2a92:	4798      	blx	r3
    2a94:	e7d2      	b.n	2a3c <USB_Handler+0x3dc>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    2a96:	6a03      	ldr	r3, [r0, #32]
    2a98:	4798      	blx	r3
    2a9a:	e7df      	b.n	2a5c <USB_Handler+0x3fc>
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    2a9c:	0023      	movs	r3, r4
    2a9e:	332e      	adds	r3, #46	; 0x2e
    2aa0:	009b      	lsls	r3, r3, #2
    2aa2:	4642      	mov	r2, r8
    2aa4:	6812      	ldr	r2, [r2, #0]
    2aa6:	589b      	ldr	r3, [r3, r2]
    2aa8:	4971      	ldr	r1, [pc, #452]	; (2c70 <USB_Handler+0x610>)
    2aaa:	4642      	mov	r2, r8
    2aac:	6810      	ldr	r0, [r2, #0]
    2aae:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    2ab0:	3401      	adds	r4, #1
    2ab2:	2c07      	cmp	r4, #7
    2ab4:	d0d2      	beq.n	2a5c <USB_Handler+0x3fc>
			if (flags & _usb_device_irq_bits[i]) {
    2ab6:	0063      	lsls	r3, r4, #1
    2ab8:	5bdb      	ldrh	r3, [r3, r7]
    2aba:	4233      	tst	r3, r6
    2abc:	d003      	beq.n	2ac6 <USB_Handler+0x466>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    2abe:	464a      	mov	r2, r9
    2ac0:	6812      	ldr	r2, [r2, #0]
    2ac2:	6812      	ldr	r2, [r2, #0]
    2ac4:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    2ac6:	422b      	tst	r3, r5
    2ac8:	d0f2      	beq.n	2ab0 <USB_Handler+0x450>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    2aca:	2c06      	cmp	r4, #6
    2acc:	d1e6      	bne.n	2a9c <USB_Handler+0x43c>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    2ace:	4b69      	ldr	r3, [pc, #420]	; (2c74 <USB_Handler+0x614>)
    2ad0:	891b      	ldrh	r3, [r3, #8]
    2ad2:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    2ad4:	2280      	movs	r2, #128	; 0x80
    2ad6:	0052      	lsls	r2, r2, #1
    2ad8:	4013      	ands	r3, r2
    2ada:	4a65      	ldr	r2, [pc, #404]	; (2c70 <USB_Handler+0x610>)
    2adc:	6013      	str	r3, [r2, #0]
    2ade:	e7dd      	b.n	2a9c <USB_Handler+0x43c>
    2ae0:	003c      	movs	r4, r7
    2ae2:	3459      	adds	r4, #89	; 0x59
    2ae4:	34ff      	adds	r4, #255	; 0xff
	if (0 == ep_inst) {
    2ae6:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
    2ae8:	2201      	movs	r2, #1
    2aea:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    2aec:	325f      	adds	r2, #95	; 0x5f
    2aee:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2af0:	3a50      	subs	r2, #80	; 0x50
    2af2:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    2af4:	3a0d      	subs	r2, #13
    2af6:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    2af8:	46b8      	mov	r8, r7
    2afa:	002f      	movs	r7, r5
    2afc:	e0c3      	b.n	2c86 <USB_Handler+0x626>
    2afe:	002a      	movs	r2, r5
    2b00:	003d      	movs	r5, r7
    2b02:	4647      	mov	r7, r8
    2b04:	4690      	mov	r8, r2
    2b06:	015b      	lsls	r3, r3, #5
    2b08:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    2b0a:	2308      	movs	r3, #8
    2b0c:	33ff      	adds	r3, #255	; 0xff
    2b0e:	5ceb      	ldrb	r3, [r5, r3]
    2b10:	065b      	lsls	r3, r3, #25
    2b12:	d515      	bpl.n	2b40 <USB_Handler+0x4e0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    2b14:	2240      	movs	r2, #64	; 0x40
    2b16:	2308      	movs	r3, #8
    2b18:	33ff      	adds	r3, #255	; 0xff
    2b1a:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    2b1c:	3b88      	subs	r3, #136	; 0x88
    2b1e:	3bff      	subs	r3, #255	; 0xff
    2b20:	4642      	mov	r2, r8
    2b22:	4313      	orrs	r3, r2
    2b24:	4a54      	ldr	r2, [pc, #336]	; (2c78 <USB_Handler+0x618>)
    2b26:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    2b28:	2360      	movs	r3, #96	; 0x60
    2b2a:	420b      	tst	r3, r1
    2b2c:	d096      	beq.n	2a5c <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    2b2e:	9b01      	ldr	r3, [sp, #4]
    2b30:	011b      	lsls	r3, r3, #4
    2b32:	18fb      	adds	r3, r7, r3
    2b34:	33e0      	adds	r3, #224	; 0xe0
    2b36:	681b      	ldr	r3, [r3, #0]
    2b38:	494f      	ldr	r1, [pc, #316]	; (2c78 <USB_Handler+0x618>)
    2b3a:	0038      	movs	r0, r7
    2b3c:	4798      	blx	r3
    2b3e:	e78d      	b.n	2a5c <USB_Handler+0x3fc>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    2b40:	2308      	movs	r3, #8
    2b42:	33ff      	adds	r3, #255	; 0xff
    2b44:	5ceb      	ldrb	r3, [r5, r3]
    2b46:	069b      	lsls	r3, r3, #26
    2b48:	d5ee      	bpl.n	2b28 <USB_Handler+0x4c8>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    2b4a:	2220      	movs	r2, #32
    2b4c:	2308      	movs	r3, #8
    2b4e:	33ff      	adds	r3, #255	; 0xff
    2b50:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    2b52:	4b49      	ldr	r3, [pc, #292]	; (2c78 <USB_Handler+0x618>)
    2b54:	4642      	mov	r2, r8
    2b56:	719a      	strb	r2, [r3, #6]
    2b58:	e7e6      	b.n	2b28 <USB_Handler+0x4c8>
    2b5a:	003d      	movs	r5, r7
    2b5c:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    2b5e:	9a01      	ldr	r2, [sp, #4]
    2b60:	0013      	movs	r3, r2
    2b62:	3308      	adds	r3, #8
    2b64:	015b      	lsls	r3, r3, #5
    2b66:	18ed      	adds	r5, r5, r3
    2b68:	2310      	movs	r3, #16
    2b6a:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    2b6c:	18bb      	adds	r3, r7, r2
    2b6e:	3361      	adds	r3, #97	; 0x61
    2b70:	33ff      	adds	r3, #255	; 0xff
    2b72:	781b      	ldrb	r3, [r3, #0]
    2b74:	06db      	lsls	r3, r3, #27
    2b76:	d400      	bmi.n	2b7a <USB_Handler+0x51a>
    2b78:	e770      	b.n	2a5c <USB_Handler+0x3fc>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    2b7a:	0010      	movs	r0, r2
    2b7c:	0152      	lsls	r2, r2, #5
    2b7e:	4b3d      	ldr	r3, [pc, #244]	; (2c74 <USB_Handler+0x614>)
    2b80:	189b      	adds	r3, r3, r2
    2b82:	685b      	ldr	r3, [r3, #4]
    2b84:	049b      	lsls	r3, r3, #18
    2b86:	0c9b      	lsrs	r3, r3, #18
    2b88:	493b      	ldr	r1, [pc, #236]	; (2c78 <USB_Handler+0x618>)
    2b8a:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    2b8c:	0103      	lsls	r3, r0, #4
    2b8e:	18fb      	adds	r3, r7, r3
    2b90:	33dc      	adds	r3, #220	; 0xdc
    2b92:	681b      	ldr	r3, [r3, #0]
    2b94:	4640      	mov	r0, r8
    2b96:	4798      	blx	r3
    2b98:	e760      	b.n	2a5c <USB_Handler+0x3fc>
    2b9a:	002a      	movs	r2, r5
    2b9c:	003d      	movs	r5, r7
    2b9e:	4647      	mov	r7, r8
    2ba0:	4690      	mov	r8, r2
    2ba2:	015b      	lsls	r3, r3, #5
    2ba4:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    2ba6:	2308      	movs	r3, #8
    2ba8:	33ff      	adds	r3, #255	; 0xff
    2baa:	5ceb      	ldrb	r3, [r5, r3]
    2bac:	079b      	lsls	r3, r3, #30
    2bae:	d51e      	bpl.n	2bee <USB_Handler+0x58e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    2bb0:	2202      	movs	r2, #2
    2bb2:	2308      	movs	r3, #8
    2bb4:	33ff      	adds	r3, #255	; 0xff
    2bb6:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    2bb8:	482f      	ldr	r0, [pc, #188]	; (2c78 <USB_Handler+0x618>)
    2bba:	3b88      	subs	r3, #136	; 0x88
    2bbc:	3bff      	subs	r3, #255	; 0xff
    2bbe:	4642      	mov	r2, r8
    2bc0:	4313      	orrs	r3, r2
    2bc2:	7183      	strb	r3, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    2bc4:	9b01      	ldr	r3, [sp, #4]
    2bc6:	015a      	lsls	r2, r3, #5
    2bc8:	4b2a      	ldr	r3, [pc, #168]	; (2c74 <USB_Handler+0x614>)
    2bca:	189b      	adds	r3, r3, r2
    2bcc:	3310      	adds	r3, #16
    2bce:	685b      	ldr	r3, [r3, #4]
    2bd0:	049b      	lsls	r3, r3, #18
    2bd2:	0c9b      	lsrs	r3, r3, #18
    2bd4:	8043      	strh	r3, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    2bd6:	078b      	lsls	r3, r1, #30
    2bd8:	d100      	bne.n	2bdc <USB_Handler+0x57c>
    2bda:	e73f      	b.n	2a5c <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    2bdc:	9b01      	ldr	r3, [sp, #4]
    2bde:	330d      	adds	r3, #13
    2be0:	011b      	lsls	r3, r3, #4
    2be2:	18fb      	adds	r3, r7, r3
    2be4:	685b      	ldr	r3, [r3, #4]
    2be6:	4924      	ldr	r1, [pc, #144]	; (2c78 <USB_Handler+0x618>)
    2be8:	0038      	movs	r0, r7
    2bea:	4798      	blx	r3
    2bec:	e736      	b.n	2a5c <USB_Handler+0x3fc>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    2bee:	2308      	movs	r3, #8
    2bf0:	33ff      	adds	r3, #255	; 0xff
    2bf2:	5ceb      	ldrb	r3, [r5, r3]
    2bf4:	07db      	lsls	r3, r3, #31
    2bf6:	d5ee      	bpl.n	2bd6 <USB_Handler+0x576>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    2bf8:	2201      	movs	r2, #1
    2bfa:	2308      	movs	r3, #8
    2bfc:	33ff      	adds	r3, #255	; 0xff
    2bfe:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    2c00:	481d      	ldr	r0, [pc, #116]	; (2c78 <USB_Handler+0x618>)
    2c02:	4643      	mov	r3, r8
    2c04:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    2c06:	9b01      	ldr	r3, [sp, #4]
    2c08:	015b      	lsls	r3, r3, #5
    2c0a:	4a1a      	ldr	r2, [pc, #104]	; (2c74 <USB_Handler+0x614>)
    2c0c:	18d2      	adds	r2, r2, r3
    2c0e:	6853      	ldr	r3, [r2, #4]
    2c10:	049b      	lsls	r3, r3, #18
    2c12:	0c9b      	lsrs	r3, r3, #18
    2c14:	8003      	strh	r3, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    2c16:	6853      	ldr	r3, [r2, #4]
    2c18:	011b      	lsls	r3, r3, #4
    2c1a:	0c9b      	lsrs	r3, r3, #18
    2c1c:	8083      	strh	r3, [r0, #4]
    2c1e:	e7da      	b.n	2bd6 <USB_Handler+0x576>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2c20:	2208      	movs	r2, #8
    2c22:	32ff      	adds	r2, #255	; 0xff
    2c24:	5c9a      	ldrb	r2, [r3, r2]
    2c26:	0752      	lsls	r2, r2, #29
    2c28:	d579      	bpl.n	2d1e <USB_Handler+0x6be>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    2c2a:	2004      	movs	r0, #4
    2c2c:	2208      	movs	r2, #8
    2c2e:	32ff      	adds	r2, #255	; 0xff
    2c30:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    2c32:	9801      	ldr	r0, [sp, #4]
    2c34:	0142      	lsls	r2, r0, #5
    2c36:	4b0f      	ldr	r3, [pc, #60]	; (2c74 <USB_Handler+0x614>)
    2c38:	189b      	adds	r3, r3, r2
    2c3a:	7a9b      	ldrb	r3, [r3, #10]
    2c3c:	079b      	lsls	r3, r3, #30
    2c3e:	d505      	bpl.n	2c4c <USB_Handler+0x5ec>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    2c40:	4b0c      	ldr	r3, [pc, #48]	; (2c74 <USB_Handler+0x614>)
    2c42:	189b      	adds	r3, r3, r2
    2c44:	7a9a      	ldrb	r2, [r3, #10]
    2c46:	2002      	movs	r0, #2
    2c48:	4382      	bics	r2, r0
    2c4a:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    2c4c:	4b0a      	ldr	r3, [pc, #40]	; (2c78 <USB_Handler+0x618>)
    2c4e:	4642      	mov	r2, r8
    2c50:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    2c52:	9b01      	ldr	r3, [sp, #4]
    2c54:	3308      	adds	r3, #8
    2c56:	015b      	lsls	r3, r3, #5
    2c58:	683a      	ldr	r2, [r7, #0]
    2c5a:	4694      	mov	ip, r2
    2c5c:	4463      	add	r3, ip
    2c5e:	79db      	ldrb	r3, [r3, #7]
    2c60:	07db      	lsls	r3, r3, #31
    2c62:	d55c      	bpl.n	2d1e <USB_Handler+0x6be>
    2c64:	e6fa      	b.n	2a5c <USB_Handler+0x3fc>
    2c66:	46c0      	nop			; (mov r8, r8)
    2c68:	20000190 	.word	0x20000190
    2c6c:	20000180 	.word	0x20000180
    2c70:	20000184 	.word	0x20000184
    2c74:	200003ac 	.word	0x200003ac
    2c78:	20000188 	.word	0x20000188
    2c7c:	3301      	adds	r3, #1
    2c7e:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    2c80:	2b08      	cmp	r3, #8
    2c82:	d100      	bne.n	2c86 <USB_Handler+0x626>
    2c84:	e6ea      	b.n	2a5c <USB_Handler+0x3fc>
    2c86:	b2dd      	uxtb	r5, r3
			if (ep_inst & (1 << i)) {
    2c88:	9301      	str	r3, [sp, #4]
    2c8a:	0032      	movs	r2, r6
    2c8c:	411a      	asrs	r2, r3
    2c8e:	4661      	mov	r1, ip
    2c90:	4211      	tst	r1, r2
    2c92:	d0f3      	beq.n	2c7c <USB_Handler+0x61c>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    2c94:	001a      	movs	r2, r3
    2c96:	3208      	adds	r2, #8
    2c98:	0152      	lsls	r2, r2, #5
    2c9a:	18ba      	adds	r2, r7, r2
    2c9c:	79d2      	ldrb	r2, [r2, #7]
    2c9e:	b2d2      	uxtb	r2, r2
    2ca0:	7a21      	ldrb	r1, [r4, #8]
    2ca2:	4011      	ands	r1, r2
    2ca4:	7820      	ldrb	r0, [r4, #0]
    2ca6:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    2ca8:	4648      	mov	r0, r9
    2caa:	4210      	tst	r0, r2
    2cac:	d000      	beq.n	2cb0 <USB_Handler+0x650>
    2cae:	e726      	b.n	2afe <USB_Handler+0x49e>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2cb0:	4650      	mov	r0, sl
    2cb2:	4210      	tst	r0, r2
    2cb4:	d000      	beq.n	2cb8 <USB_Handler+0x658>
    2cb6:	e750      	b.n	2b5a <USB_Handler+0x4fa>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    2cb8:	4658      	mov	r0, fp
    2cba:	4210      	tst	r0, r2
    2cbc:	d000      	beq.n	2cc0 <USB_Handler+0x660>
    2cbe:	e76c      	b.n	2b9a <USB_Handler+0x53a>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    2cc0:	200c      	movs	r0, #12
    2cc2:	4210      	tst	r0, r2
    2cc4:	d0da      	beq.n	2c7c <USB_Handler+0x61c>
    2cc6:	002a      	movs	r2, r5
    2cc8:	003d      	movs	r5, r7
    2cca:	4647      	mov	r7, r8
    2ccc:	4690      	mov	r8, r2
    2cce:	015b      	lsls	r3, r3, #5
    2cd0:	18eb      	adds	r3, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    2cd2:	2208      	movs	r2, #8
    2cd4:	32ff      	adds	r2, #255	; 0xff
    2cd6:	5c9a      	ldrb	r2, [r3, r2]
    2cd8:	0712      	lsls	r2, r2, #28
    2cda:	d5a1      	bpl.n	2c20 <USB_Handler+0x5c0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    2cdc:	3804      	subs	r0, #4
    2cde:	2208      	movs	r2, #8
    2ce0:	32ff      	adds	r2, #255	; 0xff
    2ce2:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    2ce4:	9801      	ldr	r0, [sp, #4]
    2ce6:	0142      	lsls	r2, r0, #5
    2ce8:	4b13      	ldr	r3, [pc, #76]	; (2d38 <USB_Handler+0x6d8>)
    2cea:	189b      	adds	r3, r3, r2
    2cec:	7e9b      	ldrb	r3, [r3, #26]
    2cee:	079b      	lsls	r3, r3, #30
    2cf0:	d505      	bpl.n	2cfe <USB_Handler+0x69e>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    2cf2:	4b11      	ldr	r3, [pc, #68]	; (2d38 <USB_Handler+0x6d8>)
    2cf4:	189b      	adds	r3, r3, r2
    2cf6:	7e9a      	ldrb	r2, [r3, #26]
    2cf8:	2002      	movs	r0, #2
    2cfa:	4382      	bics	r2, r0
    2cfc:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    2cfe:	2380      	movs	r3, #128	; 0x80
    2d00:	425b      	negs	r3, r3
    2d02:	4642      	mov	r2, r8
    2d04:	4313      	orrs	r3, r2
    2d06:	4a0d      	ldr	r2, [pc, #52]	; (2d3c <USB_Handler+0x6dc>)
    2d08:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    2d0a:	9b01      	ldr	r3, [sp, #4]
    2d0c:	3308      	adds	r3, #8
    2d0e:	015b      	lsls	r3, r3, #5
    2d10:	683a      	ldr	r2, [r7, #0]
    2d12:	4694      	mov	ip, r2
    2d14:	4463      	add	r3, ip
    2d16:	79db      	ldrb	r3, [r3, #7]
    2d18:	079b      	lsls	r3, r3, #30
    2d1a:	d500      	bpl.n	2d1e <USB_Handler+0x6be>
    2d1c:	e69e      	b.n	2a5c <USB_Handler+0x3fc>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    2d1e:	230c      	movs	r3, #12
    2d20:	420b      	tst	r3, r1
    2d22:	d100      	bne.n	2d26 <USB_Handler+0x6c6>
    2d24:	e69a      	b.n	2a5c <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    2d26:	9b01      	ldr	r3, [sp, #4]
    2d28:	011b      	lsls	r3, r3, #4
    2d2a:	18fb      	adds	r3, r7, r3
    2d2c:	33d8      	adds	r3, #216	; 0xd8
    2d2e:	681b      	ldr	r3, [r3, #0]
    2d30:	4902      	ldr	r1, [pc, #8]	; (2d3c <USB_Handler+0x6dc>)
    2d32:	0038      	movs	r0, r7
    2d34:	4798      	blx	r3
    2d36:	e691      	b.n	2a5c <USB_Handler+0x3fc>
    2d38:	200003ac 	.word	0x200003ac
    2d3c:	20000188 	.word	0x20000188

00002d40 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    2d40:	2200      	movs	r2, #0
    2d42:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    2d44:	2301      	movs	r3, #1
    2d46:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    2d48:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    2d4a:	70c3      	strb	r3, [r0, #3]
}
    2d4c:	4770      	bx	lr
	...

00002d50 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    2d50:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d52:	46ce      	mov	lr, r9
    2d54:	4647      	mov	r7, r8
    2d56:	b580      	push	{r7, lr}
    2d58:	b083      	sub	sp, #12
    2d5a:	0004      	movs	r4, r0
    2d5c:	000d      	movs	r5, r1
    2d5e:	0016      	movs	r6, r2
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    2d60:	2300      	movs	r3, #0
    2d62:	4a6e      	ldr	r2, [pc, #440]	; (2f1c <usb_init+0x1cc>)
    2d64:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    2d66:	4a6e      	ldr	r2, [pc, #440]	; (2f20 <usb_init+0x1d0>)
    2d68:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    2d6a:	6021      	str	r1, [r4, #0]
			PM->APBBMASK.reg |= mask;
    2d6c:	496d      	ldr	r1, [pc, #436]	; (2f24 <usb_init+0x1d4>)
    2d6e:	69ca      	ldr	r2, [r1, #28]
    2d70:	2020      	movs	r0, #32
    2d72:	4302      	orrs	r2, r0
    2d74:	61ca      	str	r2, [r1, #28]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2d76:	af01      	add	r7, sp, #4
    2d78:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2d7a:	2201      	movs	r2, #1
    2d7c:	70ba      	strb	r2, [r7, #2]
	config->powersave    = false;
    2d7e:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    2d80:	3306      	adds	r3, #6
    2d82:	4699      	mov	r9, r3
    2d84:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    2d86:	0039      	movs	r1, r7
    2d88:	3808      	subs	r0, #8
    2d8a:	4b67      	ldr	r3, [pc, #412]	; (2f28 <usb_init+0x1d8>)
    2d8c:	4698      	mov	r8, r3
    2d8e:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    2d90:	464b      	mov	r3, r9
    2d92:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    2d94:	0039      	movs	r1, r7
    2d96:	2019      	movs	r0, #25
    2d98:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    2d9a:	78b3      	ldrb	r3, [r6, #2]
    2d9c:	466a      	mov	r2, sp
    2d9e:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    2da0:	4669      	mov	r1, sp
    2da2:	2006      	movs	r0, #6
    2da4:	4b61      	ldr	r3, [pc, #388]	; (2f2c <usb_init+0x1dc>)
    2da6:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    2da8:	2006      	movs	r0, #6
    2daa:	4b61      	ldr	r3, [pc, #388]	; (2f30 <usb_init+0x1e0>)
    2dac:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    2dae:	782b      	ldrb	r3, [r5, #0]
    2db0:	2201      	movs	r2, #1
    2db2:	4313      	orrs	r3, r2
    2db4:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    2db6:	78ab      	ldrb	r3, [r5, #2]
    2db8:	07db      	lsls	r3, r3, #31
    2dba:	d4fc      	bmi.n	2db6 <usb_init+0x66>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2dbc:	4a5d      	ldr	r2, [pc, #372]	; (2f34 <usb_init+0x1e4>)
    2dbe:	78d3      	ldrb	r3, [r2, #3]
    2dc0:	2103      	movs	r1, #3
    2dc2:	438b      	bics	r3, r1
    2dc4:	2102      	movs	r1, #2
    2dc6:	430b      	orrs	r3, r1
    2dc8:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2dca:	78d3      	ldrb	r3, [r2, #3]
    2dcc:	210c      	movs	r1, #12
    2dce:	438b      	bics	r3, r1
    2dd0:	2108      	movs	r1, #8
    2dd2:	430b      	orrs	r3, r1
    2dd4:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    2dd6:	4b58      	ldr	r3, [pc, #352]	; (2f38 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    2dd8:	681b      	ldr	r3, [r3, #0]
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    2dda:	039b      	lsls	r3, r3, #14
    2ddc:	0edb      	lsrs	r3, r3, #27
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    2dde:	2b1f      	cmp	r3, #31
    2de0:	d100      	bne.n	2de4 <usb_init+0x94>
    2de2:	e08f      	b.n	2f04 <usb_init+0x1b4>
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    2de4:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    2de6:	019b      	lsls	r3, r3, #6
    2de8:	4954      	ldr	r1, [pc, #336]	; (2f3c <usb_init+0x1ec>)
    2dea:	400a      	ands	r2, r1
    2dec:	4313      	orrs	r3, r2
    2dee:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    2df0:	4b51      	ldr	r3, [pc, #324]	; (2f38 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    2df2:	681b      	ldr	r3, [r3, #0]
    2df4:	025b      	lsls	r3, r3, #9
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    2df6:	0edb      	lsrs	r3, r3, #27
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    2df8:	2b1f      	cmp	r3, #31
    2dfa:	d100      	bne.n	2dfe <usb_init+0xae>
    2dfc:	e084      	b.n	2f08 <usb_init+0x1b8>
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    2dfe:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    2e00:	211f      	movs	r1, #31
    2e02:	438a      	bics	r2, r1
    2e04:	4313      	orrs	r3, r2
    2e06:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    2e08:	4b4b      	ldr	r3, [pc, #300]	; (2f38 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    2e0a:	681b      	ldr	r3, [r3, #0]
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    2e0c:	019b      	lsls	r3, r3, #6
    2e0e:	0f5b      	lsrs	r3, r3, #29
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    2e10:	2b07      	cmp	r3, #7
    2e12:	d100      	bne.n	2e16 <usb_init+0xc6>
    2e14:	e07a      	b.n	2f0c <usb_init+0x1bc>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    2e16:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    2e18:	031b      	lsls	r3, r3, #12
    2e1a:	4949      	ldr	r1, [pc, #292]	; (2f40 <usb_init+0x1f0>)
    2e1c:	400a      	ands	r2, r1
    2e1e:	4313      	orrs	r3, r2
    2e20:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    2e22:	7832      	ldrb	r2, [r6, #0]
    2e24:	7829      	ldrb	r1, [r5, #0]
    2e26:	01d2      	lsls	r2, r2, #7
    2e28:	237f      	movs	r3, #127	; 0x7f
    2e2a:	400b      	ands	r3, r1
    2e2c:	4313      	orrs	r3, r2
    2e2e:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    2e30:	7871      	ldrb	r1, [r6, #1]
    2e32:	782b      	ldrb	r3, [r5, #0]
    2e34:	2201      	movs	r2, #1
    2e36:	400a      	ands	r2, r1
    2e38:	0092      	lsls	r2, r2, #2
    2e3a:	2104      	movs	r1, #4
    2e3c:	438b      	bics	r3, r1
    2e3e:	4313      	orrs	r3, r2
    2e40:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    2e42:	4b40      	ldr	r3, [pc, #256]	; (2f44 <usb_init+0x1f4>)
    2e44:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    2e46:	78f3      	ldrb	r3, [r6, #3]
    2e48:	2b01      	cmp	r3, #1
    2e4a:	d061      	beq.n	2f10 <usb_init+0x1c0>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    2e4c:	2b00      	cmp	r3, #0
    2e4e:	d106      	bne.n	2e5e <usb_init+0x10e>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    2e50:	6822      	ldr	r2, [r4, #0]
    2e52:	8913      	ldrh	r3, [r2, #8]
    2e54:	210c      	movs	r1, #12
    2e56:	438b      	bics	r3, r1
    2e58:	2104      	movs	r1, #4
    2e5a:	430b      	orrs	r3, r1
    2e5c:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    2e5e:	2280      	movs	r2, #128	; 0x80
    2e60:	0052      	lsls	r2, r2, #1
    2e62:	2100      	movs	r1, #0
    2e64:	4837      	ldr	r0, [pc, #220]	; (2f44 <usb_init+0x1f4>)
    2e66:	4b38      	ldr	r3, [pc, #224]	; (2f48 <usb_init+0x1f8>)
    2e68:	4798      	blx	r3
    2e6a:	1d23      	adds	r3, r4, #4
    2e6c:	0021      	movs	r1, r4
    2e6e:	3124      	adds	r1, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    2e70:	2200      	movs	r2, #0
    2e72:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    2e74:	428b      	cmp	r3, r1
    2e76:	d1fc      	bne.n	2e72 <usb_init+0x122>
    2e78:	0021      	movs	r1, r4
    2e7a:	31a4      	adds	r1, #164	; 0xa4
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    2e7c:	2200      	movs	r2, #0
    2e7e:	601a      	str	r2, [r3, #0]
    2e80:	605a      	str	r2, [r3, #4]
    2e82:	609a      	str	r2, [r3, #8]
    2e84:	60da      	str	r2, [r3, #12]
    2e86:	3310      	adds	r3, #16
	for (i = 0; i < USB_PIPE_NUM; i++) {
    2e88:	428b      	cmp	r3, r1
    2e8a:	d1f8      	bne.n	2e7e <usb_init+0x12e>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    2e8c:	2300      	movs	r3, #0
    2e8e:	22a4      	movs	r2, #164	; 0xa4
    2e90:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    2e92:	3201      	adds	r2, #1
    2e94:	54a3      	strb	r3, [r4, r2]
    2e96:	0023      	movs	r3, r4
    2e98:	33a6      	adds	r3, #166	; 0xa6
    2e9a:	0021      	movs	r1, r4
    2e9c:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    2e9e:	2200      	movs	r2, #0
    2ea0:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    2ea2:	721a      	strb	r2, [r3, #8]
    2ea4:	3301      	adds	r3, #1
	for (i = 0; i < USB_PIPE_NUM; i++) {
    2ea6:	4299      	cmp	r1, r3
    2ea8:	d1fa      	bne.n	2ea0 <usb_init+0x150>
    2eaa:	0023      	movs	r3, r4
    2eac:	33b8      	adds	r3, #184	; 0xb8
    2eae:	0021      	movs	r1, r4
    2eb0:	31d4      	adds	r1, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    2eb2:	2200      	movs	r2, #0
    2eb4:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    2eb6:	428b      	cmp	r3, r1
    2eb8:	d1fc      	bne.n	2eb4 <usb_init+0x164>
    2eba:	0021      	movs	r1, r4
    2ebc:	3155      	adds	r1, #85	; 0x55
    2ebe:	31ff      	adds	r1, #255	; 0xff
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    2ec0:	2200      	movs	r2, #0
    2ec2:	601a      	str	r2, [r3, #0]
    2ec4:	605a      	str	r2, [r3, #4]
    2ec6:	609a      	str	r2, [r3, #8]
    2ec8:	60da      	str	r2, [r3, #12]
    2eca:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
    2ecc:	428b      	cmp	r3, r1
    2ece:	d1f8      	bne.n	2ec2 <usb_init+0x172>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    2ed0:	2300      	movs	r3, #0
    2ed2:	22aa      	movs	r2, #170	; 0xaa
    2ed4:	0052      	lsls	r2, r2, #1
    2ed6:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    2ed8:	3202      	adds	r2, #2
    2eda:	52a3      	strh	r3, [r4, r2]
    2edc:	0023      	movs	r3, r4
    2ede:	3359      	adds	r3, #89	; 0x59
    2ee0:	33ff      	adds	r3, #255	; 0xff
    2ee2:	3461      	adds	r4, #97	; 0x61
    2ee4:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    2ee6:	2200      	movs	r2, #0
    2ee8:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    2eea:	721a      	strb	r2, [r3, #8]
    2eec:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
    2eee:	42a3      	cmp	r3, r4
    2ef0:	d1fa      	bne.n	2ee8 <usb_init+0x198>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2ef2:	2280      	movs	r2, #128	; 0x80
    2ef4:	4b15      	ldr	r3, [pc, #84]	; (2f4c <usb_init+0x1fc>)
    2ef6:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    2ef8:	2000      	movs	r0, #0
    2efa:	b003      	add	sp, #12
    2efc:	bc0c      	pop	{r2, r3}
    2efe:	4690      	mov	r8, r2
    2f00:	4699      	mov	r9, r3
    2f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pad_transn = 5;
    2f04:	3b1a      	subs	r3, #26
    2f06:	e76d      	b.n	2de4 <usb_init+0x94>
		pad_transp = 29;
    2f08:	3b02      	subs	r3, #2
    2f0a:	e778      	b.n	2dfe <usb_init+0xae>
		pad_trim = 3;
    2f0c:	3b04      	subs	r3, #4
    2f0e:	e782      	b.n	2e16 <usb_init+0xc6>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    2f10:	6822      	ldr	r2, [r4, #0]
    2f12:	8913      	ldrh	r3, [r2, #8]
    2f14:	3108      	adds	r1, #8
    2f16:	438b      	bics	r3, r1
    2f18:	8113      	strh	r3, [r2, #8]
    2f1a:	e7a0      	b.n	2e5e <usb_init+0x10e>
    2f1c:	20000190 	.word	0x20000190
    2f20:	20000180 	.word	0x20000180
    2f24:	40000400 	.word	0x40000400
    2f28:	00001295 	.word	0x00001295
    2f2c:	000011d1 	.word	0x000011d1
    2f30:	00001145 	.word	0x00001145
    2f34:	41005000 	.word	0x41005000
    2f38:	00806024 	.word	0x00806024
    2f3c:	fffff83f 	.word	0xfffff83f
    2f40:	ffff8fff 	.word	0xffff8fff
    2f44:	200003ac 	.word	0x200003ac
    2f48:	00003537 	.word	0x00003537
    2f4c:	e000e100 	.word	0xe000e100

00002f50 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2f50:	e7fe      	b.n	2f50 <Dummy_Handler>
	...

00002f54 <Reset_Handler>:
{
    2f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    2f56:	4a2a      	ldr	r2, [pc, #168]	; (3000 <Reset_Handler+0xac>)
    2f58:	4b2a      	ldr	r3, [pc, #168]	; (3004 <Reset_Handler+0xb0>)
    2f5a:	429a      	cmp	r2, r3
    2f5c:	d011      	beq.n	2f82 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2f5e:	001a      	movs	r2, r3
    2f60:	4b29      	ldr	r3, [pc, #164]	; (3008 <Reset_Handler+0xb4>)
    2f62:	429a      	cmp	r2, r3
    2f64:	d20d      	bcs.n	2f82 <Reset_Handler+0x2e>
    2f66:	4a29      	ldr	r2, [pc, #164]	; (300c <Reset_Handler+0xb8>)
    2f68:	3303      	adds	r3, #3
    2f6a:	1a9b      	subs	r3, r3, r2
    2f6c:	089b      	lsrs	r3, r3, #2
    2f6e:	3301      	adds	r3, #1
    2f70:	009b      	lsls	r3, r3, #2
    2f72:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2f74:	4823      	ldr	r0, [pc, #140]	; (3004 <Reset_Handler+0xb0>)
    2f76:	4922      	ldr	r1, [pc, #136]	; (3000 <Reset_Handler+0xac>)
    2f78:	588c      	ldr	r4, [r1, r2]
    2f7a:	5084      	str	r4, [r0, r2]
    2f7c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2f7e:	429a      	cmp	r2, r3
    2f80:	d1fa      	bne.n	2f78 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2f82:	4a23      	ldr	r2, [pc, #140]	; (3010 <Reset_Handler+0xbc>)
    2f84:	4b23      	ldr	r3, [pc, #140]	; (3014 <Reset_Handler+0xc0>)
    2f86:	429a      	cmp	r2, r3
    2f88:	d20a      	bcs.n	2fa0 <Reset_Handler+0x4c>
    2f8a:	43d3      	mvns	r3, r2
    2f8c:	4921      	ldr	r1, [pc, #132]	; (3014 <Reset_Handler+0xc0>)
    2f8e:	185b      	adds	r3, r3, r1
    2f90:	2103      	movs	r1, #3
    2f92:	438b      	bics	r3, r1
    2f94:	3304      	adds	r3, #4
    2f96:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2f98:	2100      	movs	r1, #0
    2f9a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2f9c:	4293      	cmp	r3, r2
    2f9e:	d1fc      	bne.n	2f9a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2fa0:	4a1d      	ldr	r2, [pc, #116]	; (3018 <Reset_Handler+0xc4>)
    2fa2:	21ff      	movs	r1, #255	; 0xff
    2fa4:	4b1d      	ldr	r3, [pc, #116]	; (301c <Reset_Handler+0xc8>)
    2fa6:	438b      	bics	r3, r1
    2fa8:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2faa:	39fd      	subs	r1, #253	; 0xfd
    2fac:	2390      	movs	r3, #144	; 0x90
    2fae:	005b      	lsls	r3, r3, #1
    2fb0:	4a1b      	ldr	r2, [pc, #108]	; (3020 <Reset_Handler+0xcc>)
    2fb2:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2fb4:	4a1b      	ldr	r2, [pc, #108]	; (3024 <Reset_Handler+0xd0>)
    2fb6:	78d3      	ldrb	r3, [r2, #3]
    2fb8:	2503      	movs	r5, #3
    2fba:	43ab      	bics	r3, r5
    2fbc:	2402      	movs	r4, #2
    2fbe:	4323      	orrs	r3, r4
    2fc0:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2fc2:	78d3      	ldrb	r3, [r2, #3]
    2fc4:	270c      	movs	r7, #12
    2fc6:	43bb      	bics	r3, r7
    2fc8:	2608      	movs	r6, #8
    2fca:	4333      	orrs	r3, r6
    2fcc:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2fce:	4b16      	ldr	r3, [pc, #88]	; (3028 <Reset_Handler+0xd4>)
    2fd0:	7b98      	ldrb	r0, [r3, #14]
    2fd2:	2230      	movs	r2, #48	; 0x30
    2fd4:	4390      	bics	r0, r2
    2fd6:	2220      	movs	r2, #32
    2fd8:	4310      	orrs	r0, r2
    2fda:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2fdc:	7b99      	ldrb	r1, [r3, #14]
    2fde:	43b9      	bics	r1, r7
    2fe0:	4331      	orrs	r1, r6
    2fe2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2fe4:	7b9a      	ldrb	r2, [r3, #14]
    2fe6:	43aa      	bics	r2, r5
    2fe8:	4322      	orrs	r2, r4
    2fea:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2fec:	4a0f      	ldr	r2, [pc, #60]	; (302c <Reset_Handler+0xd8>)
    2fee:	6853      	ldr	r3, [r2, #4]
    2ff0:	2180      	movs	r1, #128	; 0x80
    2ff2:	430b      	orrs	r3, r1
    2ff4:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2ff6:	4b0e      	ldr	r3, [pc, #56]	; (3030 <Reset_Handler+0xdc>)
    2ff8:	4798      	blx	r3
        main();
    2ffa:	4b0e      	ldr	r3, [pc, #56]	; (3034 <Reset_Handler+0xe0>)
    2ffc:	4798      	blx	r3
    2ffe:	e7fe      	b.n	2ffe <Reset_Handler+0xaa>
    3000:	000035b4 	.word	0x000035b4
    3004:	20000000 	.word	0x20000000
    3008:	200000dc 	.word	0x200000dc
    300c:	20000004 	.word	0x20000004
    3010:	200000dc 	.word	0x200000dc
    3014:	200004ac 	.word	0x200004ac
    3018:	e000ed00 	.word	0xe000ed00
    301c:	00000000 	.word	0x00000000
    3020:	41007000 	.word	0x41007000
    3024:	41005000 	.word	0x41005000
    3028:	41004800 	.word	0x41004800
    302c:	41004000 	.word	0x41004000
    3030:	000034dd 	.word	0x000034dd
    3034:	00003039 	.word	0x00003039

00003038 <main>:
static volatile bool main_b_kbd_enable = true;

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
    3038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    303a:	46de      	mov	lr, fp
    303c:	4657      	mov	r7, sl
    303e:	464e      	mov	r6, r9
    3040:	4645      	mov	r5, r8
    3042:	b5e0      	push	{r5, r6, r7, lr}
	irq_initialize_vectors();
	cpu_irq_enable();
    3044:	2101      	movs	r1, #1
    3046:	4b34      	ldr	r3, [pc, #208]	; (3118 <main+0xe0>)
    3048:	7019      	strb	r1, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    304a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    304e:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
    3050:	4b32      	ldr	r3, [pc, #200]	; (311c <main+0xe4>)
    3052:	2200      	movs	r2, #0
    3054:	701a      	strb	r2, [r3, #0]
    3056:	705a      	strb	r2, [r3, #1]
    3058:	709a      	strb	r2, [r3, #2]
    305a:	70da      	strb	r2, [r3, #3]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    305c:	7119      	strb	r1, [r3, #4]

#if !SAM0
	sysclk_init();
	board_init();
#else
	system_init();
    305e:	4b30      	ldr	r3, [pc, #192]	; (3120 <main+0xe8>)
    3060:	4798      	blx	r3
#endif
	ui_init();
    3062:	4b30      	ldr	r3, [pc, #192]	; (3124 <main+0xec>)
    3064:	4798      	blx	r3
	ui_powerdown();
    3066:	4b30      	ldr	r3, [pc, #192]	; (3128 <main+0xf0>)
    3068:	4798      	blx	r3

	// Start USB stack to authorize VBus monitoring
	udc_start();
    306a:	4b30      	ldr	r3, [pc, #192]	; (312c <main+0xf4>)
    306c:	4798      	blx	r3
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    306e:	4f2a      	ldr	r7, [pc, #168]	; (3118 <main+0xe0>)
    3070:	2400      	movs	r4, #0
    3072:	1c26      	adds	r6, r4, #0
	while (!(*lock_ptr)) {
    3074:	4d29      	ldr	r5, [pc, #164]	; (311c <main+0xe4>)

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
		cpu_irq_enable();
    3076:	46b8      	mov	r8, r7
    3078:	2301      	movs	r3, #1
    307a:	469c      	mov	ip, r3

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
    307c:	46bb      	mov	fp, r7
{

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
    307e:	4b2c      	ldr	r3, [pc, #176]	; (3130 <main+0xf8>)
    3080:	469a      	mov	sl, r3

	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;
    3082:	230f      	movs	r3, #15
    3084:	4699      	mov	r9, r3
    3086:	e00e      	b.n	30a6 <main+0x6e>
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    3088:	0019      	movs	r1, r3
		lock_ptr++;
    308a:	3201      	adds	r2, #1
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    308c:	1c4b      	adds	r3, r1, #1
    308e:	b2db      	uxtb	r3, r3
	while (!(*lock_ptr)) {
    3090:	7810      	ldrb	r0, [r2, #0]
    3092:	2800      	cmp	r0, #0
    3094:	d0f8      	beq.n	3088 <main+0x50>
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    3096:	2b00      	cmp	r3, #0
    3098:	d10f      	bne.n	30ba <main+0x82>
		cpu_irq_enable();
    309a:	4643      	mov	r3, r8
    309c:	4662      	mov	r2, ip
    309e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    30a0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    30a4:	b662      	cpsie	i
  __ASM volatile ("cpsid i" : : : "memory");
    30a6:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    30a8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    30ac:	703e      	strb	r6, [r7, #0]
	while (!(*lock_ptr)) {
    30ae:	782b      	ldrb	r3, [r5, #0]
    30b0:	2b00      	cmp	r3, #0
    30b2:	d1f2      	bne.n	309a <main+0x62>
    30b4:	0021      	movs	r1, r4
    30b6:	4a19      	ldr	r2, [pc, #100]	; (311c <main+0xe4>)
    30b8:	e7e7      	b.n	308a <main+0x52>
  __ASM volatile ("cpsid i" : : : "memory");
    30ba:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    30bc:	f3bf 8f5f 	dmb	sy
    30c0:	465b      	mov	r3, fp
    30c2:	701c      	strb	r4, [r3, #0]
	uint32_t rev = DSU->DID.reg;
    30c4:	4653      	mov	r3, sl
    30c6:	699b      	ldr	r3, [r3, #24]
    30c8:	0a1b      	lsrs	r3, r3, #8
	rev = rev >> DSU_DID_REVISION_Pos;
    30ca:	464a      	mov	r2, r9
    30cc:	4013      	ands	r3, r2
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
    30ce:	2b02      	cmp	r3, #2
    30d0:	d805      	bhi.n	30de <main+0xa6>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    30d2:	4a18      	ldr	r2, [pc, #96]	; (3134 <main+0xfc>)
    30d4:	6850      	ldr	r0, [r2, #4]
    30d6:	23c0      	movs	r3, #192	; 0xc0
    30d8:	009b      	lsls	r3, r3, #2
    30da:	4303      	orrs	r3, r0
    30dc:	6053      	str	r3, [r2, #4]
	}
#endif

#endif

	switch (sleep_mode) {
    30de:	2902      	cmp	r1, #2
    30e0:	d90b      	bls.n	30fa <main+0xc2>
    30e2:	2903      	cmp	r1, #3
    30e4:	d011      	beq.n	310a <main+0xd2>

	/* Enter the sleep mode. */
	system_set_sleepmode((enum system_sleepmode)(sleep_mode - 1));
	cpu_irq_enable();
    30e6:	4b0c      	ldr	r3, [pc, #48]	; (3118 <main+0xe0>)
    30e8:	4662      	mov	r2, ip
    30ea:	701a      	strb	r2, [r3, #0]
    30ec:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    30f0:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    30f2:	f3bf 8f4f 	dsb	sy
 * \ref system_set_sleepmode until woken by an interrupt.
 */
static inline void system_sleep(void)
{
	__DSB();
	__WFI();
    30f6:	bf30      	wfi
    30f8:	e7d5      	b.n	30a6 <main+0x6e>
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    30fa:	4a0f      	ldr	r2, [pc, #60]	; (3138 <main+0x100>)
    30fc:	6913      	ldr	r3, [r2, #16]
    30fe:	2004      	movs	r0, #4
    3100:	4383      	bics	r3, r0
    3102:	6113      	str	r3, [r2, #16]
			PM->SLEEP.reg = sleep_mode;
    3104:	4b0d      	ldr	r3, [pc, #52]	; (313c <main+0x104>)
    3106:	7059      	strb	r1, [r3, #1]
    3108:	e7ed      	b.n	30e6 <main+0xae>
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    310a:	4a0b      	ldr	r2, [pc, #44]	; (3138 <main+0x100>)
    310c:	6913      	ldr	r3, [r2, #16]
    310e:	2104      	movs	r1, #4
    3110:	430b      	orrs	r3, r1
    3112:	6113      	str	r3, [r2, #16]
    3114:	e7e7      	b.n	30e6 <main+0xae>
    3116:	46c0      	nop			; (mov r8, r8)
    3118:	200000da 	.word	0x200000da
    311c:	2000019c 	.word	0x2000019c
    3120:	000012c9 	.word	0x000012c9
    3124:	00000115 	.word	0x00000115
    3128:	00000141 	.word	0x00000141
    312c:	000006fd 	.word	0x000006fd
    3130:	41002000 	.word	0x41002000
    3134:	41004000 	.word	0x41004000
    3138:	e000ed00 	.word	0xe000ed00
    313c:	40000400 	.word	0x40000400

00003140 <main_suspend_action>:
#endif
	}
}

void main_suspend_action(void)
{
    3140:	b510      	push	{r4, lr}
	ui_powerdown();
    3142:	4b01      	ldr	r3, [pc, #4]	; (3148 <main_suspend_action+0x8>)
    3144:	4798      	blx	r3
}
    3146:	bd10      	pop	{r4, pc}
    3148:	00000141 	.word	0x00000141

0000314c <main_resume_action>:

void main_resume_action(void)
{
    314c:	b510      	push	{r4, lr}
	ui_wakeup();
    314e:	4b01      	ldr	r3, [pc, #4]	; (3154 <main_resume_action+0x8>)
    3150:	4798      	blx	r3
}
    3152:	bd10      	pop	{r4, pc}
    3154:	00000147 	.word	0x00000147

00003158 <main_sof_action>:

void main_sof_action(void)
{
    3158:	b510      	push	{r4, lr}
	if (!main_b_kbd_enable)
    315a:	4b05      	ldr	r3, [pc, #20]	; (3170 <main_sof_action+0x18>)
    315c:	781b      	ldrb	r3, [r3, #0]
    315e:	2b00      	cmp	r3, #0
    3160:	d100      	bne.n	3164 <main_sof_action+0xc>
		return;
	ui_process(udd_get_frame_number());
}
    3162:	bd10      	pop	{r4, pc}
	ui_process(udd_get_frame_number());
    3164:	4b03      	ldr	r3, [pc, #12]	; (3174 <main_sof_action+0x1c>)
    3166:	4798      	blx	r3
    3168:	4b03      	ldr	r3, [pc, #12]	; (3178 <main_sof_action+0x20>)
    316a:	4798      	blx	r3
    316c:	e7f9      	b.n	3162 <main_sof_action+0xa>
    316e:	46c0      	nop			; (mov r8, r8)
    3170:	200000db 	.word	0x200000db
    3174:	000019ad 	.word	0x000019ad
    3178:	00000149 	.word	0x00000149

0000317c <main_remotewakeup_enable>:

void main_remotewakeup_enable(void)
{
    317c:	b510      	push	{r4, lr}
	ui_wakeup_enable();
    317e:	4b01      	ldr	r3, [pc, #4]	; (3184 <main_remotewakeup_enable+0x8>)
    3180:	4798      	blx	r3
}
    3182:	bd10      	pop	{r4, pc}
    3184:	00000143 	.word	0x00000143

00003188 <main_remotewakeup_disable>:

void main_remotewakeup_disable(void)
{
    3188:	b510      	push	{r4, lr}
	ui_wakeup_disable();
    318a:	4b01      	ldr	r3, [pc, #4]	; (3190 <main_remotewakeup_disable+0x8>)
    318c:	4798      	blx	r3
}
    318e:	bd10      	pop	{r4, pc}
    3190:	00000145 	.word	0x00000145

00003194 <main_kbd_enable>:

bool main_kbd_enable(void)
{
	main_b_kbd_enable = true;
    3194:	2201      	movs	r2, #1
    3196:	4b02      	ldr	r3, [pc, #8]	; (31a0 <main_kbd_enable+0xc>)
    3198:	701a      	strb	r2, [r3, #0]
	return true;
}
    319a:	2001      	movs	r0, #1
    319c:	4770      	bx	lr
    319e:	46c0      	nop			; (mov r8, r8)
    31a0:	200000db 	.word	0x200000db

000031a4 <main_kbd_disable>:

void main_kbd_disable(void)
{
	main_b_kbd_enable = false;
    31a4:	2200      	movs	r2, #0
    31a6:	4b01      	ldr	r3, [pc, #4]	; (31ac <main_kbd_disable+0x8>)
    31a8:	701a      	strb	r2, [r3, #0]
}
    31aa:	4770      	bx	lr
    31ac:	200000db 	.word	0x200000db

000031b0 <__udivsi3>:
    31b0:	2200      	movs	r2, #0
    31b2:	0843      	lsrs	r3, r0, #1
    31b4:	428b      	cmp	r3, r1
    31b6:	d374      	bcc.n	32a2 <__udivsi3+0xf2>
    31b8:	0903      	lsrs	r3, r0, #4
    31ba:	428b      	cmp	r3, r1
    31bc:	d35f      	bcc.n	327e <__udivsi3+0xce>
    31be:	0a03      	lsrs	r3, r0, #8
    31c0:	428b      	cmp	r3, r1
    31c2:	d344      	bcc.n	324e <__udivsi3+0x9e>
    31c4:	0b03      	lsrs	r3, r0, #12
    31c6:	428b      	cmp	r3, r1
    31c8:	d328      	bcc.n	321c <__udivsi3+0x6c>
    31ca:	0c03      	lsrs	r3, r0, #16
    31cc:	428b      	cmp	r3, r1
    31ce:	d30d      	bcc.n	31ec <__udivsi3+0x3c>
    31d0:	22ff      	movs	r2, #255	; 0xff
    31d2:	0209      	lsls	r1, r1, #8
    31d4:	ba12      	rev	r2, r2
    31d6:	0c03      	lsrs	r3, r0, #16
    31d8:	428b      	cmp	r3, r1
    31da:	d302      	bcc.n	31e2 <__udivsi3+0x32>
    31dc:	1212      	asrs	r2, r2, #8
    31de:	0209      	lsls	r1, r1, #8
    31e0:	d065      	beq.n	32ae <__udivsi3+0xfe>
    31e2:	0b03      	lsrs	r3, r0, #12
    31e4:	428b      	cmp	r3, r1
    31e6:	d319      	bcc.n	321c <__udivsi3+0x6c>
    31e8:	e000      	b.n	31ec <__udivsi3+0x3c>
    31ea:	0a09      	lsrs	r1, r1, #8
    31ec:	0bc3      	lsrs	r3, r0, #15
    31ee:	428b      	cmp	r3, r1
    31f0:	d301      	bcc.n	31f6 <__udivsi3+0x46>
    31f2:	03cb      	lsls	r3, r1, #15
    31f4:	1ac0      	subs	r0, r0, r3
    31f6:	4152      	adcs	r2, r2
    31f8:	0b83      	lsrs	r3, r0, #14
    31fa:	428b      	cmp	r3, r1
    31fc:	d301      	bcc.n	3202 <__udivsi3+0x52>
    31fe:	038b      	lsls	r3, r1, #14
    3200:	1ac0      	subs	r0, r0, r3
    3202:	4152      	adcs	r2, r2
    3204:	0b43      	lsrs	r3, r0, #13
    3206:	428b      	cmp	r3, r1
    3208:	d301      	bcc.n	320e <__udivsi3+0x5e>
    320a:	034b      	lsls	r3, r1, #13
    320c:	1ac0      	subs	r0, r0, r3
    320e:	4152      	adcs	r2, r2
    3210:	0b03      	lsrs	r3, r0, #12
    3212:	428b      	cmp	r3, r1
    3214:	d301      	bcc.n	321a <__udivsi3+0x6a>
    3216:	030b      	lsls	r3, r1, #12
    3218:	1ac0      	subs	r0, r0, r3
    321a:	4152      	adcs	r2, r2
    321c:	0ac3      	lsrs	r3, r0, #11
    321e:	428b      	cmp	r3, r1
    3220:	d301      	bcc.n	3226 <__udivsi3+0x76>
    3222:	02cb      	lsls	r3, r1, #11
    3224:	1ac0      	subs	r0, r0, r3
    3226:	4152      	adcs	r2, r2
    3228:	0a83      	lsrs	r3, r0, #10
    322a:	428b      	cmp	r3, r1
    322c:	d301      	bcc.n	3232 <__udivsi3+0x82>
    322e:	028b      	lsls	r3, r1, #10
    3230:	1ac0      	subs	r0, r0, r3
    3232:	4152      	adcs	r2, r2
    3234:	0a43      	lsrs	r3, r0, #9
    3236:	428b      	cmp	r3, r1
    3238:	d301      	bcc.n	323e <__udivsi3+0x8e>
    323a:	024b      	lsls	r3, r1, #9
    323c:	1ac0      	subs	r0, r0, r3
    323e:	4152      	adcs	r2, r2
    3240:	0a03      	lsrs	r3, r0, #8
    3242:	428b      	cmp	r3, r1
    3244:	d301      	bcc.n	324a <__udivsi3+0x9a>
    3246:	020b      	lsls	r3, r1, #8
    3248:	1ac0      	subs	r0, r0, r3
    324a:	4152      	adcs	r2, r2
    324c:	d2cd      	bcs.n	31ea <__udivsi3+0x3a>
    324e:	09c3      	lsrs	r3, r0, #7
    3250:	428b      	cmp	r3, r1
    3252:	d301      	bcc.n	3258 <__udivsi3+0xa8>
    3254:	01cb      	lsls	r3, r1, #7
    3256:	1ac0      	subs	r0, r0, r3
    3258:	4152      	adcs	r2, r2
    325a:	0983      	lsrs	r3, r0, #6
    325c:	428b      	cmp	r3, r1
    325e:	d301      	bcc.n	3264 <__udivsi3+0xb4>
    3260:	018b      	lsls	r3, r1, #6
    3262:	1ac0      	subs	r0, r0, r3
    3264:	4152      	adcs	r2, r2
    3266:	0943      	lsrs	r3, r0, #5
    3268:	428b      	cmp	r3, r1
    326a:	d301      	bcc.n	3270 <__udivsi3+0xc0>
    326c:	014b      	lsls	r3, r1, #5
    326e:	1ac0      	subs	r0, r0, r3
    3270:	4152      	adcs	r2, r2
    3272:	0903      	lsrs	r3, r0, #4
    3274:	428b      	cmp	r3, r1
    3276:	d301      	bcc.n	327c <__udivsi3+0xcc>
    3278:	010b      	lsls	r3, r1, #4
    327a:	1ac0      	subs	r0, r0, r3
    327c:	4152      	adcs	r2, r2
    327e:	08c3      	lsrs	r3, r0, #3
    3280:	428b      	cmp	r3, r1
    3282:	d301      	bcc.n	3288 <__udivsi3+0xd8>
    3284:	00cb      	lsls	r3, r1, #3
    3286:	1ac0      	subs	r0, r0, r3
    3288:	4152      	adcs	r2, r2
    328a:	0883      	lsrs	r3, r0, #2
    328c:	428b      	cmp	r3, r1
    328e:	d301      	bcc.n	3294 <__udivsi3+0xe4>
    3290:	008b      	lsls	r3, r1, #2
    3292:	1ac0      	subs	r0, r0, r3
    3294:	4152      	adcs	r2, r2
    3296:	0843      	lsrs	r3, r0, #1
    3298:	428b      	cmp	r3, r1
    329a:	d301      	bcc.n	32a0 <__udivsi3+0xf0>
    329c:	004b      	lsls	r3, r1, #1
    329e:	1ac0      	subs	r0, r0, r3
    32a0:	4152      	adcs	r2, r2
    32a2:	1a41      	subs	r1, r0, r1
    32a4:	d200      	bcs.n	32a8 <__udivsi3+0xf8>
    32a6:	4601      	mov	r1, r0
    32a8:	4152      	adcs	r2, r2
    32aa:	4610      	mov	r0, r2
    32ac:	4770      	bx	lr
    32ae:	e7ff      	b.n	32b0 <__udivsi3+0x100>
    32b0:	b501      	push	{r0, lr}
    32b2:	2000      	movs	r0, #0
    32b4:	f000 f8f0 	bl	3498 <__aeabi_idiv0>
    32b8:	bd02      	pop	{r1, pc}
    32ba:	46c0      	nop			; (mov r8, r8)

000032bc <__aeabi_uidivmod>:
    32bc:	2900      	cmp	r1, #0
    32be:	d0f7      	beq.n	32b0 <__udivsi3+0x100>
    32c0:	e776      	b.n	31b0 <__udivsi3>
    32c2:	4770      	bx	lr

000032c4 <__divsi3>:
    32c4:	4603      	mov	r3, r0
    32c6:	430b      	orrs	r3, r1
    32c8:	d47f      	bmi.n	33ca <__divsi3+0x106>
    32ca:	2200      	movs	r2, #0
    32cc:	0843      	lsrs	r3, r0, #1
    32ce:	428b      	cmp	r3, r1
    32d0:	d374      	bcc.n	33bc <__divsi3+0xf8>
    32d2:	0903      	lsrs	r3, r0, #4
    32d4:	428b      	cmp	r3, r1
    32d6:	d35f      	bcc.n	3398 <__divsi3+0xd4>
    32d8:	0a03      	lsrs	r3, r0, #8
    32da:	428b      	cmp	r3, r1
    32dc:	d344      	bcc.n	3368 <__divsi3+0xa4>
    32de:	0b03      	lsrs	r3, r0, #12
    32e0:	428b      	cmp	r3, r1
    32e2:	d328      	bcc.n	3336 <__divsi3+0x72>
    32e4:	0c03      	lsrs	r3, r0, #16
    32e6:	428b      	cmp	r3, r1
    32e8:	d30d      	bcc.n	3306 <__divsi3+0x42>
    32ea:	22ff      	movs	r2, #255	; 0xff
    32ec:	0209      	lsls	r1, r1, #8
    32ee:	ba12      	rev	r2, r2
    32f0:	0c03      	lsrs	r3, r0, #16
    32f2:	428b      	cmp	r3, r1
    32f4:	d302      	bcc.n	32fc <__divsi3+0x38>
    32f6:	1212      	asrs	r2, r2, #8
    32f8:	0209      	lsls	r1, r1, #8
    32fa:	d065      	beq.n	33c8 <__divsi3+0x104>
    32fc:	0b03      	lsrs	r3, r0, #12
    32fe:	428b      	cmp	r3, r1
    3300:	d319      	bcc.n	3336 <__divsi3+0x72>
    3302:	e000      	b.n	3306 <__divsi3+0x42>
    3304:	0a09      	lsrs	r1, r1, #8
    3306:	0bc3      	lsrs	r3, r0, #15
    3308:	428b      	cmp	r3, r1
    330a:	d301      	bcc.n	3310 <__divsi3+0x4c>
    330c:	03cb      	lsls	r3, r1, #15
    330e:	1ac0      	subs	r0, r0, r3
    3310:	4152      	adcs	r2, r2
    3312:	0b83      	lsrs	r3, r0, #14
    3314:	428b      	cmp	r3, r1
    3316:	d301      	bcc.n	331c <__divsi3+0x58>
    3318:	038b      	lsls	r3, r1, #14
    331a:	1ac0      	subs	r0, r0, r3
    331c:	4152      	adcs	r2, r2
    331e:	0b43      	lsrs	r3, r0, #13
    3320:	428b      	cmp	r3, r1
    3322:	d301      	bcc.n	3328 <__divsi3+0x64>
    3324:	034b      	lsls	r3, r1, #13
    3326:	1ac0      	subs	r0, r0, r3
    3328:	4152      	adcs	r2, r2
    332a:	0b03      	lsrs	r3, r0, #12
    332c:	428b      	cmp	r3, r1
    332e:	d301      	bcc.n	3334 <__divsi3+0x70>
    3330:	030b      	lsls	r3, r1, #12
    3332:	1ac0      	subs	r0, r0, r3
    3334:	4152      	adcs	r2, r2
    3336:	0ac3      	lsrs	r3, r0, #11
    3338:	428b      	cmp	r3, r1
    333a:	d301      	bcc.n	3340 <__divsi3+0x7c>
    333c:	02cb      	lsls	r3, r1, #11
    333e:	1ac0      	subs	r0, r0, r3
    3340:	4152      	adcs	r2, r2
    3342:	0a83      	lsrs	r3, r0, #10
    3344:	428b      	cmp	r3, r1
    3346:	d301      	bcc.n	334c <__divsi3+0x88>
    3348:	028b      	lsls	r3, r1, #10
    334a:	1ac0      	subs	r0, r0, r3
    334c:	4152      	adcs	r2, r2
    334e:	0a43      	lsrs	r3, r0, #9
    3350:	428b      	cmp	r3, r1
    3352:	d301      	bcc.n	3358 <__divsi3+0x94>
    3354:	024b      	lsls	r3, r1, #9
    3356:	1ac0      	subs	r0, r0, r3
    3358:	4152      	adcs	r2, r2
    335a:	0a03      	lsrs	r3, r0, #8
    335c:	428b      	cmp	r3, r1
    335e:	d301      	bcc.n	3364 <__divsi3+0xa0>
    3360:	020b      	lsls	r3, r1, #8
    3362:	1ac0      	subs	r0, r0, r3
    3364:	4152      	adcs	r2, r2
    3366:	d2cd      	bcs.n	3304 <__divsi3+0x40>
    3368:	09c3      	lsrs	r3, r0, #7
    336a:	428b      	cmp	r3, r1
    336c:	d301      	bcc.n	3372 <__divsi3+0xae>
    336e:	01cb      	lsls	r3, r1, #7
    3370:	1ac0      	subs	r0, r0, r3
    3372:	4152      	adcs	r2, r2
    3374:	0983      	lsrs	r3, r0, #6
    3376:	428b      	cmp	r3, r1
    3378:	d301      	bcc.n	337e <__divsi3+0xba>
    337a:	018b      	lsls	r3, r1, #6
    337c:	1ac0      	subs	r0, r0, r3
    337e:	4152      	adcs	r2, r2
    3380:	0943      	lsrs	r3, r0, #5
    3382:	428b      	cmp	r3, r1
    3384:	d301      	bcc.n	338a <__divsi3+0xc6>
    3386:	014b      	lsls	r3, r1, #5
    3388:	1ac0      	subs	r0, r0, r3
    338a:	4152      	adcs	r2, r2
    338c:	0903      	lsrs	r3, r0, #4
    338e:	428b      	cmp	r3, r1
    3390:	d301      	bcc.n	3396 <__divsi3+0xd2>
    3392:	010b      	lsls	r3, r1, #4
    3394:	1ac0      	subs	r0, r0, r3
    3396:	4152      	adcs	r2, r2
    3398:	08c3      	lsrs	r3, r0, #3
    339a:	428b      	cmp	r3, r1
    339c:	d301      	bcc.n	33a2 <__divsi3+0xde>
    339e:	00cb      	lsls	r3, r1, #3
    33a0:	1ac0      	subs	r0, r0, r3
    33a2:	4152      	adcs	r2, r2
    33a4:	0883      	lsrs	r3, r0, #2
    33a6:	428b      	cmp	r3, r1
    33a8:	d301      	bcc.n	33ae <__divsi3+0xea>
    33aa:	008b      	lsls	r3, r1, #2
    33ac:	1ac0      	subs	r0, r0, r3
    33ae:	4152      	adcs	r2, r2
    33b0:	0843      	lsrs	r3, r0, #1
    33b2:	428b      	cmp	r3, r1
    33b4:	d301      	bcc.n	33ba <__divsi3+0xf6>
    33b6:	004b      	lsls	r3, r1, #1
    33b8:	1ac0      	subs	r0, r0, r3
    33ba:	4152      	adcs	r2, r2
    33bc:	1a41      	subs	r1, r0, r1
    33be:	d200      	bcs.n	33c2 <__divsi3+0xfe>
    33c0:	4601      	mov	r1, r0
    33c2:	4152      	adcs	r2, r2
    33c4:	4610      	mov	r0, r2
    33c6:	4770      	bx	lr
    33c8:	e05d      	b.n	3486 <__divsi3+0x1c2>
    33ca:	0fca      	lsrs	r2, r1, #31
    33cc:	d000      	beq.n	33d0 <__divsi3+0x10c>
    33ce:	4249      	negs	r1, r1
    33d0:	1003      	asrs	r3, r0, #32
    33d2:	d300      	bcc.n	33d6 <__divsi3+0x112>
    33d4:	4240      	negs	r0, r0
    33d6:	4053      	eors	r3, r2
    33d8:	2200      	movs	r2, #0
    33da:	469c      	mov	ip, r3
    33dc:	0903      	lsrs	r3, r0, #4
    33de:	428b      	cmp	r3, r1
    33e0:	d32d      	bcc.n	343e <__divsi3+0x17a>
    33e2:	0a03      	lsrs	r3, r0, #8
    33e4:	428b      	cmp	r3, r1
    33e6:	d312      	bcc.n	340e <__divsi3+0x14a>
    33e8:	22fc      	movs	r2, #252	; 0xfc
    33ea:	0189      	lsls	r1, r1, #6
    33ec:	ba12      	rev	r2, r2
    33ee:	0a03      	lsrs	r3, r0, #8
    33f0:	428b      	cmp	r3, r1
    33f2:	d30c      	bcc.n	340e <__divsi3+0x14a>
    33f4:	0189      	lsls	r1, r1, #6
    33f6:	1192      	asrs	r2, r2, #6
    33f8:	428b      	cmp	r3, r1
    33fa:	d308      	bcc.n	340e <__divsi3+0x14a>
    33fc:	0189      	lsls	r1, r1, #6
    33fe:	1192      	asrs	r2, r2, #6
    3400:	428b      	cmp	r3, r1
    3402:	d304      	bcc.n	340e <__divsi3+0x14a>
    3404:	0189      	lsls	r1, r1, #6
    3406:	d03a      	beq.n	347e <__divsi3+0x1ba>
    3408:	1192      	asrs	r2, r2, #6
    340a:	e000      	b.n	340e <__divsi3+0x14a>
    340c:	0989      	lsrs	r1, r1, #6
    340e:	09c3      	lsrs	r3, r0, #7
    3410:	428b      	cmp	r3, r1
    3412:	d301      	bcc.n	3418 <__divsi3+0x154>
    3414:	01cb      	lsls	r3, r1, #7
    3416:	1ac0      	subs	r0, r0, r3
    3418:	4152      	adcs	r2, r2
    341a:	0983      	lsrs	r3, r0, #6
    341c:	428b      	cmp	r3, r1
    341e:	d301      	bcc.n	3424 <__divsi3+0x160>
    3420:	018b      	lsls	r3, r1, #6
    3422:	1ac0      	subs	r0, r0, r3
    3424:	4152      	adcs	r2, r2
    3426:	0943      	lsrs	r3, r0, #5
    3428:	428b      	cmp	r3, r1
    342a:	d301      	bcc.n	3430 <__divsi3+0x16c>
    342c:	014b      	lsls	r3, r1, #5
    342e:	1ac0      	subs	r0, r0, r3
    3430:	4152      	adcs	r2, r2
    3432:	0903      	lsrs	r3, r0, #4
    3434:	428b      	cmp	r3, r1
    3436:	d301      	bcc.n	343c <__divsi3+0x178>
    3438:	010b      	lsls	r3, r1, #4
    343a:	1ac0      	subs	r0, r0, r3
    343c:	4152      	adcs	r2, r2
    343e:	08c3      	lsrs	r3, r0, #3
    3440:	428b      	cmp	r3, r1
    3442:	d301      	bcc.n	3448 <__divsi3+0x184>
    3444:	00cb      	lsls	r3, r1, #3
    3446:	1ac0      	subs	r0, r0, r3
    3448:	4152      	adcs	r2, r2
    344a:	0883      	lsrs	r3, r0, #2
    344c:	428b      	cmp	r3, r1
    344e:	d301      	bcc.n	3454 <__divsi3+0x190>
    3450:	008b      	lsls	r3, r1, #2
    3452:	1ac0      	subs	r0, r0, r3
    3454:	4152      	adcs	r2, r2
    3456:	d2d9      	bcs.n	340c <__divsi3+0x148>
    3458:	0843      	lsrs	r3, r0, #1
    345a:	428b      	cmp	r3, r1
    345c:	d301      	bcc.n	3462 <__divsi3+0x19e>
    345e:	004b      	lsls	r3, r1, #1
    3460:	1ac0      	subs	r0, r0, r3
    3462:	4152      	adcs	r2, r2
    3464:	1a41      	subs	r1, r0, r1
    3466:	d200      	bcs.n	346a <__divsi3+0x1a6>
    3468:	4601      	mov	r1, r0
    346a:	4663      	mov	r3, ip
    346c:	4152      	adcs	r2, r2
    346e:	105b      	asrs	r3, r3, #1
    3470:	4610      	mov	r0, r2
    3472:	d301      	bcc.n	3478 <__divsi3+0x1b4>
    3474:	4240      	negs	r0, r0
    3476:	2b00      	cmp	r3, #0
    3478:	d500      	bpl.n	347c <__divsi3+0x1b8>
    347a:	4249      	negs	r1, r1
    347c:	4770      	bx	lr
    347e:	4663      	mov	r3, ip
    3480:	105b      	asrs	r3, r3, #1
    3482:	d300      	bcc.n	3486 <__divsi3+0x1c2>
    3484:	4240      	negs	r0, r0
    3486:	b501      	push	{r0, lr}
    3488:	2000      	movs	r0, #0
    348a:	f000 f805 	bl	3498 <__aeabi_idiv0>
    348e:	bd02      	pop	{r1, pc}

00003490 <__aeabi_idivmod>:
    3490:	2900      	cmp	r1, #0
    3492:	d0f8      	beq.n	3486 <__divsi3+0x1c2>
    3494:	e716      	b.n	32c4 <__divsi3>
    3496:	4770      	bx	lr

00003498 <__aeabi_idiv0>:
    3498:	4770      	bx	lr
    349a:	46c0      	nop			; (mov r8, r8)

0000349c <__ctzsi2>:
    349c:	4241      	negs	r1, r0
    349e:	4008      	ands	r0, r1
    34a0:	211c      	movs	r1, #28
    34a2:	2301      	movs	r3, #1
    34a4:	041b      	lsls	r3, r3, #16
    34a6:	4298      	cmp	r0, r3
    34a8:	d301      	bcc.n	34ae <__ctzsi2+0x12>
    34aa:	0c00      	lsrs	r0, r0, #16
    34ac:	3910      	subs	r1, #16
    34ae:	0a1b      	lsrs	r3, r3, #8
    34b0:	4298      	cmp	r0, r3
    34b2:	d301      	bcc.n	34b8 <__ctzsi2+0x1c>
    34b4:	0a00      	lsrs	r0, r0, #8
    34b6:	3908      	subs	r1, #8
    34b8:	091b      	lsrs	r3, r3, #4
    34ba:	4298      	cmp	r0, r3
    34bc:	d301      	bcc.n	34c2 <__ctzsi2+0x26>
    34be:	0900      	lsrs	r0, r0, #4
    34c0:	3904      	subs	r1, #4
    34c2:	a202      	add	r2, pc, #8	; (adr r2, 34cc <__ctzsi2+0x30>)
    34c4:	5c10      	ldrb	r0, [r2, r0]
    34c6:	1a40      	subs	r0, r0, r1
    34c8:	4770      	bx	lr
    34ca:	46c0      	nop			; (mov r8, r8)
    34cc:	1d1d1c1b 	.word	0x1d1d1c1b
    34d0:	1e1e1e1e 	.word	0x1e1e1e1e
    34d4:	1f1f1f1f 	.word	0x1f1f1f1f
    34d8:	1f1f1f1f 	.word	0x1f1f1f1f

000034dc <__libc_init_array>:
    34dc:	b570      	push	{r4, r5, r6, lr}
    34de:	2600      	movs	r6, #0
    34e0:	4d0c      	ldr	r5, [pc, #48]	; (3514 <__libc_init_array+0x38>)
    34e2:	4c0d      	ldr	r4, [pc, #52]	; (3518 <__libc_init_array+0x3c>)
    34e4:	1b64      	subs	r4, r4, r5
    34e6:	10a4      	asrs	r4, r4, #2
    34e8:	42a6      	cmp	r6, r4
    34ea:	d109      	bne.n	3500 <__libc_init_array+0x24>
    34ec:	2600      	movs	r6, #0
    34ee:	f000 f851 	bl	3594 <_init>
    34f2:	4d0a      	ldr	r5, [pc, #40]	; (351c <__libc_init_array+0x40>)
    34f4:	4c0a      	ldr	r4, [pc, #40]	; (3520 <__libc_init_array+0x44>)
    34f6:	1b64      	subs	r4, r4, r5
    34f8:	10a4      	asrs	r4, r4, #2
    34fa:	42a6      	cmp	r6, r4
    34fc:	d105      	bne.n	350a <__libc_init_array+0x2e>
    34fe:	bd70      	pop	{r4, r5, r6, pc}
    3500:	00b3      	lsls	r3, r6, #2
    3502:	58eb      	ldr	r3, [r5, r3]
    3504:	4798      	blx	r3
    3506:	3601      	adds	r6, #1
    3508:	e7ee      	b.n	34e8 <__libc_init_array+0xc>
    350a:	00b3      	lsls	r3, r6, #2
    350c:	58eb      	ldr	r3, [r5, r3]
    350e:	4798      	blx	r3
    3510:	3601      	adds	r6, #1
    3512:	e7f2      	b.n	34fa <__libc_init_array+0x1e>
    3514:	000035a0 	.word	0x000035a0
    3518:	000035a0 	.word	0x000035a0
    351c:	000035a0 	.word	0x000035a0
    3520:	000035a4 	.word	0x000035a4

00003524 <memcpy>:
    3524:	2300      	movs	r3, #0
    3526:	b510      	push	{r4, lr}
    3528:	429a      	cmp	r2, r3
    352a:	d100      	bne.n	352e <memcpy+0xa>
    352c:	bd10      	pop	{r4, pc}
    352e:	5ccc      	ldrb	r4, [r1, r3]
    3530:	54c4      	strb	r4, [r0, r3]
    3532:	3301      	adds	r3, #1
    3534:	e7f8      	b.n	3528 <memcpy+0x4>

00003536 <memset>:
    3536:	0003      	movs	r3, r0
    3538:	1882      	adds	r2, r0, r2
    353a:	4293      	cmp	r3, r2
    353c:	d100      	bne.n	3540 <memset+0xa>
    353e:	4770      	bx	lr
    3540:	7019      	strb	r1, [r3, #0]
    3542:	3301      	adds	r3, #1
    3544:	e7f9      	b.n	353a <memset+0x4>
    3546:	0000      	movs	r0, r0
    3548:	00000ea8 	.word	0x00000ea8
    354c:	00000e88 	.word	0x00000e88
    3550:	00000e88 	.word	0x00000e88
    3554:	00000f14 	.word	0x00000f14
    3558:	00000e9a 	.word	0x00000e9a
    355c:	00000eb6 	.word	0x00000eb6
    3560:	00000e8c 	.word	0x00000e8c
    3564:	00000ec4 	.word	0x00000ec4
    3568:	00000f04 	.word	0x00000f04
    356c:	00002240 	.word	0x00002240
    3570:	0000224e 	.word	0x0000224e
    3574:	000022e8 	.word	0x000022e8
    3578:	00002388 	.word	0x00002388
    357c:	000023ec 	.word	0x000023ec

00003580 <_usb_device_irq_bits>:
    3580:	00080004 00800070 01000001 00000200     ....p...........

00003590 <_usb_endpoint_irq_bits>:
    3590:	60100c03                                ...`

00003594 <_init>:
    3594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3596:	46c0      	nop			; (mov r8, r8)
    3598:	bcf8      	pop	{r3, r4, r5, r6, r7}
    359a:	bc08      	pop	{r3}
    359c:	469e      	mov	lr, r3
    359e:	4770      	bx	lr

000035a0 <__init_array_start>:
    35a0:	000000dd 	.word	0x000000dd

000035a4 <_fini>:
    35a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35a6:	46c0      	nop			; (mov r8, r8)
    35a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    35aa:	bc08      	pop	{r3}
    35ac:	469e      	mov	lr, r3
    35ae:	4770      	bx	lr

000035b0 <__fini_array_start>:
    35b0:	000000b5 	.word	0x000000b5
