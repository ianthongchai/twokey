
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f20  00002000  00002000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000fc  20000000  00005f20  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000458  200000fc  0000601c  000100fc  2**2
                  ALLOC
  3 .stack        00002004  20000554  00006474  000100fc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000100fc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00010124  2**0
                  CONTENTS, READONLY
  6 .debug_info   000399c7  00000000  00000000  0001017d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004ff1  00000000  00000000  00049b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00008a7c  00000000  00000000  0004eb35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000848  00000000  00000000  000575b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b98  00000000  00000000  00057df9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001d6db  00000000  00000000  00058991  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00011214  00000000  00000000  0007606c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008d2e6  00000000  00000000  00087280  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000014e4  00000000  00000000  00114568  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00002000 <exception_table>:
    2000:	58 25 00 20 2d 57 00 00 29 57 00 00 29 57 00 00     X%. -W..)W..)W..
	...
    202c:	29 57 00 00 00 00 00 00 00 00 00 00 29 57 00 00     )W..........)W..
    203c:	29 57 00 00 29 57 00 00 29 57 00 00 29 57 00 00     )W..)W..)W..)W..
    204c:	29 57 00 00 09 2d 00 00 29 57 00 00 29 57 00 00     )W...-..)W..)W..
    205c:	39 4e 00 00 29 57 00 00 25 30 00 00 35 30 00 00     9N..)W..%0..50..
    206c:	45 30 00 00 55 30 00 00 00 00 00 00 00 00 00 00     E0..U0..........
    207c:	29 57 00 00 29 57 00 00 29 57 00 00 29 57 00 00     )W..)W..)W..)W..
    208c:	29 57 00 00 29 57 00 00 00 00 00 00 00 00 00 00     )W..)W..........
    209c:	29 57 00 00 29 57 00 00 29 57 00 00 29 57 00 00     )W..)W..)W..)W..
    20ac:	29 57 00 00 00 00 00 00                             )W......

000020b4 <__do_global_dtors_aux>:
    20b4:	b510      	push	{r4, lr}
    20b6:	4c06      	ldr	r4, [pc, #24]	; (20d0 <__do_global_dtors_aux+0x1c>)
    20b8:	7823      	ldrb	r3, [r4, #0]
    20ba:	2b00      	cmp	r3, #0
    20bc:	d107      	bne.n	20ce <__do_global_dtors_aux+0x1a>
    20be:	4b05      	ldr	r3, [pc, #20]	; (20d4 <__do_global_dtors_aux+0x20>)
    20c0:	2b00      	cmp	r3, #0
    20c2:	d002      	beq.n	20ca <__do_global_dtors_aux+0x16>
    20c4:	4804      	ldr	r0, [pc, #16]	; (20d8 <__do_global_dtors_aux+0x24>)
    20c6:	e000      	b.n	20ca <__do_global_dtors_aux+0x16>
    20c8:	bf00      	nop
    20ca:	2301      	movs	r3, #1
    20cc:	7023      	strb	r3, [r4, #0]
    20ce:	bd10      	pop	{r4, pc}
    20d0:	200000fc 	.word	0x200000fc
    20d4:	00000000 	.word	0x00000000
    20d8:	00005f20 	.word	0x00005f20

000020dc <frame_dummy>:
    20dc:	4b08      	ldr	r3, [pc, #32]	; (2100 <frame_dummy+0x24>)
    20de:	b510      	push	{r4, lr}
    20e0:	2b00      	cmp	r3, #0
    20e2:	d003      	beq.n	20ec <frame_dummy+0x10>
    20e4:	4907      	ldr	r1, [pc, #28]	; (2104 <frame_dummy+0x28>)
    20e6:	4808      	ldr	r0, [pc, #32]	; (2108 <frame_dummy+0x2c>)
    20e8:	e000      	b.n	20ec <frame_dummy+0x10>
    20ea:	bf00      	nop
    20ec:	4807      	ldr	r0, [pc, #28]	; (210c <frame_dummy+0x30>)
    20ee:	6803      	ldr	r3, [r0, #0]
    20f0:	2b00      	cmp	r3, #0
    20f2:	d100      	bne.n	20f6 <frame_dummy+0x1a>
    20f4:	bd10      	pop	{r4, pc}
    20f6:	4b06      	ldr	r3, [pc, #24]	; (2110 <frame_dummy+0x34>)
    20f8:	2b00      	cmp	r3, #0
    20fa:	d0fb      	beq.n	20f4 <frame_dummy+0x18>
    20fc:	4798      	blx	r3
    20fe:	e7f9      	b.n	20f4 <frame_dummy+0x18>
    2100:	00000000 	.word	0x00000000
    2104:	20000100 	.word	0x20000100
    2108:	00005f20 	.word	0x00005f20
    210c:	00005f20 	.word	0x00005f20
    2110:	00000000 	.word	0x00000000

00002114 <ui_init>:

#include <asf.h>
#include "ui.h"

void ui_init(void)
{
    2114:	b530      	push	{r4, r5, lr}
    2116:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    2118:	ac01      	add	r4, sp, #4
    211a:	2300      	movs	r3, #0
    211c:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    211e:	2201      	movs	r2, #1
    2120:	7062      	strb	r2, [r4, #1]
	config->powersave  = false;
    2122:	70a3      	strb	r3, [r4, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(BUTTON_0_PIN, &config_port_pin);
    2124:	0021      	movs	r1, r4
    2126:	200e      	movs	r0, #14
    2128:	4d04      	ldr	r5, [pc, #16]	; (213c <ui_init+0x28>)
    212a:	47a8      	blx	r5
	port_pin_set_config(BUTTON_1_PIN, &config_port_pin); 
    212c:	0021      	movs	r1, r4
    212e:	200f      	movs	r0, #15
    2130:	47a8      	blx	r5
	port_pin_set_config(PIN_PA00, &config_port_pin); 
    2132:	0021      	movs	r1, r4
    2134:	2000      	movs	r0, #0
    2136:	47a8      	blx	r5
}
    2138:	b003      	add	sp, #12
    213a:	bd30      	pop	{r4, r5, pc}
    213c:	00002de1 	.word	0x00002de1

00002140 <ui_powerdown>:

void ui_powerdown(void)
{
	//LED_Off(LED_0_PIN);
}
    2140:	4770      	bx	lr

00002142 <ui_wakeup_enable>:

void ui_wakeup_enable(void)
{
	//extint_chan_enable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
	//extint_chan_enable_callback(BUTTON_1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
}
    2142:	4770      	bx	lr

00002144 <ui_wakeup_disable>:

void ui_wakeup_disable(void)
{
	//extint_chan_disable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
	//extint_chan_disable_callback(BUTTON_1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
}
    2144:	4770      	bx	lr

00002146 <ui_wakeup>:

void ui_wakeup(void)
{
	//LED_On(LED_0_PIN);
}
    2146:	4770      	bx	lr

00002148 <ui_process>:

void setLED(uint8_t index, uint8_t brightness, uint8_t r, uint8_t g, uint8_t b);

void ui_process(uint16_t framenumber)
{
    2148:	b510      	push	{r4, lr}
    214a:	b082      	sub	sp, #8
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    214c:	4b26      	ldr	r3, [pc, #152]	; (21e8 <ui_process+0xa0>)
    214e:	6a1b      	ldr	r3, [r3, #32]
    2150:	2280      	movs	r2, #128	; 0x80
    2152:	01d2      	lsls	r2, r2, #7
    2154:	4013      	ands	r3, r2
	bool b_btn_state;
	static bool btn_last_state = false;

	b_btn_state = !port_pin_get_input_level(BUTTON_0_PIN);
    2156:	425a      	negs	r2, r3
    2158:	415a      	adcs	r2, r3
    215a:	b2d2      	uxtb	r2, r2
	if (b_btn_state != btn_last_state) {
    215c:	4923      	ldr	r1, [pc, #140]	; (21ec <ui_process+0xa4>)
    215e:	7809      	ldrb	r1, [r1, #0]
    2160:	4291      	cmp	r1, r2
    2162:	d00e      	beq.n	2182 <ui_process+0x3a>
		btn_last_state = b_btn_state;
    2164:	4921      	ldr	r1, [pc, #132]	; (21ec <ui_process+0xa4>)
    2166:	700a      	strb	r2, [r1, #0]
		
		if(b_btn_state) {
    2168:	2b00      	cmp	r3, #0
    216a:	d126      	bne.n	21ba <ui_process+0x72>
			udi_hid_kbd_down(HID_E);
    216c:	2008      	movs	r0, #8
    216e:	4b20      	ldr	r3, [pc, #128]	; (21f0 <ui_process+0xa8>)
    2170:	4798      	blx	r3
			setLED(0, 8, 1, 135, 255);
    2172:	23ff      	movs	r3, #255	; 0xff
    2174:	9300      	str	r3, [sp, #0]
    2176:	3b78      	subs	r3, #120	; 0x78
    2178:	2201      	movs	r2, #1
    217a:	2108      	movs	r1, #8
    217c:	2000      	movs	r0, #0
    217e:	4c1d      	ldr	r4, [pc, #116]	; (21f4 <ui_process+0xac>)
    2180:	47a0      	blx	r4
    2182:	4b19      	ldr	r3, [pc, #100]	; (21e8 <ui_process+0xa0>)
    2184:	6a1b      	ldr	r3, [r3, #32]
    2186:	2280      	movs	r2, #128	; 0x80
    2188:	0212      	lsls	r2, r2, #8
    218a:	4013      	ands	r3, r2
	}
	
	bool b_btn_state2;
	static bool btn_last_state2 = false;

	b_btn_state2 = !port_pin_get_input_level(BUTTON_1_PIN);
    218c:	425a      	negs	r2, r3
    218e:	415a      	adcs	r2, r3
    2190:	b2d2      	uxtb	r2, r2
	if (b_btn_state2 != btn_last_state2) {
    2192:	4919      	ldr	r1, [pc, #100]	; (21f8 <ui_process+0xb0>)
    2194:	7809      	ldrb	r1, [r1, #0]
    2196:	4291      	cmp	r1, r2
    2198:	d00d      	beq.n	21b6 <ui_process+0x6e>
		btn_last_state2 = b_btn_state2;
    219a:	4917      	ldr	r1, [pc, #92]	; (21f8 <ui_process+0xb0>)
    219c:	700a      	strb	r2, [r1, #0]
		
		if(b_btn_state2) {
    219e:	2b00      	cmp	r3, #0
    21a0:	d016      	beq.n	21d0 <ui_process+0x88>
			udi_hid_kbd_down(HID_R);
			setLED(1, 8, 1, 135, 255);			
		} else {
			udi_hid_kbd_up(HID_R);
    21a2:	2015      	movs	r0, #21
    21a4:	4b15      	ldr	r3, [pc, #84]	; (21fc <ui_process+0xb4>)
    21a6:	4798      	blx	r3
			setLED(1, 0, 0, 0, 0);			
    21a8:	2300      	movs	r3, #0
    21aa:	9300      	str	r3, [sp, #0]
    21ac:	2200      	movs	r2, #0
    21ae:	2100      	movs	r1, #0
    21b0:	2001      	movs	r0, #1
    21b2:	4c10      	ldr	r4, [pc, #64]	; (21f4 <ui_process+0xac>)
    21b4:	47a0      	blx	r4
		}
	}
}
    21b6:	b002      	add	sp, #8
    21b8:	bd10      	pop	{r4, pc}
			udi_hid_kbd_up(HID_E);
    21ba:	2008      	movs	r0, #8
    21bc:	4b0f      	ldr	r3, [pc, #60]	; (21fc <ui_process+0xb4>)
    21be:	4798      	blx	r3
			setLED(0, 0, 0, 0, 0);
    21c0:	2300      	movs	r3, #0
    21c2:	9300      	str	r3, [sp, #0]
    21c4:	2200      	movs	r2, #0
    21c6:	2100      	movs	r1, #0
    21c8:	2000      	movs	r0, #0
    21ca:	4c0a      	ldr	r4, [pc, #40]	; (21f4 <ui_process+0xac>)
    21cc:	47a0      	blx	r4
    21ce:	e7d8      	b.n	2182 <ui_process+0x3a>
			udi_hid_kbd_down(HID_R);
    21d0:	2015      	movs	r0, #21
    21d2:	4b07      	ldr	r3, [pc, #28]	; (21f0 <ui_process+0xa8>)
    21d4:	4798      	blx	r3
			setLED(1, 8, 1, 135, 255);			
    21d6:	23ff      	movs	r3, #255	; 0xff
    21d8:	9300      	str	r3, [sp, #0]
    21da:	3b78      	subs	r3, #120	; 0x78
    21dc:	2201      	movs	r2, #1
    21de:	2108      	movs	r1, #8
    21e0:	2001      	movs	r0, #1
    21e2:	4c04      	ldr	r4, [pc, #16]	; (21f4 <ui_process+0xac>)
    21e4:	47a0      	blx	r4
    21e6:	e7e6      	b.n	21b6 <ui_process+0x6e>
    21e8:	41004400 	.word	0x41004400
    21ec:	20000118 	.word	0x20000118
    21f0:	000023f9 	.word	0x000023f9
    21f4:	000058ed 	.word	0x000058ed
    21f8:	20000119 	.word	0x20000119
    21fc:	00002339 	.word	0x00002339

00002200 <ui_kbd_led>:

void ui_kbd_led(uint8_t value)
{
	//UNUSED(value);
}
    2200:	4770      	bx	lr

00002202 <udi_hid_kbd_getsetting>:


uint8_t udi_hid_kbd_getsetting(void)
{
	return 0;
}
    2202:	2000      	movs	r0, #0
    2204:	4770      	bx	lr
	...

00002208 <udi_hid_kbd_setreport>:


static bool udi_hid_kbd_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8))
    2208:	4b0b      	ldr	r3, [pc, #44]	; (2238 <udi_hid_kbd_setreport+0x30>)
    220a:	885b      	ldrh	r3, [r3, #2]
    220c:	0a1a      	lsrs	r2, r3, #8
		udd_g_ctrlreq.payload = &udi_hid_kbd_report_set;
		udd_g_ctrlreq.callback = udi_hid_kbd_setreport_valid;
		udd_g_ctrlreq.payload_size = 1;
		return true;
	}
	return false;
    220e:	2000      	movs	r0, #0
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8))
    2210:	2a02      	cmp	r2, #2
    2212:	d000      	beq.n	2216 <udi_hid_kbd_setreport+0xe>
}
    2214:	4770      	bx	lr
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
    2216:	32fd      	adds	r2, #253	; 0xfd
    2218:	421a      	tst	r2, r3
    221a:	d1fb      	bne.n	2214 <udi_hid_kbd_setreport+0xc>
			&& (1 == udd_g_ctrlreq.req.wLength)) {
    221c:	4b06      	ldr	r3, [pc, #24]	; (2238 <udi_hid_kbd_setreport+0x30>)
    221e:	88db      	ldrh	r3, [r3, #6]
    2220:	2b01      	cmp	r3, #1
    2222:	d1f7      	bne.n	2214 <udi_hid_kbd_setreport+0xc>
		udd_g_ctrlreq.payload = &udi_hid_kbd_report_set;
    2224:	4b04      	ldr	r3, [pc, #16]	; (2238 <udi_hid_kbd_setreport+0x30>)
    2226:	4a05      	ldr	r2, [pc, #20]	; (223c <udi_hid_kbd_setreport+0x34>)
    2228:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.callback = udi_hid_kbd_setreport_valid;
    222a:	4a05      	ldr	r2, [pc, #20]	; (2240 <udi_hid_kbd_setreport+0x38>)
    222c:	611a      	str	r2, [r3, #16]
		udd_g_ctrlreq.payload_size = 1;
    222e:	2201      	movs	r2, #1
    2230:	819a      	strh	r2, [r3, #12]
		return true;
    2232:	3001      	adds	r0, #1
    2234:	e7ee      	b.n	2214 <udi_hid_kbd_setreport+0xc>
    2236:	46c0      	nop			; (mov r8, r8)
    2238:	200003f4 	.word	0x200003f4
    223c:	2000012c 	.word	0x2000012c
    2240:	000022b5 	.word	0x000022b5

00002244 <udi_hid_kbd_enable>:
{
    2244:	b510      	push	{r4, lr}
	udi_hid_kbd_rate = 0;
    2246:	2400      	movs	r4, #0
    2248:	4b07      	ldr	r3, [pc, #28]	; (2268 <udi_hid_kbd_enable+0x24>)
    224a:	701c      	strb	r4, [r3, #0]
	udi_hid_kbd_protocol = 0;
    224c:	4b07      	ldr	r3, [pc, #28]	; (226c <udi_hid_kbd_enable+0x28>)
    224e:	701c      	strb	r4, [r3, #0]
	udi_hid_kbd_b_report_trans_ongoing = false;
    2250:	4b07      	ldr	r3, [pc, #28]	; (2270 <udi_hid_kbd_enable+0x2c>)
    2252:	701c      	strb	r4, [r3, #0]
	memset(udi_hid_kbd_report, 0, UDI_HID_KBD_REPORT_SIZE);
    2254:	2208      	movs	r2, #8
    2256:	2100      	movs	r1, #0
    2258:	4806      	ldr	r0, [pc, #24]	; (2274 <udi_hid_kbd_enable+0x30>)
    225a:	4b07      	ldr	r3, [pc, #28]	; (2278 <udi_hid_kbd_enable+0x34>)
    225c:	4798      	blx	r3
	udi_hid_kbd_b_report_valid = false;
    225e:	4b07      	ldr	r3, [pc, #28]	; (227c <udi_hid_kbd_enable+0x38>)
    2260:	701c      	strb	r4, [r3, #0]
	return UDI_HID_KBD_ENABLE_EXT();
    2262:	4b07      	ldr	r3, [pc, #28]	; (2280 <udi_hid_kbd_enable+0x3c>)
    2264:	4798      	blx	r3
}
    2266:	bd10      	pop	{r4, pc}
    2268:	20000120 	.word	0x20000120
    226c:	2000011c 	.word	0x2000011c
    2270:	2000011a 	.word	0x2000011a
    2274:	20000124 	.word	0x20000124
    2278:	00005e6f 	.word	0x00005e6f
    227c:	2000011b 	.word	0x2000011b
    2280:	00005acd 	.word	0x00005acd

00002284 <udi_hid_kbd_disable>:
{
    2284:	b510      	push	{r4, lr}
	UDI_HID_KBD_DISABLE_EXT();
    2286:	4b01      	ldr	r3, [pc, #4]	; (228c <udi_hid_kbd_disable+0x8>)
    2288:	4798      	blx	r3
}
    228a:	bd10      	pop	{r4, pc}
    228c:	00005add 	.word	0x00005add

00002290 <udi_hid_kbd_setup>:
{
    2290:	b510      	push	{r4, lr}
	return udi_hid_setup(&udi_hid_kbd_rate,
    2292:	4b03      	ldr	r3, [pc, #12]	; (22a0 <udi_hid_kbd_setup+0x10>)
    2294:	4a03      	ldr	r2, [pc, #12]	; (22a4 <udi_hid_kbd_setup+0x14>)
    2296:	4904      	ldr	r1, [pc, #16]	; (22a8 <udi_hid_kbd_setup+0x18>)
    2298:	4804      	ldr	r0, [pc, #16]	; (22ac <udi_hid_kbd_setup+0x1c>)
    229a:	4c05      	ldr	r4, [pc, #20]	; (22b0 <udi_hid_kbd_setup+0x20>)
    229c:	47a0      	blx	r4
}
    229e:	bd10      	pop	{r4, pc}
    22a0:	00002209 	.word	0x00002209
    22a4:	20000014 	.word	0x20000014
    22a8:	2000011c 	.word	0x2000011c
    22ac:	20000120 	.word	0x20000120
    22b0:	0000249d 	.word	0x0000249d

000022b4 <udi_hid_kbd_setreport_valid>:
		udi_hid_kbd_send_report();
	}
}

static void udi_hid_kbd_setreport_valid(void)
{
    22b4:	b510      	push	{r4, lr}
	UDI_HID_KBD_CHANGE_LED(udi_hid_kbd_report_set);
    22b6:	4b02      	ldr	r3, [pc, #8]	; (22c0 <udi_hid_kbd_setreport_valid+0xc>)
    22b8:	7818      	ldrb	r0, [r3, #0]
    22ba:	4b02      	ldr	r3, [pc, #8]	; (22c4 <udi_hid_kbd_setreport_valid+0x10>)
    22bc:	4798      	blx	r3
}
    22be:	bd10      	pop	{r4, pc}
    22c0:	2000012c 	.word	0x2000012c
    22c4:	00002201 	.word	0x00002201

000022c8 <udi_hid_kbd_send_report>:
{
    22c8:	b510      	push	{r4, lr}
    22ca:	b082      	sub	sp, #8
	if (udi_hid_kbd_b_report_trans_ongoing)
    22cc:	4b0b      	ldr	r3, [pc, #44]	; (22fc <udi_hid_kbd_send_report+0x34>)
    22ce:	781b      	ldrb	r3, [r3, #0]
		return false;
    22d0:	2000      	movs	r0, #0
	if (udi_hid_kbd_b_report_trans_ongoing)
    22d2:	2b00      	cmp	r3, #0
    22d4:	d001      	beq.n	22da <udi_hid_kbd_send_report+0x12>
}
    22d6:	b002      	add	sp, #8
    22d8:	bd10      	pop	{r4, pc}
	memcpy(udi_hid_kbd_report_trans, udi_hid_kbd_report,
    22da:	4a09      	ldr	r2, [pc, #36]	; (2300 <udi_hid_kbd_send_report+0x38>)
    22dc:	4b09      	ldr	r3, [pc, #36]	; (2304 <udi_hid_kbd_send_report+0x3c>)
    22de:	0011      	movs	r1, r2
    22e0:	cb11      	ldmia	r3!, {r0, r4}
    22e2:	c111      	stmia	r1!, {r0, r4}
	udi_hid_kbd_b_report_valid = false;
    22e4:	2100      	movs	r1, #0
    22e6:	4b08      	ldr	r3, [pc, #32]	; (2308 <udi_hid_kbd_send_report+0x40>)
    22e8:	7019      	strb	r1, [r3, #0]
			udd_ep_run(	UDI_HID_KBD_EP_IN,
    22ea:	4b08      	ldr	r3, [pc, #32]	; (230c <udi_hid_kbd_send_report+0x44>)
    22ec:	9300      	str	r3, [sp, #0]
    22ee:	2308      	movs	r3, #8
    22f0:	2081      	movs	r0, #129	; 0x81
    22f2:	4c07      	ldr	r4, [pc, #28]	; (2310 <udi_hid_kbd_send_report+0x48>)
    22f4:	47a0      	blx	r4
	udi_hid_kbd_b_report_trans_ongoing =
    22f6:	4a01      	ldr	r2, [pc, #4]	; (22fc <udi_hid_kbd_send_report+0x34>)
    22f8:	7010      	strb	r0, [r2, #0]
	return udi_hid_kbd_b_report_trans_ongoing;
    22fa:	e7ec      	b.n	22d6 <udi_hid_kbd_send_report+0xe>
    22fc:	2000011a 	.word	0x2000011a
    2300:	20000130 	.word	0x20000130
    2304:	20000124 	.word	0x20000124
    2308:	2000011b 	.word	0x2000011b
    230c:	00002315 	.word	0x00002315
    2310:	0000447d 	.word	0x0000447d

00002314 <udi_hid_kbd_report_sent>:
{
    2314:	b510      	push	{r4, lr}
	udi_hid_kbd_b_report_trans_ongoing = false;
    2316:	2200      	movs	r2, #0
    2318:	4b04      	ldr	r3, [pc, #16]	; (232c <udi_hid_kbd_report_sent+0x18>)
    231a:	701a      	strb	r2, [r3, #0]
	if (udi_hid_kbd_b_report_valid) {
    231c:	4b04      	ldr	r3, [pc, #16]	; (2330 <udi_hid_kbd_report_sent+0x1c>)
    231e:	781b      	ldrb	r3, [r3, #0]
    2320:	2b00      	cmp	r3, #0
    2322:	d100      	bne.n	2326 <udi_hid_kbd_report_sent+0x12>
}
    2324:	bd10      	pop	{r4, pc}
		udi_hid_kbd_send_report();
    2326:	4b03      	ldr	r3, [pc, #12]	; (2334 <udi_hid_kbd_report_sent+0x20>)
    2328:	4798      	blx	r3
}
    232a:	e7fb      	b.n	2324 <udi_hid_kbd_report_sent+0x10>
    232c:	2000011a 	.word	0x2000011a
    2330:	2000011b 	.word	0x2000011b
    2334:	000022c9 	.word	0x000022c9

00002338 <udi_hid_kbd_up>:
{
    2338:	b530      	push	{r4, r5, lr}
    233a:	b083      	sub	sp, #12
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    233c:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2340:	425a      	negs	r2, r3
    2342:	4153      	adcs	r3, r2
    2344:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    2346:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    2348:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    234c:	2200      	movs	r2, #0
    234e:	4b26      	ldr	r3, [pc, #152]	; (23e8 <udi_hid_kbd_up+0xb0>)
    2350:	701a      	strb	r2, [r3, #0]
	return flags;
    2352:	9c01      	ldr	r4, [sp, #4]
		if (0 == udi_hid_kbd_report[i]) {
    2354:	4b25      	ldr	r3, [pc, #148]	; (23ec <udi_hid_kbd_up+0xb4>)
    2356:	789b      	ldrb	r3, [r3, #2]
    2358:	2b00      	cmp	r3, #0
    235a:	d016      	beq.n	238a <udi_hid_kbd_up+0x52>
		if (key_id == udi_hid_kbd_report[i])
    235c:	4298      	cmp	r0, r3
    235e:	d041      	beq.n	23e4 <udi_hid_kbd_up+0xac>
    2360:	4b22      	ldr	r3, [pc, #136]	; (23ec <udi_hid_kbd_up+0xb4>)
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    2362:	3203      	adds	r2, #3
		if (0 == udi_hid_kbd_report[i]) {
    2364:	78d9      	ldrb	r1, [r3, #3]
    2366:	2900      	cmp	r1, #0
    2368:	d00f      	beq.n	238a <udi_hid_kbd_up+0x52>
		if (key_id == udi_hid_kbd_report[i])
    236a:	4281      	cmp	r1, r0
    236c:	d016      	beq.n	239c <udi_hid_kbd_up+0x64>
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    236e:	3201      	adds	r2, #1
    2370:	b2d2      	uxtb	r2, r2
    2372:	3301      	adds	r3, #1
    2374:	2a08      	cmp	r2, #8
    2376:	d1f5      	bne.n	2364 <udi_hid_kbd_up+0x2c>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2378:	2c00      	cmp	r4, #0
    237a:	d030      	beq.n	23de <udi_hid_kbd_up+0xa6>
		cpu_irq_enable();
    237c:	2201      	movs	r2, #1
    237e:	4b1a      	ldr	r3, [pc, #104]	; (23e8 <udi_hid_kbd_up+0xb0>)
    2380:	701a      	strb	r2, [r3, #0]
    2382:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2386:	b662      	cpsie	i
    2388:	e029      	b.n	23de <udi_hid_kbd_up+0xa6>
	if (cpu_irq_is_enabled_flags(flags))
    238a:	2c00      	cmp	r4, #0
    238c:	d027      	beq.n	23de <udi_hid_kbd_up+0xa6>
		cpu_irq_enable();
    238e:	2201      	movs	r2, #1
    2390:	4b15      	ldr	r3, [pc, #84]	; (23e8 <udi_hid_kbd_up+0xb0>)
    2392:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    2394:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2398:	b662      	cpsie	i
    239a:	e020      	b.n	23de <udi_hid_kbd_up+0xa6>
	if (UDI_HID_KBD_REPORT_SIZE == i) {
    239c:	2a08      	cmp	r2, #8
    239e:	d0eb      	beq.n	2378 <udi_hid_kbd_up+0x40>
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    23a0:	2a06      	cmp	r2, #6
    23a2:	d80c      	bhi.n	23be <udi_hid_kbd_up+0x86>
    23a4:	4911      	ldr	r1, [pc, #68]	; (23ec <udi_hid_kbd_up+0xb4>)
    23a6:	188b      	adds	r3, r1, r2
    23a8:	1c55      	adds	r5, r2, #1
    23aa:	2006      	movs	r0, #6
    23ac:	1a82      	subs	r2, r0, r2
    23ae:	b2d2      	uxtb	r2, r2
    23b0:	18aa      	adds	r2, r5, r2
    23b2:	188a      	adds	r2, r1, r2
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
    23b4:	7859      	ldrb	r1, [r3, #1]
    23b6:	7019      	strb	r1, [r3, #0]
    23b8:	3301      	adds	r3, #1
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    23ba:	4293      	cmp	r3, r2
    23bc:	d1fa      	bne.n	23b4 <udi_hid_kbd_up+0x7c>
	udi_hid_kbd_report[UDI_HID_KBD_REPORT_SIZE - 1] = 0x00;
    23be:	2200      	movs	r2, #0
    23c0:	4b0a      	ldr	r3, [pc, #40]	; (23ec <udi_hid_kbd_up+0xb4>)
    23c2:	71da      	strb	r2, [r3, #7]
	udi_hid_kbd_b_report_valid = true;
    23c4:	3201      	adds	r2, #1
    23c6:	4b0a      	ldr	r3, [pc, #40]	; (23f0 <udi_hid_kbd_up+0xb8>)
    23c8:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_send_report();
    23ca:	4b0a      	ldr	r3, [pc, #40]	; (23f4 <udi_hid_kbd_up+0xbc>)
    23cc:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    23ce:	2c00      	cmp	r4, #0
    23d0:	d005      	beq.n	23de <udi_hid_kbd_up+0xa6>
		cpu_irq_enable();
    23d2:	2201      	movs	r2, #1
    23d4:	4b04      	ldr	r3, [pc, #16]	; (23e8 <udi_hid_kbd_up+0xb0>)
    23d6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    23d8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    23dc:	b662      	cpsie	i
}
    23de:	2001      	movs	r0, #1
    23e0:	b003      	add	sp, #12
    23e2:	bd30      	pop	{r4, r5, pc}
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    23e4:	2202      	movs	r2, #2
    23e6:	e7dd      	b.n	23a4 <udi_hid_kbd_up+0x6c>
    23e8:	200000da 	.word	0x200000da
    23ec:	20000124 	.word	0x20000124
    23f0:	2000011b 	.word	0x2000011b
    23f4:	000022c9 	.word	0x000022c9

000023f8 <udi_hid_kbd_down>:
{
    23f8:	b510      	push	{r4, lr}
    23fa:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    23fc:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2400:	425a      	negs	r2, r3
    2402:	4153      	adcs	r3, r2
    2404:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    2406:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2408:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    240c:	2200      	movs	r2, #0
    240e:	4b1f      	ldr	r3, [pc, #124]	; (248c <udi_hid_kbd_down+0x94>)
    2410:	701a      	strb	r2, [r3, #0]
	return flags;
    2412:	9c01      	ldr	r4, [sp, #4]
		if (0 == udi_hid_kbd_report[i])
    2414:	4b1e      	ldr	r3, [pc, #120]	; (2490 <udi_hid_kbd_down+0x98>)
    2416:	789b      	ldrb	r3, [r3, #2]
    2418:	2b00      	cmp	r3, #0
    241a:	d035      	beq.n	2488 <udi_hid_kbd_down+0x90>
		if (key_id == udi_hid_kbd_report[i]) {
    241c:	4298      	cmp	r0, r3
    241e:	d015      	beq.n	244c <udi_hid_kbd_down+0x54>
    2420:	4a1b      	ldr	r2, [pc, #108]	; (2490 <udi_hid_kbd_down+0x98>)
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    2422:	2303      	movs	r3, #3
		if (0 == udi_hid_kbd_report[i])
    2424:	78d1      	ldrb	r1, [r2, #3]
    2426:	2900      	cmp	r1, #0
    2428:	d01a      	beq.n	2460 <udi_hid_kbd_down+0x68>
		if (key_id == udi_hid_kbd_report[i]) {
    242a:	4281      	cmp	r1, r0
    242c:	d00e      	beq.n	244c <udi_hid_kbd_down+0x54>
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    242e:	3301      	adds	r3, #1
    2430:	b2db      	uxtb	r3, r3
    2432:	3201      	adds	r2, #1
    2434:	2b08      	cmp	r3, #8
    2436:	d1f5      	bne.n	2424 <udi_hid_kbd_down+0x2c>
		return false;
    2438:	2000      	movs	r0, #0
	if (cpu_irq_is_enabled_flags(flags))
    243a:	2c00      	cmp	r4, #0
    243c:	d022      	beq.n	2484 <udi_hid_kbd_down+0x8c>
		cpu_irq_enable();
    243e:	2201      	movs	r2, #1
    2440:	4b12      	ldr	r3, [pc, #72]	; (248c <udi_hid_kbd_down+0x94>)
    2442:	701a      	strb	r2, [r3, #0]
    2444:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2448:	b662      	cpsie	i
    244a:	e01b      	b.n	2484 <udi_hid_kbd_down+0x8c>
			return true;
    244c:	2001      	movs	r0, #1
	if (cpu_irq_is_enabled_flags(flags))
    244e:	2c00      	cmp	r4, #0
    2450:	d018      	beq.n	2484 <udi_hid_kbd_down+0x8c>
		cpu_irq_enable();
    2452:	2201      	movs	r2, #1
    2454:	4b0d      	ldr	r3, [pc, #52]	; (248c <udi_hid_kbd_down+0x94>)
    2456:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    2458:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    245c:	b662      	cpsie	i
    245e:	e011      	b.n	2484 <udi_hid_kbd_down+0x8c>
	if (UDI_HID_KBD_REPORT_SIZE == i) {
    2460:	2b08      	cmp	r3, #8
    2462:	d0e9      	beq.n	2438 <udi_hid_kbd_down+0x40>
	udi_hid_kbd_report[i] = key_id;
    2464:	4a0a      	ldr	r2, [pc, #40]	; (2490 <udi_hid_kbd_down+0x98>)
    2466:	54d0      	strb	r0, [r2, r3]
	udi_hid_kbd_b_report_valid = true;
    2468:	2201      	movs	r2, #1
    246a:	4b0a      	ldr	r3, [pc, #40]	; (2494 <udi_hid_kbd_down+0x9c>)
    246c:	701a      	strb	r2, [r3, #0]
	udi_hid_kbd_send_report();
    246e:	4b0a      	ldr	r3, [pc, #40]	; (2498 <udi_hid_kbd_down+0xa0>)
    2470:	4798      	blx	r3
	return true;
    2472:	2001      	movs	r0, #1
	if (cpu_irq_is_enabled_flags(flags))
    2474:	2c00      	cmp	r4, #0
    2476:	d005      	beq.n	2484 <udi_hid_kbd_down+0x8c>
		cpu_irq_enable();
    2478:	2201      	movs	r2, #1
    247a:	4b04      	ldr	r3, [pc, #16]	; (248c <udi_hid_kbd_down+0x94>)
    247c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    247e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2482:	b662      	cpsie	i
}
    2484:	b002      	add	sp, #8
    2486:	bd10      	pop	{r4, pc}
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    2488:	2302      	movs	r3, #2
    248a:	e7eb      	b.n	2464 <udi_hid_kbd_down+0x6c>
    248c:	200000da 	.word	0x200000da
    2490:	20000124 	.word	0x20000124
    2494:	2000011b 	.word	0x2000011b
    2498:	000022c9 	.word	0x000022c9

0000249c <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
    249c:	b570      	push	{r4, r5, r6, lr}
    249e:	0005      	movs	r5, r0
    24a0:	0014      	movs	r4, r2
	if (Udd_setup_is_in()) {
    24a2:	4a3b      	ldr	r2, [pc, #236]	; (2590 <udi_hid_setup+0xf4>)
    24a4:	7812      	ldrb	r2, [r2, #0]
    24a6:	b250      	sxtb	r0, r2
    24a8:	2800      	cmp	r0, #0
    24aa:	db05      	blt.n	24b8 <udi_hid_setup+0x1c>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    24ac:	2460      	movs	r4, #96	; 0x60
    24ae:	4022      	ands	r2, r4
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
    24b0:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    24b2:	2a20      	cmp	r2, #32
    24b4:	d04f      	beq.n	2556 <udi_hid_setup+0xba>
}
    24b6:	bd70      	pop	{r4, r5, r6, pc}
    24b8:	2060      	movs	r0, #96	; 0x60
    24ba:	4002      	ands	r2, r0
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    24bc:	d103      	bne.n	24c6 <udi_hid_setup+0x2a>
			switch (udd_g_ctrlreq.req.bRequest) {
    24be:	4834      	ldr	r0, [pc, #208]	; (2590 <udi_hid_setup+0xf4>)
    24c0:	7840      	ldrb	r0, [r0, #1]
    24c2:	2806      	cmp	r0, #6
    24c4:	d00d      	beq.n	24e2 <udi_hid_setup+0x46>
	return false;	// Request not supported
    24c6:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    24c8:	2a20      	cmp	r2, #32
    24ca:	d1f4      	bne.n	24b6 <udi_hid_setup+0x1a>
			switch (udd_g_ctrlreq.req.bRequest) {
    24cc:	4a30      	ldr	r2, [pc, #192]	; (2590 <udi_hid_setup+0xf4>)
    24ce:	7852      	ldrb	r2, [r2, #1]
    24d0:	2a02      	cmp	r2, #2
    24d2:	d034      	beq.n	253e <udi_hid_setup+0xa2>
    24d4:	2a03      	cmp	r2, #3
    24d6:	d038      	beq.n	254a <udi_hid_setup+0xae>
	return false;	// Request not supported
    24d8:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
    24da:	2a01      	cmp	r2, #1
    24dc:	d1eb      	bne.n	24b6 <udi_hid_setup+0x1a>
				return setup_report();
    24de:	4798      	blx	r3
    24e0:	e7e9      	b.n	24b6 <udi_hid_setup+0x1a>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    24e2:	4b2c      	ldr	r3, [pc, #176]	; (2594 <udi_hid_setup+0xf8>)
    24e4:	4798      	blx	r3
    24e6:	0003      	movs	r3, r0
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    24e8:	7a82      	ldrb	r2, [r0, #10]
		return false;
    24ea:	2000      	movs	r0, #0
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    24ec:	2a21      	cmp	r2, #33	; 0x21
    24ee:	d1e2      	bne.n	24b6 <udi_hid_setup+0x1a>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    24f0:	4a27      	ldr	r2, [pc, #156]	; (2590 <udi_hid_setup+0xf4>)
    24f2:	8852      	ldrh	r2, [r2, #2]
    24f4:	0a12      	lsrs	r2, r2, #8
    24f6:	2a21      	cmp	r2, #33	; 0x21
    24f8:	d013      	beq.n	2522 <udi_hid_setup+0x86>
				ptr_hid_desc->bLength);
		return true;
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    24fa:	7bd9      	ldrb	r1, [r3, #15]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
    24fc:	2000      	movs	r0, #0
	if (ptr_hid_desc->bRDescriptorType ==
    24fe:	4291      	cmp	r1, r2
    2500:	d1d9      	bne.n	24b6 <udi_hid_setup+0x1a>
		udd_g_ctrlreq.payload = report_desc;
    2502:	4a23      	ldr	r2, [pc, #140]	; (2590 <udi_hid_setup+0xf4>)
    2504:	6094      	str	r4, [r2, #8]
				min(udd_g_ctrlreq.req.wLength,
    2506:	7c19      	ldrb	r1, [r3, #16]
    2508:	3309      	adds	r3, #9
    250a:	7a1b      	ldrb	r3, [r3, #8]
    250c:	021b      	lsls	r3, r3, #8
    250e:	430b      	orrs	r3, r1
		udd_g_ctrlreq.payload_size =
    2510:	88d0      	ldrh	r0, [r2, #6]
    2512:	1c19      	adds	r1, r3, #0
    2514:	b29b      	uxth	r3, r3
    2516:	4283      	cmp	r3, r0
    2518:	d900      	bls.n	251c <udi_hid_setup+0x80>
    251a:	1c01      	adds	r1, r0, #0
    251c:	8191      	strh	r1, [r2, #12]
		return true;
    251e:	2001      	movs	r0, #1
    2520:	e7c9      	b.n	24b6 <udi_hid_setup+0x1a>
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    2522:	4a1b      	ldr	r2, [pc, #108]	; (2590 <udi_hid_setup+0xf4>)
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
    2524:	0019      	movs	r1, r3
    2526:	3109      	adds	r1, #9
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    2528:	6091      	str	r1, [r2, #8]
				min(udd_g_ctrlreq.req.wLength,
    252a:	7a5b      	ldrb	r3, [r3, #9]
    252c:	88d0      	ldrh	r0, [r2, #6]
    252e:	1c19      	adds	r1, r3, #0
    2530:	b29b      	uxth	r3, r3
    2532:	4283      	cmp	r3, r0
    2534:	d900      	bls.n	2538 <udi_hid_setup+0x9c>
    2536:	1c01      	adds	r1, r0, #0
		udd_g_ctrlreq.payload_size =
    2538:	8191      	strh	r1, [r2, #12]
		return true;
    253a:	2001      	movs	r0, #1
    253c:	e7bb      	b.n	24b6 <udi_hid_setup+0x1a>
				udd_g_ctrlreq.payload = rate;
    253e:	4b14      	ldr	r3, [pc, #80]	; (2590 <udi_hid_setup+0xf4>)
    2540:	609d      	str	r5, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    2542:	2201      	movs	r2, #1
    2544:	819a      	strh	r2, [r3, #12]
				return true;
    2546:	2001      	movs	r0, #1
    2548:	e7b5      	b.n	24b6 <udi_hid_setup+0x1a>
				udd_g_ctrlreq.payload = protocol;
    254a:	4b11      	ldr	r3, [pc, #68]	; (2590 <udi_hid_setup+0xf4>)
    254c:	6099      	str	r1, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    254e:	2201      	movs	r2, #1
    2550:	819a      	strh	r2, [r3, #12]
				return true;
    2552:	2001      	movs	r0, #1
    2554:	e7af      	b.n	24b6 <udi_hid_setup+0x1a>
			switch (udd_g_ctrlreq.req.bRequest) {
    2556:	4a0e      	ldr	r2, [pc, #56]	; (2590 <udi_hid_setup+0xf4>)
    2558:	7852      	ldrb	r2, [r2, #1]
    255a:	2a0a      	cmp	r2, #10
    255c:	d006      	beq.n	256c <udi_hid_setup+0xd0>
    255e:	2a0b      	cmp	r2, #11
    2560:	d00a      	beq.n	2578 <udi_hid_setup+0xdc>
	return false;	// Request not supported
    2562:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
    2564:	2a09      	cmp	r2, #9
    2566:	d1a6      	bne.n	24b6 <udi_hid_setup+0x1a>
				return setup_report();
    2568:	4798      	blx	r3
    256a:	e7a4      	b.n	24b6 <udi_hid_setup+0x1a>
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    256c:	4b08      	ldr	r3, [pc, #32]	; (2590 <udi_hid_setup+0xf4>)
    256e:	885b      	ldrh	r3, [r3, #2]
    2570:	0a1b      	lsrs	r3, r3, #8
    2572:	702b      	strb	r3, [r5, #0]
				return true;
    2574:	2001      	movs	r0, #1
    2576:	e79e      	b.n	24b6 <udi_hid_setup+0x1a>
				if (0 != udd_g_ctrlreq.req.wLength)
    2578:	4b05      	ldr	r3, [pc, #20]	; (2590 <udi_hid_setup+0xf4>)
    257a:	88db      	ldrh	r3, [r3, #6]
					return false;
    257c:	2000      	movs	r0, #0
				if (0 != udd_g_ctrlreq.req.wLength)
    257e:	2b00      	cmp	r3, #0
    2580:	d000      	beq.n	2584 <udi_hid_setup+0xe8>
    2582:	e798      	b.n	24b6 <udi_hid_setup+0x1a>
				*protocol = udd_g_ctrlreq.req.wValue;
    2584:	4b02      	ldr	r3, [pc, #8]	; (2590 <udi_hid_setup+0xf4>)
    2586:	885b      	ldrh	r3, [r3, #2]
    2588:	700b      	strb	r3, [r1, #0]
				return true;
    258a:	3001      	adds	r0, #1
    258c:	e793      	b.n	24b6 <udi_hid_setup+0x1a>
    258e:	46c0      	nop			; (mov r8, r8)
    2590:	200003f4 	.word	0x200003f4
    2594:	00002735 	.word	0x00002735

00002598 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
    2598:	b510      	push	{r4, lr}
			udc_ptr_conf->desc +
    259a:	4b11      	ldr	r3, [pc, #68]	; (25e0 <udc_next_desc_in_iface+0x48>)
    259c:	681b      	ldr	r3, [r3, #0]
    259e:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    25a0:	7894      	ldrb	r4, [r2, #2]
    25a2:	78d3      	ldrb	r3, [r2, #3]
    25a4:	021b      	lsls	r3, r3, #8
    25a6:	4323      	orrs	r3, r4
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    25a8:	18d2      	adds	r2, r2, r3
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
    25aa:	7803      	ldrb	r3, [r0, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    25ac:	18c0      	adds	r0, r0, r3
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    25ae:	4290      	cmp	r0, r2
    25b0:	d210      	bcs.n	25d4 <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    25b2:	7843      	ldrb	r3, [r0, #1]
    25b4:	2b04      	cmp	r3, #4
    25b6:	d00f      	beq.n	25d8 <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    25b8:	428b      	cmp	r3, r1
    25ba:	d00a      	beq.n	25d2 <udc_next_desc_in_iface+0x3a>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
    25bc:	7803      	ldrb	r3, [r0, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    25be:	18c0      	adds	r0, r0, r3
	while (ptr_eof_desc > desc) {
    25c0:	4290      	cmp	r0, r2
    25c2:	d205      	bcs.n	25d0 <udc_next_desc_in_iface+0x38>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    25c4:	7843      	ldrb	r3, [r0, #1]
    25c6:	2b04      	cmp	r3, #4
    25c8:	d008      	beq.n	25dc <udc_next_desc_in_iface+0x44>
		if (desc_id == desc->bDescriptorType) {
    25ca:	428b      	cmp	r3, r1
    25cc:	d1f6      	bne.n	25bc <udc_next_desc_in_iface+0x24>
    25ce:	e000      	b.n	25d2 <udc_next_desc_in_iface+0x3a>
	}
	return NULL; // No specific descriptor found
    25d0:	2000      	movs	r0, #0
}
    25d2:	bd10      	pop	{r4, pc}
	return NULL; // No specific descriptor found
    25d4:	2000      	movs	r0, #0
    25d6:	e7fc      	b.n	25d2 <udc_next_desc_in_iface+0x3a>
    25d8:	2000      	movs	r0, #0
    25da:	e7fa      	b.n	25d2 <udc_next_desc_in_iface+0x3a>
    25dc:	2000      	movs	r0, #0
    25de:	e7f8      	b.n	25d2 <udc_next_desc_in_iface+0x3a>
    25e0:	20000144 	.word	0x20000144

000025e4 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    25e4:	b510      	push	{r4, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    25e6:	4b03      	ldr	r3, [pc, #12]	; (25f4 <udc_valid_address+0x10>)
    25e8:	885b      	ldrh	r3, [r3, #2]
    25ea:	207f      	movs	r0, #127	; 0x7f
    25ec:	4018      	ands	r0, r3
    25ee:	4b02      	ldr	r3, [pc, #8]	; (25f8 <udc_valid_address+0x14>)
    25f0:	4798      	blx	r3
}
    25f2:	bd10      	pop	{r4, pc}
    25f4:	200003f4 	.word	0x200003f4
    25f8:	00004655 	.word	0x00004655

000025fc <udc_update_iface_desc>:
{
    25fc:	b570      	push	{r4, r5, r6, lr}
	if (0 == udc_num_configuration) {
    25fe:	4b19      	ldr	r3, [pc, #100]	; (2664 <udc_update_iface_desc+0x68>)
    2600:	781b      	ldrb	r3, [r3, #0]
		return false;
    2602:	2200      	movs	r2, #0
	if (0 == udc_num_configuration) {
    2604:	2b00      	cmp	r3, #0
    2606:	d029      	beq.n	265c <udc_update_iface_desc+0x60>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    2608:	4b17      	ldr	r3, [pc, #92]	; (2668 <udc_update_iface_desc+0x6c>)
    260a:	681b      	ldr	r3, [r3, #0]
    260c:	681b      	ldr	r3, [r3, #0]
    260e:	791c      	ldrb	r4, [r3, #4]
    2610:	4284      	cmp	r4, r0
    2612:	d923      	bls.n	265c <udc_update_iface_desc+0x60>
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    2614:	4a15      	ldr	r2, [pc, #84]	; (266c <udc_update_iface_desc+0x70>)
    2616:	6013      	str	r3, [r2, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    2618:	789a      	ldrb	r2, [r3, #2]
    261a:	78dc      	ldrb	r4, [r3, #3]
    261c:	0224      	lsls	r4, r4, #8
    261e:	4314      	orrs	r4, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    2620:	191c      	adds	r4, r3, r4
	while (ptr_end_desc >
    2622:	42a3      	cmp	r3, r4
    2624:	d21c      	bcs.n	2660 <udc_update_iface_desc+0x64>
    2626:	2500      	movs	r5, #0
    2628:	2601      	movs	r6, #1
    262a:	e007      	b.n	263c <udc_update_iface_desc+0x40>
    262c:	4a0f      	ldr	r2, [pc, #60]	; (266c <udc_update_iface_desc+0x70>)
    262e:	6013      	str	r3, [r2, #0]
    2630:	e00f      	b.n	2652 <udc_update_iface_desc+0x56>
				udc_ptr_iface->bLength);
    2632:	781a      	ldrb	r2, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    2634:	189b      	adds	r3, r3, r2
    2636:	0035      	movs	r5, r6
	while (ptr_end_desc >
    2638:	42a3      	cmp	r3, r4
    263a:	d20c      	bcs.n	2656 <udc_update_iface_desc+0x5a>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    263c:	785a      	ldrb	r2, [r3, #1]
    263e:	2a04      	cmp	r2, #4
    2640:	d1f7      	bne.n	2632 <udc_update_iface_desc+0x36>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    2642:	789a      	ldrb	r2, [r3, #2]
    2644:	4282      	cmp	r2, r0
    2646:	d1f4      	bne.n	2632 <udc_update_iface_desc+0x36>
    2648:	78da      	ldrb	r2, [r3, #3]
    264a:	428a      	cmp	r2, r1
    264c:	d1f1      	bne.n	2632 <udc_update_iface_desc+0x36>
    264e:	2d00      	cmp	r5, #0
    2650:	d1ec      	bne.n	262c <udc_update_iface_desc+0x30>
				return true; // Interface found
    2652:	2201      	movs	r2, #1
    2654:	e002      	b.n	265c <udc_update_iface_desc+0x60>
    2656:	4a05      	ldr	r2, [pc, #20]	; (266c <udc_update_iface_desc+0x70>)
    2658:	6013      	str	r3, [r2, #0]
	return false; // Interface not found
    265a:	2200      	movs	r2, #0
}
    265c:	0010      	movs	r0, r2
    265e:	bd70      	pop	{r4, r5, r6, pc}
	return false; // Interface not found
    2660:	2200      	movs	r2, #0
    2662:	e7fb      	b.n	265c <udc_update_iface_desc+0x60>
    2664:	20000140 	.word	0x20000140
    2668:	20000144 	.word	0x20000144
    266c:	20000148 	.word	0x20000148

00002670 <udc_iface_disable>:
{
    2670:	b5f0      	push	{r4, r5, r6, r7, lr}
    2672:	46c6      	mov	lr, r8
    2674:	b500      	push	{lr}
    2676:	0004      	movs	r4, r0
	if (!udc_update_iface_desc(iface_num, 0)) {
    2678:	2100      	movs	r1, #0
    267a:	4b13      	ldr	r3, [pc, #76]	; (26c8 <udc_iface_disable+0x58>)
    267c:	4798      	blx	r3
    267e:	1e05      	subs	r5, r0, #0
    2680:	d103      	bne.n	268a <udc_iface_disable+0x1a>
}
    2682:	0028      	movs	r0, r5
    2684:	bc04      	pop	{r2}
    2686:	4690      	mov	r8, r2
    2688:	bdf0      	pop	{r4, r5, r6, r7, pc}
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    268a:	4b10      	ldr	r3, [pc, #64]	; (26cc <udc_iface_disable+0x5c>)
    268c:	681b      	ldr	r3, [r3, #0]
    268e:	685b      	ldr	r3, [r3, #4]
    2690:	00a2      	lsls	r2, r4, #2
    2692:	58d3      	ldr	r3, [r2, r3]
    2694:	4698      	mov	r8, r3
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    2696:	68db      	ldr	r3, [r3, #12]
    2698:	4798      	blx	r3
    269a:	0001      	movs	r1, r0
    269c:	0020      	movs	r0, r4
    269e:	4b0a      	ldr	r3, [pc, #40]	; (26c8 <udc_iface_disable+0x58>)
    26a0:	4798      	blx	r3
    26a2:	1e05      	subs	r5, r0, #0
    26a4:	d0ed      	beq.n	2682 <udc_iface_disable+0x12>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    26a6:	4b0a      	ldr	r3, [pc, #40]	; (26d0 <udc_iface_disable+0x60>)
    26a8:	681c      	ldr	r4, [r3, #0]
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    26aa:	4e0a      	ldr	r6, [pc, #40]	; (26d4 <udc_iface_disable+0x64>)
			udd_ep_free(ep_desc->bEndpointAddress);
    26ac:	4f0a      	ldr	r7, [pc, #40]	; (26d8 <udc_iface_disable+0x68>)
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    26ae:	2105      	movs	r1, #5
    26b0:	0020      	movs	r0, r4
    26b2:	47b0      	blx	r6
    26b4:	1e04      	subs	r4, r0, #0
			if (NULL == ep_desc) {
    26b6:	d002      	beq.n	26be <udc_iface_disable+0x4e>
			udd_ep_free(ep_desc->bEndpointAddress);
    26b8:	7880      	ldrb	r0, [r0, #2]
    26ba:	47b8      	blx	r7
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    26bc:	e7f7      	b.n	26ae <udc_iface_disable+0x3e>
	udi_api->disable();
    26be:	4643      	mov	r3, r8
    26c0:	685b      	ldr	r3, [r3, #4]
    26c2:	4798      	blx	r3
	return true;
    26c4:	e7dd      	b.n	2682 <udc_iface_disable+0x12>
    26c6:	46c0      	nop			; (mov r8, r8)
    26c8:	000025fd 	.word	0x000025fd
    26cc:	20000144 	.word	0x20000144
    26d0:	20000148 	.word	0x20000148
    26d4:	00002599 	.word	0x00002599
    26d8:	00004195 	.word	0x00004195

000026dc <udc_iface_enable>:
{
    26dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26de:	0005      	movs	r5, r0
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    26e0:	4b0f      	ldr	r3, [pc, #60]	; (2720 <udc_iface_enable+0x44>)
    26e2:	4798      	blx	r3
    26e4:	2800      	cmp	r0, #0
    26e6:	d019      	beq.n	271c <udc_iface_enable+0x40>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    26e8:	4b0e      	ldr	r3, [pc, #56]	; (2724 <udc_iface_enable+0x48>)
    26ea:	681c      	ldr	r4, [r3, #0]
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    26ec:	4e0e      	ldr	r6, [pc, #56]	; (2728 <udc_iface_enable+0x4c>)
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    26ee:	4f0f      	ldr	r7, [pc, #60]	; (272c <udc_iface_enable+0x50>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    26f0:	2105      	movs	r1, #5
    26f2:	0020      	movs	r0, r4
    26f4:	47b0      	blx	r6
    26f6:	1e04      	subs	r4, r0, #0
		if (NULL == ep_desc)
    26f8:	d009      	beq.n	270e <udc_iface_enable+0x32>
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    26fa:	7903      	ldrb	r3, [r0, #4]
    26fc:	7942      	ldrb	r2, [r0, #5]
    26fe:	0212      	lsls	r2, r2, #8
    2700:	431a      	orrs	r2, r3
    2702:	78c1      	ldrb	r1, [r0, #3]
    2704:	7880      	ldrb	r0, [r0, #2]
    2706:	47b8      	blx	r7
    2708:	2800      	cmp	r0, #0
    270a:	d1f1      	bne.n	26f0 <udc_iface_enable+0x14>
    270c:	e006      	b.n	271c <udc_iface_enable+0x40>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    270e:	4b08      	ldr	r3, [pc, #32]	; (2730 <udc_iface_enable+0x54>)
    2710:	681b      	ldr	r3, [r3, #0]
    2712:	685b      	ldr	r3, [r3, #4]
    2714:	00ad      	lsls	r5, r5, #2
    2716:	58eb      	ldr	r3, [r5, r3]
    2718:	681b      	ldr	r3, [r3, #0]
    271a:	4798      	blx	r3
}
    271c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    271e:	46c0      	nop			; (mov r8, r8)
    2720:	000025fd 	.word	0x000025fd
    2724:	20000148 	.word	0x20000148
    2728:	00002599 	.word	0x00002599
    272c:	000041ed 	.word	0x000041ed
    2730:	20000144 	.word	0x20000144

00002734 <udc_get_interface_desc>:
	return udc_ptr_iface;
    2734:	4b01      	ldr	r3, [pc, #4]	; (273c <udc_get_interface_desc+0x8>)
    2736:	6818      	ldr	r0, [r3, #0]
}
    2738:	4770      	bx	lr
    273a:	46c0      	nop			; (mov r8, r8)
    273c:	20000148 	.word	0x20000148

00002740 <udc_start>:
{
    2740:	b510      	push	{r4, lr}
	udd_enable();
    2742:	4b01      	ldr	r3, [pc, #4]	; (2748 <udc_start+0x8>)
    2744:	4798      	blx	r3
}
    2746:	bd10      	pop	{r4, pc}
    2748:	00004705 	.word	0x00004705

0000274c <udc_reset>:
{
    274c:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    274e:	4b12      	ldr	r3, [pc, #72]	; (2798 <udc_reset+0x4c>)
    2750:	781b      	ldrb	r3, [r3, #0]
    2752:	2b00      	cmp	r3, #0
    2754:	d011      	beq.n	277a <udc_reset+0x2e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2756:	4b11      	ldr	r3, [pc, #68]	; (279c <udc_reset+0x50>)
    2758:	681b      	ldr	r3, [r3, #0]
    275a:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    275c:	791b      	ldrb	r3, [r3, #4]
    275e:	2b00      	cmp	r3, #0
    2760:	d00b      	beq.n	277a <udc_reset+0x2e>
    2762:	2400      	movs	r4, #0
			udc_iface_disable(iface_num);
    2764:	4e0e      	ldr	r6, [pc, #56]	; (27a0 <udc_reset+0x54>)
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2766:	4d0d      	ldr	r5, [pc, #52]	; (279c <udc_reset+0x50>)
			udc_iface_disable(iface_num);
    2768:	0020      	movs	r0, r4
    276a:	47b0      	blx	r6
				iface_num++) {
    276c:	3401      	adds	r4, #1
    276e:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2770:	682b      	ldr	r3, [r5, #0]
    2772:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    2774:	791b      	ldrb	r3, [r3, #4]
    2776:	42a3      	cmp	r3, r4
    2778:	d8f6      	bhi.n	2768 <udc_reset+0x1c>
	udc_num_configuration = 0;
    277a:	2200      	movs	r2, #0
    277c:	4b06      	ldr	r3, [pc, #24]	; (2798 <udc_reset+0x4c>)
    277e:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
    2780:	4b08      	ldr	r3, [pc, #32]	; (27a4 <udc_reset+0x58>)
    2782:	881b      	ldrh	r3, [r3, #0]
    2784:	079b      	lsls	r3, r3, #30
    2786:	d403      	bmi.n	2790 <udc_reset+0x44>
	udc_device_status =
    2788:	2201      	movs	r2, #1
    278a:	4b06      	ldr	r3, [pc, #24]	; (27a4 <udc_reset+0x58>)
    278c:	801a      	strh	r2, [r3, #0]
}
    278e:	bd70      	pop	{r4, r5, r6, pc}
		UDC_REMOTEWAKEUP_DISABLE();
    2790:	4b05      	ldr	r3, [pc, #20]	; (27a8 <udc_reset+0x5c>)
    2792:	4798      	blx	r3
    2794:	e7f8      	b.n	2788 <udc_reset+0x3c>
    2796:	46c0      	nop			; (mov r8, r8)
    2798:	20000140 	.word	0x20000140
    279c:	20000144 	.word	0x20000144
    27a0:	00002671 	.word	0x00002671
    27a4:	20000138 	.word	0x20000138
    27a8:	00005ac1 	.word	0x00005ac1

000027ac <udc_sof_notify>:
{
    27ac:	b570      	push	{r4, r5, r6, lr}
	if (udc_num_configuration) {
    27ae:	4b0e      	ldr	r3, [pc, #56]	; (27e8 <udc_sof_notify+0x3c>)
    27b0:	781b      	ldrb	r3, [r3, #0]
    27b2:	2b00      	cmp	r3, #0
    27b4:	d017      	beq.n	27e6 <udc_sof_notify+0x3a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    27b6:	4b0d      	ldr	r3, [pc, #52]	; (27ec <udc_sof_notify+0x40>)
    27b8:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
    27ba:	681a      	ldr	r2, [r3, #0]
    27bc:	7912      	ldrb	r2, [r2, #4]
    27be:	2a00      	cmp	r2, #0
    27c0:	d011      	beq.n	27e6 <udc_sof_notify+0x3a>
    27c2:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    27c4:	4d09      	ldr	r5, [pc, #36]	; (27ec <udc_sof_notify+0x40>)
    27c6:	e006      	b.n	27d6 <udc_sof_notify+0x2a>
				iface_num++) {
    27c8:	3401      	adds	r4, #1
    27ca:	b2e4      	uxtb	r4, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    27cc:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
    27ce:	681a      	ldr	r2, [r3, #0]
    27d0:	7912      	ldrb	r2, [r2, #4]
    27d2:	42a2      	cmp	r2, r4
    27d4:	d907      	bls.n	27e6 <udc_sof_notify+0x3a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    27d6:	685b      	ldr	r3, [r3, #4]
    27d8:	00a2      	lsls	r2, r4, #2
    27da:	58d3      	ldr	r3, [r2, r3]
    27dc:	691b      	ldr	r3, [r3, #16]
    27de:	2b00      	cmp	r3, #0
    27e0:	d0f2      	beq.n	27c8 <udc_sof_notify+0x1c>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    27e2:	4798      	blx	r3
    27e4:	e7f0      	b.n	27c8 <udc_sof_notify+0x1c>
}
    27e6:	bd70      	pop	{r4, r5, r6, pc}
    27e8:	20000140 	.word	0x20000140
    27ec:	20000144 	.word	0x20000144

000027f0 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    27f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    27f2:	4bb6      	ldr	r3, [pc, #728]	; (2acc <udc_process_setup+0x2dc>)
    27f4:	2200      	movs	r2, #0
    27f6:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    27f8:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    27fa:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    27fc:	781b      	ldrb	r3, [r3, #0]
    27fe:	b25a      	sxtb	r2, r3
    2800:	2a00      	cmp	r2, #0
    2802:	db13      	blt.n	282c <udc_process_setup+0x3c>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    2804:	2260      	movs	r2, #96	; 0x60
    2806:	421a      	tst	r2, r3
    2808:	d100      	bne.n	280c <udc_process_setup+0x1c>
    280a:	e0d7      	b.n	29bc <udc_process_setup+0x1cc>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    280c:	4baf      	ldr	r3, [pc, #700]	; (2acc <udc_process_setup+0x2dc>)
    280e:	781a      	ldrb	r2, [r3, #0]
    2810:	231f      	movs	r3, #31
    2812:	4013      	ands	r3, r2
    2814:	2b01      	cmp	r3, #1
    2816:	d100      	bne.n	281a <udc_process_setup+0x2a>
    2818:	e18e      	b.n	2b38 <udc_process_setup+0x348>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    281a:	4bac      	ldr	r3, [pc, #688]	; (2acc <udc_process_setup+0x2dc>)
    281c:	781a      	ldrb	r2, [r3, #0]
    281e:	231f      	movs	r3, #31
    2820:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    2822:	2000      	movs	r0, #0
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    2824:	2b02      	cmp	r3, #2
    2826:	d100      	bne.n	282a <udc_process_setup+0x3a>
    2828:	e1df      	b.n	2bea <udc_process_setup+0x3fa>
#endif
}
    282a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
    282c:	4aa7      	ldr	r2, [pc, #668]	; (2acc <udc_process_setup+0x2dc>)
    282e:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
    2830:	2000      	movs	r0, #0
		if (udd_g_ctrlreq.req.wLength == 0) {
    2832:	2a00      	cmp	r2, #0
    2834:	d0f9      	beq.n	282a <udc_process_setup+0x3a>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    2836:	2160      	movs	r1, #96	; 0x60
    2838:	4219      	tst	r1, r3
    283a:	d1e7      	bne.n	280c <udc_process_setup+0x1c>
    283c:	211f      	movs	r1, #31
    283e:	400b      	ands	r3, r1
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    2840:	d108      	bne.n	2854 <udc_process_setup+0x64>
			switch (udd_g_ctrlreq.req.bRequest) {
    2842:	49a2      	ldr	r1, [pc, #648]	; (2acc <udc_process_setup+0x2dc>)
    2844:	7849      	ldrb	r1, [r1, #1]
    2846:	2906      	cmp	r1, #6
    2848:	d023      	beq.n	2892 <udc_process_setup+0xa2>
    284a:	2908      	cmp	r1, #8
    284c:	d100      	bne.n	2850 <udc_process_setup+0x60>
    284e:	e084      	b.n	295a <udc_process_setup+0x16a>
    2850:	2900      	cmp	r1, #0
    2852:	d017      	beq.n	2884 <udc_process_setup+0x94>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    2854:	2b01      	cmp	r3, #1
    2856:	d100      	bne.n	285a <udc_process_setup+0x6a>
    2858:	e087      	b.n	296a <udc_process_setup+0x17a>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    285a:	2b02      	cmp	r3, #2
    285c:	d1d6      	bne.n	280c <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    285e:	4b9b      	ldr	r3, [pc, #620]	; (2acc <udc_process_setup+0x2dc>)
    2860:	785b      	ldrb	r3, [r3, #1]
	return false;
    2862:	2000      	movs	r0, #0
			switch (udd_g_ctrlreq.req.bRequest) {
    2864:	2b00      	cmp	r3, #0
    2866:	d000      	beq.n	286a <udc_process_setup+0x7a>
    2868:	e12b      	b.n	2ac2 <udc_process_setup+0x2d2>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    286a:	2a02      	cmp	r2, #2
    286c:	d1d5      	bne.n	281a <udc_process_setup+0x2a>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    286e:	4b97      	ldr	r3, [pc, #604]	; (2acc <udc_process_setup+0x2dc>)
    2870:	7918      	ldrb	r0, [r3, #4]
    2872:	4b97      	ldr	r3, [pc, #604]	; (2ad0 <udc_process_setup+0x2e0>)
    2874:	4798      	blx	r3
    2876:	4b97      	ldr	r3, [pc, #604]	; (2ad4 <udc_process_setup+0x2e4>)
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
    2878:	8018      	strh	r0, [r3, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    287a:	2102      	movs	r1, #2
    287c:	0018      	movs	r0, r3
    287e:	4b96      	ldr	r3, [pc, #600]	; (2ad8 <udc_process_setup+0x2e8>)
    2880:	4798      	blx	r3
    2882:	e0fd      	b.n	2a80 <udc_process_setup+0x290>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    2884:	2a02      	cmp	r2, #2
    2886:	d1c8      	bne.n	281a <udc_process_setup+0x2a>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    2888:	3102      	adds	r1, #2
    288a:	4894      	ldr	r0, [pc, #592]	; (2adc <udc_process_setup+0x2ec>)
    288c:	4b92      	ldr	r3, [pc, #584]	; (2ad8 <udc_process_setup+0x2e8>)
    288e:	4798      	blx	r3
    2890:	e0f6      	b.n	2a80 <udc_process_setup+0x290>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    2892:	4b8e      	ldr	r3, [pc, #568]	; (2acc <udc_process_setup+0x2dc>)
    2894:	885a      	ldrh	r2, [r3, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    2896:	0a13      	lsrs	r3, r2, #8
    2898:	2b02      	cmp	r3, #2
    289a:	d023      	beq.n	28e4 <udc_process_setup+0xf4>
    289c:	b2d9      	uxtb	r1, r3
    289e:	2902      	cmp	r1, #2
    28a0:	d90f      	bls.n	28c2 <udc_process_setup+0xd2>
    28a2:	2b03      	cmp	r3, #3
    28a4:	d034      	beq.n	2910 <udc_process_setup+0x120>
    28a6:	2b0f      	cmp	r3, #15
    28a8:	d000      	beq.n	28ac <udc_process_setup+0xbc>
    28aa:	e19c      	b.n	2be6 <udc_process_setup+0x3f6>
		if (udc_config.conf_bos == NULL) {
    28ac:	4b8c      	ldr	r3, [pc, #560]	; (2ae0 <udc_process_setup+0x2f0>)
    28ae:	6898      	ldr	r0, [r3, #8]
    28b0:	2800      	cmp	r0, #0
    28b2:	d0b2      	beq.n	281a <udc_process_setup+0x2a>
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    28b4:	7883      	ldrb	r3, [r0, #2]
    28b6:	78c1      	ldrb	r1, [r0, #3]
    28b8:	0209      	lsls	r1, r1, #8
    28ba:	4319      	orrs	r1, r3
    28bc:	4b86      	ldr	r3, [pc, #536]	; (2ad8 <udc_process_setup+0x2e8>)
    28be:	4798      	blx	r3
    28c0:	e007      	b.n	28d2 <udc_process_setup+0xe2>
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    28c2:	2b01      	cmp	r3, #1
    28c4:	d000      	beq.n	28c8 <udc_process_setup+0xd8>
    28c6:	e18e      	b.n	2be6 <udc_process_setup+0x3f6>
				(uint8_t *) udc_config.confdev_lsfs,
    28c8:	4b85      	ldr	r3, [pc, #532]	; (2ae0 <udc_process_setup+0x2f0>)
    28ca:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
    28cc:	7801      	ldrb	r1, [r0, #0]
    28ce:	4b82      	ldr	r3, [pc, #520]	; (2ad8 <udc_process_setup+0x2e8>)
    28d0:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    28d2:	4b7e      	ldr	r3, [pc, #504]	; (2acc <udc_process_setup+0x2dc>)
    28d4:	88da      	ldrh	r2, [r3, #6]
    28d6:	899b      	ldrh	r3, [r3, #12]
    28d8:	4293      	cmp	r3, r2
    28da:	d800      	bhi.n	28de <udc_process_setup+0xee>
    28dc:	e0d0      	b.n	2a80 <udc_process_setup+0x290>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    28de:	4b7b      	ldr	r3, [pc, #492]	; (2acc <udc_process_setup+0x2dc>)
    28e0:	819a      	strh	r2, [r3, #12]
    28e2:	e0cd      	b.n	2a80 <udc_process_setup+0x290>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    28e4:	b2d2      	uxtb	r2, r2
			if (conf_num >= udc_config.confdev_lsfs->
    28e6:	4b7e      	ldr	r3, [pc, #504]	; (2ae0 <udc_process_setup+0x2f0>)
    28e8:	681b      	ldr	r3, [r3, #0]
    28ea:	7c5b      	ldrb	r3, [r3, #17]
    28ec:	4293      	cmp	r3, r2
    28ee:	d800      	bhi.n	28f2 <udc_process_setup+0x102>
    28f0:	e793      	b.n	281a <udc_process_setup+0x2a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    28f2:	4b7b      	ldr	r3, [pc, #492]	; (2ae0 <udc_process_setup+0x2f0>)
    28f4:	685b      	ldr	r3, [r3, #4]
    28f6:	00d2      	lsls	r2, r2, #3
    28f8:	58d0      	ldr	r0, [r2, r3]
			udd_set_setup_payload(
    28fa:	7883      	ldrb	r3, [r0, #2]
    28fc:	78c1      	ldrb	r1, [r0, #3]
    28fe:	0209      	lsls	r1, r1, #8
    2900:	4319      	orrs	r1, r3
    2902:	4b75      	ldr	r3, [pc, #468]	; (2ad8 <udc_process_setup+0x2e8>)
    2904:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    2906:	4b71      	ldr	r3, [pc, #452]	; (2acc <udc_process_setup+0x2dc>)
    2908:	689b      	ldr	r3, [r3, #8]
    290a:	2202      	movs	r2, #2
    290c:	705a      	strb	r2, [r3, #1]
    290e:	e7e0      	b.n	28d2 <udc_process_setup+0xe2>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    2910:	23ff      	movs	r3, #255	; 0xff
    2912:	401a      	ands	r2, r3
    2914:	2a01      	cmp	r2, #1
    2916:	d01d      	beq.n	2954 <udc_process_setup+0x164>
    2918:	2a00      	cmp	r2, #0
    291a:	d016      	beq.n	294a <udc_process_setup+0x15a>
    291c:	2a02      	cmp	r2, #2
    291e:	d000      	beq.n	2922 <udc_process_setup+0x132>
    2920:	e774      	b.n	280c <udc_process_setup+0x1c>
		str = udc_string_product_name;
    2922:	4c70      	ldr	r4, [pc, #448]	; (2ae4 <udc_process_setup+0x2f4>)
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    2924:	210d      	movs	r1, #13
    2926:	4a70      	ldr	r2, [pc, #448]	; (2ae8 <udc_process_setup+0x2f8>)
    2928:	3202      	adds	r2, #2
    292a:	2300      	movs	r3, #0
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    292c:	5ce0      	ldrb	r0, [r4, r3]
    292e:	8010      	strh	r0, [r2, #0]
    2930:	3301      	adds	r3, #1
    2932:	3202      	adds	r2, #2
		for(i = 0; i < str_length; i++) {
    2934:	b2d8      	uxtb	r0, r3
    2936:	4288      	cmp	r0, r1
    2938:	d3f8      	bcc.n	292c <udc_process_setup+0x13c>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    293a:	0049      	lsls	r1, r1, #1
    293c:	3102      	adds	r1, #2
    293e:	486a      	ldr	r0, [pc, #424]	; (2ae8 <udc_process_setup+0x2f8>)
    2940:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
    2942:	b289      	uxth	r1, r1
    2944:	4b64      	ldr	r3, [pc, #400]	; (2ad8 <udc_process_setup+0x2e8>)
    2946:	4798      	blx	r3
    2948:	e7c3      	b.n	28d2 <udc_process_setup+0xe2>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    294a:	2104      	movs	r1, #4
    294c:	4867      	ldr	r0, [pc, #412]	; (2aec <udc_process_setup+0x2fc>)
    294e:	4b62      	ldr	r3, [pc, #392]	; (2ad8 <udc_process_setup+0x2e8>)
    2950:	4798      	blx	r3
    2952:	e7be      	b.n	28d2 <udc_process_setup+0xe2>
		str = udc_string_manufacturer_name;
    2954:	4c66      	ldr	r4, [pc, #408]	; (2af0 <udc_process_setup+0x300>)
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    2956:	2108      	movs	r1, #8
    2958:	e7e5      	b.n	2926 <udc_process_setup+0x136>
	if (udd_g_ctrlreq.req.wLength != 1) {
    295a:	2a01      	cmp	r2, #1
    295c:	d000      	beq.n	2960 <udc_process_setup+0x170>
    295e:	e75c      	b.n	281a <udc_process_setup+0x2a>
	udd_set_setup_payload(&udc_num_configuration,1);
    2960:	2101      	movs	r1, #1
    2962:	4864      	ldr	r0, [pc, #400]	; (2af4 <udc_process_setup+0x304>)
    2964:	4b5c      	ldr	r3, [pc, #368]	; (2ad8 <udc_process_setup+0x2e8>)
    2966:	4798      	blx	r3
    2968:	e08a      	b.n	2a80 <udc_process_setup+0x290>
			switch (udd_g_ctrlreq.req.bRequest) {
    296a:	4958      	ldr	r1, [pc, #352]	; (2acc <udc_process_setup+0x2dc>)
    296c:	7849      	ldrb	r1, [r1, #1]
    296e:	290a      	cmp	r1, #10
    2970:	d000      	beq.n	2974 <udc_process_setup+0x184>
    2972:	e772      	b.n	285a <udc_process_setup+0x6a>
	if (udd_g_ctrlreq.req.wLength != 1) {
    2974:	2a01      	cmp	r2, #1
    2976:	d000      	beq.n	297a <udc_process_setup+0x18a>
    2978:	e0de      	b.n	2b38 <udc_process_setup+0x348>
	if (!udc_num_configuration) {
    297a:	4b5e      	ldr	r3, [pc, #376]	; (2af4 <udc_process_setup+0x304>)
    297c:	781b      	ldrb	r3, [r3, #0]
    297e:	2b00      	cmp	r3, #0
    2980:	d100      	bne.n	2984 <udc_process_setup+0x194>
    2982:	e0d9      	b.n	2b38 <udc_process_setup+0x348>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    2984:	4b51      	ldr	r3, [pc, #324]	; (2acc <udc_process_setup+0x2dc>)
    2986:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    2988:	4b5b      	ldr	r3, [pc, #364]	; (2af8 <udc_process_setup+0x308>)
    298a:	681d      	ldr	r5, [r3, #0]
    298c:	682b      	ldr	r3, [r5, #0]
    298e:	791b      	ldrb	r3, [r3, #4]
    2990:	42a3      	cmp	r3, r4
    2992:	d800      	bhi.n	2996 <udc_process_setup+0x1a6>
    2994:	e0d0      	b.n	2b38 <udc_process_setup+0x348>
	if (!udc_update_iface_desc(iface_num, 0)) {
    2996:	2100      	movs	r1, #0
    2998:	0020      	movs	r0, r4
    299a:	4b58      	ldr	r3, [pc, #352]	; (2afc <udc_process_setup+0x30c>)
    299c:	4798      	blx	r3
    299e:	2800      	cmp	r0, #0
    29a0:	d100      	bne.n	29a4 <udc_process_setup+0x1b4>
    29a2:	e733      	b.n	280c <udc_process_setup+0x1c>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    29a4:	686b      	ldr	r3, [r5, #4]
    29a6:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
    29a8:	58e3      	ldr	r3, [r4, r3]
    29aa:	68db      	ldr	r3, [r3, #12]
    29ac:	4798      	blx	r3
    29ae:	4b54      	ldr	r3, [pc, #336]	; (2b00 <udc_process_setup+0x310>)
    29b0:	7018      	strb	r0, [r3, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
    29b2:	2101      	movs	r1, #1
    29b4:	0018      	movs	r0, r3
    29b6:	4b48      	ldr	r3, [pc, #288]	; (2ad8 <udc_process_setup+0x2e8>)
    29b8:	4798      	blx	r3
    29ba:	e061      	b.n	2a80 <udc_process_setup+0x290>
    29bc:	221f      	movs	r2, #31
    29be:	4013      	ands	r3, r2
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    29c0:	d172      	bne.n	2aa8 <udc_process_setup+0x2b8>
			switch (udd_g_ctrlreq.req.bRequest) {
    29c2:	4a42      	ldr	r2, [pc, #264]	; (2acc <udc_process_setup+0x2dc>)
    29c4:	7852      	ldrb	r2, [r2, #1]
    29c6:	2a03      	cmp	r2, #3
    29c8:	d05c      	beq.n	2a84 <udc_process_setup+0x294>
    29ca:	b2d1      	uxtb	r1, r2
    29cc:	2903      	cmp	r1, #3
    29ce:	d93b      	bls.n	2a48 <udc_process_setup+0x258>
    29d0:	2a05      	cmp	r2, #5
    29d2:	d04d      	beq.n	2a70 <udc_process_setup+0x280>
    29d4:	2a09      	cmp	r2, #9
    29d6:	d167      	bne.n	2aa8 <udc_process_setup+0x2b8>
	if (udd_g_ctrlreq.req.wLength) {
    29d8:	4b3c      	ldr	r3, [pc, #240]	; (2acc <udc_process_setup+0x2dc>)
    29da:	88db      	ldrh	r3, [r3, #6]
    29dc:	2b00      	cmp	r3, #0
    29de:	d000      	beq.n	29e2 <udc_process_setup+0x1f2>
    29e0:	e71b      	b.n	281a <udc_process_setup+0x2a>
	if (!udd_getaddress()) {
    29e2:	4b48      	ldr	r3, [pc, #288]	; (2b04 <udc_process_setup+0x314>)
    29e4:	4798      	blx	r3
    29e6:	2800      	cmp	r0, #0
    29e8:	d100      	bne.n	29ec <udc_process_setup+0x1fc>
    29ea:	e70f      	b.n	280c <udc_process_setup+0x1c>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    29ec:	4b37      	ldr	r3, [pc, #220]	; (2acc <udc_process_setup+0x2dc>)
    29ee:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
    29f0:	4b3b      	ldr	r3, [pc, #236]	; (2ae0 <udc_process_setup+0x2f0>)
    29f2:	681b      	ldr	r3, [r3, #0]
    29f4:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    29f6:	429a      	cmp	r2, r3
    29f8:	dd00      	ble.n	29fc <udc_process_setup+0x20c>
    29fa:	e707      	b.n	280c <udc_process_setup+0x1c>
	udc_reset();
    29fc:	4b42      	ldr	r3, [pc, #264]	; (2b08 <udc_process_setup+0x318>)
    29fe:	4798      	blx	r3
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    2a00:	4b32      	ldr	r3, [pc, #200]	; (2acc <udc_process_setup+0x2dc>)
    2a02:	789b      	ldrb	r3, [r3, #2]
    2a04:	4a3b      	ldr	r2, [pc, #236]	; (2af4 <udc_process_setup+0x304>)
    2a06:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
    2a08:	2b00      	cmp	r3, #0
    2a0a:	d039      	beq.n	2a80 <udc_process_setup+0x290>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    2a0c:	4a3f      	ldr	r2, [pc, #252]	; (2b0c <udc_process_setup+0x31c>)
    2a0e:	4694      	mov	ip, r2
    2a10:	4463      	add	r3, ip
    2a12:	00db      	lsls	r3, r3, #3
    2a14:	4a32      	ldr	r2, [pc, #200]	; (2ae0 <udc_process_setup+0x2f0>)
    2a16:	6852      	ldr	r2, [r2, #4]
    2a18:	18d3      	adds	r3, r2, r3
    2a1a:	4a37      	ldr	r2, [pc, #220]	; (2af8 <udc_process_setup+0x308>)
    2a1c:	6013      	str	r3, [r2, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2a1e:	681b      	ldr	r3, [r3, #0]
    2a20:	791b      	ldrb	r3, [r3, #4]
    2a22:	2b00      	cmp	r3, #0
    2a24:	d02c      	beq.n	2a80 <udc_process_setup+0x290>
    2a26:	2400      	movs	r4, #0
		if (!udc_iface_enable(iface_num, 0)) {
    2a28:	4d39      	ldr	r5, [pc, #228]	; (2b10 <udc_process_setup+0x320>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2a2a:	0016      	movs	r6, r2
		if (!udc_iface_enable(iface_num, 0)) {
    2a2c:	2100      	movs	r1, #0
    2a2e:	0020      	movs	r0, r4
    2a30:	47a8      	blx	r5
    2a32:	2800      	cmp	r0, #0
    2a34:	d100      	bne.n	2a38 <udc_process_setup+0x248>
    2a36:	e6e9      	b.n	280c <udc_process_setup+0x1c>
			iface_num++) {
    2a38:	3401      	adds	r4, #1
    2a3a:	b2e4      	uxtb	r4, r4
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2a3c:	6833      	ldr	r3, [r6, #0]
    2a3e:	681b      	ldr	r3, [r3, #0]
    2a40:	791b      	ldrb	r3, [r3, #4]
    2a42:	42a3      	cmp	r3, r4
    2a44:	d8f2      	bhi.n	2a2c <udc_process_setup+0x23c>
    2a46:	e01b      	b.n	2a80 <udc_process_setup+0x290>
			switch (udd_g_ctrlreq.req.bRequest) {
    2a48:	2a01      	cmp	r2, #1
    2a4a:	d12d      	bne.n	2aa8 <udc_process_setup+0x2b8>
	if (udd_g_ctrlreq.req.wLength) {
    2a4c:	4b1f      	ldr	r3, [pc, #124]	; (2acc <udc_process_setup+0x2dc>)
    2a4e:	88db      	ldrh	r3, [r3, #6]
    2a50:	2b00      	cmp	r3, #0
    2a52:	d000      	beq.n	2a56 <udc_process_setup+0x266>
    2a54:	e6e1      	b.n	281a <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    2a56:	4b1d      	ldr	r3, [pc, #116]	; (2acc <udc_process_setup+0x2dc>)
    2a58:	885b      	ldrh	r3, [r3, #2]
    2a5a:	2b01      	cmp	r3, #1
    2a5c:	d000      	beq.n	2a60 <udc_process_setup+0x270>
    2a5e:	e6dc      	b.n	281a <udc_process_setup+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    2a60:	4a1e      	ldr	r2, [pc, #120]	; (2adc <udc_process_setup+0x2ec>)
    2a62:	8813      	ldrh	r3, [r2, #0]
    2a64:	2102      	movs	r1, #2
    2a66:	438b      	bics	r3, r1
    2a68:	8013      	strh	r3, [r2, #0]
		UDC_REMOTEWAKEUP_DISABLE();
    2a6a:	4b2a      	ldr	r3, [pc, #168]	; (2b14 <udc_process_setup+0x324>)
    2a6c:	4798      	blx	r3
    2a6e:	e007      	b.n	2a80 <udc_process_setup+0x290>
	if (udd_g_ctrlreq.req.wLength) {
    2a70:	4b16      	ldr	r3, [pc, #88]	; (2acc <udc_process_setup+0x2dc>)
    2a72:	88db      	ldrh	r3, [r3, #6]
    2a74:	2b00      	cmp	r3, #0
    2a76:	d000      	beq.n	2a7a <udc_process_setup+0x28a>
    2a78:	e6cf      	b.n	281a <udc_process_setup+0x2a>
	udd_g_ctrlreq.callback = udc_valid_address;
    2a7a:	4a27      	ldr	r2, [pc, #156]	; (2b18 <udc_process_setup+0x328>)
    2a7c:	4b13      	ldr	r3, [pc, #76]	; (2acc <udc_process_setup+0x2dc>)
    2a7e:	611a      	str	r2, [r3, #16]
			return true;
    2a80:	2001      	movs	r0, #1
    2a82:	e6d2      	b.n	282a <udc_process_setup+0x3a>
	if (udd_g_ctrlreq.req.wLength) {
    2a84:	4b11      	ldr	r3, [pc, #68]	; (2acc <udc_process_setup+0x2dc>)
    2a86:	88db      	ldrh	r3, [r3, #6]
    2a88:	2b00      	cmp	r3, #0
    2a8a:	d000      	beq.n	2a8e <udc_process_setup+0x29e>
    2a8c:	e6c5      	b.n	281a <udc_process_setup+0x2a>
	switch (udd_g_ctrlreq.req.wValue) {
    2a8e:	4b0f      	ldr	r3, [pc, #60]	; (2acc <udc_process_setup+0x2dc>)
    2a90:	885b      	ldrh	r3, [r3, #2]
	return false;
    2a92:	2000      	movs	r0, #0
	switch (udd_g_ctrlreq.req.wValue) {
    2a94:	2b01      	cmp	r3, #1
    2a96:	d114      	bne.n	2ac2 <udc_process_setup+0x2d2>
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    2a98:	4a10      	ldr	r2, [pc, #64]	; (2adc <udc_process_setup+0x2ec>)
    2a9a:	8813      	ldrh	r3, [r2, #0]
    2a9c:	2102      	movs	r1, #2
    2a9e:	430b      	orrs	r3, r1
    2aa0:	8013      	strh	r3, [r2, #0]
		UDC_REMOTEWAKEUP_ENABLE();
    2aa2:	4b1e      	ldr	r3, [pc, #120]	; (2b1c <udc_process_setup+0x32c>)
    2aa4:	4798      	blx	r3
    2aa6:	e7eb      	b.n	2a80 <udc_process_setup+0x290>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    2aa8:	2b01      	cmp	r3, #1
    2aaa:	d039      	beq.n	2b20 <udc_process_setup+0x330>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    2aac:	2b02      	cmp	r3, #2
    2aae:	d000      	beq.n	2ab2 <udc_process_setup+0x2c2>
    2ab0:	e6ac      	b.n	280c <udc_process_setup+0x1c>
			switch (udd_g_ctrlreq.req.bRequest) {
    2ab2:	4b06      	ldr	r3, [pc, #24]	; (2acc <udc_process_setup+0x2dc>)
    2ab4:	785b      	ldrb	r3, [r3, #1]
    2ab6:	2b01      	cmp	r3, #1
    2ab8:	d074      	beq.n	2ba4 <udc_process_setup+0x3b4>
    2aba:	2b03      	cmp	r3, #3
    2abc:	d100      	bne.n	2ac0 <udc_process_setup+0x2d0>
    2abe:	e080      	b.n	2bc2 <udc_process_setup+0x3d2>
	return false;
    2ac0:	2000      	movs	r0, #0
		if (udc_reqstd()) {
    2ac2:	2800      	cmp	r0, #0
    2ac4:	d000      	beq.n	2ac8 <udc_process_setup+0x2d8>
    2ac6:	e6b0      	b.n	282a <udc_process_setup+0x3a>
    2ac8:	e6a0      	b.n	280c <udc_process_setup+0x1c>
    2aca:	46c0      	nop			; (mov r8, r8)
    2acc:	200003f4 	.word	0x200003f4
    2ad0:	000042f5 	.word	0x000042f5
    2ad4:	2000013a 	.word	0x2000013a
    2ad8:	00004675 	.word	0x00004675
    2adc:	20000138 	.word	0x20000138
    2ae0:	20000050 	.word	0x20000050
    2ae4:	200000cc 	.word	0x200000cc
    2ae8:	200000a0 	.word	0x200000a0
    2aec:	200000bc 	.word	0x200000bc
    2af0:	200000c0 	.word	0x200000c0
    2af4:	20000140 	.word	0x20000140
    2af8:	20000144 	.word	0x20000144
    2afc:	000025fd 	.word	0x000025fd
    2b00:	2000013c 	.word	0x2000013c
    2b04:	00004665 	.word	0x00004665
    2b08:	0000274d 	.word	0x0000274d
    2b0c:	1fffffff 	.word	0x1fffffff
    2b10:	000026dd 	.word	0x000026dd
    2b14:	00005ac1 	.word	0x00005ac1
    2b18:	000025e5 	.word	0x000025e5
    2b1c:	00005ab5 	.word	0x00005ab5
			switch (udd_g_ctrlreq.req.bRequest) {
    2b20:	4a46      	ldr	r2, [pc, #280]	; (2c3c <udc_process_setup+0x44c>)
    2b22:	7852      	ldrb	r2, [r2, #1]
    2b24:	2a0b      	cmp	r2, #11
    2b26:	d1c1      	bne.n	2aac <udc_process_setup+0x2bc>
	if (udd_g_ctrlreq.req.wLength) {
    2b28:	4b44      	ldr	r3, [pc, #272]	; (2c3c <udc_process_setup+0x44c>)
    2b2a:	88db      	ldrh	r3, [r3, #6]
    2b2c:	2b00      	cmp	r3, #0
    2b2e:	d103      	bne.n	2b38 <udc_process_setup+0x348>
	if (!udc_num_configuration) {
    2b30:	4b43      	ldr	r3, [pc, #268]	; (2c40 <udc_process_setup+0x450>)
    2b32:	781b      	ldrb	r3, [r3, #0]
    2b34:	2b00      	cmp	r3, #0
    2b36:	d127      	bne.n	2b88 <udc_process_setup+0x398>
	if (0 == udc_num_configuration) {
    2b38:	4b41      	ldr	r3, [pc, #260]	; (2c40 <udc_process_setup+0x450>)
    2b3a:	781b      	ldrb	r3, [r3, #0]
	return false;
    2b3c:	2000      	movs	r0, #0
	if (0 == udc_num_configuration) {
    2b3e:	2b00      	cmp	r3, #0
    2b40:	d100      	bne.n	2b44 <udc_process_setup+0x354>
    2b42:	e672      	b.n	282a <udc_process_setup+0x3a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    2b44:	4b3d      	ldr	r3, [pc, #244]	; (2c3c <udc_process_setup+0x44c>)
    2b46:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    2b48:	4b3e      	ldr	r3, [pc, #248]	; (2c44 <udc_process_setup+0x454>)
    2b4a:	681d      	ldr	r5, [r3, #0]
    2b4c:	682b      	ldr	r3, [r5, #0]
    2b4e:	791b      	ldrb	r3, [r3, #4]
    2b50:	42a3      	cmp	r3, r4
    2b52:	d800      	bhi.n	2b56 <udc_process_setup+0x366>
    2b54:	e669      	b.n	282a <udc_process_setup+0x3a>
	if (!udc_update_iface_desc(iface_num, 0)) {
    2b56:	2100      	movs	r1, #0
    2b58:	0020      	movs	r0, r4
    2b5a:	4b3b      	ldr	r3, [pc, #236]	; (2c48 <udc_process_setup+0x458>)
    2b5c:	4798      	blx	r3
    2b5e:	2800      	cmp	r0, #0
    2b60:	d100      	bne.n	2b64 <udc_process_setup+0x374>
    2b62:	e65a      	b.n	281a <udc_process_setup+0x2a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    2b64:	686b      	ldr	r3, [r5, #4]
    2b66:	00a2      	lsls	r2, r4, #2
    2b68:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    2b6a:	68eb      	ldr	r3, [r5, #12]
    2b6c:	4798      	blx	r3
    2b6e:	0001      	movs	r1, r0
    2b70:	0020      	movs	r0, r4
    2b72:	4b35      	ldr	r3, [pc, #212]	; (2c48 <udc_process_setup+0x458>)
    2b74:	4798      	blx	r3
    2b76:	2800      	cmp	r0, #0
    2b78:	d100      	bne.n	2b7c <udc_process_setup+0x38c>
    2b7a:	e64e      	b.n	281a <udc_process_setup+0x2a>
	return udi_api->setup();
    2b7c:	68ab      	ldr	r3, [r5, #8]
    2b7e:	4798      	blx	r3
		if (udc_req_iface()) {
    2b80:	2800      	cmp	r0, #0
    2b82:	d000      	beq.n	2b86 <udc_process_setup+0x396>
    2b84:	e651      	b.n	282a <udc_process_setup+0x3a>
    2b86:	e648      	b.n	281a <udc_process_setup+0x2a>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    2b88:	4b2c      	ldr	r3, [pc, #176]	; (2c3c <udc_process_setup+0x44c>)
    2b8a:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    2b8c:	885c      	ldrh	r4, [r3, #2]
	if (!udc_iface_disable(iface_num)) {
    2b8e:	0028      	movs	r0, r5
    2b90:	4b2e      	ldr	r3, [pc, #184]	; (2c4c <udc_process_setup+0x45c>)
    2b92:	4798      	blx	r3
    2b94:	2800      	cmp	r0, #0
    2b96:	d100      	bne.n	2b9a <udc_process_setup+0x3aa>
    2b98:	e638      	b.n	280c <udc_process_setup+0x1c>
	return udc_iface_enable(iface_num, setting_num);
    2b9a:	b2e1      	uxtb	r1, r4
    2b9c:	0028      	movs	r0, r5
    2b9e:	4b2c      	ldr	r3, [pc, #176]	; (2c50 <udc_process_setup+0x460>)
    2ba0:	4798      	blx	r3
    2ba2:	e78e      	b.n	2ac2 <udc_process_setup+0x2d2>
	if (udd_g_ctrlreq.req.wLength) {
    2ba4:	4b25      	ldr	r3, [pc, #148]	; (2c3c <udc_process_setup+0x44c>)
    2ba6:	88db      	ldrh	r3, [r3, #6]
    2ba8:	2b00      	cmp	r3, #0
    2baa:	d000      	beq.n	2bae <udc_process_setup+0x3be>
    2bac:	e635      	b.n	281a <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    2bae:	4b23      	ldr	r3, [pc, #140]	; (2c3c <udc_process_setup+0x44c>)
    2bb0:	885b      	ldrh	r3, [r3, #2]
    2bb2:	2b00      	cmp	r3, #0
    2bb4:	d000      	beq.n	2bb8 <udc_process_setup+0x3c8>
    2bb6:	e630      	b.n	281a <udc_process_setup+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    2bb8:	4b20      	ldr	r3, [pc, #128]	; (2c3c <udc_process_setup+0x44c>)
    2bba:	7918      	ldrb	r0, [r3, #4]
    2bbc:	4b25      	ldr	r3, [pc, #148]	; (2c54 <udc_process_setup+0x464>)
    2bbe:	4798      	blx	r3
    2bc0:	e77f      	b.n	2ac2 <udc_process_setup+0x2d2>
	if (udd_g_ctrlreq.req.wLength) {
    2bc2:	4b1e      	ldr	r3, [pc, #120]	; (2c3c <udc_process_setup+0x44c>)
    2bc4:	88db      	ldrh	r3, [r3, #6]
    2bc6:	2b00      	cmp	r3, #0
    2bc8:	d000      	beq.n	2bcc <udc_process_setup+0x3dc>
    2bca:	e626      	b.n	281a <udc_process_setup+0x2a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    2bcc:	4b1b      	ldr	r3, [pc, #108]	; (2c3c <udc_process_setup+0x44c>)
    2bce:	885b      	ldrh	r3, [r3, #2]
    2bd0:	2b00      	cmp	r3, #0
    2bd2:	d000      	beq.n	2bd6 <udc_process_setup+0x3e6>
    2bd4:	e621      	b.n	281a <udc_process_setup+0x2a>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    2bd6:	4c19      	ldr	r4, [pc, #100]	; (2c3c <udc_process_setup+0x44c>)
    2bd8:	7920      	ldrb	r0, [r4, #4]
    2bda:	4b1f      	ldr	r3, [pc, #124]	; (2c58 <udc_process_setup+0x468>)
    2bdc:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    2bde:	7920      	ldrb	r0, [r4, #4]
    2be0:	4b1e      	ldr	r3, [pc, #120]	; (2c5c <udc_process_setup+0x46c>)
    2be2:	4798      	blx	r3
    2be4:	e76d      	b.n	2ac2 <udc_process_setup+0x2d2>
		return false;
    2be6:	2000      	movs	r0, #0
    2be8:	e76b      	b.n	2ac2 <udc_process_setup+0x2d2>
	if (0 == udc_num_configuration) {
    2bea:	4b15      	ldr	r3, [pc, #84]	; (2c40 <udc_process_setup+0x450>)
    2bec:	781b      	ldrb	r3, [r3, #0]
    2bee:	2b00      	cmp	r3, #0
    2bf0:	d100      	bne.n	2bf4 <udc_process_setup+0x404>
    2bf2:	e61a      	b.n	282a <udc_process_setup+0x3a>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2bf4:	4b13      	ldr	r3, [pc, #76]	; (2c44 <udc_process_setup+0x454>)
    2bf6:	681b      	ldr	r3, [r3, #0]
    2bf8:	681a      	ldr	r2, [r3, #0]
    2bfa:	7912      	ldrb	r2, [r2, #4]
    2bfc:	2a00      	cmp	r2, #0
    2bfe:	d01a      	beq.n	2c36 <udc_process_setup+0x446>
    2c00:	2500      	movs	r5, #0
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    2c02:	4e11      	ldr	r6, [pc, #68]	; (2c48 <udc_process_setup+0x458>)
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2c04:	4f0f      	ldr	r7, [pc, #60]	; (2c44 <udc_process_setup+0x454>)
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    2c06:	685b      	ldr	r3, [r3, #4]
    2c08:	00aa      	lsls	r2, r5, #2
    2c0a:	58d4      	ldr	r4, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    2c0c:	68e3      	ldr	r3, [r4, #12]
    2c0e:	4798      	blx	r3
    2c10:	0001      	movs	r1, r0
    2c12:	0028      	movs	r0, r5
    2c14:	47b0      	blx	r6
    2c16:	2800      	cmp	r0, #0
    2c18:	d100      	bne.n	2c1c <udc_process_setup+0x42c>
    2c1a:	e606      	b.n	282a <udc_process_setup+0x3a>
		if (udi_api->setup()) {
    2c1c:	68a3      	ldr	r3, [r4, #8]
    2c1e:	4798      	blx	r3
    2c20:	2800      	cmp	r0, #0
    2c22:	d000      	beq.n	2c26 <udc_process_setup+0x436>
    2c24:	e601      	b.n	282a <udc_process_setup+0x3a>
			iface_num++) {
    2c26:	3501      	adds	r5, #1
    2c28:	b2ed      	uxtb	r5, r5
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    2c2a:	683b      	ldr	r3, [r7, #0]
    2c2c:	681a      	ldr	r2, [r3, #0]
    2c2e:	7912      	ldrb	r2, [r2, #4]
    2c30:	42aa      	cmp	r2, r5
    2c32:	d8e8      	bhi.n	2c06 <udc_process_setup+0x416>
    2c34:	e5f9      	b.n	282a <udc_process_setup+0x3a>
	return false;
    2c36:	2000      	movs	r0, #0
    2c38:	e5f7      	b.n	282a <udc_process_setup+0x3a>
    2c3a:	46c0      	nop			; (mov r8, r8)
    2c3c:	200003f4 	.word	0x200003f4
    2c40:	20000140 	.word	0x20000140
    2c44:	20000144 	.word	0x20000144
    2c48:	000025fd 	.word	0x000025fd
    2c4c:	00002671 	.word	0x00002671
    2c50:	000026dd 	.word	0x000026dd
    2c54:	00004439 	.word	0x00004439
    2c58:	00004149 	.word	0x00004149
    2c5c:	00004309 	.word	0x00004309

00002c60 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    2c60:	4b0c      	ldr	r3, [pc, #48]	; (2c94 <cpu_irq_enter_critical+0x34>)
    2c62:	681b      	ldr	r3, [r3, #0]
    2c64:	2b00      	cmp	r3, #0
    2c66:	d106      	bne.n	2c76 <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2c68:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    2c6c:	2b00      	cmp	r3, #0
    2c6e:	d007      	beq.n	2c80 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2c70:	2200      	movs	r2, #0
    2c72:	4b09      	ldr	r3, [pc, #36]	; (2c98 <cpu_irq_enter_critical+0x38>)
    2c74:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2c76:	4a07      	ldr	r2, [pc, #28]	; (2c94 <cpu_irq_enter_critical+0x34>)
    2c78:	6813      	ldr	r3, [r2, #0]
    2c7a:	3301      	adds	r3, #1
    2c7c:	6013      	str	r3, [r2, #0]
}
    2c7e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    2c80:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    2c82:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2c86:	2200      	movs	r2, #0
    2c88:	4b04      	ldr	r3, [pc, #16]	; (2c9c <cpu_irq_enter_critical+0x3c>)
    2c8a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2c8c:	3201      	adds	r2, #1
    2c8e:	4b02      	ldr	r3, [pc, #8]	; (2c98 <cpu_irq_enter_critical+0x38>)
    2c90:	701a      	strb	r2, [r3, #0]
    2c92:	e7f0      	b.n	2c76 <cpu_irq_enter_critical+0x16>
    2c94:	2000014c 	.word	0x2000014c
    2c98:	20000150 	.word	0x20000150
    2c9c:	200000da 	.word	0x200000da

00002ca0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2ca0:	4b08      	ldr	r3, [pc, #32]	; (2cc4 <cpu_irq_leave_critical+0x24>)
    2ca2:	681a      	ldr	r2, [r3, #0]
    2ca4:	3a01      	subs	r2, #1
    2ca6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2ca8:	681b      	ldr	r3, [r3, #0]
    2caa:	2b00      	cmp	r3, #0
    2cac:	d109      	bne.n	2cc2 <cpu_irq_leave_critical+0x22>
    2cae:	4b06      	ldr	r3, [pc, #24]	; (2cc8 <cpu_irq_leave_critical+0x28>)
    2cb0:	781b      	ldrb	r3, [r3, #0]
    2cb2:	2b00      	cmp	r3, #0
    2cb4:	d005      	beq.n	2cc2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    2cb6:	2201      	movs	r2, #1
    2cb8:	4b04      	ldr	r3, [pc, #16]	; (2ccc <cpu_irq_leave_critical+0x2c>)
    2cba:	701a      	strb	r2, [r3, #0]
    2cbc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2cc0:	b662      	cpsie	i
	}
}
    2cc2:	4770      	bx	lr
    2cc4:	2000014c 	.word	0x2000014c
    2cc8:	20000150 	.word	0x20000150
    2ccc:	200000da 	.word	0x200000da

00002cd0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    2cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cd2:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    2cd4:	ac01      	add	r4, sp, #4
    2cd6:	2501      	movs	r5, #1
    2cd8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    2cda:	2700      	movs	r7, #0
    2cdc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2cde:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    2ce0:	0021      	movs	r1, r4
    2ce2:	200a      	movs	r0, #10
    2ce4:	4e06      	ldr	r6, [pc, #24]	; (2d00 <system_board_init+0x30>)
    2ce6:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2ce8:	2280      	movs	r2, #128	; 0x80
    2cea:	00d2      	lsls	r2, r2, #3
    2cec:	4b05      	ldr	r3, [pc, #20]	; (2d04 <system_board_init+0x34>)
    2cee:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    2cf0:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    2cf2:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    2cf4:	0021      	movs	r1, r4
    2cf6:	200e      	movs	r0, #14
    2cf8:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    2cfa:	b003      	add	sp, #12
    2cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2cfe:	46c0      	nop			; (mov r8, r8)
    2d00:	00002de1 	.word	0x00002de1
    2d04:	41004400 	.word	0x41004400

00002d08 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    2d08:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    2d0a:	2200      	movs	r2, #0
    2d0c:	4b10      	ldr	r3, [pc, #64]	; (2d50 <EIC_Handler+0x48>)
    2d0e:	701a      	strb	r2, [r3, #0]
    2d10:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    2d12:	4910      	ldr	r1, [pc, #64]	; (2d54 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    2d14:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    2d16:	4e10      	ldr	r6, [pc, #64]	; (2d58 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    2d18:	4c0d      	ldr	r4, [pc, #52]	; (2d50 <EIC_Handler+0x48>)
    2d1a:	e00a      	b.n	2d32 <EIC_Handler+0x2a>
		return eics[eic_index];
    2d1c:	490d      	ldr	r1, [pc, #52]	; (2d54 <EIC_Handler+0x4c>)
    2d1e:	e008      	b.n	2d32 <EIC_Handler+0x2a>
    2d20:	7823      	ldrb	r3, [r4, #0]
    2d22:	3301      	adds	r3, #1
    2d24:	b2db      	uxtb	r3, r3
    2d26:	7023      	strb	r3, [r4, #0]
    2d28:	2b0f      	cmp	r3, #15
    2d2a:	d810      	bhi.n	2d4e <EIC_Handler+0x46>
		return NULL;
    2d2c:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    2d2e:	2b1f      	cmp	r3, #31
    2d30:	d9f4      	bls.n	2d1c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    2d32:	0028      	movs	r0, r5
    2d34:	4018      	ands	r0, r3
    2d36:	2201      	movs	r2, #1
    2d38:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    2d3a:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    2d3c:	4210      	tst	r0, r2
    2d3e:	d0ef      	beq.n	2d20 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    2d40:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    2d42:	009b      	lsls	r3, r3, #2
    2d44:	599b      	ldr	r3, [r3, r6]
    2d46:	2b00      	cmp	r3, #0
    2d48:	d0ea      	beq.n	2d20 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    2d4a:	4798      	blx	r3
    2d4c:	e7e8      	b.n	2d20 <EIC_Handler+0x18>
			}
		}
	}
}
    2d4e:	bd70      	pop	{r4, r5, r6, pc}
    2d50:	200001f5 	.word	0x200001f5
    2d54:	40001800 	.word	0x40001800
    2d58:	200001f8 	.word	0x200001f8

00002d5c <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    2d5c:	4a04      	ldr	r2, [pc, #16]	; (2d70 <_extint_enable+0x14>)
    2d5e:	7813      	ldrb	r3, [r2, #0]
    2d60:	2102      	movs	r1, #2
    2d62:	430b      	orrs	r3, r1
    2d64:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    2d66:	7853      	ldrb	r3, [r2, #1]
    2d68:	b25b      	sxtb	r3, r3
    2d6a:	2b00      	cmp	r3, #0
    2d6c:	dbfb      	blt.n	2d66 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    2d6e:	4770      	bx	lr
    2d70:	40001800 	.word	0x40001800

00002d74 <_system_extint_init>:
{
    2d74:	b500      	push	{lr}
    2d76:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    2d78:	4a12      	ldr	r2, [pc, #72]	; (2dc4 <_system_extint_init+0x50>)
    2d7a:	6993      	ldr	r3, [r2, #24]
    2d7c:	2140      	movs	r1, #64	; 0x40
    2d7e:	430b      	orrs	r3, r1
    2d80:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    2d82:	a901      	add	r1, sp, #4
    2d84:	2300      	movs	r3, #0
    2d86:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    2d88:	2005      	movs	r0, #5
    2d8a:	4b0f      	ldr	r3, [pc, #60]	; (2dc8 <_system_extint_init+0x54>)
    2d8c:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    2d8e:	2005      	movs	r0, #5
    2d90:	4b0e      	ldr	r3, [pc, #56]	; (2dcc <_system_extint_init+0x58>)
    2d92:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    2d94:	4a0e      	ldr	r2, [pc, #56]	; (2dd0 <_system_extint_init+0x5c>)
    2d96:	7813      	ldrb	r3, [r2, #0]
    2d98:	2101      	movs	r1, #1
    2d9a:	430b      	orrs	r3, r1
    2d9c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    2d9e:	7853      	ldrb	r3, [r2, #1]
    2da0:	b25b      	sxtb	r3, r3
    2da2:	2b00      	cmp	r3, #0
    2da4:	dbfb      	blt.n	2d9e <_system_extint_init+0x2a>
    2da6:	4b0b      	ldr	r3, [pc, #44]	; (2dd4 <_system_extint_init+0x60>)
    2da8:	0019      	movs	r1, r3
    2daa:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    2dac:	2200      	movs	r2, #0
    2dae:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    2db0:	4299      	cmp	r1, r3
    2db2:	d1fc      	bne.n	2dae <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2db4:	2210      	movs	r2, #16
    2db6:	4b08      	ldr	r3, [pc, #32]	; (2dd8 <_system_extint_init+0x64>)
    2db8:	601a      	str	r2, [r3, #0]
	_extint_enable();
    2dba:	4b08      	ldr	r3, [pc, #32]	; (2ddc <_system_extint_init+0x68>)
    2dbc:	4798      	blx	r3
}
    2dbe:	b003      	add	sp, #12
    2dc0:	bd00      	pop	{pc}
    2dc2:	46c0      	nop			; (mov r8, r8)
    2dc4:	40000400 	.word	0x40000400
    2dc8:	00003975 	.word	0x00003975
    2dcc:	000038e9 	.word	0x000038e9
    2dd0:	40001800 	.word	0x40001800
    2dd4:	200001f8 	.word	0x200001f8
    2dd8:	e000e100 	.word	0xe000e100
    2ddc:	00002d5d 	.word	0x00002d5d

00002de0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    2de0:	b500      	push	{lr}
    2de2:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2de4:	ab01      	add	r3, sp, #4
    2de6:	2280      	movs	r2, #128	; 0x80
    2de8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    2dea:	780a      	ldrb	r2, [r1, #0]
    2dec:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    2dee:	784a      	ldrb	r2, [r1, #1]
    2df0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    2df2:	788a      	ldrb	r2, [r1, #2]
    2df4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    2df6:	0019      	movs	r1, r3
    2df8:	4b01      	ldr	r3, [pc, #4]	; (2e00 <port_pin_set_config+0x20>)
    2dfa:	4798      	blx	r3
}
    2dfc:	b003      	add	sp, #12
    2dfe:	bd00      	pop	{pc}
    2e00:	00003a6d 	.word	0x00003a6d

00002e04 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    2e04:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    2e06:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2e08:	2340      	movs	r3, #64	; 0x40
    2e0a:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    2e0c:	4281      	cmp	r1, r0
    2e0e:	d202      	bcs.n	2e16 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    2e10:	0018      	movs	r0, r3
    2e12:	bd10      	pop	{r4, pc}
		baud_calculated++;
    2e14:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    2e16:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    2e18:	1c63      	adds	r3, r4, #1
    2e1a:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    2e1c:	4288      	cmp	r0, r1
    2e1e:	d9f9      	bls.n	2e14 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2e20:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    2e22:	2cff      	cmp	r4, #255	; 0xff
    2e24:	d8f4      	bhi.n	2e10 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    2e26:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    2e28:	2300      	movs	r3, #0
    2e2a:	e7f1      	b.n	2e10 <_sercom_get_sync_baud_val+0xc>

00002e2c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    2e2c:	b510      	push	{r4, lr}
    2e2e:	b082      	sub	sp, #8
    2e30:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    2e32:	4b0e      	ldr	r3, [pc, #56]	; (2e6c <sercom_set_gclk_generator+0x40>)
    2e34:	781b      	ldrb	r3, [r3, #0]
    2e36:	2b00      	cmp	r3, #0
    2e38:	d007      	beq.n	2e4a <sercom_set_gclk_generator+0x1e>
    2e3a:	2900      	cmp	r1, #0
    2e3c:	d105      	bne.n	2e4a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    2e3e:	4b0b      	ldr	r3, [pc, #44]	; (2e6c <sercom_set_gclk_generator+0x40>)
    2e40:	785b      	ldrb	r3, [r3, #1]
    2e42:	4283      	cmp	r3, r0
    2e44:	d010      	beq.n	2e68 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    2e46:	201d      	movs	r0, #29
    2e48:	e00c      	b.n	2e64 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    2e4a:	a901      	add	r1, sp, #4
    2e4c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    2e4e:	2013      	movs	r0, #19
    2e50:	4b07      	ldr	r3, [pc, #28]	; (2e70 <sercom_set_gclk_generator+0x44>)
    2e52:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    2e54:	2013      	movs	r0, #19
    2e56:	4b07      	ldr	r3, [pc, #28]	; (2e74 <sercom_set_gclk_generator+0x48>)
    2e58:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    2e5a:	4b04      	ldr	r3, [pc, #16]	; (2e6c <sercom_set_gclk_generator+0x40>)
    2e5c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    2e5e:	2201      	movs	r2, #1
    2e60:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    2e62:	2000      	movs	r0, #0
}
    2e64:	b002      	add	sp, #8
    2e66:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    2e68:	2000      	movs	r0, #0
    2e6a:	e7fb      	b.n	2e64 <sercom_set_gclk_generator+0x38>
    2e6c:	20000154 	.word	0x20000154
    2e70:	00003975 	.word	0x00003975
    2e74:	000038e9 	.word	0x000038e9

00002e78 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    2e78:	4b2b      	ldr	r3, [pc, #172]	; (2f28 <_sercom_get_default_pad+0xb0>)
    2e7a:	4298      	cmp	r0, r3
    2e7c:	d023      	beq.n	2ec6 <_sercom_get_default_pad+0x4e>
    2e7e:	d90f      	bls.n	2ea0 <_sercom_get_default_pad+0x28>
    2e80:	4b2a      	ldr	r3, [pc, #168]	; (2f2c <_sercom_get_default_pad+0xb4>)
    2e82:	4298      	cmp	r0, r3
    2e84:	d02f      	beq.n	2ee6 <_sercom_get_default_pad+0x6e>
    2e86:	4b2a      	ldr	r3, [pc, #168]	; (2f30 <_sercom_get_default_pad+0xb8>)
    2e88:	4298      	cmp	r0, r3
    2e8a:	d142      	bne.n	2f12 <_sercom_get_default_pad+0x9a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2e8c:	2901      	cmp	r1, #1
    2e8e:	d03a      	beq.n	2f06 <_sercom_get_default_pad+0x8e>
    2e90:	2900      	cmp	r1, #0
    2e92:	d046      	beq.n	2f22 <_sercom_get_default_pad+0xaa>
    2e94:	2902      	cmp	r1, #2
    2e96:	d038      	beq.n	2f0a <_sercom_get_default_pad+0x92>
    2e98:	2903      	cmp	r1, #3
    2e9a:	d038      	beq.n	2f0e <_sercom_get_default_pad+0x96>
	}

	Assert(false);
	return 0;
    2e9c:	2000      	movs	r0, #0
    2e9e:	e039      	b.n	2f14 <_sercom_get_default_pad+0x9c>
	switch ((uintptr_t)sercom_module) {
    2ea0:	4b24      	ldr	r3, [pc, #144]	; (2f34 <_sercom_get_default_pad+0xbc>)
    2ea2:	4298      	cmp	r0, r3
    2ea4:	d135      	bne.n	2f12 <_sercom_get_default_pad+0x9a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2ea6:	2901      	cmp	r1, #1
    2ea8:	d007      	beq.n	2eba <_sercom_get_default_pad+0x42>
    2eaa:	2900      	cmp	r1, #0
    2eac:	d033      	beq.n	2f16 <_sercom_get_default_pad+0x9e>
    2eae:	2902      	cmp	r1, #2
    2eb0:	d005      	beq.n	2ebe <_sercom_get_default_pad+0x46>
    2eb2:	2903      	cmp	r1, #3
    2eb4:	d005      	beq.n	2ec2 <_sercom_get_default_pad+0x4a>
	return 0;
    2eb6:	2000      	movs	r0, #0
    2eb8:	e02c      	b.n	2f14 <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2eba:	481f      	ldr	r0, [pc, #124]	; (2f38 <_sercom_get_default_pad+0xc0>)
    2ebc:	e02a      	b.n	2f14 <_sercom_get_default_pad+0x9c>
    2ebe:	481f      	ldr	r0, [pc, #124]	; (2f3c <_sercom_get_default_pad+0xc4>)
    2ec0:	e028      	b.n	2f14 <_sercom_get_default_pad+0x9c>
    2ec2:	481f      	ldr	r0, [pc, #124]	; (2f40 <_sercom_get_default_pad+0xc8>)
    2ec4:	e026      	b.n	2f14 <_sercom_get_default_pad+0x9c>
    2ec6:	2901      	cmp	r1, #1
    2ec8:	d007      	beq.n	2eda <_sercom_get_default_pad+0x62>
    2eca:	2900      	cmp	r1, #0
    2ecc:	d025      	beq.n	2f1a <_sercom_get_default_pad+0xa2>
    2ece:	2902      	cmp	r1, #2
    2ed0:	d005      	beq.n	2ede <_sercom_get_default_pad+0x66>
    2ed2:	2903      	cmp	r1, #3
    2ed4:	d005      	beq.n	2ee2 <_sercom_get_default_pad+0x6a>
	return 0;
    2ed6:	2000      	movs	r0, #0
    2ed8:	e01c      	b.n	2f14 <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2eda:	481a      	ldr	r0, [pc, #104]	; (2f44 <_sercom_get_default_pad+0xcc>)
    2edc:	e01a      	b.n	2f14 <_sercom_get_default_pad+0x9c>
    2ede:	481a      	ldr	r0, [pc, #104]	; (2f48 <_sercom_get_default_pad+0xd0>)
    2ee0:	e018      	b.n	2f14 <_sercom_get_default_pad+0x9c>
    2ee2:	481a      	ldr	r0, [pc, #104]	; (2f4c <_sercom_get_default_pad+0xd4>)
    2ee4:	e016      	b.n	2f14 <_sercom_get_default_pad+0x9c>
    2ee6:	2901      	cmp	r1, #1
    2ee8:	d007      	beq.n	2efa <_sercom_get_default_pad+0x82>
    2eea:	2900      	cmp	r1, #0
    2eec:	d017      	beq.n	2f1e <_sercom_get_default_pad+0xa6>
    2eee:	2902      	cmp	r1, #2
    2ef0:	d005      	beq.n	2efe <_sercom_get_default_pad+0x86>
    2ef2:	2903      	cmp	r1, #3
    2ef4:	d005      	beq.n	2f02 <_sercom_get_default_pad+0x8a>
	return 0;
    2ef6:	2000      	movs	r0, #0
    2ef8:	e00c      	b.n	2f14 <_sercom_get_default_pad+0x9c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2efa:	4815      	ldr	r0, [pc, #84]	; (2f50 <_sercom_get_default_pad+0xd8>)
    2efc:	e00a      	b.n	2f14 <_sercom_get_default_pad+0x9c>
    2efe:	4815      	ldr	r0, [pc, #84]	; (2f54 <_sercom_get_default_pad+0xdc>)
    2f00:	e008      	b.n	2f14 <_sercom_get_default_pad+0x9c>
    2f02:	4815      	ldr	r0, [pc, #84]	; (2f58 <_sercom_get_default_pad+0xe0>)
    2f04:	e006      	b.n	2f14 <_sercom_get_default_pad+0x9c>
    2f06:	4815      	ldr	r0, [pc, #84]	; (2f5c <_sercom_get_default_pad+0xe4>)
    2f08:	e004      	b.n	2f14 <_sercom_get_default_pad+0x9c>
    2f0a:	4815      	ldr	r0, [pc, #84]	; (2f60 <_sercom_get_default_pad+0xe8>)
    2f0c:	e002      	b.n	2f14 <_sercom_get_default_pad+0x9c>
    2f0e:	4815      	ldr	r0, [pc, #84]	; (2f64 <_sercom_get_default_pad+0xec>)
    2f10:	e000      	b.n	2f14 <_sercom_get_default_pad+0x9c>
	return 0;
    2f12:	2000      	movs	r0, #0
}
    2f14:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2f16:	4814      	ldr	r0, [pc, #80]	; (2f68 <_sercom_get_default_pad+0xf0>)
    2f18:	e7fc      	b.n	2f14 <_sercom_get_default_pad+0x9c>
    2f1a:	2003      	movs	r0, #3
    2f1c:	e7fa      	b.n	2f14 <_sercom_get_default_pad+0x9c>
    2f1e:	4813      	ldr	r0, [pc, #76]	; (2f6c <_sercom_get_default_pad+0xf4>)
    2f20:	e7f8      	b.n	2f14 <_sercom_get_default_pad+0x9c>
    2f22:	4813      	ldr	r0, [pc, #76]	; (2f70 <_sercom_get_default_pad+0xf8>)
    2f24:	e7f6      	b.n	2f14 <_sercom_get_default_pad+0x9c>
    2f26:	46c0      	nop			; (mov r8, r8)
    2f28:	42000c00 	.word	0x42000c00
    2f2c:	42001000 	.word	0x42001000
    2f30:	42001400 	.word	0x42001400
    2f34:	42000800 	.word	0x42000800
    2f38:	00050003 	.word	0x00050003
    2f3c:	00060003 	.word	0x00060003
    2f40:	00070003 	.word	0x00070003
    2f44:	00010003 	.word	0x00010003
    2f48:	001e0003 	.word	0x001e0003
    2f4c:	001f0003 	.word	0x001f0003
    2f50:	00090003 	.word	0x00090003
    2f54:	000a0003 	.word	0x000a0003
    2f58:	000b0003 	.word	0x000b0003
    2f5c:	00110003 	.word	0x00110003
    2f60:	00120003 	.word	0x00120003
    2f64:	00130003 	.word	0x00130003
    2f68:	00040003 	.word	0x00040003
    2f6c:	00080003 	.word	0x00080003
    2f70:	00100003 	.word	0x00100003

00002f74 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    2f74:	b530      	push	{r4, r5, lr}
    2f76:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    2f78:	466a      	mov	r2, sp
    2f7a:	4b0f      	ldr	r3, [pc, #60]	; (2fb8 <_sercom_get_sercom_inst_index+0x44>)
    2f7c:	cb32      	ldmia	r3!, {r1, r4, r5}
    2f7e:	c232      	stmia	r2!, {r1, r4, r5}
    2f80:	681b      	ldr	r3, [r3, #0]
    2f82:	6013      	str	r3, [r2, #0]

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2f84:	0003      	movs	r3, r0
    2f86:	9a00      	ldr	r2, [sp, #0]
    2f88:	4282      	cmp	r2, r0
    2f8a:	d011      	beq.n	2fb0 <_sercom_get_sercom_inst_index+0x3c>
    2f8c:	9a01      	ldr	r2, [sp, #4]
    2f8e:	4282      	cmp	r2, r0
    2f90:	d00a      	beq.n	2fa8 <_sercom_get_sercom_inst_index+0x34>
    2f92:	9a02      	ldr	r2, [sp, #8]
    2f94:	4282      	cmp	r2, r0
    2f96:	d009      	beq.n	2fac <_sercom_get_sercom_inst_index+0x38>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    2f98:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2f9a:	9a03      	ldr	r2, [sp, #12]
    2f9c:	429a      	cmp	r2, r3
    2f9e:	d001      	beq.n	2fa4 <_sercom_get_sercom_inst_index+0x30>
}
    2fa0:	b005      	add	sp, #20
    2fa2:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2fa4:	3003      	adds	r0, #3
    2fa6:	e004      	b.n	2fb2 <_sercom_get_sercom_inst_index+0x3e>
    2fa8:	2001      	movs	r0, #1
    2faa:	e002      	b.n	2fb2 <_sercom_get_sercom_inst_index+0x3e>
    2fac:	2002      	movs	r0, #2
    2fae:	e000      	b.n	2fb2 <_sercom_get_sercom_inst_index+0x3e>
    2fb0:	2000      	movs	r0, #0
			return i;
    2fb2:	b2c0      	uxtb	r0, r0
    2fb4:	e7f4      	b.n	2fa0 <_sercom_get_sercom_inst_index+0x2c>
    2fb6:	46c0      	nop			; (mov r8, r8)
    2fb8:	00005e80 	.word	0x00005e80

00002fbc <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2fbc:	4770      	bx	lr
	...

00002fc0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2fc0:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    2fc2:	4b0b      	ldr	r3, [pc, #44]	; (2ff0 <_sercom_set_handler+0x30>)
    2fc4:	781b      	ldrb	r3, [r3, #0]
    2fc6:	2b00      	cmp	r3, #0
    2fc8:	d10e      	bne.n	2fe8 <_sercom_set_handler+0x28>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2fca:	4c0a      	ldr	r4, [pc, #40]	; (2ff4 <_sercom_set_handler+0x34>)
    2fcc:	4d0a      	ldr	r5, [pc, #40]	; (2ff8 <_sercom_set_handler+0x38>)
    2fce:	6025      	str	r5, [r4, #0]
			_sercom_instances[i] = NULL;
    2fd0:	4b0a      	ldr	r3, [pc, #40]	; (2ffc <_sercom_set_handler+0x3c>)
    2fd2:	2200      	movs	r2, #0
    2fd4:	601a      	str	r2, [r3, #0]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2fd6:	6065      	str	r5, [r4, #4]
			_sercom_instances[i] = NULL;
    2fd8:	605a      	str	r2, [r3, #4]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2fda:	60a5      	str	r5, [r4, #8]
			_sercom_instances[i] = NULL;
    2fdc:	609a      	str	r2, [r3, #8]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2fde:	60e5      	str	r5, [r4, #12]
			_sercom_instances[i] = NULL;
    2fe0:	60da      	str	r2, [r3, #12]
		}

		_handler_table_initialized = true;
    2fe2:	3201      	adds	r2, #1
    2fe4:	4b02      	ldr	r3, [pc, #8]	; (2ff0 <_sercom_set_handler+0x30>)
    2fe6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2fe8:	0080      	lsls	r0, r0, #2
    2fea:	4b02      	ldr	r3, [pc, #8]	; (2ff4 <_sercom_set_handler+0x34>)
    2fec:	50c1      	str	r1, [r0, r3]
}
    2fee:	bd30      	pop	{r4, r5, pc}
    2ff0:	20000156 	.word	0x20000156
    2ff4:	20000158 	.word	0x20000158
    2ff8:	00002fbd 	.word	0x00002fbd
    2ffc:	20000238 	.word	0x20000238

00003000 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    3000:	b510      	push	{r4, lr}
    3002:	b082      	sub	sp, #8
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    3004:	ac01      	add	r4, sp, #4
    3006:	2309      	movs	r3, #9
    3008:	7023      	strb	r3, [r4, #0]
    300a:	3301      	adds	r3, #1
    300c:	7063      	strb	r3, [r4, #1]
    300e:	3301      	adds	r3, #1
    3010:	70a3      	strb	r3, [r4, #2]
    3012:	3301      	adds	r3, #1
    3014:	70e3      	strb	r3, [r4, #3]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    3016:	4b02      	ldr	r3, [pc, #8]	; (3020 <_sercom_get_interrupt_vector+0x20>)
    3018:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    301a:	5620      	ldrsb	r0, [r4, r0]
}
    301c:	b002      	add	sp, #8
    301e:	bd10      	pop	{r4, pc}
    3020:	00002f75 	.word	0x00002f75

00003024 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    3024:	b510      	push	{r4, lr}
    3026:	4b02      	ldr	r3, [pc, #8]	; (3030 <SERCOM0_Handler+0xc>)
    3028:	681b      	ldr	r3, [r3, #0]
    302a:	2000      	movs	r0, #0
    302c:	4798      	blx	r3
    302e:	bd10      	pop	{r4, pc}
    3030:	20000158 	.word	0x20000158

00003034 <SERCOM1_Handler>:
    3034:	b510      	push	{r4, lr}
    3036:	4b02      	ldr	r3, [pc, #8]	; (3040 <SERCOM1_Handler+0xc>)
    3038:	685b      	ldr	r3, [r3, #4]
    303a:	2001      	movs	r0, #1
    303c:	4798      	blx	r3
    303e:	bd10      	pop	{r4, pc}
    3040:	20000158 	.word	0x20000158

00003044 <SERCOM2_Handler>:
    3044:	b510      	push	{r4, lr}
    3046:	4b02      	ldr	r3, [pc, #8]	; (3050 <SERCOM2_Handler+0xc>)
    3048:	689b      	ldr	r3, [r3, #8]
    304a:	2002      	movs	r0, #2
    304c:	4798      	blx	r3
    304e:	bd10      	pop	{r4, pc}
    3050:	20000158 	.word	0x20000158

00003054 <SERCOM3_Handler>:
    3054:	b510      	push	{r4, lr}
    3056:	4b02      	ldr	r3, [pc, #8]	; (3060 <SERCOM3_Handler+0xc>)
    3058:	68db      	ldr	r3, [r3, #12]
    305a:	2003      	movs	r0, #3
    305c:	4798      	blx	r3
    305e:	bd10      	pop	{r4, pc}
    3060:	20000158 	.word	0x20000158

00003064 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    3064:	b5f0      	push	{r4, r5, r6, r7, lr}
    3066:	b08b      	sub	sp, #44	; 0x2c
    3068:	0005      	movs	r5, r0
    306a:	000c      	movs	r4, r1
    306c:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    306e:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    3070:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    3072:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    3074:	079b      	lsls	r3, r3, #30
    3076:	d501      	bpl.n	307c <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    3078:	b00b      	add	sp, #44	; 0x2c
    307a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    307c:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    307e:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    3080:	07db      	lsls	r3, r3, #31
    3082:	d4f9      	bmi.n	3078 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3084:	0008      	movs	r0, r1
    3086:	4b60      	ldr	r3, [pc, #384]	; (3208 <spi_init+0x1a4>)
    3088:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    308a:	4a60      	ldr	r2, [pc, #384]	; (320c <spi_init+0x1a8>)
    308c:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    308e:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3090:	2301      	movs	r3, #1
    3092:	40bb      	lsls	r3, r7
    3094:	430b      	orrs	r3, r1
    3096:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    3098:	a909      	add	r1, sp, #36	; 0x24
    309a:	2724      	movs	r7, #36	; 0x24
    309c:	5df3      	ldrb	r3, [r6, r7]
    309e:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    30a0:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    30a2:	b2c3      	uxtb	r3, r0
    30a4:	9301      	str	r3, [sp, #4]
    30a6:	0018      	movs	r0, r3
    30a8:	4b59      	ldr	r3, [pc, #356]	; (3210 <spi_init+0x1ac>)
    30aa:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    30ac:	9801      	ldr	r0, [sp, #4]
    30ae:	4b59      	ldr	r3, [pc, #356]	; (3214 <spi_init+0x1b0>)
    30b0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    30b2:	5df0      	ldrb	r0, [r6, r7]
    30b4:	2100      	movs	r1, #0
    30b6:	4b58      	ldr	r3, [pc, #352]	; (3218 <spi_init+0x1b4>)
    30b8:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    30ba:	7833      	ldrb	r3, [r6, #0]
    30bc:	2b01      	cmp	r3, #1
    30be:	d038      	beq.n	3132 <spi_init+0xce>
    30c0:	002b      	movs	r3, r5
    30c2:	330c      	adds	r3, #12
    30c4:	0029      	movs	r1, r5
    30c6:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    30c8:	2200      	movs	r2, #0
    30ca:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    30cc:	428b      	cmp	r3, r1
    30ce:	d1fc      	bne.n	30ca <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    30d0:	2300      	movs	r3, #0
    30d2:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    30d4:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    30d6:	2400      	movs	r4, #0
    30d8:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    30da:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    30dc:	3336      	adds	r3, #54	; 0x36
    30de:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    30e0:	3301      	adds	r3, #1
    30e2:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    30e4:	3301      	adds	r3, #1
    30e6:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    30e8:	3b35      	subs	r3, #53	; 0x35
    30ea:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    30ec:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    30ee:	6828      	ldr	r0, [r5, #0]
    30f0:	4b45      	ldr	r3, [pc, #276]	; (3208 <spi_init+0x1a4>)
    30f2:	4798      	blx	r3
    30f4:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    30f6:	4949      	ldr	r1, [pc, #292]	; (321c <spi_init+0x1b8>)
    30f8:	4b49      	ldr	r3, [pc, #292]	; (3220 <spi_init+0x1bc>)
    30fa:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    30fc:	00bf      	lsls	r7, r7, #2
    30fe:	4b49      	ldr	r3, [pc, #292]	; (3224 <spi_init+0x1c0>)
    3100:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3102:	682f      	ldr	r7, [r5, #0]
    3104:	ab04      	add	r3, sp, #16
    3106:	2280      	movs	r2, #128	; 0x80
    3108:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    310a:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    310c:	3a7f      	subs	r2, #127	; 0x7f
    310e:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3110:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    3112:	7833      	ldrb	r3, [r6, #0]
    3114:	2b00      	cmp	r3, #0
    3116:	d102      	bne.n	311e <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    3118:	2200      	movs	r2, #0
    311a:	ab04      	add	r3, sp, #16
    311c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    311e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    3120:	9305      	str	r3, [sp, #20]
    3122:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    3124:	9306      	str	r3, [sp, #24]
    3126:	6b33      	ldr	r3, [r6, #48]	; 0x30
    3128:	9307      	str	r3, [sp, #28]
    312a:	6b73      	ldr	r3, [r6, #52]	; 0x34
    312c:	9308      	str	r3, [sp, #32]
    312e:	2400      	movs	r4, #0
    3130:	e00b      	b.n	314a <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    3132:	6823      	ldr	r3, [r4, #0]
    3134:	220c      	movs	r2, #12
    3136:	4313      	orrs	r3, r2
    3138:	6023      	str	r3, [r4, #0]
    313a:	e7c1      	b.n	30c0 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    313c:	0038      	movs	r0, r7
    313e:	4b3a      	ldr	r3, [pc, #232]	; (3228 <spi_init+0x1c4>)
    3140:	4798      	blx	r3
    3142:	e00a      	b.n	315a <spi_init+0xf6>
    3144:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    3146:	2c04      	cmp	r4, #4
    3148:	d010      	beq.n	316c <spi_init+0x108>
    314a:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    314c:	00a3      	lsls	r3, r4, #2
    314e:	aa02      	add	r2, sp, #8
    3150:	200c      	movs	r0, #12
    3152:	1812      	adds	r2, r2, r0
    3154:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    3156:	2800      	cmp	r0, #0
    3158:	d0f0      	beq.n	313c <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    315a:	1c43      	adds	r3, r0, #1
    315c:	d0f2      	beq.n	3144 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    315e:	a904      	add	r1, sp, #16
    3160:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    3162:	0c00      	lsrs	r0, r0, #16
    3164:	b2c0      	uxtb	r0, r0
    3166:	4b31      	ldr	r3, [pc, #196]	; (322c <spi_init+0x1c8>)
    3168:	4798      	blx	r3
    316a:	e7eb      	b.n	3144 <spi_init+0xe0>
	module->mode             = config->mode;
    316c:	7833      	ldrb	r3, [r6, #0]
    316e:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    3170:	7c33      	ldrb	r3, [r6, #16]
    3172:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    3174:	7cb3      	ldrb	r3, [r6, #18]
    3176:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    3178:	7d33      	ldrb	r3, [r6, #20]
    317a:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    317c:	2200      	movs	r2, #0
    317e:	ab02      	add	r3, sp, #8
    3180:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    3182:	7833      	ldrb	r3, [r6, #0]
    3184:	2b01      	cmp	r3, #1
    3186:	d028      	beq.n	31da <spi_init+0x176>
	ctrla |= config->transfer_mode;
    3188:	6873      	ldr	r3, [r6, #4]
    318a:	68b2      	ldr	r2, [r6, #8]
    318c:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    318e:	68f2      	ldr	r2, [r6, #12]
    3190:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    3192:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    3194:	7c72      	ldrb	r2, [r6, #17]
    3196:	2a00      	cmp	r2, #0
    3198:	d103      	bne.n	31a2 <spi_init+0x13e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    319a:	4a25      	ldr	r2, [pc, #148]	; (3230 <spi_init+0x1cc>)
    319c:	7892      	ldrb	r2, [r2, #2]
    319e:	0792      	lsls	r2, r2, #30
    31a0:	d501      	bpl.n	31a6 <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    31a2:	2280      	movs	r2, #128	; 0x80
    31a4:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    31a6:	7cb2      	ldrb	r2, [r6, #18]
    31a8:	2a00      	cmp	r2, #0
    31aa:	d002      	beq.n	31b2 <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    31ac:	2280      	movs	r2, #128	; 0x80
    31ae:	0292      	lsls	r2, r2, #10
    31b0:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    31b2:	7cf2      	ldrb	r2, [r6, #19]
    31b4:	2a00      	cmp	r2, #0
    31b6:	d002      	beq.n	31be <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    31b8:	2280      	movs	r2, #128	; 0x80
    31ba:	0092      	lsls	r2, r2, #2
    31bc:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    31be:	7d32      	ldrb	r2, [r6, #20]
    31c0:	2a00      	cmp	r2, #0
    31c2:	d002      	beq.n	31ca <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    31c4:	2280      	movs	r2, #128	; 0x80
    31c6:	0192      	lsls	r2, r2, #6
    31c8:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    31ca:	683a      	ldr	r2, [r7, #0]
    31cc:	4313      	orrs	r3, r2
    31ce:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    31d0:	687b      	ldr	r3, [r7, #4]
    31d2:	430b      	orrs	r3, r1
    31d4:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    31d6:	2000      	movs	r0, #0
    31d8:	e74e      	b.n	3078 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    31da:	6828      	ldr	r0, [r5, #0]
    31dc:	4b0a      	ldr	r3, [pc, #40]	; (3208 <spi_init+0x1a4>)
    31de:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    31e0:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    31e2:	b2c0      	uxtb	r0, r0
    31e4:	4b13      	ldr	r3, [pc, #76]	; (3234 <spi_init+0x1d0>)
    31e6:	4798      	blx	r3
    31e8:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    31ea:	ab02      	add	r3, sp, #8
    31ec:	1d9a      	adds	r2, r3, #6
    31ee:	69b0      	ldr	r0, [r6, #24]
    31f0:	4b11      	ldr	r3, [pc, #68]	; (3238 <spi_init+0x1d4>)
    31f2:	4798      	blx	r3
    31f4:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    31f6:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    31f8:	2b00      	cmp	r3, #0
    31fa:	d000      	beq.n	31fe <spi_init+0x19a>
    31fc:	e73c      	b.n	3078 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    31fe:	ab02      	add	r3, sp, #8
    3200:	3306      	adds	r3, #6
    3202:	781b      	ldrb	r3, [r3, #0]
    3204:	733b      	strb	r3, [r7, #12]
    3206:	e7bf      	b.n	3188 <spi_init+0x124>
    3208:	00002f75 	.word	0x00002f75
    320c:	40000400 	.word	0x40000400
    3210:	00003975 	.word	0x00003975
    3214:	000038e9 	.word	0x000038e9
    3218:	00002e2d 	.word	0x00002e2d
    321c:	00003275 	.word	0x00003275
    3220:	00002fc1 	.word	0x00002fc1
    3224:	20000238 	.word	0x20000238
    3228:	00002e79 	.word	0x00002e79
    322c:	00003a6d 	.word	0x00003a6d
    3230:	41002000 	.word	0x41002000
    3234:	00003991 	.word	0x00003991
    3238:	00002e05 	.word	0x00002e05

0000323c <spi_transceive_buffer_job>:
enum status_code spi_transceive_buffer_job(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
    323c:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    323e:	2417      	movs	r4, #23
	if (length == 0) {
    3240:	2b00      	cmp	r3, #0
    3242:	d101      	bne.n	3248 <spi_transceive_buffer_job+0xc>

	/* Issue internal transceive */
	_spi_transceive_buffer(module, tx_data, rx_data, length);

	return STATUS_OK;
}
    3244:	0020      	movs	r0, r4
    3246:	bd30      	pop	{r4, r5, pc}
	if (!(module->receiver_enabled)) {
    3248:	79c5      	ldrb	r5, [r0, #7]
		return STATUS_ERR_DENIED;
    324a:	3405      	adds	r4, #5
	if (!(module->receiver_enabled)) {
    324c:	2d00      	cmp	r5, #0
    324e:	d0f9      	beq.n	3244 <spi_transceive_buffer_job+0x8>
	if (module->status == STATUS_BUSY) {
    3250:	341c      	adds	r4, #28
    3252:	5d05      	ldrb	r5, [r0, r4]
		return STATUS_BUSY;
    3254:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    3256:	2d05      	cmp	r5, #5
    3258:	d0f4      	beq.n	3244 <spi_transceive_buffer_job+0x8>
	module->remaining_tx_buffer_length = length;
    325a:	8683      	strh	r3, [r0, #52]	; 0x34
	module->remaining_rx_buffer_length = length;
    325c:	8603      	strh	r3, [r0, #48]	; 0x30
	module->rx_buffer_ptr = rx_data;
    325e:	6282      	str	r2, [r0, #40]	; 0x28
	module->tx_buffer_ptr = tx_data;
    3260:	62c1      	str	r1, [r0, #44]	; 0x2c
	module->status = STATUS_BUSY;
    3262:	2305      	movs	r3, #5
    3264:	2238      	movs	r2, #56	; 0x38
    3266:	5483      	strb	r3, [r0, r2]
	module->dir = SPI_DIRECTION_BOTH;
    3268:	3a36      	subs	r2, #54	; 0x36
    326a:	7242      	strb	r2, [r0, #9]
	SercomSpi *const hw = &(module->hw->SPI);
    326c:	6802      	ldr	r2, [r0, #0]
	hw->INTENSET.reg = (SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY |
    326e:	7593      	strb	r3, [r2, #22]
	return STATUS_OK;
    3270:	2400      	movs	r4, #0
    3272:	e7e7      	b.n	3244 <spi_transceive_buffer_job+0x8>

00003274 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    3274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    3276:	0080      	lsls	r0, r0, #2
    3278:	4b70      	ldr	r3, [pc, #448]	; (343c <_spi_interrupt_handler+0x1c8>)
    327a:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    327c:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    327e:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    3280:	5ce7      	ldrb	r7, [r4, r3]
    3282:	2236      	movs	r2, #54	; 0x36
    3284:	5ca2      	ldrb	r2, [r4, r2]
    3286:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    3288:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    328a:	7db5      	ldrb	r5, [r6, #22]
    328c:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    328e:	07eb      	lsls	r3, r5, #31
    3290:	d502      	bpl.n	3298 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    3292:	7963      	ldrb	r3, [r4, #5]
    3294:	2b01      	cmp	r3, #1
    3296:	d01e      	beq.n	32d6 <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    3298:	076b      	lsls	r3, r5, #29
    329a:	d511      	bpl.n	32c0 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    329c:	8b73      	ldrh	r3, [r6, #26]
    329e:	075b      	lsls	r3, r3, #29
    32a0:	d55a      	bpl.n	3358 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    32a2:	7a63      	ldrb	r3, [r4, #9]
    32a4:	2b01      	cmp	r3, #1
    32a6:	d008      	beq.n	32ba <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    32a8:	221e      	movs	r2, #30
    32aa:	2338      	movs	r3, #56	; 0x38
    32ac:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    32ae:	3b35      	subs	r3, #53	; 0x35
    32b0:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    32b2:	3302      	adds	r3, #2
    32b4:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    32b6:	073b      	lsls	r3, r7, #28
    32b8:	d44a      	bmi.n	3350 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    32ba:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    32bc:	2304      	movs	r3, #4
    32be:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    32c0:	07ab      	lsls	r3, r5, #30
    32c2:	d503      	bpl.n	32cc <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    32c4:	7963      	ldrb	r3, [r4, #5]
    32c6:	2b01      	cmp	r3, #1
    32c8:	d100      	bne.n	32cc <_spi_interrupt_handler+0x58>
    32ca:	e097      	b.n	33fc <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    32cc:	b26d      	sxtb	r5, r5
    32ce:	2d00      	cmp	r5, #0
    32d0:	da00      	bge.n	32d4 <_spi_interrupt_handler+0x60>
    32d2:	e0a9      	b.n	3428 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    32d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    32d6:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    32d8:	2b00      	cmp	r3, #0
    32da:	d022      	beq.n	3322 <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    32dc:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    32de:	2b00      	cmp	r3, #0
    32e0:	d0da      	beq.n	3298 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    32e2:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    32e4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    32e6:	7813      	ldrb	r3, [r2, #0]
    32e8:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    32ea:	1c50      	adds	r0, r2, #1
    32ec:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    32ee:	79a0      	ldrb	r0, [r4, #6]
    32f0:	2801      	cmp	r0, #1
    32f2:	d027      	beq.n	3344 <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    32f4:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    32f6:	05db      	lsls	r3, r3, #23
    32f8:	0ddb      	lsrs	r3, r3, #23
    32fa:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    32fc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    32fe:	3b01      	subs	r3, #1
    3300:	b29b      	uxth	r3, r3
    3302:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    3304:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    3306:	b29b      	uxth	r3, r3
    3308:	2b00      	cmp	r3, #0
    330a:	d1c5      	bne.n	3298 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    330c:	3301      	adds	r3, #1
    330e:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    3310:	7a63      	ldrb	r3, [r4, #9]
    3312:	2b01      	cmp	r3, #1
    3314:	d1c0      	bne.n	3298 <_spi_interrupt_handler+0x24>
    3316:	79e3      	ldrb	r3, [r4, #7]
    3318:	2b00      	cmp	r3, #0
    331a:	d1bd      	bne.n	3298 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    331c:	3302      	adds	r3, #2
    331e:	75b3      	strb	r3, [r6, #22]
    3320:	e7ba      	b.n	3298 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    3322:	4b47      	ldr	r3, [pc, #284]	; (3440 <_spi_interrupt_handler+0x1cc>)
    3324:	881b      	ldrh	r3, [r3, #0]
    3326:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    3328:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    332a:	3b01      	subs	r3, #1
    332c:	b29b      	uxth	r3, r3
    332e:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    3330:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    3332:	b29b      	uxth	r3, r3
    3334:	2b00      	cmp	r3, #0
    3336:	d101      	bne.n	333c <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    3338:	3301      	adds	r3, #1
    333a:	7533      	strb	r3, [r6, #20]
		if (0
    333c:	7963      	ldrb	r3, [r4, #5]
    333e:	2b01      	cmp	r3, #1
    3340:	d0cc      	beq.n	32dc <_spi_interrupt_handler+0x68>
    3342:	e7a9      	b.n	3298 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    3344:	7850      	ldrb	r0, [r2, #1]
    3346:	0200      	lsls	r0, r0, #8
    3348:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    334a:	3202      	adds	r2, #2
    334c:	62e2      	str	r2, [r4, #44]	; 0x2c
    334e:	e7d2      	b.n	32f6 <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    3350:	0020      	movs	r0, r4
    3352:	69a3      	ldr	r3, [r4, #24]
    3354:	4798      	blx	r3
    3356:	e7b0      	b.n	32ba <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    3358:	7a63      	ldrb	r3, [r4, #9]
    335a:	2b01      	cmp	r3, #1
    335c:	d028      	beq.n	33b0 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    335e:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    3360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3362:	05db      	lsls	r3, r3, #23
    3364:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    3366:	b2da      	uxtb	r2, r3
    3368:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    336a:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    336c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    336e:	1c51      	adds	r1, r2, #1
    3370:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3372:	79a1      	ldrb	r1, [r4, #6]
    3374:	2901      	cmp	r1, #1
    3376:	d034      	beq.n	33e2 <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    3378:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    337a:	3b01      	subs	r3, #1
    337c:	b29b      	uxth	r3, r3
    337e:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    3380:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    3382:	b29b      	uxth	r3, r3
    3384:	2b00      	cmp	r3, #0
    3386:	d000      	beq.n	338a <_spi_interrupt_handler+0x116>
    3388:	e79a      	b.n	32c0 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    338a:	2200      	movs	r2, #0
    338c:	3338      	adds	r3, #56	; 0x38
    338e:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    3390:	3b34      	subs	r3, #52	; 0x34
    3392:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    3394:	7a63      	ldrb	r3, [r4, #9]
    3396:	2b02      	cmp	r3, #2
    3398:	d029      	beq.n	33ee <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    339a:	7a63      	ldrb	r3, [r4, #9]
    339c:	2b00      	cmp	r3, #0
    339e:	d000      	beq.n	33a2 <_spi_interrupt_handler+0x12e>
    33a0:	e78e      	b.n	32c0 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    33a2:	07bb      	lsls	r3, r7, #30
    33a4:	d400      	bmi.n	33a8 <_spi_interrupt_handler+0x134>
    33a6:	e78b      	b.n	32c0 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    33a8:	0020      	movs	r0, r4
    33aa:	6923      	ldr	r3, [r4, #16]
    33ac:	4798      	blx	r3
    33ae:	e787      	b.n	32c0 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    33b0:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    33b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    33b4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    33b6:	3b01      	subs	r3, #1
    33b8:	b29b      	uxth	r3, r3
    33ba:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    33bc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    33be:	b29b      	uxth	r3, r3
    33c0:	2b00      	cmp	r3, #0
    33c2:	d000      	beq.n	33c6 <_spi_interrupt_handler+0x152>
    33c4:	e77c      	b.n	32c0 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    33c6:	3304      	adds	r3, #4
    33c8:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    33ca:	2200      	movs	r2, #0
    33cc:	3334      	adds	r3, #52	; 0x34
    33ce:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    33d0:	3b35      	subs	r3, #53	; 0x35
    33d2:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    33d4:	07fb      	lsls	r3, r7, #31
    33d6:	d400      	bmi.n	33da <_spi_interrupt_handler+0x166>
    33d8:	e772      	b.n	32c0 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    33da:	0020      	movs	r0, r4
    33dc:	68e3      	ldr	r3, [r4, #12]
    33de:	4798      	blx	r3
    33e0:	e76e      	b.n	32c0 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    33e2:	0a1b      	lsrs	r3, r3, #8
    33e4:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    33e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    33e8:	3301      	adds	r3, #1
    33ea:	62a3      	str	r3, [r4, #40]	; 0x28
    33ec:	e7c4      	b.n	3378 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    33ee:	077b      	lsls	r3, r7, #29
    33f0:	d400      	bmi.n	33f4 <_spi_interrupt_handler+0x180>
    33f2:	e765      	b.n	32c0 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    33f4:	0020      	movs	r0, r4
    33f6:	6963      	ldr	r3, [r4, #20]
    33f8:	4798      	blx	r3
    33fa:	e761      	b.n	32c0 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    33fc:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    33fe:	2b01      	cmp	r3, #1
    3400:	d000      	beq.n	3404 <_spi_interrupt_handler+0x190>
    3402:	e763      	b.n	32cc <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    3404:	79e3      	ldrb	r3, [r4, #7]
    3406:	2b00      	cmp	r3, #0
    3408:	d000      	beq.n	340c <_spi_interrupt_handler+0x198>
    340a:	e75f      	b.n	32cc <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    340c:	3302      	adds	r3, #2
    340e:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    3410:	3301      	adds	r3, #1
    3412:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    3414:	2200      	movs	r2, #0
    3416:	3335      	adds	r3, #53	; 0x35
    3418:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    341a:	07fb      	lsls	r3, r7, #31
    341c:	d400      	bmi.n	3420 <_spi_interrupt_handler+0x1ac>
    341e:	e755      	b.n	32cc <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    3420:	0020      	movs	r0, r4
    3422:	68e3      	ldr	r3, [r4, #12]
    3424:	4798      	blx	r3
    3426:	e751      	b.n	32cc <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    3428:	2380      	movs	r3, #128	; 0x80
    342a:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    342c:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    342e:	067b      	lsls	r3, r7, #25
    3430:	d400      	bmi.n	3434 <_spi_interrupt_handler+0x1c0>
    3432:	e74f      	b.n	32d4 <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    3434:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3436:	0020      	movs	r0, r4
    3438:	4798      	blx	r3
}
    343a:	e74b      	b.n	32d4 <_spi_interrupt_handler+0x60>
    343c:	20000238 	.word	0x20000238
    3440:	20000248 	.word	0x20000248

00003444 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    3444:	b510      	push	{r4, lr}
	switch (clock_source) {
    3446:	2808      	cmp	r0, #8
    3448:	d803      	bhi.n	3452 <system_clock_source_get_hz+0xe>
    344a:	0080      	lsls	r0, r0, #2
    344c:	4b1c      	ldr	r3, [pc, #112]	; (34c0 <system_clock_source_get_hz+0x7c>)
    344e:	581b      	ldr	r3, [r3, r0]
    3450:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    3452:	2000      	movs	r0, #0
    3454:	e032      	b.n	34bc <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    3456:	4b1b      	ldr	r3, [pc, #108]	; (34c4 <system_clock_source_get_hz+0x80>)
    3458:	6918      	ldr	r0, [r3, #16]
    345a:	e02f      	b.n	34bc <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    345c:	4b1a      	ldr	r3, [pc, #104]	; (34c8 <system_clock_source_get_hz+0x84>)
    345e:	6a1b      	ldr	r3, [r3, #32]
    3460:	059b      	lsls	r3, r3, #22
    3462:	0f9b      	lsrs	r3, r3, #30
    3464:	4819      	ldr	r0, [pc, #100]	; (34cc <system_clock_source_get_hz+0x88>)
    3466:	40d8      	lsrs	r0, r3
    3468:	e028      	b.n	34bc <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    346a:	4b16      	ldr	r3, [pc, #88]	; (34c4 <system_clock_source_get_hz+0x80>)
    346c:	6958      	ldr	r0, [r3, #20]
    346e:	e025      	b.n	34bc <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    3470:	4b14      	ldr	r3, [pc, #80]	; (34c4 <system_clock_source_get_hz+0x80>)
    3472:	681b      	ldr	r3, [r3, #0]
			return 0;
    3474:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    3476:	079b      	lsls	r3, r3, #30
    3478:	d520      	bpl.n	34bc <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    347a:	4913      	ldr	r1, [pc, #76]	; (34c8 <system_clock_source_get_hz+0x84>)
    347c:	2210      	movs	r2, #16
    347e:	68cb      	ldr	r3, [r1, #12]
    3480:	421a      	tst	r2, r3
    3482:	d0fc      	beq.n	347e <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    3484:	4b0f      	ldr	r3, [pc, #60]	; (34c4 <system_clock_source_get_hz+0x80>)
    3486:	681a      	ldr	r2, [r3, #0]
    3488:	2324      	movs	r3, #36	; 0x24
    348a:	4013      	ands	r3, r2
    348c:	2b04      	cmp	r3, #4
    348e:	d001      	beq.n	3494 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    3490:	480f      	ldr	r0, [pc, #60]	; (34d0 <system_clock_source_get_hz+0x8c>)
    3492:	e013      	b.n	34bc <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3494:	2000      	movs	r0, #0
    3496:	4b0f      	ldr	r3, [pc, #60]	; (34d4 <system_clock_source_get_hz+0x90>)
    3498:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    349a:	4b0a      	ldr	r3, [pc, #40]	; (34c4 <system_clock_source_get_hz+0x80>)
    349c:	689b      	ldr	r3, [r3, #8]
    349e:	041b      	lsls	r3, r3, #16
    34a0:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    34a2:	4358      	muls	r0, r3
    34a4:	e00a      	b.n	34bc <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    34a6:	2350      	movs	r3, #80	; 0x50
    34a8:	4a07      	ldr	r2, [pc, #28]	; (34c8 <system_clock_source_get_hz+0x84>)
    34aa:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    34ac:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    34ae:	075b      	lsls	r3, r3, #29
    34b0:	d504      	bpl.n	34bc <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    34b2:	4b04      	ldr	r3, [pc, #16]	; (34c4 <system_clock_source_get_hz+0x80>)
    34b4:	68d8      	ldr	r0, [r3, #12]
    34b6:	e001      	b.n	34bc <system_clock_source_get_hz+0x78>
		return 32768UL;
    34b8:	2080      	movs	r0, #128	; 0x80
    34ba:	0200      	lsls	r0, r0, #8
	}
}
    34bc:	bd10      	pop	{r4, pc}
    34be:	46c0      	nop			; (mov r8, r8)
    34c0:	00005e90 	.word	0x00005e90
    34c4:	20000168 	.word	0x20000168
    34c8:	40000800 	.word	0x40000800
    34cc:	007a1200 	.word	0x007a1200
    34d0:	02dc6c00 	.word	0x02dc6c00
    34d4:	00003991 	.word	0x00003991

000034d8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    34d8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    34da:	490c      	ldr	r1, [pc, #48]	; (350c <system_clock_source_osc8m_set_config+0x34>)
    34dc:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    34de:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    34e0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    34e2:	7840      	ldrb	r0, [r0, #1]
    34e4:	2201      	movs	r2, #1
    34e6:	4010      	ands	r0, r2
    34e8:	0180      	lsls	r0, r0, #6
    34ea:	2640      	movs	r6, #64	; 0x40
    34ec:	43b3      	bics	r3, r6
    34ee:	4303      	orrs	r3, r0
    34f0:	402a      	ands	r2, r5
    34f2:	01d2      	lsls	r2, r2, #7
    34f4:	2080      	movs	r0, #128	; 0x80
    34f6:	4383      	bics	r3, r0
    34f8:	4313      	orrs	r3, r2
    34fa:	2203      	movs	r2, #3
    34fc:	4022      	ands	r2, r4
    34fe:	0212      	lsls	r2, r2, #8
    3500:	4803      	ldr	r0, [pc, #12]	; (3510 <system_clock_source_osc8m_set_config+0x38>)
    3502:	4003      	ands	r3, r0
    3504:	4313      	orrs	r3, r2
    3506:	620b      	str	r3, [r1, #32]
}
    3508:	bd70      	pop	{r4, r5, r6, pc}
    350a:	46c0      	nop			; (mov r8, r8)
    350c:	40000800 	.word	0x40000800
    3510:	fffffcff 	.word	0xfffffcff

00003514 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    3514:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    3516:	7a03      	ldrb	r3, [r0, #8]
    3518:	069b      	lsls	r3, r3, #26
    351a:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    351c:	8942      	ldrh	r2, [r0, #10]
    351e:	0592      	lsls	r2, r2, #22
    3520:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    3522:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    3524:	4918      	ldr	r1, [pc, #96]	; (3588 <system_clock_source_dfll_set_config+0x74>)
    3526:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    3528:	7983      	ldrb	r3, [r0, #6]
    352a:	79c2      	ldrb	r2, [r0, #7]
    352c:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    352e:	8842      	ldrh	r2, [r0, #2]
    3530:	8884      	ldrh	r4, [r0, #4]
    3532:	4322      	orrs	r2, r4
    3534:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    3536:	7842      	ldrb	r2, [r0, #1]
    3538:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    353a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    353c:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    353e:	7803      	ldrb	r3, [r0, #0]
    3540:	2b04      	cmp	r3, #4
    3542:	d011      	beq.n	3568 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    3544:	2b20      	cmp	r3, #32
    3546:	d10e      	bne.n	3566 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    3548:	7b03      	ldrb	r3, [r0, #12]
    354a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    354c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    354e:	4313      	orrs	r3, r2
    3550:	89c2      	ldrh	r2, [r0, #14]
    3552:	0412      	lsls	r2, r2, #16
    3554:	490d      	ldr	r1, [pc, #52]	; (358c <system_clock_source_dfll_set_config+0x78>)
    3556:	400a      	ands	r2, r1
    3558:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    355a:	4a0b      	ldr	r2, [pc, #44]	; (3588 <system_clock_source_dfll_set_config+0x74>)
    355c:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    355e:	6811      	ldr	r1, [r2, #0]
    3560:	4b0b      	ldr	r3, [pc, #44]	; (3590 <system_clock_source_dfll_set_config+0x7c>)
    3562:	430b      	orrs	r3, r1
    3564:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    3566:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    3568:	7b03      	ldrb	r3, [r0, #12]
    356a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    356c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    356e:	4313      	orrs	r3, r2
    3570:	89c2      	ldrh	r2, [r0, #14]
    3572:	0412      	lsls	r2, r2, #16
    3574:	4905      	ldr	r1, [pc, #20]	; (358c <system_clock_source_dfll_set_config+0x78>)
    3576:	400a      	ands	r2, r1
    3578:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    357a:	4a03      	ldr	r2, [pc, #12]	; (3588 <system_clock_source_dfll_set_config+0x74>)
    357c:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    357e:	6813      	ldr	r3, [r2, #0]
    3580:	2104      	movs	r1, #4
    3582:	430b      	orrs	r3, r1
    3584:	6013      	str	r3, [r2, #0]
    3586:	e7ee      	b.n	3566 <system_clock_source_dfll_set_config+0x52>
    3588:	20000168 	.word	0x20000168
    358c:	03ff0000 	.word	0x03ff0000
    3590:	00000424 	.word	0x00000424

00003594 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    3594:	2808      	cmp	r0, #8
    3596:	d803      	bhi.n	35a0 <system_clock_source_enable+0xc>
    3598:	0080      	lsls	r0, r0, #2
    359a:	4b25      	ldr	r3, [pc, #148]	; (3630 <system_clock_source_enable+0x9c>)
    359c:	581b      	ldr	r3, [r3, r0]
    359e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    35a0:	2017      	movs	r0, #23
    35a2:	e044      	b.n	362e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    35a4:	4a23      	ldr	r2, [pc, #140]	; (3634 <system_clock_source_enable+0xa0>)
    35a6:	6a13      	ldr	r3, [r2, #32]
    35a8:	2102      	movs	r1, #2
    35aa:	430b      	orrs	r3, r1
    35ac:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    35ae:	2000      	movs	r0, #0
    35b0:	e03d      	b.n	362e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    35b2:	4a20      	ldr	r2, [pc, #128]	; (3634 <system_clock_source_enable+0xa0>)
    35b4:	6993      	ldr	r3, [r2, #24]
    35b6:	2102      	movs	r1, #2
    35b8:	430b      	orrs	r3, r1
    35ba:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    35bc:	2000      	movs	r0, #0
		break;
    35be:	e036      	b.n	362e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    35c0:	4a1c      	ldr	r2, [pc, #112]	; (3634 <system_clock_source_enable+0xa0>)
    35c2:	8a13      	ldrh	r3, [r2, #16]
    35c4:	2102      	movs	r1, #2
    35c6:	430b      	orrs	r3, r1
    35c8:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    35ca:	2000      	movs	r0, #0
		break;
    35cc:	e02f      	b.n	362e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    35ce:	4a19      	ldr	r2, [pc, #100]	; (3634 <system_clock_source_enable+0xa0>)
    35d0:	8a93      	ldrh	r3, [r2, #20]
    35d2:	2102      	movs	r1, #2
    35d4:	430b      	orrs	r3, r1
    35d6:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    35d8:	2000      	movs	r0, #0
		break;
    35da:	e028      	b.n	362e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    35dc:	4916      	ldr	r1, [pc, #88]	; (3638 <system_clock_source_enable+0xa4>)
    35de:	680b      	ldr	r3, [r1, #0]
    35e0:	2202      	movs	r2, #2
    35e2:	4313      	orrs	r3, r2
    35e4:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    35e6:	4b13      	ldr	r3, [pc, #76]	; (3634 <system_clock_source_enable+0xa0>)
    35e8:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    35ea:	0019      	movs	r1, r3
    35ec:	320e      	adds	r2, #14
    35ee:	68cb      	ldr	r3, [r1, #12]
    35f0:	421a      	tst	r2, r3
    35f2:	d0fc      	beq.n	35ee <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    35f4:	4a10      	ldr	r2, [pc, #64]	; (3638 <system_clock_source_enable+0xa4>)
    35f6:	6891      	ldr	r1, [r2, #8]
    35f8:	4b0e      	ldr	r3, [pc, #56]	; (3634 <system_clock_source_enable+0xa0>)
    35fa:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    35fc:	6852      	ldr	r2, [r2, #4]
    35fe:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    3600:	2200      	movs	r2, #0
    3602:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3604:	0019      	movs	r1, r3
    3606:	3210      	adds	r2, #16
    3608:	68cb      	ldr	r3, [r1, #12]
    360a:	421a      	tst	r2, r3
    360c:	d0fc      	beq.n	3608 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    360e:	4b0a      	ldr	r3, [pc, #40]	; (3638 <system_clock_source_enable+0xa4>)
    3610:	681b      	ldr	r3, [r3, #0]
    3612:	b29b      	uxth	r3, r3
    3614:	4a07      	ldr	r2, [pc, #28]	; (3634 <system_clock_source_enable+0xa0>)
    3616:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    3618:	2000      	movs	r0, #0
    361a:	e008      	b.n	362e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    361c:	4905      	ldr	r1, [pc, #20]	; (3634 <system_clock_source_enable+0xa0>)
    361e:	2244      	movs	r2, #68	; 0x44
    3620:	5c8b      	ldrb	r3, [r1, r2]
    3622:	2002      	movs	r0, #2
    3624:	4303      	orrs	r3, r0
    3626:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    3628:	2000      	movs	r0, #0
		break;
    362a:	e000      	b.n	362e <system_clock_source_enable+0x9a>
		return STATUS_OK;
    362c:	2000      	movs	r0, #0
}
    362e:	4770      	bx	lr
    3630:	00005eb4 	.word	0x00005eb4
    3634:	40000800 	.word	0x40000800
    3638:	20000168 	.word	0x20000168

0000363c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    363c:	b530      	push	{r4, r5, lr}
    363e:	b08b      	sub	sp, #44	; 0x2c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    3640:	22c2      	movs	r2, #194	; 0xc2
    3642:	00d2      	lsls	r2, r2, #3
    3644:	4b30      	ldr	r3, [pc, #192]	; (3708 <system_clock_init+0xcc>)
    3646:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    3648:	4a30      	ldr	r2, [pc, #192]	; (370c <system_clock_init+0xd0>)
    364a:	6853      	ldr	r3, [r2, #4]
    364c:	211e      	movs	r1, #30
    364e:	438b      	bics	r3, r1
    3650:	391a      	subs	r1, #26
    3652:	430b      	orrs	r3, r1
    3654:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    3656:	2201      	movs	r2, #1
    3658:	ab01      	add	r3, sp, #4
    365a:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    365c:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    365e:	4d2c      	ldr	r5, [pc, #176]	; (3710 <system_clock_init+0xd4>)
    3660:	b2e0      	uxtb	r0, r4
    3662:	a901      	add	r1, sp, #4
    3664:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3666:	3401      	adds	r4, #1
    3668:	2c25      	cmp	r4, #37	; 0x25
    366a:	d1f9      	bne.n	3660 <system_clock_init+0x24>
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    366c:	ab05      	add	r3, sp, #20
    366e:	2200      	movs	r2, #0
    3670:	2100      	movs	r1, #0
    3672:	8059      	strh	r1, [r3, #2]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    3674:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    3676:	71da      	strb	r2, [r3, #7]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    3678:	3120      	adds	r1, #32
    367a:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    367c:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    367e:	4b25      	ldr	r3, [pc, #148]	; (3714 <system_clock_init+0xd8>)
    3680:	681b      	ldr	r3, [r3, #0]
    3682:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    3684:	2b3f      	cmp	r3, #63	; 0x3f
    3686:	d03c      	beq.n	3702 <system_clock_init+0xc6>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    3688:	a805      	add	r0, sp, #20
    368a:	7203      	strb	r3, [r0, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    368c:	2307      	movs	r3, #7
    368e:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_max_step   = 10;
    3690:	3303      	adds	r3, #3
    3692:	81c3      	strh	r3, [r0, #14]
		dfll_conf.fine_value   = 0x1ff;
    3694:	4b20      	ldr	r3, [pc, #128]	; (3718 <system_clock_init+0xdc>)
    3696:	8143      	strh	r3, [r0, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    3698:	3bff      	subs	r3, #255	; 0xff
    369a:	8083      	strh	r3, [r0, #4]

		dfll_conf.multiply_factor = 48000;
    369c:	4b1f      	ldr	r3, [pc, #124]	; (371c <system_clock_init+0xe0>)
    369e:	8203      	strh	r3, [r0, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    36a0:	4b1f      	ldr	r3, [pc, #124]	; (3720 <system_clock_init+0xe4>)
    36a2:	4798      	blx	r3
	config->run_in_standby  = false;
    36a4:	a804      	add	r0, sp, #16
    36a6:	2300      	movs	r3, #0
    36a8:	7043      	strb	r3, [r0, #1]
	config->on_demand       = true;
    36aa:	2201      	movs	r2, #1
    36ac:	7082      	strb	r2, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    36ae:	7003      	strb	r3, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    36b0:	4b1c      	ldr	r3, [pc, #112]	; (3724 <system_clock_init+0xe8>)
    36b2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    36b4:	2006      	movs	r0, #6
    36b6:	4c1c      	ldr	r4, [pc, #112]	; (3728 <system_clock_init+0xec>)
    36b8:	47a0      	blx	r4


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    36ba:	4b1c      	ldr	r3, [pc, #112]	; (372c <system_clock_init+0xf0>)
    36bc:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    36be:	2007      	movs	r0, #7
    36c0:	47a0      	blx	r4
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    36c2:	4911      	ldr	r1, [pc, #68]	; (3708 <system_clock_init+0xcc>)
    36c4:	2210      	movs	r2, #16
    36c6:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    36c8:	421a      	tst	r2, r3
    36ca:	d0fc      	beq.n	36c6 <system_clock_init+0x8a>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    36cc:	4a0e      	ldr	r2, [pc, #56]	; (3708 <system_clock_init+0xcc>)
    36ce:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    36d0:	2180      	movs	r1, #128	; 0x80
    36d2:	430b      	orrs	r3, r1
    36d4:	8493      	strh	r3, [r2, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    36d6:	4a16      	ldr	r2, [pc, #88]	; (3730 <system_clock_init+0xf4>)
    36d8:	2300      	movs	r3, #0
    36da:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    36dc:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    36de:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    36e0:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    36e2:	a901      	add	r1, sp, #4
    36e4:	2201      	movs	r2, #1
    36e6:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    36e8:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    36ea:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    36ec:	3307      	adds	r3, #7
    36ee:	700b      	strb	r3, [r1, #0]
    36f0:	720a      	strb	r2, [r1, #8]
    36f2:	2000      	movs	r0, #0
    36f4:	4b0f      	ldr	r3, [pc, #60]	; (3734 <system_clock_init+0xf8>)
    36f6:	4798      	blx	r3
    36f8:	2000      	movs	r0, #0
    36fa:	4b0f      	ldr	r3, [pc, #60]	; (3738 <system_clock_init+0xfc>)
    36fc:	4798      	blx	r3
#endif
}
    36fe:	b00b      	add	sp, #44	; 0x2c
    3700:	bd30      	pop	{r4, r5, pc}
		coarse = 0x1f;
    3702:	3b20      	subs	r3, #32
    3704:	e7c0      	b.n	3688 <system_clock_init+0x4c>
    3706:	46c0      	nop			; (mov r8, r8)
    3708:	40000800 	.word	0x40000800
    370c:	41004000 	.word	0x41004000
    3710:	00003975 	.word	0x00003975
    3714:	00806024 	.word	0x00806024
    3718:	000001ff 	.word	0x000001ff
    371c:	ffffbb80 	.word	0xffffbb80
    3720:	00003515 	.word	0x00003515
    3724:	000034d9 	.word	0x000034d9
    3728:	00003595 	.word	0x00003595
    372c:	0000373d 	.word	0x0000373d
    3730:	40000400 	.word	0x40000400
    3734:	00003761 	.word	0x00003761
    3738:	00003819 	.word	0x00003819

0000373c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    373c:	4a06      	ldr	r2, [pc, #24]	; (3758 <system_gclk_init+0x1c>)
    373e:	6993      	ldr	r3, [r2, #24]
    3740:	2108      	movs	r1, #8
    3742:	430b      	orrs	r3, r1
    3744:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    3746:	2201      	movs	r2, #1
    3748:	4b04      	ldr	r3, [pc, #16]	; (375c <system_gclk_init+0x20>)
    374a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    374c:	0019      	movs	r1, r3
    374e:	780b      	ldrb	r3, [r1, #0]
    3750:	4213      	tst	r3, r2
    3752:	d1fc      	bne.n	374e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    3754:	4770      	bx	lr
    3756:	46c0      	nop			; (mov r8, r8)
    3758:	40000400 	.word	0x40000400
    375c:	40000c00 	.word	0x40000c00

00003760 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    3760:	b570      	push	{r4, r5, r6, lr}
    3762:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    3764:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    3766:	780d      	ldrb	r5, [r1, #0]
    3768:	022d      	lsls	r5, r5, #8
    376a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    376c:	784b      	ldrb	r3, [r1, #1]
    376e:	2b00      	cmp	r3, #0
    3770:	d002      	beq.n	3778 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    3772:	2380      	movs	r3, #128	; 0x80
    3774:	02db      	lsls	r3, r3, #11
    3776:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    3778:	7a4b      	ldrb	r3, [r1, #9]
    377a:	2b00      	cmp	r3, #0
    377c:	d002      	beq.n	3784 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    377e:	2380      	movs	r3, #128	; 0x80
    3780:	031b      	lsls	r3, r3, #12
    3782:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    3784:	6848      	ldr	r0, [r1, #4]
    3786:	2801      	cmp	r0, #1
    3788:	d910      	bls.n	37ac <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    378a:	1e43      	subs	r3, r0, #1
    378c:	4218      	tst	r0, r3
    378e:	d134      	bne.n	37fa <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3790:	2802      	cmp	r0, #2
    3792:	d930      	bls.n	37f6 <system_gclk_gen_set_config+0x96>
    3794:	2302      	movs	r3, #2
    3796:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    3798:	3201      	adds	r2, #1
						mask <<= 1) {
    379a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    379c:	4298      	cmp	r0, r3
    379e:	d8fb      	bhi.n	3798 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    37a0:	0212      	lsls	r2, r2, #8
    37a2:	4332      	orrs	r2, r6
    37a4:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    37a6:	2380      	movs	r3, #128	; 0x80
    37a8:	035b      	lsls	r3, r3, #13
    37aa:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    37ac:	7a0b      	ldrb	r3, [r1, #8]
    37ae:	2b00      	cmp	r3, #0
    37b0:	d002      	beq.n	37b8 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    37b2:	2380      	movs	r3, #128	; 0x80
    37b4:	039b      	lsls	r3, r3, #14
    37b6:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    37b8:	4a13      	ldr	r2, [pc, #76]	; (3808 <system_gclk_gen_set_config+0xa8>)
    37ba:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    37bc:	b25b      	sxtb	r3, r3
    37be:	2b00      	cmp	r3, #0
    37c0:	dbfb      	blt.n	37ba <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    37c2:	4b12      	ldr	r3, [pc, #72]	; (380c <system_gclk_gen_set_config+0xac>)
    37c4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    37c6:	4b12      	ldr	r3, [pc, #72]	; (3810 <system_gclk_gen_set_config+0xb0>)
    37c8:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    37ca:	4a0f      	ldr	r2, [pc, #60]	; (3808 <system_gclk_gen_set_config+0xa8>)
    37cc:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    37ce:	b25b      	sxtb	r3, r3
    37d0:	2b00      	cmp	r3, #0
    37d2:	dbfb      	blt.n	37cc <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    37d4:	4b0c      	ldr	r3, [pc, #48]	; (3808 <system_gclk_gen_set_config+0xa8>)
    37d6:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    37d8:	001a      	movs	r2, r3
    37da:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    37dc:	b25b      	sxtb	r3, r3
    37de:	2b00      	cmp	r3, #0
    37e0:	dbfb      	blt.n	37da <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    37e2:	4a09      	ldr	r2, [pc, #36]	; (3808 <system_gclk_gen_set_config+0xa8>)
    37e4:	6853      	ldr	r3, [r2, #4]
    37e6:	2180      	movs	r1, #128	; 0x80
    37e8:	0249      	lsls	r1, r1, #9
    37ea:	400b      	ands	r3, r1
    37ec:	431d      	orrs	r5, r3
    37ee:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    37f0:	4b08      	ldr	r3, [pc, #32]	; (3814 <system_gclk_gen_set_config+0xb4>)
    37f2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    37f4:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    37f6:	2200      	movs	r2, #0
    37f8:	e7d2      	b.n	37a0 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    37fa:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    37fc:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    37fe:	2380      	movs	r3, #128	; 0x80
    3800:	029b      	lsls	r3, r3, #10
    3802:	431d      	orrs	r5, r3
    3804:	e7d2      	b.n	37ac <system_gclk_gen_set_config+0x4c>
    3806:	46c0      	nop			; (mov r8, r8)
    3808:	40000c00 	.word	0x40000c00
    380c:	00002c61 	.word	0x00002c61
    3810:	40000c08 	.word	0x40000c08
    3814:	00002ca1 	.word	0x00002ca1

00003818 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3818:	b510      	push	{r4, lr}
    381a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    381c:	4a0b      	ldr	r2, [pc, #44]	; (384c <system_gclk_gen_enable+0x34>)
    381e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3820:	b25b      	sxtb	r3, r3
    3822:	2b00      	cmp	r3, #0
    3824:	dbfb      	blt.n	381e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    3826:	4b0a      	ldr	r3, [pc, #40]	; (3850 <system_gclk_gen_enable+0x38>)
    3828:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    382a:	4b0a      	ldr	r3, [pc, #40]	; (3854 <system_gclk_gen_enable+0x3c>)
    382c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    382e:	4a07      	ldr	r2, [pc, #28]	; (384c <system_gclk_gen_enable+0x34>)
    3830:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3832:	b25b      	sxtb	r3, r3
    3834:	2b00      	cmp	r3, #0
    3836:	dbfb      	blt.n	3830 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    3838:	4a04      	ldr	r2, [pc, #16]	; (384c <system_gclk_gen_enable+0x34>)
    383a:	6851      	ldr	r1, [r2, #4]
    383c:	2380      	movs	r3, #128	; 0x80
    383e:	025b      	lsls	r3, r3, #9
    3840:	430b      	orrs	r3, r1
    3842:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    3844:	4b04      	ldr	r3, [pc, #16]	; (3858 <system_gclk_gen_enable+0x40>)
    3846:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3848:	bd10      	pop	{r4, pc}
    384a:	46c0      	nop			; (mov r8, r8)
    384c:	40000c00 	.word	0x40000c00
    3850:	00002c61 	.word	0x00002c61
    3854:	40000c04 	.word	0x40000c04
    3858:	00002ca1 	.word	0x00002ca1

0000385c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    385c:	b570      	push	{r4, r5, r6, lr}
    385e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3860:	4a1a      	ldr	r2, [pc, #104]	; (38cc <system_gclk_gen_get_hz+0x70>)
    3862:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3864:	b25b      	sxtb	r3, r3
    3866:	2b00      	cmp	r3, #0
    3868:	dbfb      	blt.n	3862 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    386a:	4b19      	ldr	r3, [pc, #100]	; (38d0 <system_gclk_gen_get_hz+0x74>)
    386c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    386e:	4b19      	ldr	r3, [pc, #100]	; (38d4 <system_gclk_gen_get_hz+0x78>)
    3870:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3872:	4a16      	ldr	r2, [pc, #88]	; (38cc <system_gclk_gen_get_hz+0x70>)
    3874:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3876:	b25b      	sxtb	r3, r3
    3878:	2b00      	cmp	r3, #0
    387a:	dbfb      	blt.n	3874 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    387c:	4e13      	ldr	r6, [pc, #76]	; (38cc <system_gclk_gen_get_hz+0x70>)
    387e:	6870      	ldr	r0, [r6, #4]
    3880:	04c0      	lsls	r0, r0, #19
    3882:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3884:	4b14      	ldr	r3, [pc, #80]	; (38d8 <system_gclk_gen_get_hz+0x7c>)
    3886:	4798      	blx	r3
    3888:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    388a:	4b12      	ldr	r3, [pc, #72]	; (38d4 <system_gclk_gen_get_hz+0x78>)
    388c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    388e:	6876      	ldr	r6, [r6, #4]
    3890:	02f6      	lsls	r6, r6, #11
    3892:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3894:	4b11      	ldr	r3, [pc, #68]	; (38dc <system_gclk_gen_get_hz+0x80>)
    3896:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3898:	4a0c      	ldr	r2, [pc, #48]	; (38cc <system_gclk_gen_get_hz+0x70>)
    389a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    389c:	b25b      	sxtb	r3, r3
    389e:	2b00      	cmp	r3, #0
    38a0:	dbfb      	blt.n	389a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    38a2:	4b0a      	ldr	r3, [pc, #40]	; (38cc <system_gclk_gen_get_hz+0x70>)
    38a4:	689c      	ldr	r4, [r3, #8]
    38a6:	0224      	lsls	r4, r4, #8
    38a8:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    38aa:	4b0d      	ldr	r3, [pc, #52]	; (38e0 <system_gclk_gen_get_hz+0x84>)
    38ac:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    38ae:	2e00      	cmp	r6, #0
    38b0:	d107      	bne.n	38c2 <system_gclk_gen_get_hz+0x66>
    38b2:	2c01      	cmp	r4, #1
    38b4:	d907      	bls.n	38c6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    38b6:	0021      	movs	r1, r4
    38b8:	0028      	movs	r0, r5
    38ba:	4b0a      	ldr	r3, [pc, #40]	; (38e4 <system_gclk_gen_get_hz+0x88>)
    38bc:	4798      	blx	r3
    38be:	0005      	movs	r5, r0
    38c0:	e001      	b.n	38c6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    38c2:	3401      	adds	r4, #1
    38c4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    38c6:	0028      	movs	r0, r5
    38c8:	bd70      	pop	{r4, r5, r6, pc}
    38ca:	46c0      	nop			; (mov r8, r8)
    38cc:	40000c00 	.word	0x40000c00
    38d0:	00002c61 	.word	0x00002c61
    38d4:	40000c04 	.word	0x40000c04
    38d8:	00003445 	.word	0x00003445
    38dc:	40000c08 	.word	0x40000c08
    38e0:	00002ca1 	.word	0x00002ca1
    38e4:	00005ae9 	.word	0x00005ae9

000038e8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    38e8:	b510      	push	{r4, lr}
    38ea:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    38ec:	4b06      	ldr	r3, [pc, #24]	; (3908 <system_gclk_chan_enable+0x20>)
    38ee:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    38f0:	4b06      	ldr	r3, [pc, #24]	; (390c <system_gclk_chan_enable+0x24>)
    38f2:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    38f4:	4a06      	ldr	r2, [pc, #24]	; (3910 <system_gclk_chan_enable+0x28>)
    38f6:	8853      	ldrh	r3, [r2, #2]
    38f8:	2180      	movs	r1, #128	; 0x80
    38fa:	01c9      	lsls	r1, r1, #7
    38fc:	430b      	orrs	r3, r1
    38fe:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    3900:	4b04      	ldr	r3, [pc, #16]	; (3914 <system_gclk_chan_enable+0x2c>)
    3902:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3904:	bd10      	pop	{r4, pc}
    3906:	46c0      	nop			; (mov r8, r8)
    3908:	00002c61 	.word	0x00002c61
    390c:	40000c02 	.word	0x40000c02
    3910:	40000c00 	.word	0x40000c00
    3914:	00002ca1 	.word	0x00002ca1

00003918 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    3918:	b510      	push	{r4, lr}
    391a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    391c:	4b0f      	ldr	r3, [pc, #60]	; (395c <system_gclk_chan_disable+0x44>)
    391e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3920:	4b0f      	ldr	r3, [pc, #60]	; (3960 <system_gclk_chan_disable+0x48>)
    3922:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    3924:	4a0f      	ldr	r2, [pc, #60]	; (3964 <system_gclk_chan_disable+0x4c>)
    3926:	8853      	ldrh	r3, [r2, #2]
    3928:	051b      	lsls	r3, r3, #20
    392a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    392c:	8853      	ldrh	r3, [r2, #2]
    392e:	490e      	ldr	r1, [pc, #56]	; (3968 <system_gclk_chan_disable+0x50>)
    3930:	400b      	ands	r3, r1
    3932:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    3934:	8853      	ldrh	r3, [r2, #2]
    3936:	490d      	ldr	r1, [pc, #52]	; (396c <system_gclk_chan_disable+0x54>)
    3938:	400b      	ands	r3, r1
    393a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    393c:	0011      	movs	r1, r2
    393e:	2280      	movs	r2, #128	; 0x80
    3940:	01d2      	lsls	r2, r2, #7
    3942:	884b      	ldrh	r3, [r1, #2]
    3944:	4213      	tst	r3, r2
    3946:	d1fc      	bne.n	3942 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    3948:	4906      	ldr	r1, [pc, #24]	; (3964 <system_gclk_chan_disable+0x4c>)
    394a:	884a      	ldrh	r2, [r1, #2]
    394c:	0203      	lsls	r3, r0, #8
    394e:	4806      	ldr	r0, [pc, #24]	; (3968 <system_gclk_chan_disable+0x50>)
    3950:	4002      	ands	r2, r0
    3952:	4313      	orrs	r3, r2
    3954:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    3956:	4b06      	ldr	r3, [pc, #24]	; (3970 <system_gclk_chan_disable+0x58>)
    3958:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    395a:	bd10      	pop	{r4, pc}
    395c:	00002c61 	.word	0x00002c61
    3960:	40000c02 	.word	0x40000c02
    3964:	40000c00 	.word	0x40000c00
    3968:	fffff0ff 	.word	0xfffff0ff
    396c:	ffffbfff 	.word	0xffffbfff
    3970:	00002ca1 	.word	0x00002ca1

00003974 <system_gclk_chan_set_config>:
{
    3974:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    3976:	780c      	ldrb	r4, [r1, #0]
    3978:	0224      	lsls	r4, r4, #8
    397a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    397c:	4b02      	ldr	r3, [pc, #8]	; (3988 <system_gclk_chan_set_config+0x14>)
    397e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    3980:	b2a4      	uxth	r4, r4
    3982:	4b02      	ldr	r3, [pc, #8]	; (398c <system_gclk_chan_set_config+0x18>)
    3984:	805c      	strh	r4, [r3, #2]
}
    3986:	bd10      	pop	{r4, pc}
    3988:	00003919 	.word	0x00003919
    398c:	40000c00 	.word	0x40000c00

00003990 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3990:	b510      	push	{r4, lr}
    3992:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3994:	4b06      	ldr	r3, [pc, #24]	; (39b0 <system_gclk_chan_get_hz+0x20>)
    3996:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3998:	4b06      	ldr	r3, [pc, #24]	; (39b4 <system_gclk_chan_get_hz+0x24>)
    399a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    399c:	4b06      	ldr	r3, [pc, #24]	; (39b8 <system_gclk_chan_get_hz+0x28>)
    399e:	885c      	ldrh	r4, [r3, #2]
    39a0:	0524      	lsls	r4, r4, #20
    39a2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    39a4:	4b05      	ldr	r3, [pc, #20]	; (39bc <system_gclk_chan_get_hz+0x2c>)
    39a6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    39a8:	0020      	movs	r0, r4
    39aa:	4b05      	ldr	r3, [pc, #20]	; (39c0 <system_gclk_chan_get_hz+0x30>)
    39ac:	4798      	blx	r3
}
    39ae:	bd10      	pop	{r4, pc}
    39b0:	00002c61 	.word	0x00002c61
    39b4:	40000c02 	.word	0x40000c02
    39b8:	40000c00 	.word	0x40000c00
    39bc:	00002ca1 	.word	0x00002ca1
    39c0:	0000385d 	.word	0x0000385d

000039c4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    39c4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    39c6:	78d3      	ldrb	r3, [r2, #3]
    39c8:	2b00      	cmp	r3, #0
    39ca:	d135      	bne.n	3a38 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    39cc:	7813      	ldrb	r3, [r2, #0]
    39ce:	2b80      	cmp	r3, #128	; 0x80
    39d0:	d029      	beq.n	3a26 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    39d2:	061b      	lsls	r3, r3, #24
    39d4:	2480      	movs	r4, #128	; 0x80
    39d6:	0264      	lsls	r4, r4, #9
    39d8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    39da:	7854      	ldrb	r4, [r2, #1]
    39dc:	2502      	movs	r5, #2
    39de:	43ac      	bics	r4, r5
    39e0:	d106      	bne.n	39f0 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    39e2:	7894      	ldrb	r4, [r2, #2]
    39e4:	2c00      	cmp	r4, #0
    39e6:	d120      	bne.n	3a2a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    39e8:	2480      	movs	r4, #128	; 0x80
    39ea:	02a4      	lsls	r4, r4, #10
    39ec:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    39ee:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    39f0:	7854      	ldrb	r4, [r2, #1]
    39f2:	3c01      	subs	r4, #1
    39f4:	2c01      	cmp	r4, #1
    39f6:	d91c      	bls.n	3a32 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    39f8:	040d      	lsls	r5, r1, #16
    39fa:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    39fc:	24a0      	movs	r4, #160	; 0xa0
    39fe:	05e4      	lsls	r4, r4, #23
    3a00:	432c      	orrs	r4, r5
    3a02:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3a04:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3a06:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3a08:	24d0      	movs	r4, #208	; 0xd0
    3a0a:	0624      	lsls	r4, r4, #24
    3a0c:	432c      	orrs	r4, r5
    3a0e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3a10:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    3a12:	78d4      	ldrb	r4, [r2, #3]
    3a14:	2c00      	cmp	r4, #0
    3a16:	d122      	bne.n	3a5e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    3a18:	035b      	lsls	r3, r3, #13
    3a1a:	d51c      	bpl.n	3a56 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    3a1c:	7893      	ldrb	r3, [r2, #2]
    3a1e:	2b01      	cmp	r3, #1
    3a20:	d01e      	beq.n	3a60 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    3a22:	6141      	str	r1, [r0, #20]
    3a24:	e017      	b.n	3a56 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    3a26:	2300      	movs	r3, #0
    3a28:	e7d7      	b.n	39da <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    3a2a:	24c0      	movs	r4, #192	; 0xc0
    3a2c:	02e4      	lsls	r4, r4, #11
    3a2e:	4323      	orrs	r3, r4
    3a30:	e7dd      	b.n	39ee <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    3a32:	4c0d      	ldr	r4, [pc, #52]	; (3a68 <_system_pinmux_config+0xa4>)
    3a34:	4023      	ands	r3, r4
    3a36:	e7df      	b.n	39f8 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    3a38:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3a3a:	040c      	lsls	r4, r1, #16
    3a3c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3a3e:	23a0      	movs	r3, #160	; 0xa0
    3a40:	05db      	lsls	r3, r3, #23
    3a42:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3a44:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3a46:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3a48:	23d0      	movs	r3, #208	; 0xd0
    3a4a:	061b      	lsls	r3, r3, #24
    3a4c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3a4e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    3a50:	78d3      	ldrb	r3, [r2, #3]
    3a52:	2b00      	cmp	r3, #0
    3a54:	d103      	bne.n	3a5e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3a56:	7853      	ldrb	r3, [r2, #1]
    3a58:	3b01      	subs	r3, #1
    3a5a:	2b01      	cmp	r3, #1
    3a5c:	d902      	bls.n	3a64 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    3a5e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    3a60:	6181      	str	r1, [r0, #24]
    3a62:	e7f8      	b.n	3a56 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    3a64:	6081      	str	r1, [r0, #8]
}
    3a66:	e7fa      	b.n	3a5e <_system_pinmux_config+0x9a>
    3a68:	fffbffff 	.word	0xfffbffff

00003a6c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    3a6c:	b510      	push	{r4, lr}
    3a6e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3a70:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3a72:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3a74:	2900      	cmp	r1, #0
    3a76:	d104      	bne.n	3a82 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    3a78:	0943      	lsrs	r3, r0, #5
    3a7a:	01db      	lsls	r3, r3, #7
    3a7c:	4905      	ldr	r1, [pc, #20]	; (3a94 <system_pinmux_pin_set_config+0x28>)
    3a7e:	468c      	mov	ip, r1
    3a80:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    3a82:	241f      	movs	r4, #31
    3a84:	4020      	ands	r0, r4
    3a86:	2101      	movs	r1, #1
    3a88:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    3a8a:	0018      	movs	r0, r3
    3a8c:	4b02      	ldr	r3, [pc, #8]	; (3a98 <system_pinmux_pin_set_config+0x2c>)
    3a8e:	4798      	blx	r3
}
    3a90:	bd10      	pop	{r4, pc}
    3a92:	46c0      	nop			; (mov r8, r8)
    3a94:	41004400 	.word	0x41004400
    3a98:	000039c5 	.word	0x000039c5

00003a9c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    3a9c:	4770      	bx	lr
	...

00003aa0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3aa0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    3aa2:	4b05      	ldr	r3, [pc, #20]	; (3ab8 <system_init+0x18>)
    3aa4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    3aa6:	4b05      	ldr	r3, [pc, #20]	; (3abc <system_init+0x1c>)
    3aa8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    3aaa:	4b05      	ldr	r3, [pc, #20]	; (3ac0 <system_init+0x20>)
    3aac:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    3aae:	4b05      	ldr	r3, [pc, #20]	; (3ac4 <system_init+0x24>)
    3ab0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    3ab2:	4b05      	ldr	r3, [pc, #20]	; (3ac8 <system_init+0x28>)
    3ab4:	4798      	blx	r3
}
    3ab6:	bd10      	pop	{r4, pc}
    3ab8:	0000363d 	.word	0x0000363d
    3abc:	00002cd1 	.word	0x00002cd1
    3ac0:	00003a9d 	.word	0x00003a9d
    3ac4:	00002d75 	.word	0x00002d75
    3ac8:	00003a9d 	.word	0x00003a9d

00003acc <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    3acc:	b510      	push	{r4, lr}
    3ace:	b084      	sub	sp, #16
	enum sleepmgr_mode sleep_mode[] = {
    3ad0:	ab03      	add	r3, sp, #12
    3ad2:	2200      	movs	r2, #0
    3ad4:	701a      	strb	r2, [r3, #0]
    3ad6:	3203      	adds	r2, #3
    3ad8:	705a      	strb	r2, [r3, #1]
    3ada:	3a01      	subs	r2, #1
    3adc:	709a      	strb	r2, [r3, #2]
    3ade:	3a01      	subs	r2, #1
    3ae0:	70da      	strb	r2, [r3, #3]
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    3ae2:	4b27      	ldr	r3, [pc, #156]	; (3b80 <udd_sleep_mode+0xb4>)
    3ae4:	781b      	ldrb	r3, [r3, #0]
    3ae6:	4283      	cmp	r3, r0
    3ae8:	d007      	beq.n	3afa <udd_sleep_mode+0x2e>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    3aea:	2800      	cmp	r0, #0
    3aec:	d107      	bne.n	3afe <udd_sleep_mode+0x32>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
	}
	if (udd_state != UDD_STATE_OFF) {
    3aee:	4b24      	ldr	r3, [pc, #144]	; (3b80 <udd_sleep_mode+0xb4>)
    3af0:	781b      	ldrb	r3, [r3, #0]
    3af2:	2b00      	cmp	r3, #0
    3af4:	d123      	bne.n	3b3e <udd_sleep_mode+0x72>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
	}
	udd_state = new_state;
    3af6:	4b22      	ldr	r3, [pc, #136]	; (3b80 <udd_sleep_mode+0xb4>)
    3af8:	7018      	strb	r0, [r3, #0]
}
    3afa:	b004      	add	sp, #16
    3afc:	bd10      	pop	{r4, pc}
		sleepmgr_lock_mode(sleep_mode[new_state]);
    3afe:	ab03      	add	r3, sp, #12
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    3b00:	5c1b      	ldrb	r3, [r3, r0]
    3b02:	4a20      	ldr	r2, [pc, #128]	; (3b84 <udd_sleep_mode+0xb8>)
    3b04:	5cd2      	ldrb	r2, [r2, r3]
    3b06:	2aff      	cmp	r2, #255	; 0xff
    3b08:	d100      	bne.n	3b0c <udd_sleep_mode+0x40>
    3b0a:	e7fe      	b.n	3b0a <udd_sleep_mode+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    3b0c:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3b10:	4251      	negs	r1, r2
    3b12:	414a      	adcs	r2, r1
    3b14:	9201      	str	r2, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    3b16:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    3b18:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3b1c:	2100      	movs	r1, #0
    3b1e:	4a1a      	ldr	r2, [pc, #104]	; (3b88 <udd_sleep_mode+0xbc>)
    3b20:	7011      	strb	r1, [r2, #0]
	return flags;
    3b22:	9c01      	ldr	r4, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    3b24:	4917      	ldr	r1, [pc, #92]	; (3b84 <udd_sleep_mode+0xb8>)
    3b26:	5cca      	ldrb	r2, [r1, r3]
    3b28:	3201      	adds	r2, #1
    3b2a:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    3b2c:	2c00      	cmp	r4, #0
    3b2e:	d0de      	beq.n	3aee <udd_sleep_mode+0x22>
		cpu_irq_enable();
    3b30:	2201      	movs	r2, #1
    3b32:	4b15      	ldr	r3, [pc, #84]	; (3b88 <udd_sleep_mode+0xbc>)
    3b34:	701a      	strb	r2, [r3, #0]
    3b36:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3b3a:	b662      	cpsie	i
    3b3c:	e7d7      	b.n	3aee <udd_sleep_mode+0x22>
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    3b3e:	aa03      	add	r2, sp, #12
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    3b40:	5cd3      	ldrb	r3, [r2, r3]
    3b42:	4a10      	ldr	r2, [pc, #64]	; (3b84 <udd_sleep_mode+0xb8>)
    3b44:	5cd2      	ldrb	r2, [r2, r3]
    3b46:	2a00      	cmp	r2, #0
    3b48:	d100      	bne.n	3b4c <udd_sleep_mode+0x80>
    3b4a:	e7fe      	b.n	3b4a <udd_sleep_mode+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    3b4c:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    3b50:	4251      	negs	r1, r2
    3b52:	414a      	adcs	r2, r1
    3b54:	9202      	str	r2, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    3b56:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    3b58:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    3b5c:	2100      	movs	r1, #0
    3b5e:	4a0a      	ldr	r2, [pc, #40]	; (3b88 <udd_sleep_mode+0xbc>)
    3b60:	7011      	strb	r1, [r2, #0]
	return flags;
    3b62:	9c02      	ldr	r4, [sp, #8]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    3b64:	4907      	ldr	r1, [pc, #28]	; (3b84 <udd_sleep_mode+0xb8>)
    3b66:	5cca      	ldrb	r2, [r1, r3]
    3b68:	3a01      	subs	r2, #1
    3b6a:	54ca      	strb	r2, [r1, r3]
	if (cpu_irq_is_enabled_flags(flags))
    3b6c:	2c00      	cmp	r4, #0
    3b6e:	d0c2      	beq.n	3af6 <udd_sleep_mode+0x2a>
		cpu_irq_enable();
    3b70:	2201      	movs	r2, #1
    3b72:	4b05      	ldr	r3, [pc, #20]	; (3b88 <udd_sleep_mode+0xbc>)
    3b74:	701a      	strb	r2, [r3, #0]
    3b76:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3b7a:	b662      	cpsie	i
    3b7c:	e7bb      	b.n	3af6 <udd_sleep_mode+0x2a>
    3b7e:	46c0      	nop			; (mov r8, r8)
    3b80:	200001b0 	.word	0x200001b0
    3b84:	200001f0 	.word	0x200001f0
    3b88:	200000da 	.word	0x200000da

00003b8c <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	if ((ep == 0) || (ep == 0x80)) {
    3b8c:	0643      	lsls	r3, r0, #25
    3b8e:	d00b      	beq.n	3ba8 <udd_ep_get_job+0x1c>
		return NULL;
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    3b90:	230f      	movs	r3, #15
    3b92:	4003      	ands	r3, r0
    3b94:	005b      	lsls	r3, r3, #1
    3b96:	09c0      	lsrs	r0, r0, #7
    3b98:	1818      	adds	r0, r3, r0
    3b9a:	3802      	subs	r0, #2
    3b9c:	0083      	lsls	r3, r0, #2
    3b9e:	1818      	adds	r0, r3, r0
    3ba0:	0080      	lsls	r0, r0, #2
    3ba2:	4b02      	ldr	r3, [pc, #8]	; (3bac <udd_ep_get_job+0x20>)
    3ba4:	1818      	adds	r0, r3, r0
	}
}
    3ba6:	4770      	bx	lr
		return NULL;
    3ba8:	2000      	movs	r0, #0
    3baa:	e7fc      	b.n	3ba6 <udd_ep_get_job+0x1a>
    3bac:	20000188 	.word	0x20000188

00003bb0 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    3bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bb2:	46d6      	mov	lr, sl
    3bb4:	464f      	mov	r7, r9
    3bb6:	4646      	mov	r6, r8
    3bb8:	b5c0      	push	{r6, r7, lr}
    3bba:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    3bbc:	798d      	ldrb	r5, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
    3bbe:	b26b      	sxtb	r3, r5
    3bc0:	2b00      	cmp	r3, #0
    3bc2:	db26      	blt.n	3c12 <udd_ep_transfer_process+0x62>
	ptr_job = udd_ep_get_job(ep);
    3bc4:	0028      	movs	r0, r5
    3bc6:	4b5e      	ldr	r3, [pc, #376]	; (3d40 <udd_ep_transfer_process+0x190>)
    3bc8:	4798      	blx	r3
    3bca:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    3bcc:	270f      	movs	r7, #15
    3bce:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    3bd0:	8a03      	ldrh	r3, [r0, #16]
    3bd2:	4698      	mov	r8, r3
	nb_trans = ep_callback_para->received_bytes;
    3bd4:	464b      	mov	r3, r9
    3bd6:	881b      	ldrh	r3, [r3, #0]
    3bd8:	469a      	mov	sl, r3
	if (ptr_job->b_use_out_cache_buffer) {
    3bda:	7c83      	ldrb	r3, [r0, #18]
    3bdc:	075b      	lsls	r3, r3, #29
    3bde:	d46a      	bmi.n	3cb6 <udd_ep_transfer_process+0x106>
	ptr_job->nb_trans += nb_trans;
    3be0:	68e3      	ldr	r3, [r4, #12]
    3be2:	4453      	add	r3, sl
    3be4:	001e      	movs	r6, r3
    3be6:	60e3      	str	r3, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    3be8:	68a3      	ldr	r3, [r4, #8]
    3bea:	429e      	cmp	r6, r3
    3bec:	d800      	bhi.n	3bf0 <udd_ep_transfer_process+0x40>
    3bee:	e074      	b.n	3cda <udd_ep_transfer_process+0x12a>
		ptr_job->nb_trans = ptr_job->buf_size;
    3bf0:	60e3      	str	r3, [r4, #12]
	ptr_job->busy = false;
    3bf2:	7ca3      	ldrb	r3, [r4, #18]
    3bf4:	2201      	movs	r2, #1
    3bf6:	4393      	bics	r3, r2
    3bf8:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    3bfa:	6823      	ldr	r3, [r4, #0]
    3bfc:	2b00      	cmp	r3, #0
    3bfe:	d003      	beq.n	3c08 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    3c00:	68e1      	ldr	r1, [r4, #12]
    3c02:	002a      	movs	r2, r5
    3c04:	2000      	movs	r0, #0
    3c06:	4798      	blx	r3
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    3c08:	bc1c      	pop	{r2, r3, r4}
    3c0a:	4690      	mov	r8, r2
    3c0c:	4699      	mov	r9, r3
    3c0e:	46a2      	mov	sl, r4
    3c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ptr_job = udd_ep_get_job(ep);
    3c12:	0028      	movs	r0, r5
    3c14:	4b4a      	ldr	r3, [pc, #296]	; (3d40 <udd_ep_transfer_process+0x190>)
    3c16:	4798      	blx	r3
    3c18:	0004      	movs	r4, r0
	ep_num = ep & USB_EP_ADDR_MASK;
    3c1a:	270f      	movs	r7, #15
    3c1c:	402f      	ands	r7, r5
	ep_size = ptr_job->ep_size;
    3c1e:	8a03      	ldrh	r3, [r0, #16]
    3c20:	4698      	mov	r8, r3
	ptr_job->nb_trans += nb_trans;
    3c22:	464b      	mov	r3, r9
    3c24:	885e      	ldrh	r6, [r3, #2]
    3c26:	68c3      	ldr	r3, [r0, #12]
    3c28:	469c      	mov	ip, r3
    3c2a:	4466      	add	r6, ip
    3c2c:	60c6      	str	r6, [r0, #12]
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    3c2e:	6881      	ldr	r1, [r0, #8]
    3c30:	428e      	cmp	r6, r1
    3c32:	d025      	beq.n	3c80 <udd_ep_transfer_process+0xd0>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    3c34:	1b8d      	subs	r5, r1, r6
    3c36:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    3c38:	4b42      	ldr	r3, [pc, #264]	; (3d44 <udd_ep_transfer_process+0x194>)
    3c3a:	429d      	cmp	r5, r3
    3c3c:	d906      	bls.n	3c4c <udd_ep_transfer_process+0x9c>
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    3c3e:	001d      	movs	r5, r3
    3c40:	4641      	mov	r1, r8
    3c42:	0018      	movs	r0, r3
    3c44:	4b40      	ldr	r3, [pc, #256]	; (3d48 <udd_ep_transfer_process+0x198>)
    3c46:	4798      	blx	r3
    3c48:	1a6d      	subs	r5, r5, r1
    3c4a:	b2ad      	uxth	r5, r5
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    3c4c:	7ca2      	ldrb	r2, [r4, #18]
    3c4e:	2300      	movs	r3, #0
    3c50:	0792      	lsls	r2, r2, #30
    3c52:	d507      	bpl.n	3c64 <udd_ep_transfer_process+0xb4>
    3c54:	4641      	mov	r1, r8
    3c56:	0028      	movs	r0, r5
    3c58:	4b3c      	ldr	r3, [pc, #240]	; (3d4c <udd_ep_transfer_process+0x19c>)
    3c5a:	4798      	blx	r3
    3c5c:	b289      	uxth	r1, r1
    3c5e:	424b      	negs	r3, r1
    3c60:	414b      	adcs	r3, r1
    3c62:	b2db      	uxtb	r3, r3
    3c64:	005b      	lsls	r3, r3, #1
    3c66:	7ca2      	ldrb	r2, [r4, #18]
    3c68:	2102      	movs	r1, #2
    3c6a:	438a      	bics	r2, r1
    3c6c:	4313      	orrs	r3, r2
    3c6e:	74a3      	strb	r3, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    3c70:	6862      	ldr	r2, [r4, #4]
    3c72:	1992      	adds	r2, r2, r6
    3c74:	002b      	movs	r3, r5
    3c76:	0039      	movs	r1, r7
    3c78:	4835      	ldr	r0, [pc, #212]	; (3d50 <udd_ep_transfer_process+0x1a0>)
    3c7a:	4c36      	ldr	r4, [pc, #216]	; (3d54 <udd_ep_transfer_process+0x1a4>)
    3c7c:	47a0      	blx	r4
    3c7e:	e7c3      	b.n	3c08 <udd_ep_transfer_process+0x58>
	if (ptr_job->b_shortpacket) {
    3c80:	7c83      	ldrb	r3, [r0, #18]
    3c82:	079b      	lsls	r3, r3, #30
    3c84:	d40b      	bmi.n	3c9e <udd_ep_transfer_process+0xee>
	ptr_job->busy = false;
    3c86:	7c83      	ldrb	r3, [r0, #18]
    3c88:	2201      	movs	r2, #1
    3c8a:	4393      	bics	r3, r2
    3c8c:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    3c8e:	6803      	ldr	r3, [r0, #0]
    3c90:	2b00      	cmp	r3, #0
    3c92:	d0b9      	beq.n	3c08 <udd_ep_transfer_process+0x58>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    3c94:	002a      	movs	r2, r5
    3c96:	0031      	movs	r1, r6
    3c98:	2000      	movs	r0, #0
    3c9a:	4798      	blx	r3
    3c9c:	e7b4      	b.n	3c08 <udd_ep_transfer_process+0x58>
		ptr_job->b_shortpacket = false;
    3c9e:	7c83      	ldrb	r3, [r0, #18]
    3ca0:	2202      	movs	r2, #2
    3ca2:	4393      	bics	r3, r2
    3ca4:	7483      	strb	r3, [r0, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    3ca6:	6842      	ldr	r2, [r0, #4]
    3ca8:	1992      	adds	r2, r2, r6
    3caa:	2300      	movs	r3, #0
    3cac:	0039      	movs	r1, r7
    3cae:	4828      	ldr	r0, [pc, #160]	; (3d50 <udd_ep_transfer_process+0x1a0>)
    3cb0:	4c28      	ldr	r4, [pc, #160]	; (3d54 <udd_ep_transfer_process+0x1a4>)
    3cb2:	47a0      	blx	r4
    3cb4:	e7a8      	b.n	3c08 <udd_ep_transfer_process+0x58>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    3cb6:	6843      	ldr	r3, [r0, #4]
    3cb8:	68c2      	ldr	r2, [r0, #12]
    3cba:	4694      	mov	ip, r2
    3cbc:	4463      	add	r3, ip
    3cbe:	001e      	movs	r6, r3
    3cc0:	4641      	mov	r1, r8
    3cc2:	6880      	ldr	r0, [r0, #8]
    3cc4:	4b21      	ldr	r3, [pc, #132]	; (3d4c <udd_ep_transfer_process+0x19c>)
    3cc6:	4798      	blx	r3
    3cc8:	000a      	movs	r2, r1
    3cca:	1e7b      	subs	r3, r7, #1
    3ccc:	019b      	lsls	r3, r3, #6
    3cce:	4922      	ldr	r1, [pc, #136]	; (3d58 <udd_ep_transfer_process+0x1a8>)
    3cd0:	1859      	adds	r1, r3, r1
    3cd2:	0030      	movs	r0, r6
    3cd4:	4b21      	ldr	r3, [pc, #132]	; (3d5c <udd_ep_transfer_process+0x1ac>)
    3cd6:	4798      	blx	r3
    3cd8:	e782      	b.n	3be0 <udd_ep_transfer_process+0x30>
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    3cda:	464a      	mov	r2, r9
    3cdc:	8892      	ldrh	r2, [r2, #4]
    3cde:	4552      	cmp	r2, sl
    3ce0:	d000      	beq.n	3ce4 <udd_ep_transfer_process+0x134>
    3ce2:	e786      	b.n	3bf2 <udd_ep_transfer_process+0x42>
    3ce4:	429e      	cmp	r6, r3
    3ce6:	d100      	bne.n	3cea <udd_ep_transfer_process+0x13a>
    3ce8:	e783      	b.n	3bf2 <udd_ep_transfer_process+0x42>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    3cea:	1b9b      	subs	r3, r3, r6
    3cec:	b29d      	uxth	r5, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    3cee:	4b15      	ldr	r3, [pc, #84]	; (3d44 <udd_ep_transfer_process+0x194>)
    3cf0:	429d      	cmp	r5, r3
    3cf2:	d916      	bls.n	3d22 <udd_ep_transfer_process+0x172>
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    3cf4:	001d      	movs	r5, r3
    3cf6:	4641      	mov	r1, r8
    3cf8:	0018      	movs	r0, r3
    3cfa:	4b13      	ldr	r3, [pc, #76]	; (3d48 <udd_ep_transfer_process+0x198>)
    3cfc:	4798      	blx	r3
    3cfe:	1a6b      	subs	r3, r5, r1
    3d00:	b29b      	uxth	r3, r3
		if (next_trans < ep_size) {
    3d02:	4598      	cmp	r8, r3
    3d04:	d914      	bls.n	3d30 <udd_ep_transfer_process+0x180>
			ptr_job->b_use_out_cache_buffer = true;
    3d06:	7ca3      	ldrb	r3, [r4, #18]
    3d08:	2204      	movs	r2, #4
    3d0a:	4313      	orrs	r3, r2
    3d0c:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    3d0e:	1e7a      	subs	r2, r7, #1
    3d10:	0192      	lsls	r2, r2, #6
    3d12:	4b11      	ldr	r3, [pc, #68]	; (3d58 <udd_ep_transfer_process+0x1a8>)
    3d14:	18d2      	adds	r2, r2, r3
    3d16:	4643      	mov	r3, r8
    3d18:	0039      	movs	r1, r7
    3d1a:	480d      	ldr	r0, [pc, #52]	; (3d50 <udd_ep_transfer_process+0x1a0>)
    3d1c:	4c10      	ldr	r4, [pc, #64]	; (3d60 <udd_ep_transfer_process+0x1b0>)
    3d1e:	47a0      	blx	r4
    3d20:	e772      	b.n	3c08 <udd_ep_transfer_process+0x58>
			next_trans -= next_trans % ep_size;
    3d22:	4641      	mov	r1, r8
    3d24:	0028      	movs	r0, r5
    3d26:	4b09      	ldr	r3, [pc, #36]	; (3d4c <udd_ep_transfer_process+0x19c>)
    3d28:	4798      	blx	r3
    3d2a:	1a6b      	subs	r3, r5, r1
    3d2c:	b29b      	uxth	r3, r3
    3d2e:	e7e8      	b.n	3d02 <udd_ep_transfer_process+0x152>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    3d30:	6862      	ldr	r2, [r4, #4]
    3d32:	1992      	adds	r2, r2, r6
    3d34:	0039      	movs	r1, r7
    3d36:	4806      	ldr	r0, [pc, #24]	; (3d50 <udd_ep_transfer_process+0x1a0>)
    3d38:	4c09      	ldr	r4, [pc, #36]	; (3d60 <udd_ep_transfer_process+0x1b0>)
    3d3a:	47a0      	blx	r4
    3d3c:	e764      	b.n	3c08 <udd_ep_transfer_process+0x58>
    3d3e:	46c0      	nop			; (mov r8, r8)
    3d40:	00003b8d 	.word	0x00003b8d
    3d44:	00001fff 	.word	0x00001fff
    3d48:	00005dc9 	.word	0x00005dc9
    3d4c:	00005bf5 	.word	0x00005bf5
    3d50:	2000028c 	.word	0x2000028c
    3d54:	00004d51 	.word	0x00004d51
    3d58:	2000024c 	.word	0x2000024c
    3d5c:	00005e5d 	.word	0x00005e5d
    3d60:	00004da5 	.word	0x00004da5

00003d64 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    3d64:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    3d66:	2205      	movs	r2, #5
    3d68:	4b05      	ldr	r3, [pc, #20]	; (3d80 <udd_ctrl_stall_data+0x1c>)
    3d6a:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    3d6c:	4c05      	ldr	r4, [pc, #20]	; (3d84 <udd_ctrl_stall_data+0x20>)
    3d6e:	2180      	movs	r1, #128	; 0x80
    3d70:	0020      	movs	r0, r4
    3d72:	4b05      	ldr	r3, [pc, #20]	; (3d88 <udd_ctrl_stall_data+0x24>)
    3d74:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    3d76:	2100      	movs	r1, #0
    3d78:	0020      	movs	r0, r4
    3d7a:	4b04      	ldr	r3, [pc, #16]	; (3d8c <udd_ctrl_stall_data+0x28>)
    3d7c:	4798      	blx	r3
}
    3d7e:	bd10      	pop	{r4, pc}
    3d80:	20000186 	.word	0x20000186
    3d84:	2000028c 	.word	0x2000028c
    3d88:	00004ca5 	.word	0x00004ca5
    3d8c:	00004ccb 	.word	0x00004ccb

00003d90 <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    3d90:	b570      	push	{r4, r5, r6, lr}
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    3d92:	4c08      	ldr	r4, [pc, #32]	; (3db4 <_usb_device_lpm_suspend+0x24>)
    3d94:	2106      	movs	r1, #6
    3d96:	0020      	movs	r0, r4
    3d98:	4d07      	ldr	r5, [pc, #28]	; (3db8 <_usb_device_lpm_suspend+0x28>)
    3d9a:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    3d9c:	2104      	movs	r1, #4
    3d9e:	0020      	movs	r0, r4
    3da0:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    3da2:	2102      	movs	r1, #2
    3da4:	0020      	movs	r0, r4
    3da6:	4b05      	ldr	r3, [pc, #20]	; (3dbc <_usb_device_lpm_suspend+0x2c>)
    3da8:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    3daa:	2002      	movs	r0, #2
    3dac:	4b04      	ldr	r3, [pc, #16]	; (3dc0 <_usb_device_lpm_suspend+0x30>)
    3dae:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    3db0:	bd70      	pop	{r4, r5, r6, pc}
    3db2:	46c0      	nop			; (mov r8, r8)
    3db4:	2000028c 	.word	0x2000028c
    3db8:	000047e5 	.word	0x000047e5
    3dbc:	000047c5 	.word	0x000047c5
    3dc0:	00003acd 	.word	0x00003acd

00003dc4 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    3dc4:	b570      	push	{r4, r5, r6, lr}
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    3dc6:	4b13      	ldr	r3, [pc, #76]	; (3e14 <_usb_on_wakeup+0x50>)
    3dc8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    3dca:	069b      	lsls	r3, r3, #26
    3dcc:	d41c      	bmi.n	3e08 <_usb_on_wakeup+0x44>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    3dce:	4911      	ldr	r1, [pc, #68]	; (3e14 <_usb_on_wakeup+0x50>)
    3dd0:	22d0      	movs	r2, #208	; 0xd0
    3dd2:	68cb      	ldr	r3, [r1, #12]
    3dd4:	4013      	ands	r3, r2
    3dd6:	2bd0      	cmp	r3, #208	; 0xd0
    3dd8:	d1fb      	bne.n	3dd2 <_usb_on_wakeup+0xe>
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    3dda:	4c0f      	ldr	r4, [pc, #60]	; (3e18 <_usb_on_wakeup+0x54>)
    3ddc:	2102      	movs	r1, #2
    3dde:	0020      	movs	r0, r4
    3de0:	4b0e      	ldr	r3, [pc, #56]	; (3e1c <_usb_on_wakeup+0x58>)
    3de2:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    3de4:	2104      	movs	r1, #4
    3de6:	0020      	movs	r0, r4
    3de8:	4d0d      	ldr	r5, [pc, #52]	; (3e20 <_usb_on_wakeup+0x5c>)
    3dea:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    3dec:	4a0d      	ldr	r2, [pc, #52]	; (3e24 <_usb_on_wakeup+0x60>)
    3dee:	2106      	movs	r1, #6
    3df0:	0020      	movs	r0, r4
    3df2:	4b0d      	ldr	r3, [pc, #52]	; (3e28 <_usb_on_wakeup+0x64>)
    3df4:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    3df6:	2106      	movs	r1, #6
    3df8:	0020      	movs	r0, r4
    3dfa:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    3dfc:	2003      	movs	r0, #3
    3dfe:	4b0b      	ldr	r3, [pc, #44]	; (3e2c <_usb_on_wakeup+0x68>)
    3e00:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    3e02:	4b0b      	ldr	r3, [pc, #44]	; (3e30 <_usb_on_wakeup+0x6c>)
    3e04:	4798      	blx	r3
#endif
}
    3e06:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    3e08:	4902      	ldr	r1, [pc, #8]	; (3e14 <_usb_on_wakeup+0x50>)
    3e0a:	2210      	movs	r2, #16
    3e0c:	68cb      	ldr	r3, [r1, #12]
    3e0e:	421a      	tst	r2, r3
    3e10:	d0fc      	beq.n	3e0c <_usb_on_wakeup+0x48>
    3e12:	e7e2      	b.n	3dda <_usb_on_wakeup+0x16>
    3e14:	40000800 	.word	0x40000800
    3e18:	2000028c 	.word	0x2000028c
    3e1c:	000047e5 	.word	0x000047e5
    3e20:	000047c5 	.word	0x000047c5
    3e24:	00003d91 	.word	0x00003d91
    3e28:	000047a1 	.word	0x000047a1
    3e2c:	00003acd 	.word	0x00003acd
    3e30:	00005a85 	.word	0x00005a85

00003e34 <_usb_on_bus_reset>:
{
    3e34:	b570      	push	{r4, r5, r6, lr}
    3e36:	b082      	sub	sp, #8
    3e38:	0004      	movs	r4, r0
	udc_reset();
    3e3a:	4b1e      	ldr	r3, [pc, #120]	; (3eb4 <_usb_on_bus_reset+0x80>)
    3e3c:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    3e3e:	2380      	movs	r3, #128	; 0x80
    3e40:	6822      	ldr	r2, [r4, #0]
    3e42:	7293      	strb	r3, [r2, #10]
	 usb_device_endpoint_get_config_defaults(&config_ep0);
    3e44:	ad01      	add	r5, sp, #4
    3e46:	0028      	movs	r0, r5
    3e48:	4b1b      	ldr	r3, [pc, #108]	; (3eb8 <_usb_on_bus_reset+0x84>)
    3e4a:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    3e4c:	2600      	movs	r6, #0
    3e4e:	706e      	strb	r6, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    3e50:	0029      	movs	r1, r5
    3e52:	0020      	movs	r0, r4
    3e54:	4b19      	ldr	r3, [pc, #100]	; (3ebc <_usb_on_bus_reset+0x88>)
    3e56:	4798      	blx	r3
	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    3e58:	4919      	ldr	r1, [pc, #100]	; (3ec0 <_usb_on_bus_reset+0x8c>)
    3e5a:	0020      	movs	r0, r4
    3e5c:	4b19      	ldr	r3, [pc, #100]	; (3ec4 <_usb_on_bus_reset+0x90>)
    3e5e:	4798      	blx	r3
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    3e60:	4b19      	ldr	r3, [pc, #100]	; (3ec8 <_usb_on_bus_reset+0x94>)
    3e62:	2202      	movs	r2, #2
    3e64:	2100      	movs	r1, #0
    3e66:	0020      	movs	r0, r4
    3e68:	4d18      	ldr	r5, [pc, #96]	; (3ecc <_usb_on_bus_reset+0x98>)
    3e6a:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    3e6c:	4b18      	ldr	r3, [pc, #96]	; (3ed0 <_usb_on_bus_reset+0x9c>)
    3e6e:	2200      	movs	r2, #0
    3e70:	2100      	movs	r1, #0
    3e72:	0020      	movs	r0, r4
    3e74:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    3e76:	4b17      	ldr	r3, [pc, #92]	; (3ed4 <_usb_on_bus_reset+0xa0>)
    3e78:	2201      	movs	r2, #1
    3e7a:	2100      	movs	r1, #0
    3e7c:	0020      	movs	r0, r4
    3e7e:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    3e80:	2202      	movs	r2, #2
    3e82:	2100      	movs	r1, #0
    3e84:	0020      	movs	r0, r4
    3e86:	4d14      	ldr	r5, [pc, #80]	; (3ed8 <_usb_on_bus_reset+0xa4>)
    3e88:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3e8a:	2200      	movs	r2, #0
    3e8c:	2100      	movs	r1, #0
    3e8e:	0020      	movs	r0, r4
    3e90:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    3e92:	2201      	movs	r2, #1
    3e94:	2100      	movs	r1, #0
    3e96:	0020      	movs	r0, r4
    3e98:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    3e9a:	6821      	ldr	r1, [r4, #0]
    3e9c:	890b      	ldrh	r3, [r1, #8]
    3e9e:	4a0f      	ldr	r2, [pc, #60]	; (3edc <_usb_on_bus_reset+0xa8>)
    3ea0:	401a      	ands	r2, r3
    3ea2:	2380      	movs	r3, #128	; 0x80
    3ea4:	00db      	lsls	r3, r3, #3
    3ea6:	4313      	orrs	r3, r2
    3ea8:	810b      	strh	r3, [r1, #8]
	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    3eaa:	4b0d      	ldr	r3, [pc, #52]	; (3ee0 <_usb_on_bus_reset+0xac>)
    3eac:	701e      	strb	r6, [r3, #0]
}
    3eae:	b002      	add	sp, #8
    3eb0:	bd70      	pop	{r4, r5, r6, pc}
    3eb2:	46c0      	nop			; (mov r8, r8)
    3eb4:	0000274d 	.word	0x0000274d
    3eb8:	000049f1 	.word	0x000049f1
    3ebc:	00004a01 	.word	0x00004a01
    3ec0:	2000040c 	.word	0x2000040c
    3ec4:	00004df5 	.word	0x00004df5
    3ec8:	0000401d 	.word	0x0000401d
    3ecc:	00004801 	.word	0x00004801
    3ed0:	00004339 	.word	0x00004339
    3ed4:	00003f21 	.word	0x00003f21
    3ed8:	00004851 	.word	0x00004851
    3edc:	fffff3ff 	.word	0xfffff3ff
    3ee0:	20000186 	.word	0x20000186

00003ee4 <udd_ctrl_send_zlp_in>:
{
    3ee4:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    3ee6:	2203      	movs	r2, #3
    3ee8:	4b07      	ldr	r3, [pc, #28]	; (3f08 <udd_ctrl_send_zlp_in+0x24>)
    3eea:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    3eec:	4c07      	ldr	r4, [pc, #28]	; (3f0c <udd_ctrl_send_zlp_in+0x28>)
    3eee:	4908      	ldr	r1, [pc, #32]	; (3f10 <udd_ctrl_send_zlp_in+0x2c>)
    3ef0:	0020      	movs	r0, r4
    3ef2:	4b08      	ldr	r3, [pc, #32]	; (3f14 <udd_ctrl_send_zlp_in+0x30>)
    3ef4:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    3ef6:	4b08      	ldr	r3, [pc, #32]	; (3f18 <udd_ctrl_send_zlp_in+0x34>)
    3ef8:	689a      	ldr	r2, [r3, #8]
    3efa:	2300      	movs	r3, #0
    3efc:	2100      	movs	r1, #0
    3efe:	0020      	movs	r0, r4
    3f00:	4c06      	ldr	r4, [pc, #24]	; (3f1c <udd_ctrl_send_zlp_in+0x38>)
    3f02:	47a0      	blx	r4
}
    3f04:	bd10      	pop	{r4, pc}
    3f06:	46c0      	nop			; (mov r8, r8)
    3f08:	20000186 	.word	0x20000186
    3f0c:	2000028c 	.word	0x2000028c
    3f10:	2000040c 	.word	0x2000040c
    3f14:	00004df5 	.word	0x00004df5
    3f18:	200003f4 	.word	0x200003f4
    3f1c:	00004d51 	.word	0x00004d51

00003f20 <_usb_ep0_on_tansfer_fail>:
{
    3f20:	b510      	push	{r4, lr}
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    3f22:	7989      	ldrb	r1, [r1, #6]
    3f24:	b24b      	sxtb	r3, r1
    3f26:	2b00      	cmp	r3, #0
    3f28:	db06      	blt.n	3f38 <_usb_ep0_on_tansfer_fail+0x18>
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    3f2a:	4b0e      	ldr	r3, [pc, #56]	; (3f64 <_usb_ep0_on_tansfer_fail+0x44>)
    3f2c:	781b      	ldrb	r3, [r3, #0]
    3f2e:	2b02      	cmp	r3, #2
    3f30:	d00f      	beq.n	3f52 <_usb_ep0_on_tansfer_fail+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    3f32:	2b03      	cmp	r3, #3
    3f34:	d011      	beq.n	3f5a <_usb_ep0_on_tansfer_fail+0x3a>
}
    3f36:	bd10      	pop	{r4, pc}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    3f38:	4b0a      	ldr	r3, [pc, #40]	; (3f64 <_usb_ep0_on_tansfer_fail+0x44>)
    3f3a:	781b      	ldrb	r3, [r3, #0]
    3f3c:	2b01      	cmp	r3, #1
    3f3e:	d005      	beq.n	3f4c <_usb_ep0_on_tansfer_fail+0x2c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    3f40:	2b04      	cmp	r3, #4
    3f42:	d1f8      	bne.n	3f36 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    3f44:	4808      	ldr	r0, [pc, #32]	; (3f68 <_usb_ep0_on_tansfer_fail+0x48>)
    3f46:	4b09      	ldr	r3, [pc, #36]	; (3f6c <_usb_ep0_on_tansfer_fail+0x4c>)
    3f48:	4798      	blx	r3
    3f4a:	e7f4      	b.n	3f36 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ctrl_send_zlp_in();
    3f4c:	4b08      	ldr	r3, [pc, #32]	; (3f70 <_usb_ep0_on_tansfer_fail+0x50>)
    3f4e:	4798      	blx	r3
    3f50:	e7f1      	b.n	3f36 <_usb_ep0_on_tansfer_fail+0x16>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    3f52:	2204      	movs	r2, #4
    3f54:	4b03      	ldr	r3, [pc, #12]	; (3f64 <_usb_ep0_on_tansfer_fail+0x44>)
    3f56:	701a      	strb	r2, [r3, #0]
    3f58:	e7ed      	b.n	3f36 <_usb_ep0_on_tansfer_fail+0x16>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    3f5a:	4803      	ldr	r0, [pc, #12]	; (3f68 <_usb_ep0_on_tansfer_fail+0x48>)
    3f5c:	4b03      	ldr	r3, [pc, #12]	; (3f6c <_usb_ep0_on_tansfer_fail+0x4c>)
    3f5e:	4798      	blx	r3
}
    3f60:	e7e9      	b.n	3f36 <_usb_ep0_on_tansfer_fail+0x16>
    3f62:	46c0      	nop			; (mov r8, r8)
    3f64:	20000186 	.word	0x20000186
    3f68:	2000028c 	.word	0x2000028c
    3f6c:	00004ca5 	.word	0x00004ca5
    3f70:	00003ee5 	.word	0x00003ee5

00003f74 <udd_ctrl_in_sent>:
{
    3f74:	b570      	push	{r4, r5, r6, lr}
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    3f76:	4b20      	ldr	r3, [pc, #128]	; (3ff8 <udd_ctrl_in_sent+0x84>)
    3f78:	881b      	ldrh	r3, [r3, #0]
    3f7a:	4a20      	ldr	r2, [pc, #128]	; (3ffc <udd_ctrl_in_sent+0x88>)
    3f7c:	8994      	ldrh	r4, [r2, #12]
    3f7e:	1ae4      	subs	r4, r4, r3
    3f80:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
    3f82:	2c00      	cmp	r4, #0
    3f84:	d118      	bne.n	3fb8 <udd_ctrl_in_sent+0x44>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    3f86:	4a1e      	ldr	r2, [pc, #120]	; (4000 <udd_ctrl_in_sent+0x8c>)
    3f88:	8811      	ldrh	r1, [r2, #0]
    3f8a:	185b      	adds	r3, r3, r1
    3f8c:	b29b      	uxth	r3, r3
    3f8e:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    3f90:	4a1a      	ldr	r2, [pc, #104]	; (3ffc <udd_ctrl_in_sent+0x88>)
    3f92:	88d2      	ldrh	r2, [r2, #6]
    3f94:	429a      	cmp	r2, r3
    3f96:	d023      	beq.n	3fe0 <udd_ctrl_in_sent+0x6c>
    3f98:	4b1a      	ldr	r3, [pc, #104]	; (4004 <udd_ctrl_in_sent+0x90>)
    3f9a:	781b      	ldrb	r3, [r3, #0]
    3f9c:	2b00      	cmp	r3, #0
    3f9e:	d11f      	bne.n	3fe0 <udd_ctrl_in_sent+0x6c>
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    3fa0:	4b16      	ldr	r3, [pc, #88]	; (3ffc <udd_ctrl_in_sent+0x88>)
    3fa2:	695b      	ldr	r3, [r3, #20]
    3fa4:	2b00      	cmp	r3, #0
    3fa6:	d023      	beq.n	3ff0 <udd_ctrl_in_sent+0x7c>
    3fa8:	4798      	blx	r3
    3faa:	2800      	cmp	r0, #0
    3fac:	d020      	beq.n	3ff0 <udd_ctrl_in_sent+0x7c>
			udd_ctrl_payload_nb_trans = 0;
    3fae:	2200      	movs	r2, #0
    3fb0:	4b11      	ldr	r3, [pc, #68]	; (3ff8 <udd_ctrl_in_sent+0x84>)
    3fb2:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    3fb4:	4b11      	ldr	r3, [pc, #68]	; (3ffc <udd_ctrl_in_sent+0x88>)
    3fb6:	899c      	ldrh	r4, [r3, #12]
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    3fb8:	2c07      	cmp	r4, #7
    3fba:	d919      	bls.n	3ff0 <udd_ctrl_in_sent+0x7c>
		b_shortpacket = false;
    3fbc:	2200      	movs	r2, #0
    3fbe:	4b11      	ldr	r3, [pc, #68]	; (4004 <udd_ctrl_in_sent+0x90>)
    3fc0:	701a      	strb	r2, [r3, #0]
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    3fc2:	2408      	movs	r4, #8
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    3fc4:	4d0c      	ldr	r5, [pc, #48]	; (3ff8 <udd_ctrl_in_sent+0x84>)
    3fc6:	882b      	ldrh	r3, [r5, #0]
    3fc8:	4a0c      	ldr	r2, [pc, #48]	; (3ffc <udd_ctrl_in_sent+0x88>)
    3fca:	6892      	ldr	r2, [r2, #8]
    3fcc:	18d2      	adds	r2, r2, r3
    3fce:	0023      	movs	r3, r4
    3fd0:	2100      	movs	r1, #0
    3fd2:	480d      	ldr	r0, [pc, #52]	; (4008 <udd_ctrl_in_sent+0x94>)
    3fd4:	4e0d      	ldr	r6, [pc, #52]	; (400c <udd_ctrl_in_sent+0x98>)
    3fd6:	47b0      	blx	r6
	udd_ctrl_payload_nb_trans += nb_remain;
    3fd8:	882b      	ldrh	r3, [r5, #0]
    3fda:	18e4      	adds	r4, r4, r3
    3fdc:	802c      	strh	r4, [r5, #0]
}
    3fde:	bd70      	pop	{r4, r5, r6, pc}
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    3fe0:	2204      	movs	r2, #4
    3fe2:	4b0b      	ldr	r3, [pc, #44]	; (4010 <udd_ctrl_in_sent+0x9c>)
    3fe4:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    3fe6:	490b      	ldr	r1, [pc, #44]	; (4014 <udd_ctrl_in_sent+0xa0>)
    3fe8:	4807      	ldr	r0, [pc, #28]	; (4008 <udd_ctrl_in_sent+0x94>)
    3fea:	4b0b      	ldr	r3, [pc, #44]	; (4018 <udd_ctrl_in_sent+0xa4>)
    3fec:	4798      	blx	r3
			return;
    3fee:	e7f6      	b.n	3fde <udd_ctrl_in_sent+0x6a>
		b_shortpacket = true;
    3ff0:	2201      	movs	r2, #1
    3ff2:	4b04      	ldr	r3, [pc, #16]	; (4004 <udd_ctrl_in_sent+0x90>)
    3ff4:	701a      	strb	r2, [r3, #0]
    3ff6:	e7e5      	b.n	3fc4 <udd_ctrl_in_sent+0x50>
    3ff8:	20000182 	.word	0x20000182
    3ffc:	200003f4 	.word	0x200003f4
    4000:	20000184 	.word	0x20000184
    4004:	20000180 	.word	0x20000180
    4008:	2000028c 	.word	0x2000028c
    400c:	00004d51 	.word	0x00004d51
    4010:	20000186 	.word	0x20000186
    4014:	2000040c 	.word	0x2000040c
    4018:	00004df5 	.word	0x00004df5

0000401c <_usb_ep0_on_setup>:
{
    401c:	b510      	push	{r4, lr}
    401e:	000c      	movs	r4, r1
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    4020:	4b2c      	ldr	r3, [pc, #176]	; (40d4 <_usb_ep0_on_setup+0xb8>)
    4022:	781b      	ldrb	r3, [r3, #0]
    4024:	2b00      	cmp	r3, #0
    4026:	d007      	beq.n	4038 <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    4028:	4b2b      	ldr	r3, [pc, #172]	; (40d8 <_usb_ep0_on_setup+0xbc>)
    402a:	691b      	ldr	r3, [r3, #16]
    402c:	2b00      	cmp	r3, #0
    402e:	d000      	beq.n	4032 <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    4030:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    4032:	2200      	movs	r2, #0
    4034:	4b27      	ldr	r3, [pc, #156]	; (40d4 <_usb_ep0_on_setup+0xb8>)
    4036:	701a      	strb	r2, [r3, #0]
	if ( 8 != ep_callback_para->received_bytes) {
    4038:	8823      	ldrh	r3, [r4, #0]
    403a:	2b08      	cmp	r3, #8
    403c:	d002      	beq.n	4044 <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    403e:	4b27      	ldr	r3, [pc, #156]	; (40dc <_usb_ep0_on_setup+0xc0>)
    4040:	4798      	blx	r3
}
    4042:	bd10      	pop	{r4, pc}
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    4044:	4a24      	ldr	r2, [pc, #144]	; (40d8 <_usb_ep0_on_setup+0xbc>)
    4046:	4b26      	ldr	r3, [pc, #152]	; (40e0 <_usb_ep0_on_setup+0xc4>)
    4048:	7819      	ldrb	r1, [r3, #0]
    404a:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    404c:	7859      	ldrb	r1, [r3, #1]
    404e:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    4050:	78d8      	ldrb	r0, [r3, #3]
    4052:	0200      	lsls	r0, r0, #8
    4054:	7899      	ldrb	r1, [r3, #2]
    4056:	1809      	adds	r1, r1, r0
    4058:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    405a:	7958      	ldrb	r0, [r3, #5]
    405c:	0200      	lsls	r0, r0, #8
    405e:	7919      	ldrb	r1, [r3, #4]
    4060:	1809      	adds	r1, r1, r0
    4062:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    4064:	79d9      	ldrb	r1, [r3, #7]
    4066:	0209      	lsls	r1, r1, #8
    4068:	799b      	ldrb	r3, [r3, #6]
    406a:	185b      	adds	r3, r3, r1
    406c:	80d3      	strh	r3, [r2, #6]
		if (false == udc_process_setup()) {
    406e:	4b1d      	ldr	r3, [pc, #116]	; (40e4 <_usb_ep0_on_setup+0xc8>)
    4070:	4798      	blx	r3
    4072:	2800      	cmp	r0, #0
    4074:	d016      	beq.n	40a4 <_usb_ep0_on_setup+0x88>
		} else if (Udd_setup_is_in()) {
    4076:	4b18      	ldr	r3, [pc, #96]	; (40d8 <_usb_ep0_on_setup+0xbc>)
    4078:	781b      	ldrb	r3, [r3, #0]
    407a:	2b7f      	cmp	r3, #127	; 0x7f
    407c:	d815      	bhi.n	40aa <_usb_ep0_on_setup+0x8e>
			if(0 == udd_g_ctrlreq.req.wLength) {
    407e:	4b16      	ldr	r3, [pc, #88]	; (40d8 <_usb_ep0_on_setup+0xbc>)
    4080:	88db      	ldrh	r3, [r3, #6]
    4082:	2b00      	cmp	r3, #0
    4084:	d022      	beq.n	40cc <_usb_ep0_on_setup+0xb0>
				udd_ctrl_prev_payload_nb_trans = 0;
    4086:	2300      	movs	r3, #0
    4088:	4a17      	ldr	r2, [pc, #92]	; (40e8 <_usb_ep0_on_setup+0xcc>)
    408a:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    408c:	4a17      	ldr	r2, [pc, #92]	; (40ec <_usb_ep0_on_setup+0xd0>)
    408e:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    4090:	2201      	movs	r2, #1
    4092:	4b10      	ldr	r3, [pc, #64]	; (40d4 <_usb_ep0_on_setup+0xb8>)
    4094:	701a      	strb	r2, [r3, #0]
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    4096:	2308      	movs	r3, #8
    4098:	4a11      	ldr	r2, [pc, #68]	; (40e0 <_usb_ep0_on_setup+0xc4>)
    409a:	2100      	movs	r1, #0
    409c:	4814      	ldr	r0, [pc, #80]	; (40f0 <_usb_ep0_on_setup+0xd4>)
    409e:	4c15      	ldr	r4, [pc, #84]	; (40f4 <_usb_ep0_on_setup+0xd8>)
    40a0:	47a0      	blx	r4
    40a2:	e7ce      	b.n	4042 <_usb_ep0_on_setup+0x26>
			udd_ctrl_stall_data();
    40a4:	4b0d      	ldr	r3, [pc, #52]	; (40dc <_usb_ep0_on_setup+0xc0>)
    40a6:	4798      	blx	r3
			return;
    40a8:	e7cb      	b.n	4042 <_usb_ep0_on_setup+0x26>
			udd_ctrl_prev_payload_nb_trans = 0;
    40aa:	2300      	movs	r3, #0
    40ac:	4a0e      	ldr	r2, [pc, #56]	; (40e8 <_usb_ep0_on_setup+0xcc>)
    40ae:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    40b0:	4a0e      	ldr	r2, [pc, #56]	; (40ec <_usb_ep0_on_setup+0xd0>)
    40b2:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    40b4:	2202      	movs	r2, #2
    40b6:	4b07      	ldr	r3, [pc, #28]	; (40d4 <_usb_ep0_on_setup+0xb8>)
    40b8:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    40ba:	2308      	movs	r3, #8
    40bc:	4a08      	ldr	r2, [pc, #32]	; (40e0 <_usb_ep0_on_setup+0xc4>)
    40be:	2100      	movs	r1, #0
    40c0:	480b      	ldr	r0, [pc, #44]	; (40f0 <_usb_ep0_on_setup+0xd4>)
    40c2:	4c0c      	ldr	r4, [pc, #48]	; (40f4 <_usb_ep0_on_setup+0xd8>)
    40c4:	47a0      	blx	r4
			udd_ctrl_in_sent();
    40c6:	4b0c      	ldr	r3, [pc, #48]	; (40f8 <_usb_ep0_on_setup+0xdc>)
    40c8:	4798      	blx	r3
    40ca:	e7ba      	b.n	4042 <_usb_ep0_on_setup+0x26>
				udd_ctrl_send_zlp_in();
    40cc:	4b0b      	ldr	r3, [pc, #44]	; (40fc <_usb_ep0_on_setup+0xe0>)
    40ce:	4798      	blx	r3
				return;
    40d0:	e7b7      	b.n	4042 <_usb_ep0_on_setup+0x26>
    40d2:	46c0      	nop			; (mov r8, r8)
    40d4:	20000186 	.word	0x20000186
    40d8:	200003f4 	.word	0x200003f4
    40dc:	00003d65 	.word	0x00003d65
    40e0:	2000040c 	.word	0x2000040c
    40e4:	000027f1 	.word	0x000027f1
    40e8:	20000184 	.word	0x20000184
    40ec:	20000182 	.word	0x20000182
    40f0:	2000028c 	.word	0x2000028c
    40f4:	00004da5 	.word	0x00004da5
    40f8:	00003f75 	.word	0x00003f75
    40fc:	00003ee5 	.word	0x00003ee5

00004100 <_usb_on_sof_notify>:
{
    4100:	b510      	push	{r4, lr}
	udc_sof_notify();
    4102:	4b02      	ldr	r3, [pc, #8]	; (410c <_usb_on_sof_notify+0xc>)
    4104:	4798      	blx	r3
	UDC_SOF_EVENT();
    4106:	4b02      	ldr	r3, [pc, #8]	; (4110 <_usb_on_sof_notify+0x10>)
    4108:	4798      	blx	r3
}
    410a:	bd10      	pop	{r4, pc}
    410c:	000027ad 	.word	0x000027ad
    4110:	00005a91 	.word	0x00005a91

00004114 <_usb_on_suspend>:
{
    4114:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    4116:	4c07      	ldr	r4, [pc, #28]	; (4134 <_usb_on_suspend+0x20>)
    4118:	2104      	movs	r1, #4
    411a:	0020      	movs	r0, r4
    411c:	4b06      	ldr	r3, [pc, #24]	; (4138 <_usb_on_suspend+0x24>)
    411e:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    4120:	2102      	movs	r1, #2
    4122:	0020      	movs	r0, r4
    4124:	4b05      	ldr	r3, [pc, #20]	; (413c <_usb_on_suspend+0x28>)
    4126:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    4128:	2001      	movs	r0, #1
    412a:	4b05      	ldr	r3, [pc, #20]	; (4140 <_usb_on_suspend+0x2c>)
    412c:	4798      	blx	r3
	UDC_SUSPEND_EVENT();
    412e:	4b05      	ldr	r3, [pc, #20]	; (4144 <_usb_on_suspend+0x30>)
    4130:	4798      	blx	r3
}
    4132:	bd10      	pop	{r4, pc}
    4134:	2000028c 	.word	0x2000028c
    4138:	000047e5 	.word	0x000047e5
    413c:	000047c5 	.word	0x000047c5
    4140:	00003acd 	.word	0x00003acd
    4144:	00005a79 	.word	0x00005a79

00004148 <udd_ep_abort>:
{
    4148:	b510      	push	{r4, lr}
    414a:	0004      	movs	r4, r0
	usb_device_endpoint_abort_job(&usb_device, ep);
    414c:	0001      	movs	r1, r0
    414e:	480a      	ldr	r0, [pc, #40]	; (4178 <udd_ep_abort+0x30>)
    4150:	4b0a      	ldr	r3, [pc, #40]	; (417c <udd_ep_abort+0x34>)
    4152:	4798      	blx	r3
	ptr_job = udd_ep_get_job(ep);
    4154:	0020      	movs	r0, r4
    4156:	4b0a      	ldr	r3, [pc, #40]	; (4180 <udd_ep_abort+0x38>)
    4158:	4798      	blx	r3
	if (!ptr_job->busy) {
    415a:	7c83      	ldrb	r3, [r0, #18]
    415c:	07db      	lsls	r3, r3, #31
    415e:	d50a      	bpl.n	4176 <udd_ep_abort+0x2e>
	ptr_job->busy = false;
    4160:	7c83      	ldrb	r3, [r0, #18]
    4162:	2201      	movs	r2, #1
    4164:	4393      	bics	r3, r2
    4166:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    4168:	6803      	ldr	r3, [r0, #0]
    416a:	2b00      	cmp	r3, #0
    416c:	d003      	beq.n	4176 <udd_ep_abort+0x2e>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    416e:	68c1      	ldr	r1, [r0, #12]
    4170:	0022      	movs	r2, r4
    4172:	2001      	movs	r0, #1
    4174:	4798      	blx	r3
}
    4176:	bd10      	pop	{r4, pc}
    4178:	2000028c 	.word	0x2000028c
    417c:	00004c45 	.word	0x00004c45
    4180:	00003b8d 	.word	0x00003b8d

00004184 <udd_get_frame_number>:
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    4184:	4b02      	ldr	r3, [pc, #8]	; (4190 <udd_get_frame_number+0xc>)
    4186:	681b      	ldr	r3, [r3, #0]
    4188:	8a18      	ldrh	r0, [r3, #16]
    418a:	0480      	lsls	r0, r0, #18
    418c:	0d40      	lsrs	r0, r0, #21
}
    418e:	4770      	bx	lr
    4190:	2000028c 	.word	0x2000028c

00004194 <udd_ep_free>:
{
    4194:	b570      	push	{r4, r5, r6, lr}
    4196:	b082      	sub	sp, #8
    4198:	0004      	movs	r4, r0
	usb_device_endpoint_get_config_defaults(&config_ep);
    419a:	ad01      	add	r5, sp, #4
    419c:	0028      	movs	r0, r5
    419e:	4b0d      	ldr	r3, [pc, #52]	; (41d4 <udd_ep_free+0x40>)
    41a0:	4798      	blx	r3
	udd_ep_abort(ep);
    41a2:	0020      	movs	r0, r4
    41a4:	4b0c      	ldr	r3, [pc, #48]	; (41d8 <udd_ep_free+0x44>)
    41a6:	4798      	blx	r3
	config_ep.ep_address = ep;
    41a8:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    41aa:	2300      	movs	r3, #0
    41ac:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    41ae:	4e0b      	ldr	r6, [pc, #44]	; (41dc <udd_ep_free+0x48>)
    41b0:	0029      	movs	r1, r5
    41b2:	0030      	movs	r0, r6
    41b4:	4b0a      	ldr	r3, [pc, #40]	; (41e0 <udd_ep_free+0x4c>)
    41b6:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    41b8:	210f      	movs	r1, #15
    41ba:	4021      	ands	r1, r4
    41bc:	2200      	movs	r2, #0
    41be:	0030      	movs	r0, r6
    41c0:	4b08      	ldr	r3, [pc, #32]	; (41e4 <udd_ep_free+0x50>)
    41c2:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    41c4:	2200      	movs	r2, #0
    41c6:	0021      	movs	r1, r4
    41c8:	0030      	movs	r0, r6
    41ca:	4b07      	ldr	r3, [pc, #28]	; (41e8 <udd_ep_free+0x54>)
    41cc:	4798      	blx	r3
}
    41ce:	b002      	add	sp, #8
    41d0:	bd70      	pop	{r4, r5, r6, pc}
    41d2:	46c0      	nop			; (mov r8, r8)
    41d4:	000049f1 	.word	0x000049f1
    41d8:	00004149 	.word	0x00004149
    41dc:	2000028c 	.word	0x2000028c
    41e0:	00004a01 	.word	0x00004a01
    41e4:	00004829 	.word	0x00004829
    41e8:	00004921 	.word	0x00004921

000041ec <udd_ep_alloc>:
{
    41ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    41ee:	b083      	sub	sp, #12
    41f0:	0005      	movs	r5, r0
    41f2:	000f      	movs	r7, r1
    41f4:	0014      	movs	r4, r2
	usb_device_endpoint_get_config_defaults(&config_ep);
    41f6:	ae01      	add	r6, sp, #4
    41f8:	0030      	movs	r0, r6
    41fa:	4b36      	ldr	r3, [pc, #216]	; (42d4 <udd_ep_alloc+0xe8>)
    41fc:	4798      	blx	r3
	config_ep.ep_address = ep;
    41fe:	7035      	strb	r5, [r6, #0]
	if(MaxEndpointSize <= 8) {
    4200:	2c08      	cmp	r4, #8
    4202:	d813      	bhi.n	422c <udd_ep_alloc+0x40>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    4204:	2200      	movs	r2, #0
    4206:	ab01      	add	r3, sp, #4
    4208:	705a      	strb	r2, [r3, #1]
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    420a:	0028      	movs	r0, r5
    420c:	4b32      	ldr	r3, [pc, #200]	; (42d8 <udd_ep_alloc+0xec>)
    420e:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    4210:	8204      	strh	r4, [r0, #16]
	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    4212:	2103      	movs	r1, #3
    4214:	4039      	ands	r1, r7
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    4216:	2901      	cmp	r1, #1
    4218:	d038      	beq.n	428c <udd_ep_alloc+0xa0>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    421a:	2902      	cmp	r1, #2
    421c:	d043      	beq.n	42a6 <udd_ep_alloc+0xba>
		return false;
    421e:	2300      	movs	r3, #0
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    4220:	2903      	cmp	r1, #3
    4222:	d13d      	bne.n	42a0 <udd_ep_alloc+0xb4>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    4224:	2204      	movs	r2, #4
    4226:	ab01      	add	r3, sp, #4
    4228:	70da      	strb	r2, [r3, #3]
    422a:	e032      	b.n	4292 <udd_ep_alloc+0xa6>
	} else if(MaxEndpointSize <= 16) {
    422c:	2c10      	cmp	r4, #16
    422e:	d803      	bhi.n	4238 <udd_ep_alloc+0x4c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    4230:	2201      	movs	r2, #1
    4232:	ab01      	add	r3, sp, #4
    4234:	705a      	strb	r2, [r3, #1]
    4236:	e7e8      	b.n	420a <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 32) {
    4238:	2c20      	cmp	r4, #32
    423a:	d803      	bhi.n	4244 <udd_ep_alloc+0x58>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    423c:	2202      	movs	r2, #2
    423e:	ab01      	add	r3, sp, #4
    4240:	705a      	strb	r2, [r3, #1]
    4242:	e7e2      	b.n	420a <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 64) {
    4244:	2c40      	cmp	r4, #64	; 0x40
    4246:	d803      	bhi.n	4250 <udd_ep_alloc+0x64>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    4248:	2203      	movs	r2, #3
    424a:	ab01      	add	r3, sp, #4
    424c:	705a      	strb	r2, [r3, #1]
    424e:	e7dc      	b.n	420a <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 128) {
    4250:	2c80      	cmp	r4, #128	; 0x80
    4252:	d803      	bhi.n	425c <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    4254:	2204      	movs	r2, #4
    4256:	ab01      	add	r3, sp, #4
    4258:	705a      	strb	r2, [r3, #1]
    425a:	e7d6      	b.n	420a <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 256) {
    425c:	2380      	movs	r3, #128	; 0x80
    425e:	005b      	lsls	r3, r3, #1
    4260:	429c      	cmp	r4, r3
    4262:	d803      	bhi.n	426c <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    4264:	2205      	movs	r2, #5
    4266:	ab01      	add	r3, sp, #4
    4268:	705a      	strb	r2, [r3, #1]
    426a:	e7ce      	b.n	420a <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 512) {
    426c:	2380      	movs	r3, #128	; 0x80
    426e:	009b      	lsls	r3, r3, #2
    4270:	429c      	cmp	r4, r3
    4272:	d803      	bhi.n	427c <udd_ep_alloc+0x90>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    4274:	2206      	movs	r2, #6
    4276:	ab01      	add	r3, sp, #4
    4278:	705a      	strb	r2, [r3, #1]
    427a:	e7c6      	b.n	420a <udd_ep_alloc+0x1e>
	} else if(MaxEndpointSize <= 1023) {
    427c:	4a17      	ldr	r2, [pc, #92]	; (42dc <udd_ep_alloc+0xf0>)
		return false;
    427e:	2300      	movs	r3, #0
	} else if(MaxEndpointSize <= 1023) {
    4280:	4294      	cmp	r4, r2
    4282:	d80d      	bhi.n	42a0 <udd_ep_alloc+0xb4>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    4284:	2207      	movs	r2, #7
    4286:	ab01      	add	r3, sp, #4
    4288:	705a      	strb	r2, [r3, #1]
    428a:	e7be      	b.n	420a <udd_ep_alloc+0x1e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    428c:	2202      	movs	r2, #2
    428e:	ab01      	add	r3, sp, #4
    4290:	70da      	strb	r2, [r3, #3]
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    4292:	a901      	add	r1, sp, #4
    4294:	4812      	ldr	r0, [pc, #72]	; (42e0 <udd_ep_alloc+0xf4>)
    4296:	4b13      	ldr	r3, [pc, #76]	; (42e4 <udd_ep_alloc+0xf8>)
    4298:	4798      	blx	r3
		return false;
    429a:	2300      	movs	r3, #0
	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    429c:	2800      	cmp	r0, #0
    429e:	d006      	beq.n	42ae <udd_ep_alloc+0xc2>
}
    42a0:	0018      	movs	r0, r3
    42a2:	b003      	add	sp, #12
    42a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    42a6:	2203      	movs	r2, #3
    42a8:	ab01      	add	r3, sp, #4
    42aa:	70da      	strb	r2, [r3, #3]
    42ac:	e7f1      	b.n	4292 <udd_ep_alloc+0xa6>
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    42ae:	210f      	movs	r1, #15
    42b0:	4029      	ands	r1, r5
    42b2:	4c0b      	ldr	r4, [pc, #44]	; (42e0 <udd_ep_alloc+0xf4>)
    42b4:	4b0c      	ldr	r3, [pc, #48]	; (42e8 <udd_ep_alloc+0xfc>)
    42b6:	2200      	movs	r2, #0
    42b8:	0020      	movs	r0, r4
    42ba:	4e0c      	ldr	r6, [pc, #48]	; (42ec <udd_ep_alloc+0x100>)
    42bc:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    42be:	2200      	movs	r2, #0
    42c0:	0029      	movs	r1, r5
    42c2:	0020      	movs	r0, r4
    42c4:	4e0a      	ldr	r6, [pc, #40]	; (42f0 <udd_ep_alloc+0x104>)
    42c6:	47b0      	blx	r6
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    42c8:	2201      	movs	r2, #1
    42ca:	0029      	movs	r1, r5
    42cc:	0020      	movs	r0, r4
    42ce:	47b0      	blx	r6
	return true;
    42d0:	2301      	movs	r3, #1
    42d2:	e7e5      	b.n	42a0 <udd_ep_alloc+0xb4>
    42d4:	000049f1 	.word	0x000049f1
    42d8:	00003b8d 	.word	0x00003b8d
    42dc:	000003ff 	.word	0x000003ff
    42e0:	2000028c 	.word	0x2000028c
    42e4:	00004a01 	.word	0x00004a01
    42e8:	00003bb1 	.word	0x00003bb1
    42ec:	00004801 	.word	0x00004801
    42f0:	00004851 	.word	0x00004851

000042f4 <udd_ep_is_halted>:
{
    42f4:	b510      	push	{r4, lr}
    42f6:	0001      	movs	r1, r0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    42f8:	4801      	ldr	r0, [pc, #4]	; (4300 <udd_ep_is_halted+0xc>)
    42fa:	4b02      	ldr	r3, [pc, #8]	; (4304 <udd_ep_is_halted+0x10>)
    42fc:	4798      	blx	r3
}
    42fe:	bd10      	pop	{r4, pc}
    4300:	2000028c 	.word	0x2000028c
    4304:	00004c7b 	.word	0x00004c7b

00004308 <udd_ep_set_halt>:
{
    4308:	b510      	push	{r4, lr}
    430a:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    430c:	230f      	movs	r3, #15
    430e:	4003      	ands	r3, r0
		return false;
    4310:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    4312:	2b01      	cmp	r3, #1
    4314:	d900      	bls.n	4318 <udd_ep_set_halt+0x10>
}
    4316:	bd10      	pop	{r4, pc}
	usb_device_endpoint_set_halt(&usb_device, ep);
    4318:	0021      	movs	r1, r4
    431a:	4804      	ldr	r0, [pc, #16]	; (432c <udd_ep_set_halt+0x24>)
    431c:	4b04      	ldr	r3, [pc, #16]	; (4330 <udd_ep_set_halt+0x28>)
    431e:	4798      	blx	r3
	udd_ep_abort(ep);
    4320:	0020      	movs	r0, r4
    4322:	4b04      	ldr	r3, [pc, #16]	; (4334 <udd_ep_set_halt+0x2c>)
    4324:	4798      	blx	r3
	return true;
    4326:	2001      	movs	r0, #1
    4328:	e7f5      	b.n	4316 <udd_ep_set_halt+0xe>
    432a:	46c0      	nop			; (mov r8, r8)
    432c:	2000028c 	.word	0x2000028c
    4330:	00004ca5 	.word	0x00004ca5
    4334:	00004149 	.word	0x00004149

00004338 <_usb_ep0_on_tansfer_ok>:
{
    4338:	b570      	push	{r4, r5, r6, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    433a:	4b34      	ldr	r3, [pc, #208]	; (440c <_usb_ep0_on_tansfer_ok+0xd4>)
    433c:	781b      	ldrb	r3, [r3, #0]
    433e:	2b01      	cmp	r3, #1
    4340:	d00a      	beq.n	4358 <_usb_ep0_on_tansfer_ok+0x20>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    4342:	2b02      	cmp	r3, #2
    4344:	d05f      	beq.n	4406 <_usb_ep0_on_tansfer_ok+0xce>
			if (NULL != udd_g_ctrlreq.callback) {
    4346:	4b32      	ldr	r3, [pc, #200]	; (4410 <_usb_ep0_on_tansfer_ok+0xd8>)
    4348:	691b      	ldr	r3, [r3, #16]
    434a:	2b00      	cmp	r3, #0
    434c:	d000      	beq.n	4350 <_usb_ep0_on_tansfer_ok+0x18>
				udd_g_ctrlreq.callback();
    434e:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    4350:	2200      	movs	r2, #0
    4352:	4b2e      	ldr	r3, [pc, #184]	; (440c <_usb_ep0_on_tansfer_ok+0xd4>)
    4354:	701a      	strb	r2, [r3, #0]
}
    4356:	bd70      	pop	{r4, r5, r6, pc}
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    4358:	880d      	ldrh	r5, [r1, #0]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    435a:	4b2d      	ldr	r3, [pc, #180]	; (4410 <_usb_ep0_on_tansfer_ok+0xd8>)
    435c:	899b      	ldrh	r3, [r3, #12]
    435e:	4a2d      	ldr	r2, [pc, #180]	; (4414 <_usb_ep0_on_tansfer_ok+0xdc>)
    4360:	8814      	ldrh	r4, [r2, #0]
    4362:	1962      	adds	r2, r4, r5
    4364:	4293      	cmp	r3, r2
    4366:	da01      	bge.n	436c <_usb_ep0_on_tansfer_ok+0x34>
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    4368:	1b1d      	subs	r5, r3, r4
    436a:	b2ad      	uxth	r5, r5
	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    436c:	4b28      	ldr	r3, [pc, #160]	; (4410 <_usb_ep0_on_tansfer_ok+0xd8>)
    436e:	6898      	ldr	r0, [r3, #8]
    4370:	1900      	adds	r0, r0, r4
    4372:	002a      	movs	r2, r5
    4374:	4928      	ldr	r1, [pc, #160]	; (4418 <_usb_ep0_on_tansfer_ok+0xe0>)
    4376:	4b29      	ldr	r3, [pc, #164]	; (441c <_usb_ep0_on_tansfer_ok+0xe4>)
    4378:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    437a:	1964      	adds	r4, r4, r5
    437c:	b2a4      	uxth	r4, r4
    437e:	4b25      	ldr	r3, [pc, #148]	; (4414 <_usb_ep0_on_tansfer_ok+0xdc>)
    4380:	801c      	strh	r4, [r3, #0]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    4382:	2d08      	cmp	r5, #8
    4384:	d00a      	beq.n	439c <_usb_ep0_on_tansfer_ok+0x64>
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    4386:	4b22      	ldr	r3, [pc, #136]	; (4410 <_usb_ep0_on_tansfer_ok+0xd8>)
    4388:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    438a:	695b      	ldr	r3, [r3, #20]
    438c:	2b00      	cmp	r3, #0
    438e:	d002      	beq.n	4396 <_usb_ep0_on_tansfer_ok+0x5e>
			if (!udd_g_ctrlreq.over_under_run()) {
    4390:	4798      	blx	r3
    4392:	2800      	cmp	r0, #0
    4394:	d014      	beq.n	43c0 <_usb_ep0_on_tansfer_ok+0x88>
		udd_ctrl_send_zlp_in();
    4396:	4b22      	ldr	r3, [pc, #136]	; (4420 <_usb_ep0_on_tansfer_ok+0xe8>)
    4398:	4798      	blx	r3
    439a:	e7dc      	b.n	4356 <_usb_ep0_on_tansfer_ok+0x1e>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    439c:	4b1c      	ldr	r3, [pc, #112]	; (4410 <_usb_ep0_on_tansfer_ok+0xd8>)
    439e:	88da      	ldrh	r2, [r3, #6]
    43a0:	4b20      	ldr	r3, [pc, #128]	; (4424 <_usb_ep0_on_tansfer_ok+0xec>)
    43a2:	881b      	ldrh	r3, [r3, #0]
    43a4:	191b      	adds	r3, r3, r4
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    43a6:	429a      	cmp	r2, r3
    43a8:	dded      	ble.n	4386 <_usb_ep0_on_tansfer_ok+0x4e>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    43aa:	4b19      	ldr	r3, [pc, #100]	; (4410 <_usb_ep0_on_tansfer_ok+0xd8>)
    43ac:	899b      	ldrh	r3, [r3, #12]
    43ae:	42a3      	cmp	r3, r4
    43b0:	d00c      	beq.n	43cc <_usb_ep0_on_tansfer_ok+0x94>
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    43b2:	2308      	movs	r3, #8
    43b4:	4a18      	ldr	r2, [pc, #96]	; (4418 <_usb_ep0_on_tansfer_ok+0xe0>)
    43b6:	2100      	movs	r1, #0
    43b8:	481b      	ldr	r0, [pc, #108]	; (4428 <_usb_ep0_on_tansfer_ok+0xf0>)
    43ba:	4c1c      	ldr	r4, [pc, #112]	; (442c <_usb_ep0_on_tansfer_ok+0xf4>)
    43bc:	47a0      	blx	r4
    43be:	e7ca      	b.n	4356 <_usb_ep0_on_tansfer_ok+0x1e>
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    43c0:	2205      	movs	r2, #5
    43c2:	4b12      	ldr	r3, [pc, #72]	; (440c <_usb_ep0_on_tansfer_ok+0xd4>)
    43c4:	701a      	strb	r2, [r3, #0]
				udd_ep_set_halt(0);
    43c6:	4b1a      	ldr	r3, [pc, #104]	; (4430 <_usb_ep0_on_tansfer_ok+0xf8>)
    43c8:	4798      	blx	r3
    43ca:	e7c4      	b.n	4356 <_usb_ep0_on_tansfer_ok+0x1e>
		if (!udd_g_ctrlreq.over_under_run) {
    43cc:	4b10      	ldr	r3, [pc, #64]	; (4410 <_usb_ep0_on_tansfer_ok+0xd8>)
    43ce:	695b      	ldr	r3, [r3, #20]
    43d0:	2b00      	cmp	r3, #0
    43d2:	d00b      	beq.n	43ec <_usb_ep0_on_tansfer_ok+0xb4>
		if (!udd_g_ctrlreq.over_under_run()) {
    43d4:	4798      	blx	r3
    43d6:	2800      	cmp	r0, #0
    43d8:	d00f      	beq.n	43fa <_usb_ep0_on_tansfer_ok+0xc2>
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    43da:	4912      	ldr	r1, [pc, #72]	; (4424 <_usb_ep0_on_tansfer_ok+0xec>)
    43dc:	4a0d      	ldr	r2, [pc, #52]	; (4414 <_usb_ep0_on_tansfer_ok+0xdc>)
    43de:	880b      	ldrh	r3, [r1, #0]
    43e0:	8810      	ldrh	r0, [r2, #0]
    43e2:	181b      	adds	r3, r3, r0
    43e4:	800b      	strh	r3, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
    43e6:	2300      	movs	r3, #0
    43e8:	8013      	strh	r3, [r2, #0]
    43ea:	e7e2      	b.n	43b2 <_usb_ep0_on_tansfer_ok+0x7a>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    43ec:	2205      	movs	r2, #5
    43ee:	4b07      	ldr	r3, [pc, #28]	; (440c <_usb_ep0_on_tansfer_ok+0xd4>)
    43f0:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    43f2:	2000      	movs	r0, #0
    43f4:	4b0e      	ldr	r3, [pc, #56]	; (4430 <_usb_ep0_on_tansfer_ok+0xf8>)
    43f6:	4798      	blx	r3
    43f8:	e7ad      	b.n	4356 <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    43fa:	2205      	movs	r2, #5
    43fc:	4b03      	ldr	r3, [pc, #12]	; (440c <_usb_ep0_on_tansfer_ok+0xd4>)
    43fe:	701a      	strb	r2, [r3, #0]
			udd_ep_set_halt(0);
    4400:	4b0b      	ldr	r3, [pc, #44]	; (4430 <_usb_ep0_on_tansfer_ok+0xf8>)
    4402:	4798      	blx	r3
    4404:	e7a7      	b.n	4356 <_usb_ep0_on_tansfer_ok+0x1e>
			udd_ctrl_in_sent();
    4406:	4b0b      	ldr	r3, [pc, #44]	; (4434 <_usb_ep0_on_tansfer_ok+0xfc>)
    4408:	4798      	blx	r3
    440a:	e7a4      	b.n	4356 <_usb_ep0_on_tansfer_ok+0x1e>
    440c:	20000186 	.word	0x20000186
    4410:	200003f4 	.word	0x200003f4
    4414:	20000182 	.word	0x20000182
    4418:	2000040c 	.word	0x2000040c
    441c:	00005e5d 	.word	0x00005e5d
    4420:	00003ee5 	.word	0x00003ee5
    4424:	20000184 	.word	0x20000184
    4428:	2000028c 	.word	0x2000028c
    442c:	00004da5 	.word	0x00004da5
    4430:	00004309 	.word	0x00004309
    4434:	00003f75 	.word	0x00003f75

00004438 <udd_ep_clear_halt>:
{
    4438:	b570      	push	{r4, r5, r6, lr}
    443a:	0004      	movs	r4, r0
	if (USB_DEVICE_MAX_EP < ep_num) {
    443c:	230f      	movs	r3, #15
    443e:	4003      	ands	r3, r0
		return false;
    4440:	2000      	movs	r0, #0
	if (USB_DEVICE_MAX_EP < ep_num) {
    4442:	2b01      	cmp	r3, #1
    4444:	d900      	bls.n	4448 <udd_ep_clear_halt+0x10>
}
    4446:	bd70      	pop	{r4, r5, r6, pc}
	ptr_job = udd_ep_get_job(ep);
    4448:	0020      	movs	r0, r4
    444a:	4b09      	ldr	r3, [pc, #36]	; (4470 <udd_ep_clear_halt+0x38>)
    444c:	4798      	blx	r3
    444e:	0005      	movs	r5, r0
	usb_device_endpoint_clear_halt(&usb_device, ep);
    4450:	0021      	movs	r1, r4
    4452:	4808      	ldr	r0, [pc, #32]	; (4474 <udd_ep_clear_halt+0x3c>)
    4454:	4b08      	ldr	r3, [pc, #32]	; (4478 <udd_ep_clear_halt+0x40>)
    4456:	4798      	blx	r3
	if (ptr_job->busy == true) {
    4458:	7cab      	ldrb	r3, [r5, #18]
	return true;
    445a:	2001      	movs	r0, #1
	if (ptr_job->busy == true) {
    445c:	07db      	lsls	r3, r3, #31
    445e:	d5f2      	bpl.n	4446 <udd_ep_clear_halt+0xe>
		ptr_job->busy = false;
    4460:	7cab      	ldrb	r3, [r5, #18]
    4462:	2201      	movs	r2, #1
    4464:	4393      	bics	r3, r2
    4466:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    4468:	682b      	ldr	r3, [r5, #0]
    446a:	4798      	blx	r3
	return true;
    446c:	2001      	movs	r0, #1
    446e:	e7ea      	b.n	4446 <udd_ep_clear_halt+0xe>
    4470:	00003b8d 	.word	0x00003b8d
    4474:	2000028c 	.word	0x2000028c
    4478:	00004ccb 	.word	0x00004ccb

0000447c <udd_ep_run>:
{
    447c:	b5f0      	push	{r4, r5, r6, r7, lr}
    447e:	b087      	sub	sp, #28
    4480:	0005      	movs	r5, r0
    4482:	9103      	str	r1, [sp, #12]
    4484:	9202      	str	r2, [sp, #8]
    4486:	9301      	str	r3, [sp, #4]
	ep_num = ep & USB_EP_ADDR_MASK;
    4488:	260f      	movs	r6, #15
    448a:	4006      	ands	r6, r0
		return false;
    448c:	2400      	movs	r4, #0
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    448e:	2e01      	cmp	r6, #1
    4490:	d902      	bls.n	4498 <udd_ep_run+0x1c>
}
    4492:	0020      	movs	r0, r4
    4494:	b007      	add	sp, #28
    4496:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    4498:	4b64      	ldr	r3, [pc, #400]	; (462c <udd_ep_run+0x1b0>)
    449a:	4798      	blx	r3
    449c:	1e04      	subs	r4, r0, #0
    449e:	d000      	beq.n	44a2 <udd_ep_run+0x26>
    44a0:	e0bd      	b.n	461e <udd_ep_run+0x1a2>
	ptr_job = udd_ep_get_job(ep);
    44a2:	0028      	movs	r0, r5
    44a4:	4b62      	ldr	r3, [pc, #392]	; (4630 <udd_ep_run+0x1b4>)
    44a6:	4798      	blx	r3
    44a8:	0007      	movs	r7, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    44aa:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    44ae:	425a      	negs	r2, r3
    44b0:	4153      	adcs	r3, r2
    44b2:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    44b4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    44b6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    44ba:	2200      	movs	r2, #0
    44bc:	4b5d      	ldr	r3, [pc, #372]	; (4634 <udd_ep_run+0x1b8>)
    44be:	701a      	strb	r2, [r3, #0]
	return flags;
    44c0:	9b05      	ldr	r3, [sp, #20]
	if (ptr_job->busy == true) {
    44c2:	7c82      	ldrb	r2, [r0, #18]
    44c4:	07d2      	lsls	r2, r2, #31
    44c6:	d508      	bpl.n	44da <udd_ep_run+0x5e>
	if (cpu_irq_is_enabled_flags(flags))
    44c8:	2b00      	cmp	r3, #0
    44ca:	d0e2      	beq.n	4492 <udd_ep_run+0x16>
		cpu_irq_enable();
    44cc:	2201      	movs	r2, #1
    44ce:	4b59      	ldr	r3, [pc, #356]	; (4634 <udd_ep_run+0x1b8>)
    44d0:	701a      	strb	r2, [r3, #0]
    44d2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    44d6:	b662      	cpsie	i
    44d8:	e7db      	b.n	4492 <udd_ep_run+0x16>
	ptr_job->busy = true;
    44da:	7c82      	ldrb	r2, [r0, #18]
    44dc:	2101      	movs	r1, #1
    44de:	430a      	orrs	r2, r1
    44e0:	7482      	strb	r2, [r0, #18]
	if (cpu_irq_is_enabled_flags(flags))
    44e2:	2b00      	cmp	r3, #0
    44e4:	d005      	beq.n	44f2 <udd_ep_run+0x76>
		cpu_irq_enable();
    44e6:	2201      	movs	r2, #1
    44e8:	4b52      	ldr	r3, [pc, #328]	; (4634 <udd_ep_run+0x1b8>)
    44ea:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    44ec:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    44f0:	b662      	cpsie	i
	ptr_job->buf = buf;
    44f2:	9b02      	ldr	r3, [sp, #8]
    44f4:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    44f6:	9b01      	ldr	r3, [sp, #4]
    44f8:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    44fa:	2300      	movs	r3, #0
    44fc:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    44fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4500:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    4502:	2301      	movs	r3, #1
    4504:	9a03      	ldr	r2, [sp, #12]
    4506:	4013      	ands	r3, r2
    4508:	005a      	lsls	r2, r3, #1
    450a:	7cbb      	ldrb	r3, [r7, #18]
    450c:	2102      	movs	r1, #2
    450e:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    4510:	4313      	orrs	r3, r2
    4512:	2204      	movs	r2, #4
    4514:	4393      	bics	r3, r2
    4516:	74bb      	strb	r3, [r7, #18]
	if (ep & USB_EP_DIR_IN) {
    4518:	b26b      	sxtb	r3, r5
    451a:	2b00      	cmp	r3, #0
    451c:	db20      	blt.n	4560 <udd_ep_run+0xe4>
		if (0 != ptr_job->buf_size) {
    451e:	9b01      	ldr	r3, [sp, #4]
    4520:	2b00      	cmp	r3, #0
    4522:	d06f      	beq.n	4604 <udd_ep_run+0x188>
			next_trans = ptr_job->buf_size;
    4524:	b29c      	uxth	r4, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    4526:	4b44      	ldr	r3, [pc, #272]	; (4638 <udd_ep_run+0x1bc>)
    4528:	429c      	cmp	r4, r3
    452a:	d95a      	bls.n	45e2 <udd_ep_run+0x166>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    452c:	8a39      	ldrh	r1, [r7, #16]
    452e:	001c      	movs	r4, r3
    4530:	0018      	movs	r0, r3
    4532:	4b42      	ldr	r3, [pc, #264]	; (463c <udd_ep_run+0x1c0>)
    4534:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    4536:	1a63      	subs	r3, r4, r1
    4538:	b29a      	uxth	r2, r3
			if (next_trans < ptr_job->ep_size) {
    453a:	8a3b      	ldrh	r3, [r7, #16]
    453c:	429a      	cmp	r2, r3
    453e:	d257      	bcs.n	45f0 <udd_ep_run+0x174>
				ptr_job->b_use_out_cache_buffer = true;
    4540:	7cba      	ldrb	r2, [r7, #18]
    4542:	2104      	movs	r1, #4
    4544:	430a      	orrs	r2, r1
    4546:	74ba      	strb	r2, [r7, #18]
								udd_ep_out_cache_buffer[ep_num - 1],
    4548:	1e72      	subs	r2, r6, #1
    454a:	0192      	lsls	r2, r2, #6
    454c:	493c      	ldr	r1, [pc, #240]	; (4640 <udd_ep_run+0x1c4>)
    454e:	1852      	adds	r2, r2, r1
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    4550:	0031      	movs	r1, r6
    4552:	483c      	ldr	r0, [pc, #240]	; (4644 <udd_ep_run+0x1c8>)
    4554:	4c3c      	ldr	r4, [pc, #240]	; (4648 <udd_ep_run+0x1cc>)
    4556:	47a0      	blx	r4
				return (STATUS_OK ==
    4558:	4244      	negs	r4, r0
    455a:	4144      	adcs	r4, r0
    455c:	b2e4      	uxtb	r4, r4
    455e:	e798      	b.n	4492 <udd_ep_run+0x16>
		if (0 != ptr_job->buf_size) {
    4560:	9b01      	ldr	r3, [sp, #4]
    4562:	2b00      	cmp	r3, #0
    4564:	d027      	beq.n	45b6 <udd_ep_run+0x13a>
			next_trans = ptr_job->buf_size;
    4566:	b29d      	uxth	r5, r3
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    4568:	4b33      	ldr	r3, [pc, #204]	; (4638 <udd_ep_run+0x1bc>)
    456a:	429d      	cmp	r5, r3
    456c:	d906      	bls.n	457c <udd_ep_run+0x100>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    456e:	8a39      	ldrh	r1, [r7, #16]
    4570:	001d      	movs	r5, r3
    4572:	0018      	movs	r0, r3
    4574:	4b31      	ldr	r3, [pc, #196]	; (463c <udd_ep_run+0x1c0>)
    4576:	4798      	blx	r3
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    4578:	1a6b      	subs	r3, r5, r1
    457a:	b29d      	uxth	r5, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    457c:	7cbb      	ldrb	r3, [r7, #18]
    457e:	079b      	lsls	r3, r3, #30
    4580:	d507      	bpl.n	4592 <udd_ep_run+0x116>
					(0 == (next_trans % ptr_job->ep_size));
    4582:	8a39      	ldrh	r1, [r7, #16]
    4584:	0028      	movs	r0, r5
    4586:	4b31      	ldr	r3, [pc, #196]	; (464c <udd_ep_run+0x1d0>)
    4588:	4798      	blx	r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    458a:	b289      	uxth	r1, r1
    458c:	424c      	negs	r4, r1
    458e:	414c      	adcs	r4, r1
    4590:	b2e4      	uxtb	r4, r4
    4592:	2001      	movs	r0, #1
    4594:	4020      	ands	r0, r4
    4596:	0040      	lsls	r0, r0, #1
    4598:	7cbc      	ldrb	r4, [r7, #18]
    459a:	2302      	movs	r3, #2
    459c:	439c      	bics	r4, r3
    459e:	4304      	orrs	r4, r0
    45a0:	74bc      	strb	r4, [r7, #18]
				usb_device_endpoint_write_buffer_job(&usb_device,
    45a2:	002b      	movs	r3, r5
    45a4:	9a02      	ldr	r2, [sp, #8]
    45a6:	0031      	movs	r1, r6
    45a8:	4826      	ldr	r0, [pc, #152]	; (4644 <udd_ep_run+0x1c8>)
    45aa:	4c29      	ldr	r4, [pc, #164]	; (4650 <udd_ep_run+0x1d4>)
    45ac:	47a0      	blx	r4
		return (STATUS_OK ==
    45ae:	4244      	negs	r4, r0
    45b0:	4144      	adcs	r4, r0
    45b2:	b2e4      	uxtb	r4, r4
    45b4:	e76d      	b.n	4492 <udd_ep_run+0x16>
		} else if (true == ptr_job->b_shortpacket) {
    45b6:	7cbb      	ldrb	r3, [r7, #18]
    45b8:	079b      	lsls	r3, r3, #30
    45ba:	d505      	bpl.n	45c8 <udd_ep_run+0x14c>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    45bc:	7cbb      	ldrb	r3, [r7, #18]
    45be:	2202      	movs	r2, #2
    45c0:	4393      	bics	r3, r2
    45c2:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    45c4:	2500      	movs	r5, #0
    45c6:	e7ec      	b.n	45a2 <udd_ep_run+0x126>
			ptr_job->busy = false;
    45c8:	7cbb      	ldrb	r3, [r7, #18]
    45ca:	2201      	movs	r2, #1
    45cc:	4393      	bics	r3, r2
    45ce:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    45d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    45d2:	2b00      	cmp	r3, #0
    45d4:	d025      	beq.n	4622 <udd_ep_run+0x1a6>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    45d6:	002a      	movs	r2, r5
    45d8:	2100      	movs	r1, #0
    45da:	2000      	movs	r0, #0
    45dc:	4798      	blx	r3
			return true;
    45de:	2401      	movs	r4, #1
    45e0:	e757      	b.n	4492 <udd_ep_run+0x16>
				next_trans -= next_trans % ptr_job->ep_size;
    45e2:	8a39      	ldrh	r1, [r7, #16]
    45e4:	0020      	movs	r0, r4
    45e6:	4b19      	ldr	r3, [pc, #100]	; (464c <udd_ep_run+0x1d0>)
    45e8:	4798      	blx	r3
    45ea:	1a63      	subs	r3, r4, r1
    45ec:	b29a      	uxth	r2, r3
    45ee:	e7a4      	b.n	453a <udd_ep_run+0xbe>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    45f0:	0013      	movs	r3, r2
    45f2:	9a02      	ldr	r2, [sp, #8]
    45f4:	0031      	movs	r1, r6
    45f6:	4813      	ldr	r0, [pc, #76]	; (4644 <udd_ep_run+0x1c8>)
    45f8:	4c13      	ldr	r4, [pc, #76]	; (4648 <udd_ep_run+0x1cc>)
    45fa:	47a0      	blx	r4
				return (STATUS_OK ==
    45fc:	4244      	negs	r4, r0
    45fe:	4144      	adcs	r4, r0
    4600:	b2e4      	uxtb	r4, r4
    4602:	e746      	b.n	4492 <udd_ep_run+0x16>
			ptr_job->busy = false;
    4604:	7cbb      	ldrb	r3, [r7, #18]
    4606:	2201      	movs	r2, #1
    4608:	4393      	bics	r3, r2
    460a:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    460c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    460e:	2b00      	cmp	r3, #0
    4610:	d009      	beq.n	4626 <udd_ep_run+0x1aa>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    4612:	002a      	movs	r2, r5
    4614:	2100      	movs	r1, #0
    4616:	2000      	movs	r0, #0
    4618:	4798      	blx	r3
			return true;
    461a:	2401      	movs	r4, #1
    461c:	e739      	b.n	4492 <udd_ep_run+0x16>
		return false;
    461e:	2400      	movs	r4, #0
    4620:	e737      	b.n	4492 <udd_ep_run+0x16>
			return true;
    4622:	2401      	movs	r4, #1
    4624:	e735      	b.n	4492 <udd_ep_run+0x16>
			return true;
    4626:	2401      	movs	r4, #1
    4628:	e733      	b.n	4492 <udd_ep_run+0x16>
    462a:	46c0      	nop			; (mov r8, r8)
    462c:	000042f5 	.word	0x000042f5
    4630:	00003b8d 	.word	0x00003b8d
    4634:	200000da 	.word	0x200000da
    4638:	00001fff 	.word	0x00001fff
    463c:	00005dc9 	.word	0x00005dc9
    4640:	2000024c 	.word	0x2000024c
    4644:	2000028c 	.word	0x2000028c
    4648:	00004da5 	.word	0x00004da5
    464c:	00005bf5 	.word	0x00005bf5
    4650:	00004d51 	.word	0x00004d51

00004654 <udd_set_address>:
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    4654:	4b02      	ldr	r3, [pc, #8]	; (4660 <udd_set_address+0xc>)
    4656:	681b      	ldr	r3, [r3, #0]
    4658:	2280      	movs	r2, #128	; 0x80
    465a:	4310      	orrs	r0, r2
    465c:	7298      	strb	r0, [r3, #10]
}
    465e:	4770      	bx	lr
    4660:	2000028c 	.word	0x2000028c

00004664 <udd_getaddress>:
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    4664:	4b02      	ldr	r3, [pc, #8]	; (4670 <udd_getaddress+0xc>)
    4666:	681b      	ldr	r3, [r3, #0]
    4668:	7a98      	ldrb	r0, [r3, #10]
    466a:	0640      	lsls	r0, r0, #25
    466c:	0e40      	lsrs	r0, r0, #25
}
    466e:	4770      	bx	lr
    4670:	2000028c 	.word	0x2000028c

00004674 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
    4674:	4b01      	ldr	r3, [pc, #4]	; (467c <udd_set_setup_payload+0x8>)
    4676:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    4678:	8199      	strh	r1, [r3, #12]
}
    467a:	4770      	bx	lr
    467c:	200003f4 	.word	0x200003f4

00004680 <udd_attach>:
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
}

void udd_attach(void)
{
    4680:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    4682:	2003      	movs	r0, #3
    4684:	4b16      	ldr	r3, [pc, #88]	; (46e0 <udd_attach+0x60>)
    4686:	4798      	blx	r3
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    4688:	4c16      	ldr	r4, [pc, #88]	; (46e4 <udd_attach+0x64>)
    468a:	6822      	ldr	r2, [r4, #0]
    468c:	8913      	ldrh	r3, [r2, #8]
    468e:	2101      	movs	r1, #1
    4690:	438b      	bics	r3, r1
    4692:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    4694:	4a14      	ldr	r2, [pc, #80]	; (46e8 <udd_attach+0x68>)
    4696:	3103      	adds	r1, #3
    4698:	0020      	movs	r0, r4
    469a:	4e14      	ldr	r6, [pc, #80]	; (46ec <udd_attach+0x6c>)
    469c:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    469e:	4a14      	ldr	r2, [pc, #80]	; (46f0 <udd_attach+0x70>)
    46a0:	2100      	movs	r1, #0
    46a2:	0020      	movs	r0, r4
    46a4:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    46a6:	4a13      	ldr	r2, [pc, #76]	; (46f4 <udd_attach+0x74>)
    46a8:	2101      	movs	r1, #1
    46aa:	0020      	movs	r0, r4
    46ac:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    46ae:	4a12      	ldr	r2, [pc, #72]	; (46f8 <udd_attach+0x78>)
    46b0:	2102      	movs	r1, #2
    46b2:	0020      	movs	r0, r4
    46b4:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    46b6:	2104      	movs	r1, #4
    46b8:	0020      	movs	r0, r4
    46ba:	4d10      	ldr	r5, [pc, #64]	; (46fc <udd_attach+0x7c>)
    46bc:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    46be:	2100      	movs	r1, #0
    46c0:	0020      	movs	r0, r4
    46c2:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    46c4:	2101      	movs	r1, #1
    46c6:	0020      	movs	r0, r4
    46c8:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    46ca:	2102      	movs	r1, #2
    46cc:	0020      	movs	r0, r4
    46ce:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    46d0:	4a0b      	ldr	r2, [pc, #44]	; (4700 <udd_attach+0x80>)
    46d2:	2106      	movs	r1, #6
    46d4:	0020      	movs	r0, r4
    46d6:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    46d8:	2106      	movs	r1, #6
    46da:	0020      	movs	r0, r4
    46dc:	47a8      	blx	r5
#endif
}
    46de:	bd70      	pop	{r4, r5, r6, pc}
    46e0:	00003acd 	.word	0x00003acd
    46e4:	2000028c 	.word	0x2000028c
    46e8:	00004115 	.word	0x00004115
    46ec:	000047a1 	.word	0x000047a1
    46f0:	00004101 	.word	0x00004101
    46f4:	00003e35 	.word	0x00003e35
    46f8:	00003dc5 	.word	0x00003dc5
    46fc:	000047c5 	.word	0x000047c5
    4700:	00003d91 	.word	0x00003d91

00004704 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    4704:	b570      	push	{r4, r5, r6, lr}
    4706:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    4708:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    470c:	425a      	negs	r2, r3
    470e:	4153      	adcs	r3, r2
    4710:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    4712:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    4714:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    4718:	2600      	movs	r6, #0
    471a:	4b18      	ldr	r3, [pc, #96]	; (477c <udd_enable+0x78>)
    471c:	701e      	strb	r6, [r3, #0]
	return flags;
    471e:	9c00      	ldr	r4, [sp, #0]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    4720:	ad01      	add	r5, sp, #4
    4722:	0028      	movs	r0, r5
    4724:	4b16      	ldr	r3, [pc, #88]	; (4780 <udd_enable+0x7c>)
    4726:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    4728:	70ae      	strb	r6, [r5, #2]
	usb_init(&usb_device, USB, &config_usb);
    472a:	4e16      	ldr	r6, [pc, #88]	; (4784 <udd_enable+0x80>)
    472c:	002a      	movs	r2, r5
    472e:	4916      	ldr	r1, [pc, #88]	; (4788 <udd_enable+0x84>)
    4730:	0030      	movs	r0, r6
    4732:	4b16      	ldr	r3, [pc, #88]	; (478c <udd_enable+0x88>)
    4734:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    4736:	0030      	movs	r0, r6
    4738:	4b15      	ldr	r3, [pc, #84]	; (4790 <udd_enable+0x8c>)
    473a:	4798      	blx	r3
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    473c:	4b15      	ldr	r3, [pc, #84]	; (4794 <udd_enable+0x90>)
    473e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    4740:	069b      	lsls	r3, r3, #26
    4742:	d414      	bmi.n	476e <udd_enable+0x6a>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    4744:	4913      	ldr	r1, [pc, #76]	; (4794 <udd_enable+0x90>)
    4746:	22d0      	movs	r2, #208	; 0xd0
    4748:	68cb      	ldr	r3, [r1, #12]
    474a:	4013      	ands	r3, r2
    474c:	2bd0      	cmp	r3, #208	; 0xd0
    474e:	d1fb      	bne.n	4748 <udd_enable+0x44>

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    4750:	2001      	movs	r0, #1
    4752:	4b11      	ldr	r3, [pc, #68]	; (4798 <udd_enable+0x94>)
    4754:	4798      	blx	r3
		_uhd_vbus_handler();
	}
#else
	// No VBus detect, assume always high
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
    4756:	4b11      	ldr	r3, [pc, #68]	; (479c <udd_enable+0x98>)
    4758:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    475a:	2c00      	cmp	r4, #0
    475c:	d005      	beq.n	476a <udd_enable+0x66>
		cpu_irq_enable();
    475e:	2201      	movs	r2, #1
    4760:	4b06      	ldr	r3, [pc, #24]	; (477c <udd_enable+0x78>)
    4762:	701a      	strb	r2, [r3, #0]
    4764:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4768:	b662      	cpsie	i
# endif
#endif

	cpu_irq_restore(flags);
}
    476a:	b002      	add	sp, #8
    476c:	bd70      	pop	{r4, r5, r6, pc}
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    476e:	4909      	ldr	r1, [pc, #36]	; (4794 <udd_enable+0x90>)
    4770:	2210      	movs	r2, #16
    4772:	68cb      	ldr	r3, [r1, #12]
    4774:	421a      	tst	r2, r3
    4776:	d0fc      	beq.n	4772 <udd_enable+0x6e>
    4778:	e7ea      	b.n	4750 <udd_enable+0x4c>
    477a:	46c0      	nop			; (mov r8, r8)
    477c:	200000da 	.word	0x200000da
    4780:	00005519 	.word	0x00005519
    4784:	2000028c 	.word	0x2000028c
    4788:	41005000 	.word	0x41005000
    478c:	00005529 	.word	0x00005529
    4790:	00004e25 	.word	0x00004e25
    4794:	40000800 	.word	0x40000800
    4798:	00003acd 	.word	0x00003acd
    479c:	00004681 	.word	0x00004681

000047a0 <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    47a0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    47a2:	000b      	movs	r3, r1
    47a4:	332e      	adds	r3, #46	; 0x2e
    47a6:	009b      	lsls	r3, r3, #2
    47a8:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    47aa:	22aa      	movs	r2, #170	; 0xaa
    47ac:	0052      	lsls	r2, r2, #1
    47ae:	0049      	lsls	r1, r1, #1
    47b0:	5a83      	ldrh	r3, [r0, r2]
    47b2:	4c03      	ldr	r4, [pc, #12]	; (47c0 <usb_device_register_callback+0x20>)
    47b4:	5b09      	ldrh	r1, [r1, r4]
    47b6:	430b      	orrs	r3, r1
    47b8:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    47ba:	2000      	movs	r0, #0
    47bc:	bd10      	pop	{r4, pc}
    47be:	46c0      	nop			; (mov r8, r8)
    47c0:	00005eec 	.word	0x00005eec

000047c4 <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    47c4:	0049      	lsls	r1, r1, #1
    47c6:	4b06      	ldr	r3, [pc, #24]	; (47e0 <usb_device_enable_callback+0x1c>)
    47c8:	5acb      	ldrh	r3, [r1, r3]
    47ca:	6802      	ldr	r2, [r0, #0]
    47cc:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    47ce:	21ab      	movs	r1, #171	; 0xab
    47d0:	0049      	lsls	r1, r1, #1
    47d2:	5a42      	ldrh	r2, [r0, r1]
    47d4:	431a      	orrs	r2, r3
    47d6:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    47d8:	6802      	ldr	r2, [r0, #0]
    47da:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    47dc:	2000      	movs	r0, #0
    47de:	4770      	bx	lr
    47e0:	00005eec 	.word	0x00005eec

000047e4 <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    47e4:	0049      	lsls	r1, r1, #1
    47e6:	4b05      	ldr	r3, [pc, #20]	; (47fc <usb_device_disable_callback+0x18>)
    47e8:	5aca      	ldrh	r2, [r1, r3]
    47ea:	21ab      	movs	r1, #171	; 0xab
    47ec:	0049      	lsls	r1, r1, #1
    47ee:	5a43      	ldrh	r3, [r0, r1]
    47f0:	4393      	bics	r3, r2
    47f2:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    47f4:	6803      	ldr	r3, [r0, #0]
    47f6:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    47f8:	2000      	movs	r0, #0
    47fa:	4770      	bx	lr
    47fc:	00005eec 	.word	0x00005eec

00004800 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    4800:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    4802:	008c      	lsls	r4, r1, #2
    4804:	18a4      	adds	r4, r4, r2
    4806:	3434      	adds	r4, #52	; 0x34
    4808:	00a4      	lsls	r4, r4, #2
    480a:	1904      	adds	r4, r0, r4
    480c:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    480e:	1840      	adds	r0, r0, r1
    4810:	3059      	adds	r0, #89	; 0x59
    4812:	30ff      	adds	r0, #255	; 0xff
    4814:	7803      	ldrb	r3, [r0, #0]
    4816:	4903      	ldr	r1, [pc, #12]	; (4824 <usb_device_endpoint_register_callback+0x24>)
    4818:	5c8a      	ldrb	r2, [r1, r2]
    481a:	4313      	orrs	r3, r2
    481c:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    481e:	2000      	movs	r0, #0
    4820:	bd10      	pop	{r4, pc}
    4822:	46c0      	nop			; (mov r8, r8)
    4824:	00005efc 	.word	0x00005efc

00004828 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    4828:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    482a:	008b      	lsls	r3, r1, #2
    482c:	189b      	adds	r3, r3, r2
    482e:	3334      	adds	r3, #52	; 0x34
    4830:	009b      	lsls	r3, r3, #2
    4832:	18c3      	adds	r3, r0, r3
    4834:	2400      	movs	r4, #0
    4836:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    4838:	1840      	adds	r0, r0, r1
    483a:	3059      	adds	r0, #89	; 0x59
    483c:	30ff      	adds	r0, #255	; 0xff
    483e:	4b03      	ldr	r3, [pc, #12]	; (484c <usb_device_endpoint_unregister_callback+0x24>)
    4840:	5c9a      	ldrb	r2, [r3, r2]
    4842:	7803      	ldrb	r3, [r0, #0]
    4844:	4393      	bics	r3, r2
    4846:	7003      	strb	r3, [r0, #0]

	return STATUS_OK;
}
    4848:	2000      	movs	r0, #0
    484a:	bd10      	pop	{r4, pc}
    484c:	00005efc 	.word	0x00005efc

00004850 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    4850:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4852:	230f      	movs	r3, #15
    4854:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    4856:	18c4      	adds	r4, r0, r3
    4858:	3461      	adds	r4, #97	; 0x61
    485a:	34ff      	adds	r4, #255	; 0xff
    485c:	7825      	ldrb	r5, [r4, #0]
    485e:	4e2f      	ldr	r6, [pc, #188]	; (491c <usb_device_endpoint_enable_callback+0xcc>)
    4860:	5cb6      	ldrb	r6, [r6, r2]
    4862:	4335      	orrs	r5, r6
    4864:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    4866:	2a00      	cmp	r2, #0
    4868:	d129      	bne.n	48be <usb_device_endpoint_enable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    486a:	2b00      	cmp	r3, #0
    486c:	d112      	bne.n	4894 <usb_device_endpoint_enable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    486e:	2503      	movs	r5, #3
    4870:	240a      	movs	r4, #10
    4872:	34ff      	adds	r4, #255	; 0xff
    4874:	6806      	ldr	r6, [r0, #0]
    4876:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    4878:	2a03      	cmp	r2, #3
    487a:	d109      	bne.n	4890 <usb_device_endpoint_enable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    487c:	b249      	sxtb	r1, r1
    487e:	2900      	cmp	r1, #0
    4880:	db44      	blt.n	490c <usb_device_endpoint_enable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    4882:	6802      	ldr	r2, [r0, #0]
    4884:	015b      	lsls	r3, r3, #5
    4886:	18d3      	adds	r3, r2, r3
    4888:	330a      	adds	r3, #10
    488a:	33ff      	adds	r3, #255	; 0xff
    488c:	2220      	movs	r2, #32
    488e:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    4890:	2000      	movs	r0, #0
    4892:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    4894:	b24c      	sxtb	r4, r1
    4896:	2c00      	cmp	r4, #0
    4898:	db08      	blt.n	48ac <usb_device_endpoint_enable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    489a:	015c      	lsls	r4, r3, #5
    489c:	6805      	ldr	r5, [r0, #0]
    489e:	46ac      	mov	ip, r5
    48a0:	4464      	add	r4, ip
    48a2:	340a      	adds	r4, #10
    48a4:	34ff      	adds	r4, #255	; 0xff
    48a6:	2501      	movs	r5, #1
    48a8:	7025      	strb	r5, [r4, #0]
    48aa:	e7e5      	b.n	4878 <usb_device_endpoint_enable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    48ac:	015c      	lsls	r4, r3, #5
    48ae:	6805      	ldr	r5, [r0, #0]
    48b0:	46ac      	mov	ip, r5
    48b2:	4464      	add	r4, ip
    48b4:	340a      	adds	r4, #10
    48b6:	34ff      	adds	r4, #255	; 0xff
    48b8:	2502      	movs	r5, #2
    48ba:	7025      	strb	r5, [r4, #0]
    48bc:	e7dc      	b.n	4878 <usb_device_endpoint_enable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    48be:	2a01      	cmp	r2, #1
    48c0:	d11a      	bne.n	48f8 <usb_device_endpoint_enable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    48c2:	2b00      	cmp	r3, #0
    48c4:	d105      	bne.n	48d2 <usb_device_endpoint_enable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    48c6:	6802      	ldr	r2, [r0, #0]
    48c8:	210c      	movs	r1, #12
    48ca:	230a      	movs	r3, #10
    48cc:	33ff      	adds	r3, #255	; 0xff
    48ce:	54d1      	strb	r1, [r2, r3]
    48d0:	e7de      	b.n	4890 <usb_device_endpoint_enable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    48d2:	b249      	sxtb	r1, r1
    48d4:	2900      	cmp	r1, #0
    48d6:	db07      	blt.n	48e8 <usb_device_endpoint_enable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    48d8:	6802      	ldr	r2, [r0, #0]
    48da:	015b      	lsls	r3, r3, #5
    48dc:	18d3      	adds	r3, r2, r3
    48de:	330a      	adds	r3, #10
    48e0:	33ff      	adds	r3, #255	; 0xff
    48e2:	2204      	movs	r2, #4
    48e4:	701a      	strb	r2, [r3, #0]
    48e6:	e7d3      	b.n	4890 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    48e8:	6802      	ldr	r2, [r0, #0]
    48ea:	015b      	lsls	r3, r3, #5
    48ec:	18d3      	adds	r3, r2, r3
    48ee:	330a      	adds	r3, #10
    48f0:	33ff      	adds	r3, #255	; 0xff
    48f2:	2208      	movs	r2, #8
    48f4:	701a      	strb	r2, [r3, #0]
    48f6:	e7cb      	b.n	4890 <usb_device_endpoint_enable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    48f8:	2a02      	cmp	r2, #2
    48fa:	d1bd      	bne.n	4878 <usb_device_endpoint_enable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    48fc:	6802      	ldr	r2, [r0, #0]
    48fe:	015b      	lsls	r3, r3, #5
    4900:	18d3      	adds	r3, r2, r3
    4902:	330a      	adds	r3, #10
    4904:	33ff      	adds	r3, #255	; 0xff
    4906:	2210      	movs	r2, #16
    4908:	701a      	strb	r2, [r3, #0]
    490a:	e7c1      	b.n	4890 <usb_device_endpoint_enable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    490c:	6802      	ldr	r2, [r0, #0]
    490e:	015b      	lsls	r3, r3, #5
    4910:	18d3      	adds	r3, r2, r3
    4912:	330a      	adds	r3, #10
    4914:	33ff      	adds	r3, #255	; 0xff
    4916:	2240      	movs	r2, #64	; 0x40
    4918:	701a      	strb	r2, [r3, #0]
    491a:	e7b9      	b.n	4890 <usb_device_endpoint_enable_callback+0x40>
    491c:	00005efc 	.word	0x00005efc

00004920 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    4920:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4922:	230f      	movs	r3, #15
    4924:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    4926:	18c4      	adds	r4, r0, r3
    4928:	3461      	adds	r4, #97	; 0x61
    492a:	34ff      	adds	r4, #255	; 0xff
    492c:	4d2f      	ldr	r5, [pc, #188]	; (49ec <usb_device_endpoint_disable_callback+0xcc>)
    492e:	5cae      	ldrb	r6, [r5, r2]
    4930:	7825      	ldrb	r5, [r4, #0]
    4932:	43b5      	bics	r5, r6
    4934:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    4936:	2a00      	cmp	r2, #0
    4938:	d129      	bne.n	498e <usb_device_endpoint_disable_callback+0x6e>
		if (ep_num == 0) { // control endpoint
    493a:	2b00      	cmp	r3, #0
    493c:	d112      	bne.n	4964 <usb_device_endpoint_disable_callback+0x44>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    493e:	2503      	movs	r5, #3
    4940:	2484      	movs	r4, #132	; 0x84
    4942:	0064      	lsls	r4, r4, #1
    4944:	6806      	ldr	r6, [r0, #0]
    4946:	5535      	strb	r5, [r6, r4]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    4948:	2a03      	cmp	r2, #3
    494a:	d109      	bne.n	4960 <usb_device_endpoint_disable_callback+0x40>
		if (ep & USB_EP_DIR_IN) {
    494c:	b249      	sxtb	r1, r1
    494e:	2900      	cmp	r1, #0
    4950:	db44      	blt.n	49dc <usb_device_endpoint_disable_callback+0xbc>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    4952:	6802      	ldr	r2, [r0, #0]
    4954:	015b      	lsls	r3, r3, #5
    4956:	18d3      	adds	r3, r2, r3
    4958:	3309      	adds	r3, #9
    495a:	33ff      	adds	r3, #255	; 0xff
    495c:	2220      	movs	r2, #32
    495e:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    4960:	2000      	movs	r0, #0
    4962:	bd70      	pop	{r4, r5, r6, pc}
		} else if (ep & USB_EP_DIR_IN) {
    4964:	b24c      	sxtb	r4, r1
    4966:	2c00      	cmp	r4, #0
    4968:	db08      	blt.n	497c <usb_device_endpoint_disable_callback+0x5c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    496a:	015c      	lsls	r4, r3, #5
    496c:	6805      	ldr	r5, [r0, #0]
    496e:	46ac      	mov	ip, r5
    4970:	4464      	add	r4, ip
    4972:	3409      	adds	r4, #9
    4974:	34ff      	adds	r4, #255	; 0xff
    4976:	2501      	movs	r5, #1
    4978:	7025      	strb	r5, [r4, #0]
    497a:	e7e5      	b.n	4948 <usb_device_endpoint_disable_callback+0x28>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    497c:	015c      	lsls	r4, r3, #5
    497e:	6805      	ldr	r5, [r0, #0]
    4980:	46ac      	mov	ip, r5
    4982:	4464      	add	r4, ip
    4984:	3409      	adds	r4, #9
    4986:	34ff      	adds	r4, #255	; 0xff
    4988:	2502      	movs	r5, #2
    498a:	7025      	strb	r5, [r4, #0]
    498c:	e7dc      	b.n	4948 <usb_device_endpoint_disable_callback+0x28>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    498e:	2a01      	cmp	r2, #1
    4990:	d11a      	bne.n	49c8 <usb_device_endpoint_disable_callback+0xa8>
		if (ep_num == 0) { // control endpoint
    4992:	2b00      	cmp	r3, #0
    4994:	d105      	bne.n	49a2 <usb_device_endpoint_disable_callback+0x82>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    4996:	6802      	ldr	r2, [r0, #0]
    4998:	210c      	movs	r1, #12
    499a:	3309      	adds	r3, #9
    499c:	33ff      	adds	r3, #255	; 0xff
    499e:	54d1      	strb	r1, [r2, r3]
    49a0:	e7de      	b.n	4960 <usb_device_endpoint_disable_callback+0x40>
		} else if (ep & USB_EP_DIR_IN) {
    49a2:	b249      	sxtb	r1, r1
    49a4:	2900      	cmp	r1, #0
    49a6:	db07      	blt.n	49b8 <usb_device_endpoint_disable_callback+0x98>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    49a8:	6802      	ldr	r2, [r0, #0]
    49aa:	015b      	lsls	r3, r3, #5
    49ac:	18d3      	adds	r3, r2, r3
    49ae:	3309      	adds	r3, #9
    49b0:	33ff      	adds	r3, #255	; 0xff
    49b2:	2204      	movs	r2, #4
    49b4:	701a      	strb	r2, [r3, #0]
    49b6:	e7d3      	b.n	4960 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    49b8:	6802      	ldr	r2, [r0, #0]
    49ba:	015b      	lsls	r3, r3, #5
    49bc:	18d3      	adds	r3, r2, r3
    49be:	3309      	adds	r3, #9
    49c0:	33ff      	adds	r3, #255	; 0xff
    49c2:	2208      	movs	r2, #8
    49c4:	701a      	strb	r2, [r3, #0]
    49c6:	e7cb      	b.n	4960 <usb_device_endpoint_disable_callback+0x40>
	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    49c8:	2a02      	cmp	r2, #2
    49ca:	d1bd      	bne.n	4948 <usb_device_endpoint_disable_callback+0x28>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    49cc:	6802      	ldr	r2, [r0, #0]
    49ce:	015b      	lsls	r3, r3, #5
    49d0:	18d3      	adds	r3, r2, r3
    49d2:	3309      	adds	r3, #9
    49d4:	33ff      	adds	r3, #255	; 0xff
    49d6:	2210      	movs	r2, #16
    49d8:	701a      	strb	r2, [r3, #0]
    49da:	e7c1      	b.n	4960 <usb_device_endpoint_disable_callback+0x40>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    49dc:	6802      	ldr	r2, [r0, #0]
    49de:	015b      	lsls	r3, r3, #5
    49e0:	18d3      	adds	r3, r2, r3
    49e2:	3309      	adds	r3, #9
    49e4:	33ff      	adds	r3, #255	; 0xff
    49e6:	2240      	movs	r2, #64	; 0x40
    49e8:	701a      	strb	r2, [r3, #0]
    49ea:	e7b9      	b.n	4960 <usb_device_endpoint_disable_callback+0x40>
    49ec:	00005efc 	.word	0x00005efc

000049f0 <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    49f0:	2300      	movs	r3, #0
    49f2:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    49f4:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    49f6:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    49f8:	3301      	adds	r3, #1
    49fa:	70c3      	strb	r3, [r0, #3]
}
    49fc:	4770      	bx	lr
	...

00004a00 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    4a00:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    4a02:	780c      	ldrb	r4, [r1, #0]
    4a04:	230f      	movs	r3, #15
    4a06:	4023      	ands	r3, r4
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    4a08:	b264      	sxtb	r4, r4

	switch (ep_config->ep_type) {
    4a0a:	78ca      	ldrb	r2, [r1, #3]
    4a0c:	2a04      	cmp	r2, #4
    4a0e:	d870      	bhi.n	4af2 <usb_device_endpoint_set_config+0xf2>
    4a10:	0092      	lsls	r2, r2, #2
    4a12:	4d89      	ldr	r5, [pc, #548]	; (4c38 <usb_device_endpoint_set_config+0x238>)
    4a14:	58aa      	ldr	r2, [r5, r2]
    4a16:	4697      	mov	pc, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    4a18:	6802      	ldr	r2, [r0, #0]
    4a1a:	3308      	adds	r3, #8
    4a1c:	015b      	lsls	r3, r3, #5
    4a1e:	2100      	movs	r1, #0
    4a20:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    4a22:	2200      	movs	r2, #0
    4a24:	e082      	b.n	4b2c <usb_device_endpoint_set_config+0x12c>
    4a26:	015c      	lsls	r4, r3, #5
    4a28:	6802      	ldr	r2, [r0, #0]
    4a2a:	4694      	mov	ip, r2
    4a2c:	4464      	add	r4, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    4a2e:	2280      	movs	r2, #128	; 0x80
    4a30:	0052      	lsls	r2, r2, #1
    4a32:	5ca5      	ldrb	r5, [r4, r2]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    4a34:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    4a36:	076d      	lsls	r5, r5, #29
    4a38:	d178      	bne.n	4b2c <usb_device_endpoint_set_config+0x12c>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    4a3a:	32e4      	adds	r2, #228	; 0xe4
    4a3c:	5ca6      	ldrb	r6, [r4, r2]
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    4a3e:	2570      	movs	r5, #112	; 0x70
				return STATUS_ERR_DENIED;
    4a40:	3ae4      	subs	r2, #228	; 0xe4
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    4a42:	422e      	tst	r6, r5
    4a44:	d172      	bne.n	4b2c <usb_device_endpoint_set_config+0x12c>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    4a46:	3d5f      	subs	r5, #95	; 0x5f
    4a48:	32e4      	adds	r2, #228	; 0xe4
    4a4a:	54a5      	strb	r5, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    4a4c:	001a      	movs	r2, r3
    4a4e:	3208      	adds	r2, #8
    4a50:	0152      	lsls	r2, r2, #5
    4a52:	6804      	ldr	r4, [r0, #0]
    4a54:	18a4      	adds	r4, r4, r2
    4a56:	352f      	adds	r5, #47	; 0x2f
    4a58:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    4a5a:	6800      	ldr	r0, [r0, #0]
    4a5c:	1882      	adds	r2, r0, r2
    4a5e:	2080      	movs	r0, #128	; 0x80
    4a60:	7110      	strb	r0, [r2, #4]
			}
			if (true == ep_config->auto_zlp) {
    4a62:	788a      	ldrb	r2, [r1, #2]
    4a64:	2a00      	cmp	r2, #0
    4a66:	d01f      	beq.n	4aa8 <usb_device_endpoint_set_config+0xa8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4a68:	0158      	lsls	r0, r3, #5
    4a6a:	4a74      	ldr	r2, [pc, #464]	; (4c3c <usb_device_endpoint_set_config+0x23c>)
    4a6c:	1812      	adds	r2, r2, r0
    4a6e:	6854      	ldr	r4, [r2, #4]
    4a70:	2080      	movs	r0, #128	; 0x80
    4a72:	0600      	lsls	r0, r0, #24
    4a74:	4304      	orrs	r4, r0
    4a76:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4a78:	6954      	ldr	r4, [r2, #20]
    4a7a:	4320      	orrs	r0, r4
    4a7c:	6150      	str	r0, [r2, #20]
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    4a7e:	2507      	movs	r5, #7
    4a80:	784c      	ldrb	r4, [r1, #1]
    4a82:	015a      	lsls	r2, r3, #5
    4a84:	4b6d      	ldr	r3, [pc, #436]	; (4c3c <usb_device_endpoint_set_config+0x23c>)
    4a86:	189b      	adds	r3, r3, r2
    4a88:	6858      	ldr	r0, [r3, #4]
    4a8a:	402c      	ands	r4, r5
    4a8c:	0724      	lsls	r4, r4, #28
    4a8e:	4e6c      	ldr	r6, [pc, #432]	; (4c40 <usb_device_endpoint_set_config+0x240>)
    4a90:	4030      	ands	r0, r6
    4a92:	4320      	orrs	r0, r4
    4a94:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    4a96:	7849      	ldrb	r1, [r1, #1]
    4a98:	695a      	ldr	r2, [r3, #20]
    4a9a:	4029      	ands	r1, r5
    4a9c:	0709      	lsls	r1, r1, #28
    4a9e:	4032      	ands	r2, r6
    4aa0:	430a      	orrs	r2, r1
    4aa2:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    4aa4:	2200      	movs	r2, #0
    4aa6:	e041      	b.n	4b2c <usb_device_endpoint_set_config+0x12c>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4aa8:	0158      	lsls	r0, r3, #5
    4aaa:	4a64      	ldr	r2, [pc, #400]	; (4c3c <usb_device_endpoint_set_config+0x23c>)
    4aac:	1812      	adds	r2, r2, r0
    4aae:	6850      	ldr	r0, [r2, #4]
    4ab0:	0040      	lsls	r0, r0, #1
    4ab2:	0840      	lsrs	r0, r0, #1
    4ab4:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4ab6:	6950      	ldr	r0, [r2, #20]
    4ab8:	0040      	lsls	r0, r0, #1
    4aba:	0840      	lsrs	r0, r0, #1
    4abc:	6150      	str	r0, [r2, #20]
    4abe:	e7de      	b.n	4a7e <usb_device_endpoint_set_config+0x7e>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    4ac0:	2c00      	cmp	r4, #0
    4ac2:	db35      	blt.n	4b30 <usb_device_endpoint_set_config+0x130>
    4ac4:	015d      	lsls	r5, r3, #5
    4ac6:	6802      	ldr	r2, [r0, #0]
    4ac8:	4694      	mov	ip, r2
    4aca:	4465      	add	r5, ip
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4acc:	2280      	movs	r2, #128	; 0x80
    4ace:	0052      	lsls	r2, r2, #1
    4ad0:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    4ad2:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4ad4:	0776      	lsls	r6, r6, #29
    4ad6:	d129      	bne.n	4b2c <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    4ad8:	2680      	movs	r6, #128	; 0x80
    4ada:	0076      	lsls	r6, r6, #1
    4adc:	5daa      	ldrb	r2, [r5, r6]
    4ade:	2702      	movs	r7, #2
    4ae0:	433a      	orrs	r2, r7
    4ae2:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    4ae4:	6802      	ldr	r2, [r0, #0]
    4ae6:	0018      	movs	r0, r3
    4ae8:	3008      	adds	r0, #8
    4aea:	0140      	lsls	r0, r0, #5
    4aec:	1812      	adds	r2, r2, r0
    4aee:	2040      	movs	r0, #64	; 0x40
    4af0:	7150      	strb	r0, [r2, #5]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    4af2:	0fe2      	lsrs	r2, r4, #31

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    4af4:	784f      	ldrb	r7, [r1, #1]
    4af6:	005d      	lsls	r5, r3, #1
    4af8:	18ad      	adds	r5, r5, r2
    4afa:	012d      	lsls	r5, r5, #4
    4afc:	4e4f      	ldr	r6, [pc, #316]	; (4c3c <usb_device_endpoint_set_config+0x23c>)
    4afe:	1975      	adds	r5, r6, r5
    4b00:	6868      	ldr	r0, [r5, #4]
    4b02:	2407      	movs	r4, #7
    4b04:	403c      	ands	r4, r7
    4b06:	0724      	lsls	r4, r4, #28
    4b08:	4e4d      	ldr	r6, [pc, #308]	; (4c40 <usb_device_endpoint_set_config+0x240>)
    4b0a:	4030      	ands	r0, r6
    4b0c:	4320      	orrs	r0, r4
    4b0e:	6068      	str	r0, [r5, #4]

	if (true == ep_config->auto_zlp) {
    4b10:	7889      	ldrb	r1, [r1, #2]
    4b12:	2900      	cmp	r1, #0
    4b14:	d000      	beq.n	4b18 <usb_device_endpoint_set_config+0x118>
    4b16:	e088      	b.n	4c2a <usb_device_endpoint_set_config+0x22a>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4b18:	005b      	lsls	r3, r3, #1
    4b1a:	189b      	adds	r3, r3, r2
    4b1c:	011b      	lsls	r3, r3, #4
    4b1e:	4a47      	ldr	r2, [pc, #284]	; (4c3c <usb_device_endpoint_set_config+0x23c>)
    4b20:	18d3      	adds	r3, r2, r3
    4b22:	685a      	ldr	r2, [r3, #4]
    4b24:	0052      	lsls	r2, r2, #1
    4b26:	0852      	lsrs	r2, r2, #1
    4b28:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    4b2a:	2200      	movs	r2, #0
}
    4b2c:	0010      	movs	r0, r2
    4b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b30:	015d      	lsls	r5, r3, #5
    4b32:	6802      	ldr	r2, [r0, #0]
    4b34:	4694      	mov	ip, r2
    4b36:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    4b38:	2280      	movs	r2, #128	; 0x80
    4b3a:	0052      	lsls	r2, r2, #1
    4b3c:	5caf      	ldrb	r7, [r5, r2]
    4b3e:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    4b40:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    4b42:	4237      	tst	r7, r6
    4b44:	d1f2      	bne.n	4b2c <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    4b46:	3690      	adds	r6, #144	; 0x90
    4b48:	5daa      	ldrb	r2, [r5, r6]
    4b4a:	2720      	movs	r7, #32
    4b4c:	433a      	orrs	r2, r7
    4b4e:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    4b50:	6802      	ldr	r2, [r0, #0]
    4b52:	0018      	movs	r0, r3
    4b54:	3008      	adds	r0, #8
    4b56:	0140      	lsls	r0, r0, #5
    4b58:	1812      	adds	r2, r2, r0
    4b5a:	2080      	movs	r0, #128	; 0x80
    4b5c:	7110      	strb	r0, [r2, #4]
    4b5e:	e7c8      	b.n	4af2 <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    4b60:	2c00      	cmp	r4, #0
    4b62:	db17      	blt.n	4b94 <usb_device_endpoint_set_config+0x194>
    4b64:	015d      	lsls	r5, r3, #5
    4b66:	6802      	ldr	r2, [r0, #0]
    4b68:	4694      	mov	ip, r2
    4b6a:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4b6c:	2280      	movs	r2, #128	; 0x80
    4b6e:	0052      	lsls	r2, r2, #1
    4b70:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    4b72:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4b74:	0776      	lsls	r6, r6, #29
    4b76:	d1d9      	bne.n	4b2c <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    4b78:	2680      	movs	r6, #128	; 0x80
    4b7a:	0076      	lsls	r6, r6, #1
    4b7c:	5daa      	ldrb	r2, [r5, r6]
    4b7e:	2703      	movs	r7, #3
    4b80:	433a      	orrs	r2, r7
    4b82:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    4b84:	6802      	ldr	r2, [r0, #0]
    4b86:	0018      	movs	r0, r3
    4b88:	3008      	adds	r0, #8
    4b8a:	0140      	lsls	r0, r0, #5
    4b8c:	1812      	adds	r2, r2, r0
    4b8e:	2040      	movs	r0, #64	; 0x40
    4b90:	7150      	strb	r0, [r2, #5]
    4b92:	e7ae      	b.n	4af2 <usb_device_endpoint_set_config+0xf2>
    4b94:	015d      	lsls	r5, r3, #5
    4b96:	6802      	ldr	r2, [r0, #0]
    4b98:	4694      	mov	ip, r2
    4b9a:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    4b9c:	2280      	movs	r2, #128	; 0x80
    4b9e:	0052      	lsls	r2, r2, #1
    4ba0:	5caf      	ldrb	r7, [r5, r2]
    4ba2:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    4ba4:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    4ba6:	4237      	tst	r7, r6
    4ba8:	d1c0      	bne.n	4b2c <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    4baa:	3690      	adds	r6, #144	; 0x90
    4bac:	5daa      	ldrb	r2, [r5, r6]
    4bae:	2730      	movs	r7, #48	; 0x30
    4bb0:	433a      	orrs	r2, r7
    4bb2:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    4bb4:	6802      	ldr	r2, [r0, #0]
    4bb6:	0018      	movs	r0, r3
    4bb8:	3008      	adds	r0, #8
    4bba:	0140      	lsls	r0, r0, #5
    4bbc:	1812      	adds	r2, r2, r0
    4bbe:	2080      	movs	r0, #128	; 0x80
    4bc0:	7110      	strb	r0, [r2, #4]
    4bc2:	e796      	b.n	4af2 <usb_device_endpoint_set_config+0xf2>
			if (ep_bank) {
    4bc4:	2c00      	cmp	r4, #0
    4bc6:	db17      	blt.n	4bf8 <usb_device_endpoint_set_config+0x1f8>
    4bc8:	015d      	lsls	r5, r3, #5
    4bca:	6802      	ldr	r2, [r0, #0]
    4bcc:	4694      	mov	ip, r2
    4bce:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4bd0:	2280      	movs	r2, #128	; 0x80
    4bd2:	0052      	lsls	r2, r2, #1
    4bd4:	5cae      	ldrb	r6, [r5, r2]
					return STATUS_ERR_DENIED;
    4bd6:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4bd8:	0776      	lsls	r6, r6, #29
    4bda:	d1a7      	bne.n	4b2c <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    4bdc:	2680      	movs	r6, #128	; 0x80
    4bde:	0076      	lsls	r6, r6, #1
    4be0:	5daa      	ldrb	r2, [r5, r6]
    4be2:	2704      	movs	r7, #4
    4be4:	433a      	orrs	r2, r7
    4be6:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    4be8:	6802      	ldr	r2, [r0, #0]
    4bea:	0018      	movs	r0, r3
    4bec:	3008      	adds	r0, #8
    4bee:	0140      	lsls	r0, r0, #5
    4bf0:	1812      	adds	r2, r2, r0
    4bf2:	2040      	movs	r0, #64	; 0x40
    4bf4:	7150      	strb	r0, [r2, #5]
    4bf6:	e77c      	b.n	4af2 <usb_device_endpoint_set_config+0xf2>
    4bf8:	015d      	lsls	r5, r3, #5
    4bfa:	6802      	ldr	r2, [r0, #0]
    4bfc:	4694      	mov	ip, r2
    4bfe:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    4c00:	2280      	movs	r2, #128	; 0x80
    4c02:	0052      	lsls	r2, r2, #1
    4c04:	5caf      	ldrb	r7, [r5, r2]
    4c06:	2670      	movs	r6, #112	; 0x70
					return STATUS_ERR_DENIED;
    4c08:	3ae4      	subs	r2, #228	; 0xe4
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    4c0a:	4237      	tst	r7, r6
    4c0c:	d000      	beq.n	4c10 <usb_device_endpoint_set_config+0x210>
    4c0e:	e78d      	b.n	4b2c <usb_device_endpoint_set_config+0x12c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    4c10:	3690      	adds	r6, #144	; 0x90
    4c12:	5daa      	ldrb	r2, [r5, r6]
    4c14:	2740      	movs	r7, #64	; 0x40
    4c16:	433a      	orrs	r2, r7
    4c18:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    4c1a:	6802      	ldr	r2, [r0, #0]
    4c1c:	0018      	movs	r0, r3
    4c1e:	3008      	adds	r0, #8
    4c20:	0140      	lsls	r0, r0, #5
    4c22:	1812      	adds	r2, r2, r0
    4c24:	2080      	movs	r0, #128	; 0x80
    4c26:	7110      	strb	r0, [r2, #4]
    4c28:	e763      	b.n	4af2 <usb_device_endpoint_set_config+0xf2>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4c2a:	6869      	ldr	r1, [r5, #4]
    4c2c:	2380      	movs	r3, #128	; 0x80
    4c2e:	061b      	lsls	r3, r3, #24
    4c30:	430b      	orrs	r3, r1
    4c32:	606b      	str	r3, [r5, #4]
	return STATUS_OK;
    4c34:	2200      	movs	r2, #0
    4c36:	e779      	b.n	4b2c <usb_device_endpoint_set_config+0x12c>
    4c38:	00005ed8 	.word	0x00005ed8
    4c3c:	20000414 	.word	0x20000414
    4c40:	8fffffff 	.word	0x8fffffff

00004c44 <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    4c44:	230f      	movs	r3, #15
    4c46:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    4c48:	b249      	sxtb	r1, r1
    4c4a:	2900      	cmp	r1, #0
    4c4c:	db0a      	blt.n	4c64 <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    4c4e:	3308      	adds	r3, #8
    4c50:	015b      	lsls	r3, r3, #5
    4c52:	6802      	ldr	r2, [r0, #0]
    4c54:	18d2      	adds	r2, r2, r3
    4c56:	2140      	movs	r1, #64	; 0x40
    4c58:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    4c5a:	6802      	ldr	r2, [r0, #0]
    4c5c:	18d3      	adds	r3, r2, r3
    4c5e:	2201      	movs	r2, #1
    4c60:	71da      	strb	r2, [r3, #7]
	}
}
    4c62:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    4c64:	3308      	adds	r3, #8
    4c66:	015b      	lsls	r3, r3, #5
    4c68:	6802      	ldr	r2, [r0, #0]
    4c6a:	18d2      	adds	r2, r2, r3
    4c6c:	2180      	movs	r1, #128	; 0x80
    4c6e:	7111      	strb	r1, [r2, #4]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    4c70:	6802      	ldr	r2, [r0, #0]
    4c72:	18d3      	adds	r3, r2, r3
    4c74:	2202      	movs	r2, #2
    4c76:	71da      	strb	r2, [r3, #7]
    4c78:	e7f3      	b.n	4c62 <usb_device_endpoint_abort_job+0x1e>

00004c7a <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4c7a:	230f      	movs	r3, #15
    4c7c:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    4c7e:	b249      	sxtb	r1, r1
    4c80:	2900      	cmp	r1, #0
    4c82:	db07      	blt.n	4c94 <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    4c84:	6802      	ldr	r2, [r0, #0]
    4c86:	3308      	adds	r3, #8
    4c88:	015b      	lsls	r3, r3, #5
    4c8a:	18d3      	adds	r3, r2, r3
    4c8c:	7998      	ldrb	r0, [r3, #6]
    4c8e:	06c0      	lsls	r0, r0, #27
    4c90:	0fc0      	lsrs	r0, r0, #31
	}
}
    4c92:	4770      	bx	lr
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    4c94:	6802      	ldr	r2, [r0, #0]
    4c96:	3308      	adds	r3, #8
    4c98:	015b      	lsls	r3, r3, #5
    4c9a:	18d3      	adds	r3, r2, r3
    4c9c:	7998      	ldrb	r0, [r3, #6]
    4c9e:	0680      	lsls	r0, r0, #26
    4ca0:	0fc0      	lsrs	r0, r0, #31
    4ca2:	e7f6      	b.n	4c92 <usb_device_endpoint_is_halted+0x18>

00004ca4 <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4ca4:	230f      	movs	r3, #15
    4ca6:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    4ca8:	b249      	sxtb	r1, r1
    4caa:	2900      	cmp	r1, #0
    4cac:	db06      	blt.n	4cbc <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    4cae:	6802      	ldr	r2, [r0, #0]
    4cb0:	3308      	adds	r3, #8
    4cb2:	015b      	lsls	r3, r3, #5
    4cb4:	18d3      	adds	r3, r2, r3
    4cb6:	2210      	movs	r2, #16
    4cb8:	715a      	strb	r2, [r3, #5]
	}
}
    4cba:	4770      	bx	lr
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    4cbc:	6802      	ldr	r2, [r0, #0]
    4cbe:	3308      	adds	r3, #8
    4cc0:	015b      	lsls	r3, r3, #5
    4cc2:	18d3      	adds	r3, r2, r3
    4cc4:	2220      	movs	r2, #32
    4cc6:	715a      	strb	r2, [r3, #5]
    4cc8:	e7f7      	b.n	4cba <usb_device_endpoint_set_halt+0x16>

00004cca <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    4cca:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4ccc:	230f      	movs	r3, #15
    4cce:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    4cd0:	b249      	sxtb	r1, r1
    4cd2:	2900      	cmp	r1, #0
    4cd4:	db1d      	blt.n	4d12 <usb_device_endpoint_clear_halt+0x48>
    4cd6:	0159      	lsls	r1, r3, #5
    4cd8:	6802      	ldr	r2, [r0, #0]
    4cda:	1852      	adds	r2, r2, r1
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    4cdc:	2483      	movs	r4, #131	; 0x83
    4cde:	0064      	lsls	r4, r4, #1
    4ce0:	5d14      	ldrb	r4, [r2, r4]
    4ce2:	06e4      	lsls	r4, r4, #27
    4ce4:	d514      	bpl.n	4d10 <usb_device_endpoint_clear_halt+0x46>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    4ce6:	2510      	movs	r5, #16
    4ce8:	2482      	movs	r4, #130	; 0x82
    4cea:	0064      	lsls	r4, r4, #1
    4cec:	5515      	strb	r5, [r2, r4]
    4cee:	6802      	ldr	r2, [r0, #0]
    4cf0:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    4cf2:	2108      	movs	r1, #8
    4cf4:	31ff      	adds	r1, #255	; 0xff
    4cf6:	5c51      	ldrb	r1, [r2, r1]
    4cf8:	0689      	lsls	r1, r1, #26
    4cfa:	d509      	bpl.n	4d10 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    4cfc:	3ce4      	subs	r4, #228	; 0xe4
    4cfe:	2108      	movs	r1, #8
    4d00:	31ff      	adds	r1, #255	; 0xff
    4d02:	5454      	strb	r4, [r2, r1]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    4d04:	6802      	ldr	r2, [r0, #0]
    4d06:	3308      	adds	r3, #8
    4d08:	015b      	lsls	r3, r3, #5
    4d0a:	18d3      	adds	r3, r2, r3
    4d0c:	2201      	movs	r2, #1
    4d0e:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    4d10:	bd30      	pop	{r4, r5, pc}
    4d12:	0159      	lsls	r1, r3, #5
    4d14:	6802      	ldr	r2, [r0, #0]
    4d16:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    4d18:	2483      	movs	r4, #131	; 0x83
    4d1a:	0064      	lsls	r4, r4, #1
    4d1c:	5d14      	ldrb	r4, [r2, r4]
    4d1e:	06a4      	lsls	r4, r4, #26
    4d20:	d5f6      	bpl.n	4d10 <usb_device_endpoint_clear_halt+0x46>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    4d22:	2520      	movs	r5, #32
    4d24:	2482      	movs	r4, #130	; 0x82
    4d26:	0064      	lsls	r4, r4, #1
    4d28:	5515      	strb	r5, [r2, r4]
    4d2a:	6802      	ldr	r2, [r0, #0]
    4d2c:	1852      	adds	r2, r2, r1
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    4d2e:	2108      	movs	r1, #8
    4d30:	31ff      	adds	r1, #255	; 0xff
    4d32:	5c51      	ldrb	r1, [r2, r1]
    4d34:	0649      	lsls	r1, r1, #25
    4d36:	d5eb      	bpl.n	4d10 <usb_device_endpoint_clear_halt+0x46>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    4d38:	3cc4      	subs	r4, #196	; 0xc4
    4d3a:	2108      	movs	r1, #8
    4d3c:	31ff      	adds	r1, #255	; 0xff
    4d3e:	5454      	strb	r4, [r2, r1]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    4d40:	6802      	ldr	r2, [r0, #0]
    4d42:	3308      	adds	r3, #8
    4d44:	015b      	lsls	r3, r3, #5
    4d46:	18d3      	adds	r3, r2, r3
    4d48:	2202      	movs	r2, #2
    4d4a:	711a      	strb	r2, [r3, #4]
    4d4c:	e7e0      	b.n	4d10 <usb_device_endpoint_clear_halt+0x46>
	...

00004d50 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    4d50:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    4d52:	000c      	movs	r4, r1
    4d54:	3408      	adds	r4, #8
    4d56:	0164      	lsls	r4, r4, #5
    4d58:	6805      	ldr	r5, [r0, #0]
    4d5a:	5d64      	ldrb	r4, [r4, r5]
    4d5c:	0664      	lsls	r4, r4, #25
    4d5e:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    4d60:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    4d62:	2c00      	cmp	r4, #0
    4d64:	d101      	bne.n	4d6a <usb_device_endpoint_write_buffer_job+0x1a>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;

	return STATUS_OK;
}
    4d66:	0028      	movs	r0, r5
    4d68:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    4d6a:	014c      	lsls	r4, r1, #5
    4d6c:	4d0b      	ldr	r5, [pc, #44]	; (4d9c <usb_device_endpoint_write_buffer_job+0x4c>)
    4d6e:	192d      	adds	r5, r5, r4
    4d70:	002c      	movs	r4, r5
    4d72:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    4d74:	696a      	ldr	r2, [r5, #20]
    4d76:	4d0a      	ldr	r5, [pc, #40]	; (4da0 <usb_device_endpoint_write_buffer_job+0x50>)
    4d78:	402a      	ands	r2, r5
    4d7a:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    4d7c:	6962      	ldr	r2, [r4, #20]
    4d7e:	049b      	lsls	r3, r3, #18
    4d80:	0c9b      	lsrs	r3, r3, #18
    4d82:	0b92      	lsrs	r2, r2, #14
    4d84:	0392      	lsls	r2, r2, #14
    4d86:	4313      	orrs	r3, r2
    4d88:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    4d8a:	6803      	ldr	r3, [r0, #0]
    4d8c:	3108      	adds	r1, #8
    4d8e:	0149      	lsls	r1, r1, #5
    4d90:	1859      	adds	r1, r3, r1
    4d92:	2380      	movs	r3, #128	; 0x80
    4d94:	714b      	strb	r3, [r1, #5]
	return STATUS_OK;
    4d96:	2500      	movs	r5, #0
    4d98:	e7e5      	b.n	4d66 <usb_device_endpoint_write_buffer_job+0x16>
    4d9a:	46c0      	nop			; (mov r8, r8)
    4d9c:	20000414 	.word	0x20000414
    4da0:	f0003fff 	.word	0xf0003fff

00004da4 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    4da4:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    4da6:	000c      	movs	r4, r1
    4da8:	3408      	adds	r4, #8
    4daa:	0164      	lsls	r4, r4, #5
    4dac:	6805      	ldr	r5, [r0, #0]
    4dae:	5d64      	ldrb	r4, [r4, r5]
    4db0:	0764      	lsls	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    4db2:	251c      	movs	r5, #28
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    4db4:	2c00      	cmp	r4, #0
    4db6:	d101      	bne.n	4dbc <usb_device_endpoint_read_buffer_job+0x18>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;

	return STATUS_OK;
}
    4db8:	0028      	movs	r0, r5
    4dba:	bd30      	pop	{r4, r5, pc}
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    4dbc:	4c0b      	ldr	r4, [pc, #44]	; (4dec <usb_device_endpoint_read_buffer_job+0x48>)
    4dbe:	014d      	lsls	r5, r1, #5
    4dc0:	512a      	str	r2, [r5, r4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    4dc2:	1962      	adds	r2, r4, r5
    4dc4:	6854      	ldr	r4, [r2, #4]
    4dc6:	049b      	lsls	r3, r3, #18
    4dc8:	091b      	lsrs	r3, r3, #4
    4dca:	4d09      	ldr	r5, [pc, #36]	; (4df0 <usb_device_endpoint_read_buffer_job+0x4c>)
    4dcc:	402c      	ands	r4, r5
    4dce:	4323      	orrs	r3, r4
    4dd0:	6053      	str	r3, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    4dd2:	6853      	ldr	r3, [r2, #4]
    4dd4:	0b9b      	lsrs	r3, r3, #14
    4dd6:	039b      	lsls	r3, r3, #14
    4dd8:	6053      	str	r3, [r2, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    4dda:	6803      	ldr	r3, [r0, #0]
    4ddc:	3108      	adds	r1, #8
    4dde:	0149      	lsls	r1, r1, #5
    4de0:	1859      	adds	r1, r3, r1
    4de2:	2340      	movs	r3, #64	; 0x40
    4de4:	710b      	strb	r3, [r1, #4]
	return STATUS_OK;
    4de6:	2500      	movs	r5, #0
    4de8:	e7e6      	b.n	4db8 <usb_device_endpoint_read_buffer_job+0x14>
    4dea:	46c0      	nop			; (mov r8, r8)
    4dec:	20000414 	.word	0x20000414
    4df0:	f0003fff 	.word	0xf0003fff

00004df4 <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    4df4:	4b09      	ldr	r3, [pc, #36]	; (4e1c <usb_device_endpoint_setup_buffer_job+0x28>)
    4df6:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    4df8:	685a      	ldr	r2, [r3, #4]
    4dfa:	4909      	ldr	r1, [pc, #36]	; (4e20 <usb_device_endpoint_setup_buffer_job+0x2c>)
    4dfc:	4011      	ands	r1, r2
    4dfe:	2280      	movs	r2, #128	; 0x80
    4e00:	0292      	lsls	r2, r2, #10
    4e02:	430a      	orrs	r2, r1
    4e04:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    4e06:	685a      	ldr	r2, [r3, #4]
    4e08:	0b92      	lsrs	r2, r2, #14
    4e0a:	0392      	lsls	r2, r2, #14
    4e0c:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    4e0e:	6802      	ldr	r2, [r0, #0]
    4e10:	2140      	movs	r1, #64	; 0x40
    4e12:	2382      	movs	r3, #130	; 0x82
    4e14:	005b      	lsls	r3, r3, #1
    4e16:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    4e18:	2000      	movs	r0, #0
    4e1a:	4770      	bx	lr
    4e1c:	20000414 	.word	0x20000414
    4e20:	f0003fff 	.word	0xf0003fff

00004e24 <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    4e24:	6802      	ldr	r2, [r0, #0]
    4e26:	7813      	ldrb	r3, [r2, #0]
    4e28:	2102      	movs	r1, #2
    4e2a:	430b      	orrs	r3, r1
    4e2c:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    4e2e:	6802      	ldr	r2, [r0, #0]
    4e30:	7893      	ldrb	r3, [r2, #2]
    4e32:	2b02      	cmp	r3, #2
    4e34:	d0fc      	beq.n	4e30 <usb_enable+0xc>
}
    4e36:	4770      	bx	lr

00004e38 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    4e38:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e3a:	46de      	mov	lr, fp
    4e3c:	4657      	mov	r7, sl
    4e3e:	464e      	mov	r6, r9
    4e40:	4645      	mov	r5, r8
    4e42:	b5e0      	push	{r5, r6, r7, lr}
    4e44:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    4e46:	4bc4      	ldr	r3, [pc, #784]	; (5158 <USB_Handler+0x320>)
    4e48:	681f      	ldr	r7, [r3, #0]
    4e4a:	683d      	ldr	r5, [r7, #0]
    4e4c:	782b      	ldrb	r3, [r5, #0]
    4e4e:	09db      	lsrs	r3, r3, #7
    4e50:	d114      	bne.n	4e7c <USB_Handler+0x44>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    4e52:	8c2e      	ldrh	r6, [r5, #32]
    4e54:	b2b6      	uxth	r6, r6
	if (0 == ep_inst) {
    4e56:	2e00      	cmp	r6, #0
    4e58:	d000      	beq.n	4e5c <USB_Handler+0x24>
    4e5a:	e22d      	b.n	52b8 <USB_Handler+0x480>
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    4e5c:	8bae      	ldrh	r6, [r5, #28]
    4e5e:	b2b6      	uxth	r6, r6
				_usb_instances->device_enabled_callback_mask &
    4e60:	23ab      	movs	r3, #171	; 0xab
    4e62:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    4e64:	5afb      	ldrh	r3, [r7, r3]
    4e66:	22aa      	movs	r2, #170	; 0xaa
    4e68:	0052      	lsls	r2, r2, #1
    4e6a:	5abd      	ldrh	r5, [r7, r2]
    4e6c:	401d      	ands	r5, r3
    4e6e:	4035      	ands	r5, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    4e70:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    4e72:	4fba      	ldr	r7, [pc, #744]	; (515c <USB_Handler+0x324>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    4e74:	4bb8      	ldr	r3, [pc, #736]	; (5158 <USB_Handler+0x320>)
    4e76:	4699      	mov	r9, r3
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    4e78:	4698      	mov	r8, r3
    4e7a:	e208      	b.n	528e <USB_Handler+0x456>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    4e7c:	8c2b      	ldrh	r3, [r5, #32]
    4e7e:	b29b      	uxth	r3, r3
    4e80:	2b00      	cmp	r3, #0
    4e82:	d100      	bne.n	4e86 <USB_Handler+0x4e>
    4e84:	e13d      	b.n	5102 <USB_Handler+0x2ca>
    4e86:	8c28      	ldrh	r0, [r5, #32]
    4e88:	b280      	uxth	r0, r0
    4e8a:	4bb5      	ldr	r3, [pc, #724]	; (5160 <USB_Handler+0x328>)
    4e8c:	4798      	blx	r3
    4e8e:	0004      	movs	r4, r0
	if (pipe_int < 32) {
    4e90:	281f      	cmp	r0, #31
    4e92:	d900      	bls.n	4e96 <USB_Handler+0x5e>
    4e94:	e135      	b.n	5102 <USB_Handler+0x2ca>
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    4e96:	0003      	movs	r3, r0
    4e98:	3308      	adds	r3, #8
    4e9a:	015b      	lsls	r3, r3, #5
    4e9c:	18ed      	adds	r5, r5, r3
    4e9e:	79ed      	ldrb	r5, [r5, #7]
    4ea0:	b2ed      	uxtb	r5, r5
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    4ea2:	07ab      	lsls	r3, r5, #30
    4ea4:	d041      	beq.n	4f2a <USB_Handler+0xf2>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4ea6:	4aaf      	ldr	r2, [pc, #700]	; (5164 <USB_Handler+0x32c>)
    4ea8:	2301      	movs	r3, #1
    4eaa:	4083      	lsls	r3, r0
    4eac:	6811      	ldr	r1, [r2, #0]
    4eae:	4399      	bics	r1, r3
    4eb0:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4eb2:	0003      	movs	r3, r0
    4eb4:	3308      	adds	r3, #8
    4eb6:	015b      	lsls	r3, r3, #5
    4eb8:	683a      	ldr	r2, [r7, #0]
    4eba:	4694      	mov	ip, r2
    4ebc:	4463      	add	r3, ip
    4ebe:	2203      	movs	r2, #3
    4ec0:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    4ec2:	183b      	adds	r3, r7, r0
    4ec4:	33ae      	adds	r3, #174	; 0xae
    4ec6:	781b      	ldrb	r3, [r3, #0]
    4ec8:	07db      	lsls	r3, r3, #31
    4eca:	d52e      	bpl.n	4f2a <USB_Handler+0xf2>
				pipe_callback_para.pipe_num = pipe_int;
    4ecc:	4ba6      	ldr	r3, [pc, #664]	; (5168 <USB_Handler+0x330>)
    4ece:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    4ed0:	683a      	ldr	r2, [r7, #0]
    4ed2:	0003      	movs	r3, r0
    4ed4:	3308      	adds	r3, #8
    4ed6:	015b      	lsls	r3, r3, #5
    4ed8:	5c9b      	ldrb	r3, [r3, r2]
    4eda:	079b      	lsls	r3, r3, #30
    4edc:	0f9b      	lsrs	r3, r3, #30
    4ede:	2b01      	cmp	r3, #1
    4ee0:	d100      	bne.n	4ee4 <USB_Handler+0xac>
    4ee2:	e094      	b.n	500e <USB_Handler+0x1d6>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    4ee4:	0142      	lsls	r2, r0, #5
    4ee6:	4ba1      	ldr	r3, [pc, #644]	; (516c <USB_Handler+0x334>)
    4ee8:	189b      	adds	r3, r3, r2
    4eea:	685a      	ldr	r2, [r3, #4]
    4eec:	0112      	lsls	r2, r2, #4
    4eee:	0c92      	lsrs	r2, r2, #18
    4ef0:	b290      	uxth	r0, r2
    4ef2:	499d      	ldr	r1, [pc, #628]	; (5168 <USB_Handler+0x330>)
    4ef4:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    4ef6:	685a      	ldr	r2, [r3, #4]
    4ef8:	0492      	lsls	r2, r2, #18
    4efa:	0c92      	lsrs	r2, r2, #18
    4efc:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    4efe:	685a      	ldr	r2, [r3, #4]
    4f00:	499b      	ldr	r1, [pc, #620]	; (5170 <USB_Handler+0x338>)
    4f02:	400a      	ands	r2, r1
    4f04:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    4f06:	2800      	cmp	r0, #0
    4f08:	d107      	bne.n	4f1a <USB_Handler+0xe2>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    4f0a:	0162      	lsls	r2, r4, #5
    4f0c:	4b97      	ldr	r3, [pc, #604]	; (516c <USB_Handler+0x334>)
    4f0e:	189b      	adds	r3, r3, r2
    4f10:	685b      	ldr	r3, [r3, #4]
    4f12:	049b      	lsls	r3, r3, #18
    4f14:	0c9b      	lsrs	r3, r3, #18
    4f16:	4a94      	ldr	r2, [pc, #592]	; (5168 <USB_Handler+0x330>)
    4f18:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    4f1a:	4b8f      	ldr	r3, [pc, #572]	; (5158 <USB_Handler+0x320>)
    4f1c:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    4f1e:	1ca3      	adds	r3, r4, #2
    4f20:	011b      	lsls	r3, r3, #4
    4f22:	18c3      	adds	r3, r0, r3
    4f24:	685b      	ldr	r3, [r3, #4]
    4f26:	4990      	ldr	r1, [pc, #576]	; (5168 <USB_Handler+0x330>)
    4f28:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    4f2a:	076b      	lsls	r3, r5, #29
    4f2c:	d51f      	bpl.n	4f6e <USB_Handler+0x136>
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    4f2e:	4b8a      	ldr	r3, [pc, #552]	; (5158 <USB_Handler+0x320>)
    4f30:	6818      	ldr	r0, [r3, #0]
    4f32:	6802      	ldr	r2, [r0, #0]
    4f34:	0023      	movs	r3, r4
    4f36:	3308      	adds	r3, #8
    4f38:	015b      	lsls	r3, r3, #5
    4f3a:	5c9b      	ldrb	r3, [r3, r2]
    4f3c:	069b      	lsls	r3, r3, #26
    4f3e:	0f5b      	lsrs	r3, r3, #29
    4f40:	2b02      	cmp	r3, #2
    4f42:	d075      	beq.n	5030 <USB_Handler+0x1f8>
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    4f44:	0023      	movs	r3, r4
    4f46:	3308      	adds	r3, #8
    4f48:	015b      	lsls	r3, r3, #5
    4f4a:	5c9b      	ldrb	r3, [r3, r2]
    4f4c:	069b      	lsls	r3, r3, #26
    4f4e:	0f5b      	lsrs	r3, r3, #29
    4f50:	2b03      	cmp	r3, #3
    4f52:	d100      	bne.n	4f56 <USB_Handler+0x11e>
    4f54:	e09e      	b.n	5094 <USB_Handler+0x25c>
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    4f56:	0162      	lsls	r2, r4, #5
    4f58:	4b84      	ldr	r3, [pc, #528]	; (516c <USB_Handler+0x334>)
    4f5a:	189b      	adds	r3, r3, r2
    4f5c:	2200      	movs	r2, #0
    4f5e:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4f60:	6803      	ldr	r3, [r0, #0]
    4f62:	0022      	movs	r2, r4
    4f64:	3208      	adds	r2, #8
    4f66:	0152      	lsls	r2, r2, #5
    4f68:	189b      	adds	r3, r3, r2
    4f6a:	2204      	movs	r2, #4
    4f6c:	71da      	strb	r2, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    4f6e:	072b      	lsls	r3, r5, #28
    4f70:	d515      	bpl.n	4f9e <USB_Handler+0x166>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4f72:	4a7c      	ldr	r2, [pc, #496]	; (5164 <USB_Handler+0x32c>)
    4f74:	2301      	movs	r3, #1
    4f76:	40a3      	lsls	r3, r4
    4f78:	6811      	ldr	r1, [r2, #0]
    4f7a:	4399      	bics	r1, r3
    4f7c:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4f7e:	4b76      	ldr	r3, [pc, #472]	; (5158 <USB_Handler+0x320>)
    4f80:	6818      	ldr	r0, [r3, #0]
    4f82:	0023      	movs	r3, r4
    4f84:	3308      	adds	r3, #8
    4f86:	015b      	lsls	r3, r3, #5
    4f88:	6802      	ldr	r2, [r0, #0]
    4f8a:	4694      	mov	ip, r2
    4f8c:	4463      	add	r3, ip
    4f8e:	2208      	movs	r2, #8
    4f90:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    4f92:	1903      	adds	r3, r0, r4
    4f94:	33ae      	adds	r3, #174	; 0xae
    4f96:	781b      	ldrb	r3, [r3, #0]
    4f98:	079b      	lsls	r3, r3, #30
    4f9a:	d500      	bpl.n	4f9e <USB_Handler+0x166>
    4f9c:	e094      	b.n	50c8 <USB_Handler+0x290>
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    4f9e:	06eb      	lsls	r3, r5, #27
    4fa0:	d515      	bpl.n	4fce <USB_Handler+0x196>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4fa2:	4a70      	ldr	r2, [pc, #448]	; (5164 <USB_Handler+0x32c>)
    4fa4:	2301      	movs	r3, #1
    4fa6:	40a3      	lsls	r3, r4
    4fa8:	6811      	ldr	r1, [r2, #0]
    4faa:	4399      	bics	r1, r3
    4fac:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4fae:	4b6a      	ldr	r3, [pc, #424]	; (5158 <USB_Handler+0x320>)
    4fb0:	6818      	ldr	r0, [r3, #0]
    4fb2:	0023      	movs	r3, r4
    4fb4:	3308      	adds	r3, #8
    4fb6:	015b      	lsls	r3, r3, #5
    4fb8:	6802      	ldr	r2, [r0, #0]
    4fba:	4694      	mov	ip, r2
    4fbc:	4463      	add	r3, ip
    4fbe:	2210      	movs	r2, #16
    4fc0:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    4fc2:	1903      	adds	r3, r0, r4
    4fc4:	33ae      	adds	r3, #174	; 0xae
    4fc6:	781b      	ldrb	r3, [r3, #0]
    4fc8:	075b      	lsls	r3, r3, #29
    4fca:	d500      	bpl.n	4fce <USB_Handler+0x196>
    4fcc:	e08a      	b.n	50e4 <USB_Handler+0x2ac>
		if (flags & USB_HOST_PINTFLAG_STALL) {
    4fce:	06ab      	lsls	r3, r5, #26
    4fd0:	d400      	bmi.n	4fd4 <USB_Handler+0x19c>
    4fd2:	e12f      	b.n	5234 <USB_Handler+0x3fc>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    4fd4:	4a63      	ldr	r2, [pc, #396]	; (5164 <USB_Handler+0x32c>)
    4fd6:	2301      	movs	r3, #1
    4fd8:	40a3      	lsls	r3, r4
    4fda:	6811      	ldr	r1, [r2, #0]
    4fdc:	4399      	bics	r1, r3
    4fde:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    4fe0:	4b5d      	ldr	r3, [pc, #372]	; (5158 <USB_Handler+0x320>)
    4fe2:	6818      	ldr	r0, [r3, #0]
    4fe4:	0023      	movs	r3, r4
    4fe6:	3308      	adds	r3, #8
    4fe8:	015b      	lsls	r3, r3, #5
    4fea:	6802      	ldr	r2, [r0, #0]
    4fec:	4694      	mov	ip, r2
    4fee:	4463      	add	r3, ip
    4ff0:	2220      	movs	r2, #32
    4ff2:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    4ff4:	1903      	adds	r3, r0, r4
    4ff6:	33ae      	adds	r3, #174	; 0xae
    4ff8:	781b      	ldrb	r3, [r3, #0]
    4ffa:	071b      	lsls	r3, r3, #28
    4ffc:	d400      	bmi.n	5000 <USB_Handler+0x1c8>
    4ffe:	e119      	b.n	5234 <USB_Handler+0x3fc>
				pipe_callback_para.pipe_num = pipe_int;
    5000:	4959      	ldr	r1, [pc, #356]	; (5168 <USB_Handler+0x330>)
    5002:	700c      	strb	r4, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    5004:	0124      	lsls	r4, r4, #4
    5006:	1904      	adds	r4, r0, r4
    5008:	6b23      	ldr	r3, [r4, #48]	; 0x30
    500a:	4798      	blx	r3
    500c:	e112      	b.n	5234 <USB_Handler+0x3fc>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    500e:	0142      	lsls	r2, r0, #5
    5010:	4b56      	ldr	r3, [pc, #344]	; (516c <USB_Handler+0x334>)
    5012:	189b      	adds	r3, r3, r2
    5014:	685a      	ldr	r2, [r3, #4]
    5016:	0492      	lsls	r2, r2, #18
    5018:	0c92      	lsrs	r2, r2, #18
    501a:	4953      	ldr	r1, [pc, #332]	; (5168 <USB_Handler+0x330>)
    501c:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    501e:	685a      	ldr	r2, [r3, #4]
    5020:	0112      	lsls	r2, r2, #4
    5022:	0c92      	lsrs	r2, r2, #18
    5024:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    5026:	685a      	ldr	r2, [r3, #4]
    5028:	0b92      	lsrs	r2, r2, #14
    502a:	0392      	lsls	r2, r2, #14
    502c:	605a      	str	r2, [r3, #4]
    502e:	e774      	b.n	4f1a <USB_Handler+0xe2>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    5030:	0023      	movs	r3, r4
    5032:	3308      	adds	r3, #8
    5034:	015b      	lsls	r3, r3, #5
    5036:	5c9b      	ldrb	r3, [r3, r2]
    5038:	079b      	lsls	r3, r3, #30
    503a:	0f9b      	lsrs	r3, r3, #30
			if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_ISO &&
    503c:	2b01      	cmp	r3, #1
    503e:	d181      	bne.n	4f44 <USB_Handler+0x10c>
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.bit.CRCERR) {
    5040:	0161      	lsls	r1, r4, #5
    5042:	4b4a      	ldr	r3, [pc, #296]	; (516c <USB_Handler+0x334>)
    5044:	185b      	adds	r3, r3, r1
    5046:	3308      	adds	r3, #8
    5048:	789b      	ldrb	r3, [r3, #2]
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN &&
    504a:	07db      	lsls	r3, r3, #31
    504c:	d400      	bmi.n	5050 <USB_Handler+0x218>
    504e:	e779      	b.n	4f44 <USB_Handler+0x10c>
				host_pipe_job_busy_status &= ~(1 << pipe_int);
    5050:	4a44      	ldr	r2, [pc, #272]	; (5164 <USB_Handler+0x32c>)
    5052:	2301      	movs	r3, #1
    5054:	40a3      	lsls	r3, r4
    5056:	6811      	ldr	r1, [r2, #0]
    5058:	4399      	bics	r1, r3
    505a:	6011      	str	r1, [r2, #0]
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    505c:	0162      	lsls	r2, r4, #5
    505e:	4b43      	ldr	r3, [pc, #268]	; (516c <USB_Handler+0x334>)
    5060:	189b      	adds	r3, r3, r2
    5062:	2200      	movs	r2, #0
    5064:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    5066:	0023      	movs	r3, r4
    5068:	3308      	adds	r3, #8
    506a:	015b      	lsls	r3, r3, #5
    506c:	6802      	ldr	r2, [r0, #0]
    506e:	4694      	mov	ip, r2
    5070:	4463      	add	r3, ip
    5072:	2204      	movs	r2, #4
    5074:	71da      	strb	r2, [r3, #7]
				if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    5076:	1903      	adds	r3, r0, r4
    5078:	33ae      	adds	r3, #174	; 0xae
    507a:	781b      	ldrb	r3, [r3, #0]
    507c:	079b      	lsls	r3, r3, #30
    507e:	d400      	bmi.n	5082 <USB_Handler+0x24a>
    5080:	e775      	b.n	4f6e <USB_Handler+0x136>
					pipe_callback_para.pipe_num = pipe_int;
    5082:	4939      	ldr	r1, [pc, #228]	; (5168 <USB_Handler+0x330>)
    5084:	700c      	strb	r4, [r1, #0]
					pipe_callback_para.pipe_error_status = USB_STATUS_PIPE_CRC16ER;
    5086:	2310      	movs	r3, #16
    5088:	704b      	strb	r3, [r1, #1]
							[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    508a:	0123      	lsls	r3, r4, #4
    508c:	18c3      	adds	r3, r0, r3
    508e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5090:	4798      	blx	r3
    5092:	e76c      	b.n	4f6e <USB_Handler+0x136>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN == USB_HOST_PIPE_TOKEN_IN) {
    5094:	0023      	movs	r3, r4
    5096:	3308      	adds	r3, #8
    5098:	015b      	lsls	r3, r3, #5
    509a:	5c9b      	ldrb	r3, [r3, r2]
    509c:	079b      	lsls	r3, r3, #30
    509e:	0f9b      	lsrs	r3, r3, #30
			else if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE == USB_HOST_PIPE_TYPE_BULK &&
    50a0:	2b01      	cmp	r3, #1
    50a2:	d000      	beq.n	50a6 <USB_Handler+0x26e>
    50a4:	e757      	b.n	4f56 <USB_Handler+0x11e>
				usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_BK.reg = 0;
    50a6:	0162      	lsls	r2, r4, #5
    50a8:	4b30      	ldr	r3, [pc, #192]	; (516c <USB_Handler+0x334>)
    50aa:	189b      	adds	r3, r3, r2
    50ac:	2200      	movs	r2, #0
    50ae:	729a      	strb	r2, [r3, #10]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    50b0:	0023      	movs	r3, r4
    50b2:	3308      	adds	r3, #8
    50b4:	015b      	lsls	r3, r3, #5
    50b6:	6802      	ldr	r2, [r0, #0]
    50b8:	18d2      	adds	r2, r2, r3
    50ba:	2104      	movs	r1, #4
    50bc:	71d1      	strb	r1, [r2, #7]
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSSET.reg = USB_HOST_PSTATUS_PFREEZE;
    50be:	6802      	ldr	r2, [r0, #0]
    50c0:	18d3      	adds	r3, r2, r3
    50c2:	2210      	movs	r2, #16
    50c4:	715a      	strb	r2, [r3, #5]
    50c6:	e752      	b.n	4f6e <USB_Handler+0x136>
				pipe_callback_para.pipe_num = pipe_int;
    50c8:	4927      	ldr	r1, [pc, #156]	; (5168 <USB_Handler+0x330>)
    50ca:	700c      	strb	r4, [r1, #0]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    50cc:	0162      	lsls	r2, r4, #5
    50ce:	4b27      	ldr	r3, [pc, #156]	; (516c <USB_Handler+0x334>)
    50d0:	189b      	adds	r3, r3, r2
    50d2:	89db      	ldrh	r3, [r3, #14]
    50d4:	221f      	movs	r2, #31
    50d6:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    50d8:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    50da:	0123      	lsls	r3, r4, #4
    50dc:	18c3      	adds	r3, r0, r3
    50de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    50e0:	4798      	blx	r3
    50e2:	e75c      	b.n	4f9e <USB_Handler+0x166>
				pipe_callback_para.pipe_num = pipe_int;
    50e4:	4920      	ldr	r1, [pc, #128]	; (5168 <USB_Handler+0x330>)
    50e6:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    50e8:	0162      	lsls	r2, r4, #5
    50ea:	4b20      	ldr	r3, [pc, #128]	; (516c <USB_Handler+0x334>)
    50ec:	189b      	adds	r3, r3, r2
    50ee:	685b      	ldr	r3, [r3, #4]
    50f0:	011b      	lsls	r3, r3, #4
    50f2:	0c9b      	lsrs	r3, r3, #18
    50f4:	804b      	strh	r3, [r1, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    50f6:	0123      	lsls	r3, r4, #4
    50f8:	18c3      	adds	r3, r0, r3
    50fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    50fc:	2100      	movs	r1, #0
    50fe:	4798      	blx	r3
    5100:	e765      	b.n	4fce <USB_Handler+0x196>
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    5102:	8bac      	ldrh	r4, [r5, #28]
    5104:	b2a4      	uxth	r4, r4
		if (flags & USB_HOST_INTFLAG_HSOF) {
    5106:	0763      	lsls	r3, r4, #29
    5108:	d538      	bpl.n	517c <USB_Handler+0x344>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    510a:	2304      	movs	r3, #4
    510c:	83ab      	strh	r3, [r5, #28]
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    510e:	4b15      	ldr	r3, [pc, #84]	; (5164 <USB_Handler+0x32c>)
    5110:	681d      	ldr	r5, [r3, #0]
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
    5112:	2301      	movs	r3, #1
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    5114:	2001      	movs	r0, #1
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    5116:	2610      	movs	r6, #16
    5118:	e002      	b.n	5120 <USB_Handler+0x2e8>
			for (pipe_int = 1; pipe_int < USB_PIPE_NUM; pipe_int ++) {
    511a:	3301      	adds	r3, #1
    511c:	2b08      	cmp	r3, #8
    511e:	d029      	beq.n	5174 <USB_Handler+0x33c>
				if (!(host_pipe_job_busy_status & (1 << pipe_int))) {
    5120:	0002      	movs	r2, r0
    5122:	409a      	lsls	r2, r3
    5124:	4215      	tst	r5, r2
    5126:	d0f8      	beq.n	511a <USB_Handler+0x2e2>
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    5128:	6839      	ldr	r1, [r7, #0]
    512a:	001a      	movs	r2, r3
    512c:	3208      	adds	r2, #8
    512e:	0152      	lsls	r2, r2, #5
    5130:	5c52      	ldrb	r2, [r2, r1]
    5132:	0692      	lsls	r2, r2, #26
    5134:	0f52      	lsrs	r2, r2, #29
    5136:	2a03      	cmp	r2, #3
    5138:	d1ef      	bne.n	511a <USB_Handler+0x2e2>
					_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN != USB_HOST_PIPE_TOKEN_IN) {
    513a:	001a      	movs	r2, r3
    513c:	3208      	adds	r2, #8
    513e:	0152      	lsls	r2, r2, #5
    5140:	5c52      	ldrb	r2, [r2, r1]
    5142:	0792      	lsls	r2, r2, #30
    5144:	0f92      	lsrs	r2, r2, #30
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTYPE != USB_HOST_PIPE_TYPE_BULK ||
    5146:	2a01      	cmp	r2, #1
    5148:	d1e7      	bne.n	511a <USB_Handler+0x2e2>
				_usb_instances->hw->HOST.HostPipe[pipe_int].PSTATUSCLR.reg = USB_HOST_PSTATUS_PFREEZE;
    514a:	001a      	movs	r2, r3
    514c:	3208      	adds	r2, #8
    514e:	0152      	lsls	r2, r2, #5
    5150:	1889      	adds	r1, r1, r2
    5152:	710e      	strb	r6, [r1, #4]
    5154:	e7e1      	b.n	511a <USB_Handler+0x2e2>
    5156:	46c0      	nop			; (mov r8, r8)
    5158:	200001b4 	.word	0x200001b4
    515c:	00005eec 	.word	0x00005eec
    5160:	00005dd5 	.word	0x00005dd5
    5164:	200001c4 	.word	0x200001c4
    5168:	200001c8 	.word	0x200001c8
    516c:	20000414 	.word	0x20000414
    5170:	f0003fff 	.word	0xf0003fff
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    5174:	339d      	adds	r3, #157	; 0x9d
    5176:	5cfb      	ldrb	r3, [r7, r3]
    5178:	07db      	lsls	r3, r3, #31
    517a:	d462      	bmi.n	5242 <USB_Handler+0x40a>
		if (flags & USB_HOST_INTFLAG_RST) {
    517c:	0723      	lsls	r3, r4, #28
    517e:	d50b      	bpl.n	5198 <USB_Handler+0x360>
			host_pipe_job_busy_status = 0;
    5180:	2200      	movs	r2, #0
    5182:	4baf      	ldr	r3, [pc, #700]	; (5440 <USB_Handler+0x608>)
    5184:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    5186:	4baf      	ldr	r3, [pc, #700]	; (5444 <USB_Handler+0x60c>)
    5188:	6818      	ldr	r0, [r3, #0]
    518a:	2308      	movs	r3, #8
    518c:	6802      	ldr	r2, [r0, #0]
    518e:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    5190:	339d      	adds	r3, #157	; 0x9d
    5192:	5cc3      	ldrb	r3, [r0, r3]
    5194:	079b      	lsls	r3, r3, #30
    5196:	d458      	bmi.n	524a <USB_Handler+0x412>
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    5198:	0663      	lsls	r3, r4, #25
    519a:	d508      	bpl.n	51ae <USB_Handler+0x376>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    519c:	4ba9      	ldr	r3, [pc, #676]	; (5444 <USB_Handler+0x60c>)
    519e:	6818      	ldr	r0, [r3, #0]
    51a0:	2340      	movs	r3, #64	; 0x40
    51a2:	6802      	ldr	r2, [r0, #0]
    51a4:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    51a6:	3365      	adds	r3, #101	; 0x65
    51a8:	5cc3      	ldrb	r3, [r0, r3]
    51aa:	06db      	lsls	r3, r3, #27
    51ac:	d450      	bmi.n	5250 <USB_Handler+0x418>
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    51ae:	06a3      	lsls	r3, r4, #26
    51b0:	d508      	bpl.n	51c4 <USB_Handler+0x38c>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    51b2:	4ba4      	ldr	r3, [pc, #656]	; (5444 <USB_Handler+0x60c>)
    51b4:	6818      	ldr	r0, [r3, #0]
    51b6:	2320      	movs	r3, #32
    51b8:	6802      	ldr	r2, [r0, #0]
    51ba:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    51bc:	3385      	adds	r3, #133	; 0x85
    51be:	5cc3      	ldrb	r3, [r0, r3]
    51c0:	071b      	lsls	r3, r3, #28
    51c2:	d448      	bmi.n	5256 <USB_Handler+0x41e>
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    51c4:	06e3      	lsls	r3, r4, #27
    51c6:	d508      	bpl.n	51da <USB_Handler+0x3a2>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    51c8:	4b9e      	ldr	r3, [pc, #632]	; (5444 <USB_Handler+0x60c>)
    51ca:	6818      	ldr	r0, [r3, #0]
    51cc:	2310      	movs	r3, #16
    51ce:	6802      	ldr	r2, [r0, #0]
    51d0:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    51d2:	3395      	adds	r3, #149	; 0x95
    51d4:	5cc3      	ldrb	r3, [r0, r3]
    51d6:	075b      	lsls	r3, r3, #29
    51d8:	d440      	bmi.n	525c <USB_Handler+0x424>
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    51da:	0623      	lsls	r3, r4, #24
    51dc:	d50b      	bpl.n	51f6 <USB_Handler+0x3be>
			host_pipe_job_busy_status = 0;
    51de:	2200      	movs	r2, #0
    51e0:	4b97      	ldr	r3, [pc, #604]	; (5440 <USB_Handler+0x608>)
    51e2:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    51e4:	4b97      	ldr	r3, [pc, #604]	; (5444 <USB_Handler+0x60c>)
    51e6:	6818      	ldr	r0, [r3, #0]
    51e8:	2380      	movs	r3, #128	; 0x80
    51ea:	6802      	ldr	r2, [r0, #0]
    51ec:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    51ee:	3325      	adds	r3, #37	; 0x25
    51f0:	5cc3      	ldrb	r3, [r0, r3]
    51f2:	069b      	lsls	r3, r3, #26
    51f4:	d435      	bmi.n	5262 <USB_Handler+0x42a>
		if (flags & USB_HOST_INTFLAG_DCONN) {
    51f6:	05e3      	lsls	r3, r4, #23
    51f8:	d50c      	bpl.n	5214 <USB_Handler+0x3dc>
			host_pipe_job_busy_status = 0;
    51fa:	2200      	movs	r2, #0
    51fc:	4b90      	ldr	r3, [pc, #576]	; (5440 <USB_Handler+0x608>)
    51fe:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    5200:	4b90      	ldr	r3, [pc, #576]	; (5444 <USB_Handler+0x60c>)
    5202:	6818      	ldr	r0, [r3, #0]
    5204:	2380      	movs	r3, #128	; 0x80
    5206:	005b      	lsls	r3, r3, #1
    5208:	6802      	ldr	r2, [r0, #0]
    520a:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    520c:	3b5b      	subs	r3, #91	; 0x5b
    520e:	5cc3      	ldrb	r3, [r0, r3]
    5210:	065b      	lsls	r3, r3, #25
    5212:	d429      	bmi.n	5268 <USB_Handler+0x430>
		if (flags & USB_HOST_INTFLAG_DDISC) {
    5214:	05a3      	lsls	r3, r4, #22
    5216:	d50d      	bpl.n	5234 <USB_Handler+0x3fc>
			host_pipe_job_busy_status = 0;
    5218:	2200      	movs	r2, #0
    521a:	4b89      	ldr	r3, [pc, #548]	; (5440 <USB_Handler+0x608>)
    521c:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    521e:	4b89      	ldr	r3, [pc, #548]	; (5444 <USB_Handler+0x60c>)
    5220:	6818      	ldr	r0, [r3, #0]
    5222:	2380      	movs	r3, #128	; 0x80
    5224:	009b      	lsls	r3, r3, #2
    5226:	6802      	ldr	r2, [r0, #0]
    5228:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    522a:	3b5c      	subs	r3, #92	; 0x5c
    522c:	3bff      	subs	r3, #255	; 0xff
    522e:	5cc3      	ldrb	r3, [r0, r3]
    5230:	2b7f      	cmp	r3, #127	; 0x7f
    5232:	d81c      	bhi.n	526e <USB_Handler+0x436>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    5234:	b003      	add	sp, #12
    5236:	bc3c      	pop	{r2, r3, r4, r5}
    5238:	4690      	mov	r8, r2
    523a:	4699      	mov	r9, r3
    523c:	46a2      	mov	sl, r4
    523e:	46ab      	mov	fp, r5
    5240:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    5242:	687b      	ldr	r3, [r7, #4]
    5244:	0038      	movs	r0, r7
    5246:	4798      	blx	r3
    5248:	e798      	b.n	517c <USB_Handler+0x344>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    524a:	6883      	ldr	r3, [r0, #8]
    524c:	4798      	blx	r3
    524e:	e7a3      	b.n	5198 <USB_Handler+0x360>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    5250:	6943      	ldr	r3, [r0, #20]
    5252:	4798      	blx	r3
    5254:	e7ab      	b.n	51ae <USB_Handler+0x376>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    5256:	6903      	ldr	r3, [r0, #16]
    5258:	4798      	blx	r3
    525a:	e7b3      	b.n	51c4 <USB_Handler+0x38c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    525c:	68c3      	ldr	r3, [r0, #12]
    525e:	4798      	blx	r3
    5260:	e7bb      	b.n	51da <USB_Handler+0x3a2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    5262:	6983      	ldr	r3, [r0, #24]
    5264:	4798      	blx	r3
    5266:	e7c6      	b.n	51f6 <USB_Handler+0x3be>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    5268:	69c3      	ldr	r3, [r0, #28]
    526a:	4798      	blx	r3
    526c:	e7d2      	b.n	5214 <USB_Handler+0x3dc>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    526e:	6a03      	ldr	r3, [r0, #32]
    5270:	4798      	blx	r3
    5272:	e7df      	b.n	5234 <USB_Handler+0x3fc>
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    5274:	0023      	movs	r3, r4
    5276:	332e      	adds	r3, #46	; 0x2e
    5278:	009b      	lsls	r3, r3, #2
    527a:	4642      	mov	r2, r8
    527c:	6812      	ldr	r2, [r2, #0]
    527e:	589b      	ldr	r3, [r3, r2]
    5280:	4971      	ldr	r1, [pc, #452]	; (5448 <USB_Handler+0x610>)
    5282:	4642      	mov	r2, r8
    5284:	6810      	ldr	r0, [r2, #0]
    5286:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    5288:	3401      	adds	r4, #1
    528a:	2c07      	cmp	r4, #7
    528c:	d0d2      	beq.n	5234 <USB_Handler+0x3fc>
			if (flags & _usb_device_irq_bits[i]) {
    528e:	0063      	lsls	r3, r4, #1
    5290:	5bdb      	ldrh	r3, [r3, r7]
    5292:	4233      	tst	r3, r6
    5294:	d003      	beq.n	529e <USB_Handler+0x466>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    5296:	464a      	mov	r2, r9
    5298:	6812      	ldr	r2, [r2, #0]
    529a:	6812      	ldr	r2, [r2, #0]
    529c:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    529e:	422b      	tst	r3, r5
    52a0:	d0f2      	beq.n	5288 <USB_Handler+0x450>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    52a2:	2c06      	cmp	r4, #6
    52a4:	d1e6      	bne.n	5274 <USB_Handler+0x43c>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    52a6:	4b69      	ldr	r3, [pc, #420]	; (544c <USB_Handler+0x614>)
    52a8:	891b      	ldrh	r3, [r3, #8]
    52aa:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    52ac:	2280      	movs	r2, #128	; 0x80
    52ae:	0052      	lsls	r2, r2, #1
    52b0:	4013      	ands	r3, r2
    52b2:	4a65      	ldr	r2, [pc, #404]	; (5448 <USB_Handler+0x610>)
    52b4:	6013      	str	r3, [r2, #0]
    52b6:	e7dd      	b.n	5274 <USB_Handler+0x43c>
    52b8:	003c      	movs	r4, r7
    52ba:	3459      	adds	r4, #89	; 0x59
    52bc:	34ff      	adds	r4, #255	; 0xff
	if (0 == ep_inst) {
    52be:	2300      	movs	r3, #0
			if (ep_inst & (1 << i)) {
    52c0:	2201      	movs	r2, #1
    52c2:	4694      	mov	ip, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    52c4:	325f      	adds	r2, #95	; 0x5f
    52c6:	4691      	mov	r9, r2
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    52c8:	3a50      	subs	r2, #80	; 0x50
    52ca:	4692      	mov	sl, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    52cc:	3a0d      	subs	r2, #13
    52ce:	4693      	mov	fp, r2
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    52d0:	46b8      	mov	r8, r7
    52d2:	002f      	movs	r7, r5
    52d4:	e0c3      	b.n	545e <USB_Handler+0x626>
    52d6:	002a      	movs	r2, r5
    52d8:	003d      	movs	r5, r7
    52da:	4647      	mov	r7, r8
    52dc:	4690      	mov	r8, r2
    52de:	015b      	lsls	r3, r3, #5
    52e0:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    52e2:	2308      	movs	r3, #8
    52e4:	33ff      	adds	r3, #255	; 0xff
    52e6:	5ceb      	ldrb	r3, [r5, r3]
    52e8:	065b      	lsls	r3, r3, #25
    52ea:	d515      	bpl.n	5318 <USB_Handler+0x4e0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    52ec:	2240      	movs	r2, #64	; 0x40
    52ee:	2308      	movs	r3, #8
    52f0:	33ff      	adds	r3, #255	; 0xff
    52f2:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    52f4:	3b88      	subs	r3, #136	; 0x88
    52f6:	3bff      	subs	r3, #255	; 0xff
    52f8:	4642      	mov	r2, r8
    52fa:	4313      	orrs	r3, r2
    52fc:	4a54      	ldr	r2, [pc, #336]	; (5450 <USB_Handler+0x618>)
    52fe:	7193      	strb	r3, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    5300:	2360      	movs	r3, #96	; 0x60
    5302:	420b      	tst	r3, r1
    5304:	d096      	beq.n	5234 <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    5306:	9b01      	ldr	r3, [sp, #4]
    5308:	011b      	lsls	r3, r3, #4
    530a:	18fb      	adds	r3, r7, r3
    530c:	33e0      	adds	r3, #224	; 0xe0
    530e:	681b      	ldr	r3, [r3, #0]
    5310:	494f      	ldr	r1, [pc, #316]	; (5450 <USB_Handler+0x618>)
    5312:	0038      	movs	r0, r7
    5314:	4798      	blx	r3
    5316:	e78d      	b.n	5234 <USB_Handler+0x3fc>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    5318:	2308      	movs	r3, #8
    531a:	33ff      	adds	r3, #255	; 0xff
    531c:	5ceb      	ldrb	r3, [r5, r3]
    531e:	069b      	lsls	r3, r3, #26
    5320:	d5ee      	bpl.n	5300 <USB_Handler+0x4c8>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    5322:	2220      	movs	r2, #32
    5324:	2308      	movs	r3, #8
    5326:	33ff      	adds	r3, #255	; 0xff
    5328:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    532a:	4b49      	ldr	r3, [pc, #292]	; (5450 <USB_Handler+0x618>)
    532c:	4642      	mov	r2, r8
    532e:	719a      	strb	r2, [r3, #6]
    5330:	e7e6      	b.n	5300 <USB_Handler+0x4c8>
    5332:	003d      	movs	r5, r7
    5334:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    5336:	9a01      	ldr	r2, [sp, #4]
    5338:	0013      	movs	r3, r2
    533a:	3308      	adds	r3, #8
    533c:	015b      	lsls	r3, r3, #5
    533e:	18ed      	adds	r5, r5, r3
    5340:	2310      	movs	r3, #16
    5342:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    5344:	18bb      	adds	r3, r7, r2
    5346:	3361      	adds	r3, #97	; 0x61
    5348:	33ff      	adds	r3, #255	; 0xff
    534a:	781b      	ldrb	r3, [r3, #0]
    534c:	06db      	lsls	r3, r3, #27
    534e:	d400      	bmi.n	5352 <USB_Handler+0x51a>
    5350:	e770      	b.n	5234 <USB_Handler+0x3fc>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    5352:	0010      	movs	r0, r2
    5354:	0152      	lsls	r2, r2, #5
    5356:	4b3d      	ldr	r3, [pc, #244]	; (544c <USB_Handler+0x614>)
    5358:	189b      	adds	r3, r3, r2
    535a:	685b      	ldr	r3, [r3, #4]
    535c:	049b      	lsls	r3, r3, #18
    535e:	0c9b      	lsrs	r3, r3, #18
    5360:	493b      	ldr	r1, [pc, #236]	; (5450 <USB_Handler+0x618>)
    5362:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    5364:	0103      	lsls	r3, r0, #4
    5366:	18fb      	adds	r3, r7, r3
    5368:	33dc      	adds	r3, #220	; 0xdc
    536a:	681b      	ldr	r3, [r3, #0]
    536c:	4640      	mov	r0, r8
    536e:	4798      	blx	r3
    5370:	e760      	b.n	5234 <USB_Handler+0x3fc>
    5372:	002a      	movs	r2, r5
    5374:	003d      	movs	r5, r7
    5376:	4647      	mov	r7, r8
    5378:	4690      	mov	r8, r2
    537a:	015b      	lsls	r3, r3, #5
    537c:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    537e:	2308      	movs	r3, #8
    5380:	33ff      	adds	r3, #255	; 0xff
    5382:	5ceb      	ldrb	r3, [r5, r3]
    5384:	079b      	lsls	r3, r3, #30
    5386:	d51e      	bpl.n	53c6 <USB_Handler+0x58e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    5388:	2202      	movs	r2, #2
    538a:	2308      	movs	r3, #8
    538c:	33ff      	adds	r3, #255	; 0xff
    538e:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    5390:	482f      	ldr	r0, [pc, #188]	; (5450 <USB_Handler+0x618>)
    5392:	3b88      	subs	r3, #136	; 0x88
    5394:	3bff      	subs	r3, #255	; 0xff
    5396:	4642      	mov	r2, r8
    5398:	4313      	orrs	r3, r2
    539a:	7183      	strb	r3, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    539c:	9b01      	ldr	r3, [sp, #4]
    539e:	015a      	lsls	r2, r3, #5
    53a0:	4b2a      	ldr	r3, [pc, #168]	; (544c <USB_Handler+0x614>)
    53a2:	189b      	adds	r3, r3, r2
    53a4:	3310      	adds	r3, #16
    53a6:	685b      	ldr	r3, [r3, #4]
    53a8:	049b      	lsls	r3, r3, #18
    53aa:	0c9b      	lsrs	r3, r3, #18
    53ac:	8043      	strh	r3, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    53ae:	078b      	lsls	r3, r1, #30
    53b0:	d100      	bne.n	53b4 <USB_Handler+0x57c>
    53b2:	e73f      	b.n	5234 <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    53b4:	9b01      	ldr	r3, [sp, #4]
    53b6:	330d      	adds	r3, #13
    53b8:	011b      	lsls	r3, r3, #4
    53ba:	18fb      	adds	r3, r7, r3
    53bc:	685b      	ldr	r3, [r3, #4]
    53be:	4924      	ldr	r1, [pc, #144]	; (5450 <USB_Handler+0x618>)
    53c0:	0038      	movs	r0, r7
    53c2:	4798      	blx	r3
    53c4:	e736      	b.n	5234 <USB_Handler+0x3fc>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    53c6:	2308      	movs	r3, #8
    53c8:	33ff      	adds	r3, #255	; 0xff
    53ca:	5ceb      	ldrb	r3, [r5, r3]
    53cc:	07db      	lsls	r3, r3, #31
    53ce:	d5ee      	bpl.n	53ae <USB_Handler+0x576>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    53d0:	2201      	movs	r2, #1
    53d2:	2308      	movs	r3, #8
    53d4:	33ff      	adds	r3, #255	; 0xff
    53d6:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    53d8:	481d      	ldr	r0, [pc, #116]	; (5450 <USB_Handler+0x618>)
    53da:	4643      	mov	r3, r8
    53dc:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    53de:	9b01      	ldr	r3, [sp, #4]
    53e0:	015b      	lsls	r3, r3, #5
    53e2:	4a1a      	ldr	r2, [pc, #104]	; (544c <USB_Handler+0x614>)
    53e4:	18d2      	adds	r2, r2, r3
    53e6:	6853      	ldr	r3, [r2, #4]
    53e8:	049b      	lsls	r3, r3, #18
    53ea:	0c9b      	lsrs	r3, r3, #18
    53ec:	8003      	strh	r3, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    53ee:	6853      	ldr	r3, [r2, #4]
    53f0:	011b      	lsls	r3, r3, #4
    53f2:	0c9b      	lsrs	r3, r3, #18
    53f4:	8083      	strh	r3, [r0, #4]
    53f6:	e7da      	b.n	53ae <USB_Handler+0x576>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    53f8:	2208      	movs	r2, #8
    53fa:	32ff      	adds	r2, #255	; 0xff
    53fc:	5c9a      	ldrb	r2, [r3, r2]
    53fe:	0752      	lsls	r2, r2, #29
    5400:	d579      	bpl.n	54f6 <USB_Handler+0x6be>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    5402:	2004      	movs	r0, #4
    5404:	2208      	movs	r2, #8
    5406:	32ff      	adds	r2, #255	; 0xff
    5408:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    540a:	9801      	ldr	r0, [sp, #4]
    540c:	0142      	lsls	r2, r0, #5
    540e:	4b0f      	ldr	r3, [pc, #60]	; (544c <USB_Handler+0x614>)
    5410:	189b      	adds	r3, r3, r2
    5412:	7a9b      	ldrb	r3, [r3, #10]
    5414:	079b      	lsls	r3, r3, #30
    5416:	d505      	bpl.n	5424 <USB_Handler+0x5ec>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    5418:	4b0c      	ldr	r3, [pc, #48]	; (544c <USB_Handler+0x614>)
    541a:	189b      	adds	r3, r3, r2
    541c:	7a9a      	ldrb	r2, [r3, #10]
    541e:	2002      	movs	r0, #2
    5420:	4382      	bics	r2, r0
    5422:	729a      	strb	r2, [r3, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    5424:	4b0a      	ldr	r3, [pc, #40]	; (5450 <USB_Handler+0x618>)
    5426:	4642      	mov	r2, r8
    5428:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    542a:	9b01      	ldr	r3, [sp, #4]
    542c:	3308      	adds	r3, #8
    542e:	015b      	lsls	r3, r3, #5
    5430:	683a      	ldr	r2, [r7, #0]
    5432:	4694      	mov	ip, r2
    5434:	4463      	add	r3, ip
    5436:	79db      	ldrb	r3, [r3, #7]
    5438:	07db      	lsls	r3, r3, #31
    543a:	d55c      	bpl.n	54f6 <USB_Handler+0x6be>
    543c:	e6fa      	b.n	5234 <USB_Handler+0x3fc>
    543e:	46c0      	nop			; (mov r8, r8)
    5440:	200001c4 	.word	0x200001c4
    5444:	200001b4 	.word	0x200001b4
    5448:	200001b8 	.word	0x200001b8
    544c:	20000414 	.word	0x20000414
    5450:	200001bc 	.word	0x200001bc
    5454:	3301      	adds	r3, #1
    5456:	3401      	adds	r4, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    5458:	2b08      	cmp	r3, #8
    545a:	d100      	bne.n	545e <USB_Handler+0x626>
    545c:	e6ea      	b.n	5234 <USB_Handler+0x3fc>
    545e:	b2dd      	uxtb	r5, r3
			if (ep_inst & (1 << i)) {
    5460:	9301      	str	r3, [sp, #4]
    5462:	0032      	movs	r2, r6
    5464:	411a      	asrs	r2, r3
    5466:	4661      	mov	r1, ip
    5468:	4211      	tst	r1, r2
    546a:	d0f3      	beq.n	5454 <USB_Handler+0x61c>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    546c:	001a      	movs	r2, r3
    546e:	3208      	adds	r2, #8
    5470:	0152      	lsls	r2, r2, #5
    5472:	18ba      	adds	r2, r7, r2
    5474:	79d2      	ldrb	r2, [r2, #7]
    5476:	b2d2      	uxtb	r2, r2
    5478:	7a21      	ldrb	r1, [r4, #8]
    547a:	4011      	ands	r1, r2
    547c:	7820      	ldrb	r0, [r4, #0]
    547e:	4001      	ands	r1, r0
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    5480:	4648      	mov	r0, r9
    5482:	4210      	tst	r0, r2
    5484:	d000      	beq.n	5488 <USB_Handler+0x650>
    5486:	e726      	b.n	52d6 <USB_Handler+0x49e>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    5488:	4650      	mov	r0, sl
    548a:	4210      	tst	r0, r2
    548c:	d000      	beq.n	5490 <USB_Handler+0x658>
    548e:	e750      	b.n	5332 <USB_Handler+0x4fa>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    5490:	4658      	mov	r0, fp
    5492:	4210      	tst	r0, r2
    5494:	d000      	beq.n	5498 <USB_Handler+0x660>
    5496:	e76c      	b.n	5372 <USB_Handler+0x53a>
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    5498:	200c      	movs	r0, #12
    549a:	4210      	tst	r0, r2
    549c:	d0da      	beq.n	5454 <USB_Handler+0x61c>
    549e:	002a      	movs	r2, r5
    54a0:	003d      	movs	r5, r7
    54a2:	4647      	mov	r7, r8
    54a4:	4690      	mov	r8, r2
    54a6:	015b      	lsls	r3, r3, #5
    54a8:	18eb      	adds	r3, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    54aa:	2208      	movs	r2, #8
    54ac:	32ff      	adds	r2, #255	; 0xff
    54ae:	5c9a      	ldrb	r2, [r3, r2]
    54b0:	0712      	lsls	r2, r2, #28
    54b2:	d5a1      	bpl.n	53f8 <USB_Handler+0x5c0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    54b4:	3804      	subs	r0, #4
    54b6:	2208      	movs	r2, #8
    54b8:	32ff      	adds	r2, #255	; 0xff
    54ba:	5498      	strb	r0, [r3, r2]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    54bc:	9801      	ldr	r0, [sp, #4]
    54be:	0142      	lsls	r2, r0, #5
    54c0:	4b13      	ldr	r3, [pc, #76]	; (5510 <USB_Handler+0x6d8>)
    54c2:	189b      	adds	r3, r3, r2
    54c4:	7e9b      	ldrb	r3, [r3, #26]
    54c6:	079b      	lsls	r3, r3, #30
    54c8:	d505      	bpl.n	54d6 <USB_Handler+0x69e>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    54ca:	4b11      	ldr	r3, [pc, #68]	; (5510 <USB_Handler+0x6d8>)
    54cc:	189b      	adds	r3, r3, r2
    54ce:	7e9a      	ldrb	r2, [r3, #26]
    54d0:	2002      	movs	r0, #2
    54d2:	4382      	bics	r2, r0
    54d4:	769a      	strb	r2, [r3, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    54d6:	2380      	movs	r3, #128	; 0x80
    54d8:	425b      	negs	r3, r3
    54da:	4642      	mov	r2, r8
    54dc:	4313      	orrs	r3, r2
    54de:	4a0d      	ldr	r2, [pc, #52]	; (5514 <USB_Handler+0x6dc>)
    54e0:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    54e2:	9b01      	ldr	r3, [sp, #4]
    54e4:	3308      	adds	r3, #8
    54e6:	015b      	lsls	r3, r3, #5
    54e8:	683a      	ldr	r2, [r7, #0]
    54ea:	4694      	mov	ip, r2
    54ec:	4463      	add	r3, ip
    54ee:	79db      	ldrb	r3, [r3, #7]
    54f0:	079b      	lsls	r3, r3, #30
    54f2:	d500      	bpl.n	54f6 <USB_Handler+0x6be>
    54f4:	e69e      	b.n	5234 <USB_Handler+0x3fc>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    54f6:	230c      	movs	r3, #12
    54f8:	420b      	tst	r3, r1
    54fa:	d100      	bne.n	54fe <USB_Handler+0x6c6>
    54fc:	e69a      	b.n	5234 <USB_Handler+0x3fc>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    54fe:	9b01      	ldr	r3, [sp, #4]
    5500:	011b      	lsls	r3, r3, #4
    5502:	18fb      	adds	r3, r7, r3
    5504:	33d8      	adds	r3, #216	; 0xd8
    5506:	681b      	ldr	r3, [r3, #0]
    5508:	4902      	ldr	r1, [pc, #8]	; (5514 <USB_Handler+0x6dc>)
    550a:	0038      	movs	r0, r7
    550c:	4798      	blx	r3
    550e:	e691      	b.n	5234 <USB_Handler+0x3fc>
    5510:	20000414 	.word	0x20000414
    5514:	200001bc 	.word	0x200001bc

00005518 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    5518:	2200      	movs	r2, #0
    551a:	7002      	strb	r2, [r0, #0]
	module_config->run_in_standby = 1;
    551c:	2301      	movs	r3, #1
    551e:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    5520:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    5522:	70c3      	strb	r3, [r0, #3]
}
    5524:	4770      	bx	lr
	...

00005528 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    5528:	b5f0      	push	{r4, r5, r6, r7, lr}
    552a:	46ce      	mov	lr, r9
    552c:	4647      	mov	r7, r8
    552e:	b580      	push	{r7, lr}
    5530:	b083      	sub	sp, #12
    5532:	0004      	movs	r4, r0
    5534:	000d      	movs	r5, r1
    5536:	0016      	movs	r6, r2
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    5538:	2300      	movs	r3, #0
    553a:	4a6e      	ldr	r2, [pc, #440]	; (56f4 <usb_init+0x1cc>)
    553c:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    553e:	4a6e      	ldr	r2, [pc, #440]	; (56f8 <usb_init+0x1d0>)
    5540:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    5542:	6021      	str	r1, [r4, #0]
			PM->APBBMASK.reg |= mask;
    5544:	496d      	ldr	r1, [pc, #436]	; (56fc <usb_init+0x1d4>)
    5546:	69ca      	ldr	r2, [r1, #28]
    5548:	2020      	movs	r0, #32
    554a:	4302      	orrs	r2, r0
    554c:	61ca      	str	r2, [r1, #28]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    554e:	af01      	add	r7, sp, #4
    5550:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5552:	2201      	movs	r2, #1
    5554:	70ba      	strb	r2, [r7, #2]
	config->powersave    = false;
    5556:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    5558:	3306      	adds	r3, #6
    555a:	4699      	mov	r9, r3
    555c:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    555e:	0039      	movs	r1, r7
    5560:	3808      	subs	r0, #8
    5562:	4b67      	ldr	r3, [pc, #412]	; (5700 <usb_init+0x1d8>)
    5564:	4698      	mov	r8, r3
    5566:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    5568:	464b      	mov	r3, r9
    556a:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    556c:	0039      	movs	r1, r7
    556e:	2019      	movs	r0, #25
    5570:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    5572:	78b3      	ldrb	r3, [r6, #2]
    5574:	466a      	mov	r2, sp
    5576:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    5578:	4669      	mov	r1, sp
    557a:	2006      	movs	r0, #6
    557c:	4b61      	ldr	r3, [pc, #388]	; (5704 <usb_init+0x1dc>)
    557e:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    5580:	2006      	movs	r0, #6
    5582:	4b61      	ldr	r3, [pc, #388]	; (5708 <usb_init+0x1e0>)
    5584:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    5586:	782b      	ldrb	r3, [r5, #0]
    5588:	2201      	movs	r2, #1
    558a:	4313      	orrs	r3, r2
    558c:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    558e:	78ab      	ldrb	r3, [r5, #2]
    5590:	07db      	lsls	r3, r3, #31
    5592:	d4fc      	bmi.n	558e <usb_init+0x66>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    5594:	4a5d      	ldr	r2, [pc, #372]	; (570c <usb_init+0x1e4>)
    5596:	78d3      	ldrb	r3, [r2, #3]
    5598:	2103      	movs	r1, #3
    559a:	438b      	bics	r3, r1
    559c:	2102      	movs	r1, #2
    559e:	430b      	orrs	r3, r1
    55a0:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    55a2:	78d3      	ldrb	r3, [r2, #3]
    55a4:	210c      	movs	r1, #12
    55a6:	438b      	bics	r3, r1
    55a8:	2108      	movs	r1, #8
    55aa:	430b      	orrs	r3, r1
    55ac:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    55ae:	4b58      	ldr	r3, [pc, #352]	; (5710 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    55b0:	681b      	ldr	r3, [r3, #0]
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    55b2:	039b      	lsls	r3, r3, #14
    55b4:	0edb      	lsrs	r3, r3, #27
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    55b6:	2b1f      	cmp	r3, #31
    55b8:	d100      	bne.n	55bc <usb_init+0x94>
    55ba:	e08f      	b.n	56dc <usb_init+0x1b4>
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    55bc:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    55be:	019b      	lsls	r3, r3, #6
    55c0:	4954      	ldr	r1, [pc, #336]	; (5714 <usb_init+0x1ec>)
    55c2:	400a      	ands	r2, r1
    55c4:	4313      	orrs	r3, r2
    55c6:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    55c8:	4b51      	ldr	r3, [pc, #324]	; (5710 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    55ca:	681b      	ldr	r3, [r3, #0]
    55cc:	025b      	lsls	r3, r3, #9
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    55ce:	0edb      	lsrs	r3, r3, #27
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    55d0:	2b1f      	cmp	r3, #31
    55d2:	d100      	bne.n	55d6 <usb_init+0xae>
    55d4:	e084      	b.n	56e0 <usb_init+0x1b8>
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    55d6:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    55d8:	211f      	movs	r1, #31
    55da:	438a      	bics	r2, r1
    55dc:	4313      	orrs	r3, r2
    55de:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    55e0:	4b4b      	ldr	r3, [pc, #300]	; (5710 <usb_init+0x1e8>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    55e2:	681b      	ldr	r3, [r3, #0]
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    55e4:	019b      	lsls	r3, r3, #6
    55e6:	0f5b      	lsrs	r3, r3, #29
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    55e8:	2b07      	cmp	r3, #7
    55ea:	d100      	bne.n	55ee <usb_init+0xc6>
    55ec:	e07a      	b.n	56e4 <usb_init+0x1bc>
		pad_trim = 3;
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    55ee:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    55f0:	031b      	lsls	r3, r3, #12
    55f2:	4949      	ldr	r1, [pc, #292]	; (5718 <usb_init+0x1f0>)
    55f4:	400a      	ands	r2, r1
    55f6:	4313      	orrs	r3, r2
    55f8:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    55fa:	7832      	ldrb	r2, [r6, #0]
    55fc:	7829      	ldrb	r1, [r5, #0]
    55fe:	01d2      	lsls	r2, r2, #7
    5600:	237f      	movs	r3, #127	; 0x7f
    5602:	400b      	ands	r3, r1
    5604:	4313      	orrs	r3, r2
    5606:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    5608:	7871      	ldrb	r1, [r6, #1]
    560a:	782b      	ldrb	r3, [r5, #0]
    560c:	2201      	movs	r2, #1
    560e:	400a      	ands	r2, r1
    5610:	0092      	lsls	r2, r2, #2
    5612:	2104      	movs	r1, #4
    5614:	438b      	bics	r3, r1
    5616:	4313      	orrs	r3, r2
    5618:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    561a:	4b40      	ldr	r3, [pc, #256]	; (571c <usb_init+0x1f4>)
    561c:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    561e:	78f3      	ldrb	r3, [r6, #3]
    5620:	2b01      	cmp	r3, #1
    5622:	d061      	beq.n	56e8 <usb_init+0x1c0>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    5624:	2b00      	cmp	r3, #0
    5626:	d106      	bne.n	5636 <usb_init+0x10e>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    5628:	6822      	ldr	r2, [r4, #0]
    562a:	8913      	ldrh	r3, [r2, #8]
    562c:	210c      	movs	r1, #12
    562e:	438b      	bics	r3, r1
    5630:	2104      	movs	r1, #4
    5632:	430b      	orrs	r3, r1
    5634:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    5636:	2280      	movs	r2, #128	; 0x80
    5638:	0052      	lsls	r2, r2, #1
    563a:	2100      	movs	r1, #0
    563c:	4837      	ldr	r0, [pc, #220]	; (571c <usb_init+0x1f4>)
    563e:	4b38      	ldr	r3, [pc, #224]	; (5720 <usb_init+0x1f8>)
    5640:	4798      	blx	r3
    5642:	1d23      	adds	r3, r4, #4
    5644:	0021      	movs	r1, r4
    5646:	3124      	adds	r1, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    5648:	2200      	movs	r2, #0
    564a:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    564c:	428b      	cmp	r3, r1
    564e:	d1fc      	bne.n	564a <usb_init+0x122>
    5650:	0021      	movs	r1, r4
    5652:	31a4      	adds	r1, #164	; 0xa4
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    5654:	2200      	movs	r2, #0
    5656:	601a      	str	r2, [r3, #0]
    5658:	605a      	str	r2, [r3, #4]
    565a:	609a      	str	r2, [r3, #8]
    565c:	60da      	str	r2, [r3, #12]
    565e:	3310      	adds	r3, #16
	for (i = 0; i < USB_PIPE_NUM; i++) {
    5660:	428b      	cmp	r3, r1
    5662:	d1f8      	bne.n	5656 <usb_init+0x12e>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    5664:	2300      	movs	r3, #0
    5666:	22a4      	movs	r2, #164	; 0xa4
    5668:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    566a:	3201      	adds	r2, #1
    566c:	54a3      	strb	r3, [r4, r2]
    566e:	0023      	movs	r3, r4
    5670:	33a6      	adds	r3, #166	; 0xa6
    5672:	0021      	movs	r1, r4
    5674:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    5676:	2200      	movs	r2, #0
    5678:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    567a:	721a      	strb	r2, [r3, #8]
    567c:	3301      	adds	r3, #1
	for (i = 0; i < USB_PIPE_NUM; i++) {
    567e:	4299      	cmp	r1, r3
    5680:	d1fa      	bne.n	5678 <usb_init+0x150>
    5682:	0023      	movs	r3, r4
    5684:	33b8      	adds	r3, #184	; 0xb8
    5686:	0021      	movs	r1, r4
    5688:	31d4      	adds	r1, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    568a:	2200      	movs	r2, #0
    568c:	c304      	stmia	r3!, {r2}
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    568e:	428b      	cmp	r3, r1
    5690:	d1fc      	bne.n	568c <usb_init+0x164>
    5692:	0021      	movs	r1, r4
    5694:	3155      	adds	r1, #85	; 0x55
    5696:	31ff      	adds	r1, #255	; 0xff
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    5698:	2200      	movs	r2, #0
    569a:	601a      	str	r2, [r3, #0]
    569c:	605a      	str	r2, [r3, #4]
    569e:	609a      	str	r2, [r3, #8]
    56a0:	60da      	str	r2, [r3, #12]
    56a2:	3310      	adds	r3, #16
	for (i = 0; i < USB_EPT_NUM; i++) {
    56a4:	428b      	cmp	r3, r1
    56a6:	d1f8      	bne.n	569a <usb_init+0x172>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    56a8:	2300      	movs	r3, #0
    56aa:	22aa      	movs	r2, #170	; 0xaa
    56ac:	0052      	lsls	r2, r2, #1
    56ae:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    56b0:	3202      	adds	r2, #2
    56b2:	52a3      	strh	r3, [r4, r2]
    56b4:	0023      	movs	r3, r4
    56b6:	3359      	adds	r3, #89	; 0x59
    56b8:	33ff      	adds	r3, #255	; 0xff
    56ba:	3461      	adds	r4, #97	; 0x61
    56bc:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    56be:	2200      	movs	r2, #0
    56c0:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    56c2:	721a      	strb	r2, [r3, #8]
    56c4:	3301      	adds	r3, #1
	for (j = 0; j < USB_EPT_NUM; j++) {
    56c6:	42a3      	cmp	r3, r4
    56c8:	d1fa      	bne.n	56c0 <usb_init+0x198>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    56ca:	2280      	movs	r2, #128	; 0x80
    56cc:	4b15      	ldr	r3, [pc, #84]	; (5724 <usb_init+0x1fc>)
    56ce:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    56d0:	2000      	movs	r0, #0
    56d2:	b003      	add	sp, #12
    56d4:	bc0c      	pop	{r2, r3}
    56d6:	4690      	mov	r8, r2
    56d8:	4699      	mov	r9, r3
    56da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pad_transn = 5;
    56dc:	3b1a      	subs	r3, #26
    56de:	e76d      	b.n	55bc <usb_init+0x94>
		pad_transp = 29;
    56e0:	3b02      	subs	r3, #2
    56e2:	e778      	b.n	55d6 <usb_init+0xae>
		pad_trim = 3;
    56e4:	3b04      	subs	r3, #4
    56e6:	e782      	b.n	55ee <usb_init+0xc6>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    56e8:	6822      	ldr	r2, [r4, #0]
    56ea:	8913      	ldrh	r3, [r2, #8]
    56ec:	3108      	adds	r1, #8
    56ee:	438b      	bics	r3, r1
    56f0:	8113      	strh	r3, [r2, #8]
    56f2:	e7a0      	b.n	5636 <usb_init+0x10e>
    56f4:	200001c4 	.word	0x200001c4
    56f8:	200001b4 	.word	0x200001b4
    56fc:	40000400 	.word	0x40000400
    5700:	00003a6d 	.word	0x00003a6d
    5704:	00003975 	.word	0x00003975
    5708:	000038e9 	.word	0x000038e9
    570c:	41005000 	.word	0x41005000
    5710:	00806024 	.word	0x00806024
    5714:	fffff83f 	.word	0xfffff83f
    5718:	ffff8fff 	.word	0xffff8fff
    571c:	20000414 	.word	0x20000414
    5720:	00005e6f 	.word	0x00005e6f
    5724:	e000e100 	.word	0xe000e100

00005728 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    5728:	e7fe      	b.n	5728 <Dummy_Handler>
	...

0000572c <Reset_Handler>:
{
    572c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    572e:	4a2a      	ldr	r2, [pc, #168]	; (57d8 <Reset_Handler+0xac>)
    5730:	4b2a      	ldr	r3, [pc, #168]	; (57dc <Reset_Handler+0xb0>)
    5732:	429a      	cmp	r2, r3
    5734:	d011      	beq.n	575a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    5736:	001a      	movs	r2, r3
    5738:	4b29      	ldr	r3, [pc, #164]	; (57e0 <Reset_Handler+0xb4>)
    573a:	429a      	cmp	r2, r3
    573c:	d20d      	bcs.n	575a <Reset_Handler+0x2e>
    573e:	4a29      	ldr	r2, [pc, #164]	; (57e4 <Reset_Handler+0xb8>)
    5740:	3303      	adds	r3, #3
    5742:	1a9b      	subs	r3, r3, r2
    5744:	089b      	lsrs	r3, r3, #2
    5746:	3301      	adds	r3, #1
    5748:	009b      	lsls	r3, r3, #2
    574a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    574c:	4823      	ldr	r0, [pc, #140]	; (57dc <Reset_Handler+0xb0>)
    574e:	4922      	ldr	r1, [pc, #136]	; (57d8 <Reset_Handler+0xac>)
    5750:	588c      	ldr	r4, [r1, r2]
    5752:	5084      	str	r4, [r0, r2]
    5754:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    5756:	429a      	cmp	r2, r3
    5758:	d1fa      	bne.n	5750 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    575a:	4a23      	ldr	r2, [pc, #140]	; (57e8 <Reset_Handler+0xbc>)
    575c:	4b23      	ldr	r3, [pc, #140]	; (57ec <Reset_Handler+0xc0>)
    575e:	429a      	cmp	r2, r3
    5760:	d20a      	bcs.n	5778 <Reset_Handler+0x4c>
    5762:	43d3      	mvns	r3, r2
    5764:	4921      	ldr	r1, [pc, #132]	; (57ec <Reset_Handler+0xc0>)
    5766:	185b      	adds	r3, r3, r1
    5768:	2103      	movs	r1, #3
    576a:	438b      	bics	r3, r1
    576c:	3304      	adds	r3, #4
    576e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    5770:	2100      	movs	r1, #0
    5772:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    5774:	4293      	cmp	r3, r2
    5776:	d1fc      	bne.n	5772 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    5778:	4a1d      	ldr	r2, [pc, #116]	; (57f0 <Reset_Handler+0xc4>)
    577a:	21ff      	movs	r1, #255	; 0xff
    577c:	4b1d      	ldr	r3, [pc, #116]	; (57f4 <Reset_Handler+0xc8>)
    577e:	438b      	bics	r3, r1
    5780:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    5782:	39fd      	subs	r1, #253	; 0xfd
    5784:	2390      	movs	r3, #144	; 0x90
    5786:	005b      	lsls	r3, r3, #1
    5788:	4a1b      	ldr	r2, [pc, #108]	; (57f8 <Reset_Handler+0xcc>)
    578a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    578c:	4a1b      	ldr	r2, [pc, #108]	; (57fc <Reset_Handler+0xd0>)
    578e:	78d3      	ldrb	r3, [r2, #3]
    5790:	2503      	movs	r5, #3
    5792:	43ab      	bics	r3, r5
    5794:	2402      	movs	r4, #2
    5796:	4323      	orrs	r3, r4
    5798:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    579a:	78d3      	ldrb	r3, [r2, #3]
    579c:	270c      	movs	r7, #12
    579e:	43bb      	bics	r3, r7
    57a0:	2608      	movs	r6, #8
    57a2:	4333      	orrs	r3, r6
    57a4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    57a6:	4b16      	ldr	r3, [pc, #88]	; (5800 <Reset_Handler+0xd4>)
    57a8:	7b98      	ldrb	r0, [r3, #14]
    57aa:	2230      	movs	r2, #48	; 0x30
    57ac:	4390      	bics	r0, r2
    57ae:	2220      	movs	r2, #32
    57b0:	4310      	orrs	r0, r2
    57b2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    57b4:	7b99      	ldrb	r1, [r3, #14]
    57b6:	43b9      	bics	r1, r7
    57b8:	4331      	orrs	r1, r6
    57ba:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    57bc:	7b9a      	ldrb	r2, [r3, #14]
    57be:	43aa      	bics	r2, r5
    57c0:	4322      	orrs	r2, r4
    57c2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    57c4:	4a0f      	ldr	r2, [pc, #60]	; (5804 <Reset_Handler+0xd8>)
    57c6:	6853      	ldr	r3, [r2, #4]
    57c8:	2180      	movs	r1, #128	; 0x80
    57ca:	430b      	orrs	r3, r1
    57cc:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    57ce:	4b0e      	ldr	r3, [pc, #56]	; (5808 <Reset_Handler+0xdc>)
    57d0:	4798      	blx	r3
        main();
    57d2:	4b0e      	ldr	r3, [pc, #56]	; (580c <Reset_Handler+0xe0>)
    57d4:	4798      	blx	r3
    57d6:	e7fe      	b.n	57d6 <Reset_Handler+0xaa>
    57d8:	00005f20 	.word	0x00005f20
    57dc:	20000000 	.word	0x20000000
    57e0:	200000fc 	.word	0x200000fc
    57e4:	20000004 	.word	0x20000004
    57e8:	200000fc 	.word	0x200000fc
    57ec:	20000554 	.word	0x20000554
    57f0:	e000ed00 	.word	0xe000ed00
    57f4:	00002000 	.word	0x00002000
    57f8:	41007000 	.word	0x41007000
    57fc:	41005000 	.word	0x41005000
    5800:	41004800 	.word	0x41004800
    5804:	41004000 	.word	0x41004000
    5808:	00005e15 	.word	0x00005e15
    580c:	00005961 	.word	0x00005961

00005810 <configure_spi_master>:

void configure_spi_master(void);


void configure_spi_master(void)
{
    5810:	b5f0      	push	{r4, r5, r6, r7, lr}
    5812:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    5814:	4c29      	ldr	r4, [pc, #164]	; (58bc <configure_spi_master+0xac>)
    5816:	2301      	movs	r3, #1
    5818:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    581a:	2200      	movs	r2, #0
    581c:	7062      	strb	r2, [r4, #1]
	slave->address         = config->address;
    581e:	70a2      	strb	r2, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    5820:	a901      	add	r1, sp, #4
    5822:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    5824:	708a      	strb	r2, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    5826:	700b      	strb	r3, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    5828:	2001      	movs	r0, #1
    582a:	4b25      	ldr	r3, [pc, #148]	; (58c0 <configure_spi_master+0xb0>)
    582c:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    582e:	7823      	ldrb	r3, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    5830:	09d9      	lsrs	r1, r3, #7
		return NULL;
    5832:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    5834:	2900      	cmp	r1, #0
    5836:	d104      	bne.n	5842 <configure_spi_master+0x32>
		return &(ports[port_index]->Group[group_index]);
    5838:	095a      	lsrs	r2, r3, #5
    583a:	01d2      	lsls	r2, r2, #7
    583c:	4921      	ldr	r1, [pc, #132]	; (58c4 <configure_spi_master+0xb4>)
    583e:	468c      	mov	ip, r1
    5840:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5842:	261f      	movs	r6, #31
    5844:	4033      	ands	r3, r6
    5846:	2501      	movs	r5, #1
    5848:	0029      	movs	r1, r5
    584a:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    584c:	6191      	str	r1, [r2, #24]
	config->mode             = SPI_MODE_MASTER;
    584e:	ac02      	add	r4, sp, #8
    5850:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    5852:	2300      	movs	r3, #0
    5854:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    5856:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    5858:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    585a:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    585c:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
    585e:	74e5      	strb	r5, [r4, #19]
	config->master_slave_select_enable= false;
    5860:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    5862:	2224      	movs	r2, #36	; 0x24
    5864:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    5866:	3a18      	subs	r2, #24
    5868:	2100      	movs	r1, #0
    586a:	a808      	add	r0, sp, #32
    586c:	4b16      	ldr	r3, [pc, #88]	; (58c8 <configure_spi_master+0xb8>)
    586e:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    5870:	4b16      	ldr	r3, [pc, #88]	; (58cc <configure_spi_master+0xbc>)
    5872:	61a3      	str	r3, [r4, #24]
	slave_dev_config.ss_pin = CONF_MASTER_SS_PIN;
	spi_attach_slave(&slave, &slave_dev_config);
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_master);

	config_spi_master.mux_setting = CONF_MASTER_MUX_SETTING;
    5874:	2380      	movs	r3, #128	; 0x80
    5876:	025b      	lsls	r3, r3, #9
    5878:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = CONF_MASTER_PINMUX_PAD0;
    587a:	2301      	movs	r3, #1
    587c:	425b      	negs	r3, r3
    587e:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = CONF_MASTER_PINMUX_PAD1;
    5880:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = CONF_MASTER_PINMUX_PAD2;
    5882:	4b13      	ldr	r3, [pc, #76]	; (58d0 <configure_spi_master+0xc0>)
    5884:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = CONF_MASTER_PINMUX_PAD3;
    5886:	4b13      	ldr	r3, [pc, #76]	; (58d4 <configure_spi_master+0xc4>)
    5888:	6363      	str	r3, [r4, #52]	; 0x34

	spi_init(&spi_master_instance, CONF_MASTER_SPI_MODULE, &config_spi_master);
    588a:	4f13      	ldr	r7, [pc, #76]	; (58d8 <configure_spi_master+0xc8>)
    588c:	0022      	movs	r2, r4
    588e:	4913      	ldr	r1, [pc, #76]	; (58dc <configure_spi_master+0xcc>)
    5890:	0038      	movs	r0, r7
    5892:	4b13      	ldr	r3, [pc, #76]	; (58e0 <configure_spi_master+0xd0>)
    5894:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5896:	683c      	ldr	r4, [r7, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    5898:	0020      	movs	r0, r4
    589a:	4b12      	ldr	r3, [pc, #72]	; (58e4 <configure_spi_master+0xd4>)
    589c:	4798      	blx	r3
    589e:	4006      	ands	r6, r0
    58a0:	40b5      	lsls	r5, r6
    58a2:	4b11      	ldr	r3, [pc, #68]	; (58e8 <configure_spi_master+0xd8>)
    58a4:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    58a6:	683a      	ldr	r2, [r7, #0]
	return (spi_module->SYNCBUSY.reg);
    58a8:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    58aa:	2b00      	cmp	r3, #0
    58ac:	d1fc      	bne.n	58a8 <configure_spi_master+0x98>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    58ae:	6823      	ldr	r3, [r4, #0]
    58b0:	2202      	movs	r2, #2
    58b2:	4313      	orrs	r3, r2
    58b4:	6023      	str	r3, [r4, #0]

	spi_enable(&spi_master_instance);
}
    58b6:	b011      	add	sp, #68	; 0x44
    58b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    58ba:	46c0      	nop			; (mov r8, r8)
    58bc:	20000550 	.word	0x20000550
    58c0:	00002de1 	.word	0x00002de1
    58c4:	41004400 	.word	0x41004400
    58c8:	00005e6f 	.word	0x00005e6f
    58cc:	000186a0 	.word	0x000186a0
    58d0:	00060003 	.word	0x00060003
    58d4:	00070003 	.word	0x00070003
    58d8:	20000514 	.word	0x20000514
    58dc:	42000800 	.word	0x42000800
    58e0:	00003065 	.word	0x00003065
    58e4:	00003001 	.word	0x00003001
    58e8:	e000e100 	.word	0xe000e100

000058ec <setLED>:

static volatile bool main_b_kbd_enable = true;

void setLED(uint8_t index, uint8_t brightness, uint8_t r, uint8_t g, uint8_t b);

void setLED(uint8_t index, uint8_t brightness, uint8_t r, uint8_t g, uint8_t b) {
    58ec:	b570      	push	{r4, r5, r6, lr}
    58ee:	ac04      	add	r4, sp, #16
    58f0:	7826      	ldrb	r6, [r4, #0]
		0x00,
		// end frame 32 bits
		0xff, 0xff, 0xff, 0xff
	}, rd_buffer[16];
	
	uint8_t offset = 4 + 4 * index;
    58f2:	3001      	adds	r0, #1
    58f4:	0080      	lsls	r0, r0, #2
	wr_buffer[offset + 0] = brightness | 0b11100000;
    58f6:	b2c0      	uxtb	r0, r0
    58f8:	4c0a      	ldr	r4, [pc, #40]	; (5924 <setLED+0x38>)
    58fa:	2520      	movs	r5, #32
    58fc:	426d      	negs	r5, r5
    58fe:	4329      	orrs	r1, r5
    5900:	5421      	strb	r1, [r4, r0]
	wr_buffer[offset + 1] = b;
    5902:	1820      	adds	r0, r4, r0
    5904:	7046      	strb	r6, [r0, #1]
	wr_buffer[offset + 2] = g;
    5906:	7083      	strb	r3, [r0, #2]
	wr_buffer[offset + 3] = r;
    5908:	70c2      	strb	r2, [r0, #3]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    590a:	4b07      	ldr	r3, [pc, #28]	; (5928 <setLED+0x3c>)
    590c:	6819      	ldr	r1, [r3, #0]
	
	while(!spi_is_ready_to_write(&spi_master_instance)) {		
    590e:	2201      	movs	r2, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5910:	7e0b      	ldrb	r3, [r1, #24]
    5912:	4213      	tst	r3, r2
    5914:	d0fc      	beq.n	5910 <setLED+0x24>
	}
	spi_transceive_buffer_job(&spi_master_instance, wr_buffer,rd_buffer,16);
    5916:	2310      	movs	r3, #16
    5918:	4a04      	ldr	r2, [pc, #16]	; (592c <setLED+0x40>)
    591a:	4902      	ldr	r1, [pc, #8]	; (5924 <setLED+0x38>)
    591c:	4802      	ldr	r0, [pc, #8]	; (5928 <setLED+0x3c>)
    591e:	4c04      	ldr	r4, [pc, #16]	; (5930 <setLED+0x44>)
    5920:	47a0      	blx	r4
}
    5922:	bd70      	pop	{r4, r5, r6, pc}
    5924:	200000dc 	.word	0x200000dc
    5928:	20000514 	.word	0x20000514
    592c:	200001d0 	.word	0x200001d0
    5930:	0000323d 	.word	0x0000323d

00005934 <clearLEDs>:

void clearLEDs(void);

void clearLEDs() {
    5934:	b510      	push	{r4, lr}
	SercomSpi *const spi_module = &(module->hw->SPI);
    5936:	4b06      	ldr	r3, [pc, #24]	; (5950 <clearLEDs+0x1c>)
    5938:	6819      	ldr	r1, [r3, #0]
		0x00,
		// end frame 32 bits
		0xff, 0xff, 0xff, 0xff
	}, rd_buffer[16];

	while(!spi_is_ready_to_write(&spi_master_instance)) {
    593a:	2201      	movs	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    593c:	7e0b      	ldrb	r3, [r1, #24]
    593e:	4213      	tst	r3, r2
    5940:	d0fc      	beq.n	593c <clearLEDs+0x8>
	}	
	spi_transceive_buffer_job(&spi_master_instance, wr_buffer,rd_buffer,16);
    5942:	2310      	movs	r3, #16
    5944:	4a03      	ldr	r2, [pc, #12]	; (5954 <clearLEDs+0x20>)
    5946:	4904      	ldr	r1, [pc, #16]	; (5958 <clearLEDs+0x24>)
    5948:	4801      	ldr	r0, [pc, #4]	; (5950 <clearLEDs+0x1c>)
    594a:	4c04      	ldr	r4, [pc, #16]	; (595c <clearLEDs+0x28>)
    594c:	47a0      	blx	r4
}
    594e:	bd10      	pop	{r4, pc}
    5950:	20000514 	.word	0x20000514
    5954:	200001e0 	.word	0x200001e0
    5958:	200000ec 	.word	0x200000ec
    595c:	0000323d 	.word	0x0000323d

00005960 <main>:

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
    5960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5962:	46de      	mov	lr, fp
    5964:	4657      	mov	r7, sl
    5966:	464e      	mov	r6, r9
    5968:	4645      	mov	r5, r8
    596a:	b5e0      	push	{r5, r6, r7, lr}
	irq_initialize_vectors();
	cpu_irq_enable();
    596c:	2101      	movs	r1, #1
    596e:	4b36      	ldr	r3, [pc, #216]	; (5a48 <main+0xe8>)
    5970:	7019      	strb	r1, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    5972:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5976:	b662      	cpsie	i
		sleepmgr_locks[i] = 0;
    5978:	4b34      	ldr	r3, [pc, #208]	; (5a4c <main+0xec>)
    597a:	2200      	movs	r2, #0
    597c:	701a      	strb	r2, [r3, #0]
    597e:	705a      	strb	r2, [r3, #1]
    5980:	709a      	strb	r2, [r3, #2]
    5982:	70da      	strb	r2, [r3, #3]
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    5984:	7119      	strb	r1, [r3, #4]

#if !SAM0
	sysclk_init();
	board_init();
#else
	system_init();
    5986:	4b32      	ldr	r3, [pc, #200]	; (5a50 <main+0xf0>)
    5988:	4798      	blx	r3
#endif
	configure_spi_master();
    598a:	4b32      	ldr	r3, [pc, #200]	; (5a54 <main+0xf4>)
    598c:	4798      	blx	r3
	clearLEDs();
    598e:	4b32      	ldr	r3, [pc, #200]	; (5a58 <main+0xf8>)
    5990:	4798      	blx	r3
	ui_init();
    5992:	4b32      	ldr	r3, [pc, #200]	; (5a5c <main+0xfc>)
    5994:	4798      	blx	r3
	ui_powerdown();
    5996:	4b32      	ldr	r3, [pc, #200]	; (5a60 <main+0x100>)
    5998:	4798      	blx	r3

	// Start USB stack to authorize VBus monitoring
	udc_start();
    599a:	4b32      	ldr	r3, [pc, #200]	; (5a64 <main+0x104>)
    599c:	4798      	blx	r3
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    599e:	4f2a      	ldr	r7, [pc, #168]	; (5a48 <main+0xe8>)
    59a0:	2400      	movs	r4, #0
    59a2:	1c26      	adds	r6, r4, #0
	while (!(*lock_ptr)) {
    59a4:	4d29      	ldr	r5, [pc, #164]	; (5a4c <main+0xec>)

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
		cpu_irq_enable();
    59a6:	46b8      	mov	r8, r7
    59a8:	2301      	movs	r3, #1
    59aa:	469c      	mov	ip, r3

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
    59ac:	46bb      	mov	fp, r7
{

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
    59ae:	4b2e      	ldr	r3, [pc, #184]	; (5a68 <main+0x108>)
    59b0:	469a      	mov	sl, r3

	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;
    59b2:	230f      	movs	r3, #15
    59b4:	4699      	mov	r9, r3
    59b6:	e00e      	b.n	59d6 <main+0x76>
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    59b8:	0019      	movs	r1, r3
		lock_ptr++;
    59ba:	3201      	adds	r2, #1
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    59bc:	1c4b      	adds	r3, r1, #1
    59be:	b2db      	uxtb	r3, r3
	while (!(*lock_ptr)) {
    59c0:	7810      	ldrb	r0, [r2, #0]
    59c2:	2800      	cmp	r0, #0
    59c4:	d0f8      	beq.n	59b8 <main+0x58>
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    59c6:	2b00      	cmp	r3, #0
    59c8:	d10f      	bne.n	59ea <main+0x8a>
		cpu_irq_enable();
    59ca:	4643      	mov	r3, r8
    59cc:	4662      	mov	r2, ip
    59ce:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    59d0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    59d4:	b662      	cpsie	i
  __ASM volatile ("cpsid i" : : : "memory");
    59d6:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    59d8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    59dc:	703e      	strb	r6, [r7, #0]
	while (!(*lock_ptr)) {
    59de:	782b      	ldrb	r3, [r5, #0]
    59e0:	2b00      	cmp	r3, #0
    59e2:	d1f2      	bne.n	59ca <main+0x6a>
    59e4:	0021      	movs	r1, r4
    59e6:	4a19      	ldr	r2, [pc, #100]	; (5a4c <main+0xec>)
    59e8:	e7e7      	b.n	59ba <main+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
    59ea:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    59ec:	f3bf 8f5f 	dmb	sy
    59f0:	465b      	mov	r3, fp
    59f2:	701c      	strb	r4, [r3, #0]
	uint32_t rev = DSU->DID.reg;
    59f4:	4653      	mov	r3, sl
    59f6:	699b      	ldr	r3, [r3, #24]
    59f8:	0a1b      	lsrs	r3, r3, #8
	rev = rev >> DSU_DID_REVISION_Pos;
    59fa:	464a      	mov	r2, r9
    59fc:	4013      	ands	r3, r2
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
    59fe:	2b02      	cmp	r3, #2
    5a00:	d805      	bhi.n	5a0e <main+0xae>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    5a02:	4a1a      	ldr	r2, [pc, #104]	; (5a6c <main+0x10c>)
    5a04:	6850      	ldr	r0, [r2, #4]
    5a06:	23c0      	movs	r3, #192	; 0xc0
    5a08:	009b      	lsls	r3, r3, #2
    5a0a:	4303      	orrs	r3, r0
    5a0c:	6053      	str	r3, [r2, #4]
	}
#endif

#endif

	switch (sleep_mode) {
    5a0e:	2902      	cmp	r1, #2
    5a10:	d90b      	bls.n	5a2a <main+0xca>
    5a12:	2903      	cmp	r1, #3
    5a14:	d011      	beq.n	5a3a <main+0xda>

	/* Enter the sleep mode. */
	system_set_sleepmode((enum system_sleepmode)(sleep_mode - 1));
	cpu_irq_enable();
    5a16:	4b0c      	ldr	r3, [pc, #48]	; (5a48 <main+0xe8>)
    5a18:	4662      	mov	r2, ip
    5a1a:	701a      	strb	r2, [r3, #0]
    5a1c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5a20:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    5a22:	f3bf 8f4f 	dsb	sy
 * \ref system_set_sleepmode until woken by an interrupt.
 */
static inline void system_sleep(void)
{
	__DSB();
	__WFI();
    5a26:	bf30      	wfi
    5a28:	e7d5      	b.n	59d6 <main+0x76>
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    5a2a:	4a11      	ldr	r2, [pc, #68]	; (5a70 <main+0x110>)
    5a2c:	6913      	ldr	r3, [r2, #16]
    5a2e:	2004      	movs	r0, #4
    5a30:	4383      	bics	r3, r0
    5a32:	6113      	str	r3, [r2, #16]
			PM->SLEEP.reg = sleep_mode;
    5a34:	4b0f      	ldr	r3, [pc, #60]	; (5a74 <main+0x114>)
    5a36:	7059      	strb	r1, [r3, #1]
    5a38:	e7ed      	b.n	5a16 <main+0xb6>
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    5a3a:	4a0d      	ldr	r2, [pc, #52]	; (5a70 <main+0x110>)
    5a3c:	6913      	ldr	r3, [r2, #16]
    5a3e:	2104      	movs	r1, #4
    5a40:	430b      	orrs	r3, r1
    5a42:	6113      	str	r3, [r2, #16]
    5a44:	e7e7      	b.n	5a16 <main+0xb6>
    5a46:	46c0      	nop			; (mov r8, r8)
    5a48:	200000da 	.word	0x200000da
    5a4c:	200001f0 	.word	0x200001f0
    5a50:	00003aa1 	.word	0x00003aa1
    5a54:	00005811 	.word	0x00005811
    5a58:	00005935 	.word	0x00005935
    5a5c:	00002115 	.word	0x00002115
    5a60:	00002141 	.word	0x00002141
    5a64:	00002741 	.word	0x00002741
    5a68:	41002000 	.word	0x41002000
    5a6c:	41004000 	.word	0x41004000
    5a70:	e000ed00 	.word	0xe000ed00
    5a74:	40000400 	.word	0x40000400

00005a78 <main_suspend_action>:
#endif
	}
}

void main_suspend_action(void)
{
    5a78:	b510      	push	{r4, lr}
	ui_powerdown();
    5a7a:	4b01      	ldr	r3, [pc, #4]	; (5a80 <main_suspend_action+0x8>)
    5a7c:	4798      	blx	r3
}
    5a7e:	bd10      	pop	{r4, pc}
    5a80:	00002141 	.word	0x00002141

00005a84 <main_resume_action>:

void main_resume_action(void)
{
    5a84:	b510      	push	{r4, lr}
	ui_wakeup();
    5a86:	4b01      	ldr	r3, [pc, #4]	; (5a8c <main_resume_action+0x8>)
    5a88:	4798      	blx	r3
}
    5a8a:	bd10      	pop	{r4, pc}
    5a8c:	00002147 	.word	0x00002147

00005a90 <main_sof_action>:

void main_sof_action(void)
{
    5a90:	b510      	push	{r4, lr}
	if (!main_b_kbd_enable)
    5a92:	4b05      	ldr	r3, [pc, #20]	; (5aa8 <main_sof_action+0x18>)
    5a94:	781b      	ldrb	r3, [r3, #0]
    5a96:	2b00      	cmp	r3, #0
    5a98:	d100      	bne.n	5a9c <main_sof_action+0xc>
		return;
	ui_process(udd_get_frame_number());
}
    5a9a:	bd10      	pop	{r4, pc}
	ui_process(udd_get_frame_number());
    5a9c:	4b03      	ldr	r3, [pc, #12]	; (5aac <main_sof_action+0x1c>)
    5a9e:	4798      	blx	r3
    5aa0:	4b03      	ldr	r3, [pc, #12]	; (5ab0 <main_sof_action+0x20>)
    5aa2:	4798      	blx	r3
    5aa4:	e7f9      	b.n	5a9a <main_sof_action+0xa>
    5aa6:	46c0      	nop			; (mov r8, r8)
    5aa8:	200000db 	.word	0x200000db
    5aac:	00004185 	.word	0x00004185
    5ab0:	00002149 	.word	0x00002149

00005ab4 <main_remotewakeup_enable>:

void main_remotewakeup_enable(void)
{
    5ab4:	b510      	push	{r4, lr}
	ui_wakeup_enable();
    5ab6:	4b01      	ldr	r3, [pc, #4]	; (5abc <main_remotewakeup_enable+0x8>)
    5ab8:	4798      	blx	r3
}
    5aba:	bd10      	pop	{r4, pc}
    5abc:	00002143 	.word	0x00002143

00005ac0 <main_remotewakeup_disable>:

void main_remotewakeup_disable(void)
{
    5ac0:	b510      	push	{r4, lr}
	ui_wakeup_disable();
    5ac2:	4b01      	ldr	r3, [pc, #4]	; (5ac8 <main_remotewakeup_disable+0x8>)
    5ac4:	4798      	blx	r3
}
    5ac6:	bd10      	pop	{r4, pc}
    5ac8:	00002145 	.word	0x00002145

00005acc <main_kbd_enable>:

bool main_kbd_enable(void)
{
	main_b_kbd_enable = true;
    5acc:	2201      	movs	r2, #1
    5ace:	4b02      	ldr	r3, [pc, #8]	; (5ad8 <main_kbd_enable+0xc>)
    5ad0:	701a      	strb	r2, [r3, #0]
	return true;
}
    5ad2:	2001      	movs	r0, #1
    5ad4:	4770      	bx	lr
    5ad6:	46c0      	nop			; (mov r8, r8)
    5ad8:	200000db 	.word	0x200000db

00005adc <main_kbd_disable>:

void main_kbd_disable(void)
{
	main_b_kbd_enable = false;
    5adc:	2200      	movs	r2, #0
    5ade:	4b01      	ldr	r3, [pc, #4]	; (5ae4 <main_kbd_disable+0x8>)
    5ae0:	701a      	strb	r2, [r3, #0]
}
    5ae2:	4770      	bx	lr
    5ae4:	200000db 	.word	0x200000db

00005ae8 <__udivsi3>:
    5ae8:	2200      	movs	r2, #0
    5aea:	0843      	lsrs	r3, r0, #1
    5aec:	428b      	cmp	r3, r1
    5aee:	d374      	bcc.n	5bda <__udivsi3+0xf2>
    5af0:	0903      	lsrs	r3, r0, #4
    5af2:	428b      	cmp	r3, r1
    5af4:	d35f      	bcc.n	5bb6 <__udivsi3+0xce>
    5af6:	0a03      	lsrs	r3, r0, #8
    5af8:	428b      	cmp	r3, r1
    5afa:	d344      	bcc.n	5b86 <__udivsi3+0x9e>
    5afc:	0b03      	lsrs	r3, r0, #12
    5afe:	428b      	cmp	r3, r1
    5b00:	d328      	bcc.n	5b54 <__udivsi3+0x6c>
    5b02:	0c03      	lsrs	r3, r0, #16
    5b04:	428b      	cmp	r3, r1
    5b06:	d30d      	bcc.n	5b24 <__udivsi3+0x3c>
    5b08:	22ff      	movs	r2, #255	; 0xff
    5b0a:	0209      	lsls	r1, r1, #8
    5b0c:	ba12      	rev	r2, r2
    5b0e:	0c03      	lsrs	r3, r0, #16
    5b10:	428b      	cmp	r3, r1
    5b12:	d302      	bcc.n	5b1a <__udivsi3+0x32>
    5b14:	1212      	asrs	r2, r2, #8
    5b16:	0209      	lsls	r1, r1, #8
    5b18:	d065      	beq.n	5be6 <__udivsi3+0xfe>
    5b1a:	0b03      	lsrs	r3, r0, #12
    5b1c:	428b      	cmp	r3, r1
    5b1e:	d319      	bcc.n	5b54 <__udivsi3+0x6c>
    5b20:	e000      	b.n	5b24 <__udivsi3+0x3c>
    5b22:	0a09      	lsrs	r1, r1, #8
    5b24:	0bc3      	lsrs	r3, r0, #15
    5b26:	428b      	cmp	r3, r1
    5b28:	d301      	bcc.n	5b2e <__udivsi3+0x46>
    5b2a:	03cb      	lsls	r3, r1, #15
    5b2c:	1ac0      	subs	r0, r0, r3
    5b2e:	4152      	adcs	r2, r2
    5b30:	0b83      	lsrs	r3, r0, #14
    5b32:	428b      	cmp	r3, r1
    5b34:	d301      	bcc.n	5b3a <__udivsi3+0x52>
    5b36:	038b      	lsls	r3, r1, #14
    5b38:	1ac0      	subs	r0, r0, r3
    5b3a:	4152      	adcs	r2, r2
    5b3c:	0b43      	lsrs	r3, r0, #13
    5b3e:	428b      	cmp	r3, r1
    5b40:	d301      	bcc.n	5b46 <__udivsi3+0x5e>
    5b42:	034b      	lsls	r3, r1, #13
    5b44:	1ac0      	subs	r0, r0, r3
    5b46:	4152      	adcs	r2, r2
    5b48:	0b03      	lsrs	r3, r0, #12
    5b4a:	428b      	cmp	r3, r1
    5b4c:	d301      	bcc.n	5b52 <__udivsi3+0x6a>
    5b4e:	030b      	lsls	r3, r1, #12
    5b50:	1ac0      	subs	r0, r0, r3
    5b52:	4152      	adcs	r2, r2
    5b54:	0ac3      	lsrs	r3, r0, #11
    5b56:	428b      	cmp	r3, r1
    5b58:	d301      	bcc.n	5b5e <__udivsi3+0x76>
    5b5a:	02cb      	lsls	r3, r1, #11
    5b5c:	1ac0      	subs	r0, r0, r3
    5b5e:	4152      	adcs	r2, r2
    5b60:	0a83      	lsrs	r3, r0, #10
    5b62:	428b      	cmp	r3, r1
    5b64:	d301      	bcc.n	5b6a <__udivsi3+0x82>
    5b66:	028b      	lsls	r3, r1, #10
    5b68:	1ac0      	subs	r0, r0, r3
    5b6a:	4152      	adcs	r2, r2
    5b6c:	0a43      	lsrs	r3, r0, #9
    5b6e:	428b      	cmp	r3, r1
    5b70:	d301      	bcc.n	5b76 <__udivsi3+0x8e>
    5b72:	024b      	lsls	r3, r1, #9
    5b74:	1ac0      	subs	r0, r0, r3
    5b76:	4152      	adcs	r2, r2
    5b78:	0a03      	lsrs	r3, r0, #8
    5b7a:	428b      	cmp	r3, r1
    5b7c:	d301      	bcc.n	5b82 <__udivsi3+0x9a>
    5b7e:	020b      	lsls	r3, r1, #8
    5b80:	1ac0      	subs	r0, r0, r3
    5b82:	4152      	adcs	r2, r2
    5b84:	d2cd      	bcs.n	5b22 <__udivsi3+0x3a>
    5b86:	09c3      	lsrs	r3, r0, #7
    5b88:	428b      	cmp	r3, r1
    5b8a:	d301      	bcc.n	5b90 <__udivsi3+0xa8>
    5b8c:	01cb      	lsls	r3, r1, #7
    5b8e:	1ac0      	subs	r0, r0, r3
    5b90:	4152      	adcs	r2, r2
    5b92:	0983      	lsrs	r3, r0, #6
    5b94:	428b      	cmp	r3, r1
    5b96:	d301      	bcc.n	5b9c <__udivsi3+0xb4>
    5b98:	018b      	lsls	r3, r1, #6
    5b9a:	1ac0      	subs	r0, r0, r3
    5b9c:	4152      	adcs	r2, r2
    5b9e:	0943      	lsrs	r3, r0, #5
    5ba0:	428b      	cmp	r3, r1
    5ba2:	d301      	bcc.n	5ba8 <__udivsi3+0xc0>
    5ba4:	014b      	lsls	r3, r1, #5
    5ba6:	1ac0      	subs	r0, r0, r3
    5ba8:	4152      	adcs	r2, r2
    5baa:	0903      	lsrs	r3, r0, #4
    5bac:	428b      	cmp	r3, r1
    5bae:	d301      	bcc.n	5bb4 <__udivsi3+0xcc>
    5bb0:	010b      	lsls	r3, r1, #4
    5bb2:	1ac0      	subs	r0, r0, r3
    5bb4:	4152      	adcs	r2, r2
    5bb6:	08c3      	lsrs	r3, r0, #3
    5bb8:	428b      	cmp	r3, r1
    5bba:	d301      	bcc.n	5bc0 <__udivsi3+0xd8>
    5bbc:	00cb      	lsls	r3, r1, #3
    5bbe:	1ac0      	subs	r0, r0, r3
    5bc0:	4152      	adcs	r2, r2
    5bc2:	0883      	lsrs	r3, r0, #2
    5bc4:	428b      	cmp	r3, r1
    5bc6:	d301      	bcc.n	5bcc <__udivsi3+0xe4>
    5bc8:	008b      	lsls	r3, r1, #2
    5bca:	1ac0      	subs	r0, r0, r3
    5bcc:	4152      	adcs	r2, r2
    5bce:	0843      	lsrs	r3, r0, #1
    5bd0:	428b      	cmp	r3, r1
    5bd2:	d301      	bcc.n	5bd8 <__udivsi3+0xf0>
    5bd4:	004b      	lsls	r3, r1, #1
    5bd6:	1ac0      	subs	r0, r0, r3
    5bd8:	4152      	adcs	r2, r2
    5bda:	1a41      	subs	r1, r0, r1
    5bdc:	d200      	bcs.n	5be0 <__udivsi3+0xf8>
    5bde:	4601      	mov	r1, r0
    5be0:	4152      	adcs	r2, r2
    5be2:	4610      	mov	r0, r2
    5be4:	4770      	bx	lr
    5be6:	e7ff      	b.n	5be8 <__udivsi3+0x100>
    5be8:	b501      	push	{r0, lr}
    5bea:	2000      	movs	r0, #0
    5bec:	f000 f8f0 	bl	5dd0 <__aeabi_idiv0>
    5bf0:	bd02      	pop	{r1, pc}
    5bf2:	46c0      	nop			; (mov r8, r8)

00005bf4 <__aeabi_uidivmod>:
    5bf4:	2900      	cmp	r1, #0
    5bf6:	d0f7      	beq.n	5be8 <__udivsi3+0x100>
    5bf8:	e776      	b.n	5ae8 <__udivsi3>
    5bfa:	4770      	bx	lr

00005bfc <__divsi3>:
    5bfc:	4603      	mov	r3, r0
    5bfe:	430b      	orrs	r3, r1
    5c00:	d47f      	bmi.n	5d02 <__divsi3+0x106>
    5c02:	2200      	movs	r2, #0
    5c04:	0843      	lsrs	r3, r0, #1
    5c06:	428b      	cmp	r3, r1
    5c08:	d374      	bcc.n	5cf4 <__divsi3+0xf8>
    5c0a:	0903      	lsrs	r3, r0, #4
    5c0c:	428b      	cmp	r3, r1
    5c0e:	d35f      	bcc.n	5cd0 <__divsi3+0xd4>
    5c10:	0a03      	lsrs	r3, r0, #8
    5c12:	428b      	cmp	r3, r1
    5c14:	d344      	bcc.n	5ca0 <__divsi3+0xa4>
    5c16:	0b03      	lsrs	r3, r0, #12
    5c18:	428b      	cmp	r3, r1
    5c1a:	d328      	bcc.n	5c6e <__divsi3+0x72>
    5c1c:	0c03      	lsrs	r3, r0, #16
    5c1e:	428b      	cmp	r3, r1
    5c20:	d30d      	bcc.n	5c3e <__divsi3+0x42>
    5c22:	22ff      	movs	r2, #255	; 0xff
    5c24:	0209      	lsls	r1, r1, #8
    5c26:	ba12      	rev	r2, r2
    5c28:	0c03      	lsrs	r3, r0, #16
    5c2a:	428b      	cmp	r3, r1
    5c2c:	d302      	bcc.n	5c34 <__divsi3+0x38>
    5c2e:	1212      	asrs	r2, r2, #8
    5c30:	0209      	lsls	r1, r1, #8
    5c32:	d065      	beq.n	5d00 <__divsi3+0x104>
    5c34:	0b03      	lsrs	r3, r0, #12
    5c36:	428b      	cmp	r3, r1
    5c38:	d319      	bcc.n	5c6e <__divsi3+0x72>
    5c3a:	e000      	b.n	5c3e <__divsi3+0x42>
    5c3c:	0a09      	lsrs	r1, r1, #8
    5c3e:	0bc3      	lsrs	r3, r0, #15
    5c40:	428b      	cmp	r3, r1
    5c42:	d301      	bcc.n	5c48 <__divsi3+0x4c>
    5c44:	03cb      	lsls	r3, r1, #15
    5c46:	1ac0      	subs	r0, r0, r3
    5c48:	4152      	adcs	r2, r2
    5c4a:	0b83      	lsrs	r3, r0, #14
    5c4c:	428b      	cmp	r3, r1
    5c4e:	d301      	bcc.n	5c54 <__divsi3+0x58>
    5c50:	038b      	lsls	r3, r1, #14
    5c52:	1ac0      	subs	r0, r0, r3
    5c54:	4152      	adcs	r2, r2
    5c56:	0b43      	lsrs	r3, r0, #13
    5c58:	428b      	cmp	r3, r1
    5c5a:	d301      	bcc.n	5c60 <__divsi3+0x64>
    5c5c:	034b      	lsls	r3, r1, #13
    5c5e:	1ac0      	subs	r0, r0, r3
    5c60:	4152      	adcs	r2, r2
    5c62:	0b03      	lsrs	r3, r0, #12
    5c64:	428b      	cmp	r3, r1
    5c66:	d301      	bcc.n	5c6c <__divsi3+0x70>
    5c68:	030b      	lsls	r3, r1, #12
    5c6a:	1ac0      	subs	r0, r0, r3
    5c6c:	4152      	adcs	r2, r2
    5c6e:	0ac3      	lsrs	r3, r0, #11
    5c70:	428b      	cmp	r3, r1
    5c72:	d301      	bcc.n	5c78 <__divsi3+0x7c>
    5c74:	02cb      	lsls	r3, r1, #11
    5c76:	1ac0      	subs	r0, r0, r3
    5c78:	4152      	adcs	r2, r2
    5c7a:	0a83      	lsrs	r3, r0, #10
    5c7c:	428b      	cmp	r3, r1
    5c7e:	d301      	bcc.n	5c84 <__divsi3+0x88>
    5c80:	028b      	lsls	r3, r1, #10
    5c82:	1ac0      	subs	r0, r0, r3
    5c84:	4152      	adcs	r2, r2
    5c86:	0a43      	lsrs	r3, r0, #9
    5c88:	428b      	cmp	r3, r1
    5c8a:	d301      	bcc.n	5c90 <__divsi3+0x94>
    5c8c:	024b      	lsls	r3, r1, #9
    5c8e:	1ac0      	subs	r0, r0, r3
    5c90:	4152      	adcs	r2, r2
    5c92:	0a03      	lsrs	r3, r0, #8
    5c94:	428b      	cmp	r3, r1
    5c96:	d301      	bcc.n	5c9c <__divsi3+0xa0>
    5c98:	020b      	lsls	r3, r1, #8
    5c9a:	1ac0      	subs	r0, r0, r3
    5c9c:	4152      	adcs	r2, r2
    5c9e:	d2cd      	bcs.n	5c3c <__divsi3+0x40>
    5ca0:	09c3      	lsrs	r3, r0, #7
    5ca2:	428b      	cmp	r3, r1
    5ca4:	d301      	bcc.n	5caa <__divsi3+0xae>
    5ca6:	01cb      	lsls	r3, r1, #7
    5ca8:	1ac0      	subs	r0, r0, r3
    5caa:	4152      	adcs	r2, r2
    5cac:	0983      	lsrs	r3, r0, #6
    5cae:	428b      	cmp	r3, r1
    5cb0:	d301      	bcc.n	5cb6 <__divsi3+0xba>
    5cb2:	018b      	lsls	r3, r1, #6
    5cb4:	1ac0      	subs	r0, r0, r3
    5cb6:	4152      	adcs	r2, r2
    5cb8:	0943      	lsrs	r3, r0, #5
    5cba:	428b      	cmp	r3, r1
    5cbc:	d301      	bcc.n	5cc2 <__divsi3+0xc6>
    5cbe:	014b      	lsls	r3, r1, #5
    5cc0:	1ac0      	subs	r0, r0, r3
    5cc2:	4152      	adcs	r2, r2
    5cc4:	0903      	lsrs	r3, r0, #4
    5cc6:	428b      	cmp	r3, r1
    5cc8:	d301      	bcc.n	5cce <__divsi3+0xd2>
    5cca:	010b      	lsls	r3, r1, #4
    5ccc:	1ac0      	subs	r0, r0, r3
    5cce:	4152      	adcs	r2, r2
    5cd0:	08c3      	lsrs	r3, r0, #3
    5cd2:	428b      	cmp	r3, r1
    5cd4:	d301      	bcc.n	5cda <__divsi3+0xde>
    5cd6:	00cb      	lsls	r3, r1, #3
    5cd8:	1ac0      	subs	r0, r0, r3
    5cda:	4152      	adcs	r2, r2
    5cdc:	0883      	lsrs	r3, r0, #2
    5cde:	428b      	cmp	r3, r1
    5ce0:	d301      	bcc.n	5ce6 <__divsi3+0xea>
    5ce2:	008b      	lsls	r3, r1, #2
    5ce4:	1ac0      	subs	r0, r0, r3
    5ce6:	4152      	adcs	r2, r2
    5ce8:	0843      	lsrs	r3, r0, #1
    5cea:	428b      	cmp	r3, r1
    5cec:	d301      	bcc.n	5cf2 <__divsi3+0xf6>
    5cee:	004b      	lsls	r3, r1, #1
    5cf0:	1ac0      	subs	r0, r0, r3
    5cf2:	4152      	adcs	r2, r2
    5cf4:	1a41      	subs	r1, r0, r1
    5cf6:	d200      	bcs.n	5cfa <__divsi3+0xfe>
    5cf8:	4601      	mov	r1, r0
    5cfa:	4152      	adcs	r2, r2
    5cfc:	4610      	mov	r0, r2
    5cfe:	4770      	bx	lr
    5d00:	e05d      	b.n	5dbe <__divsi3+0x1c2>
    5d02:	0fca      	lsrs	r2, r1, #31
    5d04:	d000      	beq.n	5d08 <__divsi3+0x10c>
    5d06:	4249      	negs	r1, r1
    5d08:	1003      	asrs	r3, r0, #32
    5d0a:	d300      	bcc.n	5d0e <__divsi3+0x112>
    5d0c:	4240      	negs	r0, r0
    5d0e:	4053      	eors	r3, r2
    5d10:	2200      	movs	r2, #0
    5d12:	469c      	mov	ip, r3
    5d14:	0903      	lsrs	r3, r0, #4
    5d16:	428b      	cmp	r3, r1
    5d18:	d32d      	bcc.n	5d76 <__divsi3+0x17a>
    5d1a:	0a03      	lsrs	r3, r0, #8
    5d1c:	428b      	cmp	r3, r1
    5d1e:	d312      	bcc.n	5d46 <__divsi3+0x14a>
    5d20:	22fc      	movs	r2, #252	; 0xfc
    5d22:	0189      	lsls	r1, r1, #6
    5d24:	ba12      	rev	r2, r2
    5d26:	0a03      	lsrs	r3, r0, #8
    5d28:	428b      	cmp	r3, r1
    5d2a:	d30c      	bcc.n	5d46 <__divsi3+0x14a>
    5d2c:	0189      	lsls	r1, r1, #6
    5d2e:	1192      	asrs	r2, r2, #6
    5d30:	428b      	cmp	r3, r1
    5d32:	d308      	bcc.n	5d46 <__divsi3+0x14a>
    5d34:	0189      	lsls	r1, r1, #6
    5d36:	1192      	asrs	r2, r2, #6
    5d38:	428b      	cmp	r3, r1
    5d3a:	d304      	bcc.n	5d46 <__divsi3+0x14a>
    5d3c:	0189      	lsls	r1, r1, #6
    5d3e:	d03a      	beq.n	5db6 <__divsi3+0x1ba>
    5d40:	1192      	asrs	r2, r2, #6
    5d42:	e000      	b.n	5d46 <__divsi3+0x14a>
    5d44:	0989      	lsrs	r1, r1, #6
    5d46:	09c3      	lsrs	r3, r0, #7
    5d48:	428b      	cmp	r3, r1
    5d4a:	d301      	bcc.n	5d50 <__divsi3+0x154>
    5d4c:	01cb      	lsls	r3, r1, #7
    5d4e:	1ac0      	subs	r0, r0, r3
    5d50:	4152      	adcs	r2, r2
    5d52:	0983      	lsrs	r3, r0, #6
    5d54:	428b      	cmp	r3, r1
    5d56:	d301      	bcc.n	5d5c <__divsi3+0x160>
    5d58:	018b      	lsls	r3, r1, #6
    5d5a:	1ac0      	subs	r0, r0, r3
    5d5c:	4152      	adcs	r2, r2
    5d5e:	0943      	lsrs	r3, r0, #5
    5d60:	428b      	cmp	r3, r1
    5d62:	d301      	bcc.n	5d68 <__divsi3+0x16c>
    5d64:	014b      	lsls	r3, r1, #5
    5d66:	1ac0      	subs	r0, r0, r3
    5d68:	4152      	adcs	r2, r2
    5d6a:	0903      	lsrs	r3, r0, #4
    5d6c:	428b      	cmp	r3, r1
    5d6e:	d301      	bcc.n	5d74 <__divsi3+0x178>
    5d70:	010b      	lsls	r3, r1, #4
    5d72:	1ac0      	subs	r0, r0, r3
    5d74:	4152      	adcs	r2, r2
    5d76:	08c3      	lsrs	r3, r0, #3
    5d78:	428b      	cmp	r3, r1
    5d7a:	d301      	bcc.n	5d80 <__divsi3+0x184>
    5d7c:	00cb      	lsls	r3, r1, #3
    5d7e:	1ac0      	subs	r0, r0, r3
    5d80:	4152      	adcs	r2, r2
    5d82:	0883      	lsrs	r3, r0, #2
    5d84:	428b      	cmp	r3, r1
    5d86:	d301      	bcc.n	5d8c <__divsi3+0x190>
    5d88:	008b      	lsls	r3, r1, #2
    5d8a:	1ac0      	subs	r0, r0, r3
    5d8c:	4152      	adcs	r2, r2
    5d8e:	d2d9      	bcs.n	5d44 <__divsi3+0x148>
    5d90:	0843      	lsrs	r3, r0, #1
    5d92:	428b      	cmp	r3, r1
    5d94:	d301      	bcc.n	5d9a <__divsi3+0x19e>
    5d96:	004b      	lsls	r3, r1, #1
    5d98:	1ac0      	subs	r0, r0, r3
    5d9a:	4152      	adcs	r2, r2
    5d9c:	1a41      	subs	r1, r0, r1
    5d9e:	d200      	bcs.n	5da2 <__divsi3+0x1a6>
    5da0:	4601      	mov	r1, r0
    5da2:	4663      	mov	r3, ip
    5da4:	4152      	adcs	r2, r2
    5da6:	105b      	asrs	r3, r3, #1
    5da8:	4610      	mov	r0, r2
    5daa:	d301      	bcc.n	5db0 <__divsi3+0x1b4>
    5dac:	4240      	negs	r0, r0
    5dae:	2b00      	cmp	r3, #0
    5db0:	d500      	bpl.n	5db4 <__divsi3+0x1b8>
    5db2:	4249      	negs	r1, r1
    5db4:	4770      	bx	lr
    5db6:	4663      	mov	r3, ip
    5db8:	105b      	asrs	r3, r3, #1
    5dba:	d300      	bcc.n	5dbe <__divsi3+0x1c2>
    5dbc:	4240      	negs	r0, r0
    5dbe:	b501      	push	{r0, lr}
    5dc0:	2000      	movs	r0, #0
    5dc2:	f000 f805 	bl	5dd0 <__aeabi_idiv0>
    5dc6:	bd02      	pop	{r1, pc}

00005dc8 <__aeabi_idivmod>:
    5dc8:	2900      	cmp	r1, #0
    5dca:	d0f8      	beq.n	5dbe <__divsi3+0x1c2>
    5dcc:	e716      	b.n	5bfc <__divsi3>
    5dce:	4770      	bx	lr

00005dd0 <__aeabi_idiv0>:
    5dd0:	4770      	bx	lr
    5dd2:	46c0      	nop			; (mov r8, r8)

00005dd4 <__ctzsi2>:
    5dd4:	4241      	negs	r1, r0
    5dd6:	4008      	ands	r0, r1
    5dd8:	211c      	movs	r1, #28
    5dda:	2301      	movs	r3, #1
    5ddc:	041b      	lsls	r3, r3, #16
    5dde:	4298      	cmp	r0, r3
    5de0:	d301      	bcc.n	5de6 <__ctzsi2+0x12>
    5de2:	0c00      	lsrs	r0, r0, #16
    5de4:	3910      	subs	r1, #16
    5de6:	0a1b      	lsrs	r3, r3, #8
    5de8:	4298      	cmp	r0, r3
    5dea:	d301      	bcc.n	5df0 <__ctzsi2+0x1c>
    5dec:	0a00      	lsrs	r0, r0, #8
    5dee:	3908      	subs	r1, #8
    5df0:	091b      	lsrs	r3, r3, #4
    5df2:	4298      	cmp	r0, r3
    5df4:	d301      	bcc.n	5dfa <__ctzsi2+0x26>
    5df6:	0900      	lsrs	r0, r0, #4
    5df8:	3904      	subs	r1, #4
    5dfa:	a202      	add	r2, pc, #8	; (adr r2, 5e04 <__ctzsi2+0x30>)
    5dfc:	5c10      	ldrb	r0, [r2, r0]
    5dfe:	1a40      	subs	r0, r0, r1
    5e00:	4770      	bx	lr
    5e02:	46c0      	nop			; (mov r8, r8)
    5e04:	1d1d1c1b 	.word	0x1d1d1c1b
    5e08:	1e1e1e1e 	.word	0x1e1e1e1e
    5e0c:	1f1f1f1f 	.word	0x1f1f1f1f
    5e10:	1f1f1f1f 	.word	0x1f1f1f1f

00005e14 <__libc_init_array>:
    5e14:	b570      	push	{r4, r5, r6, lr}
    5e16:	2600      	movs	r6, #0
    5e18:	4d0c      	ldr	r5, [pc, #48]	; (5e4c <__libc_init_array+0x38>)
    5e1a:	4c0d      	ldr	r4, [pc, #52]	; (5e50 <__libc_init_array+0x3c>)
    5e1c:	1b64      	subs	r4, r4, r5
    5e1e:	10a4      	asrs	r4, r4, #2
    5e20:	42a6      	cmp	r6, r4
    5e22:	d109      	bne.n	5e38 <__libc_init_array+0x24>
    5e24:	2600      	movs	r6, #0
    5e26:	f000 f86b 	bl	5f00 <_init>
    5e2a:	4d0a      	ldr	r5, [pc, #40]	; (5e54 <__libc_init_array+0x40>)
    5e2c:	4c0a      	ldr	r4, [pc, #40]	; (5e58 <__libc_init_array+0x44>)
    5e2e:	1b64      	subs	r4, r4, r5
    5e30:	10a4      	asrs	r4, r4, #2
    5e32:	42a6      	cmp	r6, r4
    5e34:	d105      	bne.n	5e42 <__libc_init_array+0x2e>
    5e36:	bd70      	pop	{r4, r5, r6, pc}
    5e38:	00b3      	lsls	r3, r6, #2
    5e3a:	58eb      	ldr	r3, [r5, r3]
    5e3c:	4798      	blx	r3
    5e3e:	3601      	adds	r6, #1
    5e40:	e7ee      	b.n	5e20 <__libc_init_array+0xc>
    5e42:	00b3      	lsls	r3, r6, #2
    5e44:	58eb      	ldr	r3, [r5, r3]
    5e46:	4798      	blx	r3
    5e48:	3601      	adds	r6, #1
    5e4a:	e7f2      	b.n	5e32 <__libc_init_array+0x1e>
    5e4c:	00005f0c 	.word	0x00005f0c
    5e50:	00005f0c 	.word	0x00005f0c
    5e54:	00005f0c 	.word	0x00005f0c
    5e58:	00005f10 	.word	0x00005f10

00005e5c <memcpy>:
    5e5c:	2300      	movs	r3, #0
    5e5e:	b510      	push	{r4, lr}
    5e60:	429a      	cmp	r2, r3
    5e62:	d100      	bne.n	5e66 <memcpy+0xa>
    5e64:	bd10      	pop	{r4, pc}
    5e66:	5ccc      	ldrb	r4, [r1, r3]
    5e68:	54c4      	strb	r4, [r0, r3]
    5e6a:	3301      	adds	r3, #1
    5e6c:	e7f8      	b.n	5e60 <memcpy+0x4>

00005e6e <memset>:
    5e6e:	0003      	movs	r3, r0
    5e70:	1882      	adds	r2, r0, r2
    5e72:	4293      	cmp	r3, r2
    5e74:	d100      	bne.n	5e78 <memset+0xa>
    5e76:	4770      	bx	lr
    5e78:	7019      	strb	r1, [r3, #0]
    5e7a:	3301      	adds	r3, #1
    5e7c:	e7f9      	b.n	5e72 <memset+0x4>
    5e7e:	0000      	movs	r0, r0
    5e80:	42000800 	.word	0x42000800
    5e84:	42000c00 	.word	0x42000c00
    5e88:	42001000 	.word	0x42001000
    5e8c:	42001400 	.word	0x42001400
    5e90:	00003456 	.word	0x00003456
    5e94:	00003452 	.word	0x00003452
    5e98:	00003452 	.word	0x00003452
    5e9c:	000034b8 	.word	0x000034b8
    5ea0:	000034b8 	.word	0x000034b8
    5ea4:	0000346a 	.word	0x0000346a
    5ea8:	0000345c 	.word	0x0000345c
    5eac:	00003470 	.word	0x00003470
    5eb0:	000034a6 	.word	0x000034a6
    5eb4:	000035c0 	.word	0x000035c0
    5eb8:	000035a0 	.word	0x000035a0
    5ebc:	000035a0 	.word	0x000035a0
    5ec0:	0000362c 	.word	0x0000362c
    5ec4:	000035b2 	.word	0x000035b2
    5ec8:	000035ce 	.word	0x000035ce
    5ecc:	000035a4 	.word	0x000035a4
    5ed0:	000035dc 	.word	0x000035dc
    5ed4:	0000361c 	.word	0x0000361c
    5ed8:	00004a18 	.word	0x00004a18
    5edc:	00004a26 	.word	0x00004a26
    5ee0:	00004ac0 	.word	0x00004ac0
    5ee4:	00004b60 	.word	0x00004b60
    5ee8:	00004bc4 	.word	0x00004bc4

00005eec <_usb_device_irq_bits>:
    5eec:	00080004 00800070 01000001 00000200     ....p...........

00005efc <_usb_endpoint_irq_bits>:
    5efc:	60100c03                                ...`

00005f00 <_init>:
    5f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f02:	46c0      	nop			; (mov r8, r8)
    5f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5f06:	bc08      	pop	{r3}
    5f08:	469e      	mov	lr, r3
    5f0a:	4770      	bx	lr

00005f0c <__init_array_start>:
    5f0c:	000020dd 	.word	0x000020dd

00005f10 <_fini>:
    5f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f12:	46c0      	nop			; (mov r8, r8)
    5f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5f16:	bc08      	pop	{r3}
    5f18:	469e      	mov	lr, r3
    5f1a:	4770      	bx	lr

00005f1c <__fini_array_start>:
    5f1c:	000020b5 	.word	0x000020b5
